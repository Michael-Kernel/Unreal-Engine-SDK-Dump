#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TangoLib

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "TangoLib_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AIModule_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function TangoLib.TngAIControllerInterface.AddCombatTargets
// 0x0008 (0x0008 - 0x0000)
struct TngAIControllerInterface_AddCombatTargets final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAIControllerInterface_AddCombatTargets) == 0x000008, "Wrong alignment on TngAIControllerInterface_AddCombatTargets");
static_assert(sizeof(TngAIControllerInterface_AddCombatTargets) == 0x000008, "Wrong size on TngAIControllerInterface_AddCombatTargets");
static_assert(offsetof(TngAIControllerInterface_AddCombatTargets, Actor) == 0x000000, "Member 'TngAIControllerInterface_AddCombatTargets::Actor' has a wrong offset!");

// Function TangoLib.TngAIControllerInterface.NotifySmartLinkReached
// 0x0018 (0x0018 - 0x0000)
struct TngAIControllerInterface_NotifySmartLinkReached final
{
public:
	class ATngNavLinkProxy*                       NavLink;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngAIControllerInterface_NotifySmartLinkReached) == 0x000008, "Wrong alignment on TngAIControllerInterface_NotifySmartLinkReached");
static_assert(sizeof(TngAIControllerInterface_NotifySmartLinkReached) == 0x000018, "Wrong size on TngAIControllerInterface_NotifySmartLinkReached");
static_assert(offsetof(TngAIControllerInterface_NotifySmartLinkReached, NavLink) == 0x000000, "Member 'TngAIControllerInterface_NotifySmartLinkReached::NavLink' has a wrong offset!");
static_assert(offsetof(TngAIControllerInterface_NotifySmartLinkReached, Destination) == 0x000008, "Member 'TngAIControllerInterface_NotifySmartLinkReached::Destination' has a wrong offset!");

// Function TangoLib.TngAIControllerInterface.RemoteDriveToLocation
// 0x0010 (0x0010 - 0x0000)
struct TngAIControllerInterface_RemoteDriveToLocation final
{
public:
	struct FVector                                Destination;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeedRate;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAIControllerInterface_RemoteDriveToLocation) == 0x000004, "Wrong alignment on TngAIControllerInterface_RemoteDriveToLocation");
static_assert(sizeof(TngAIControllerInterface_RemoteDriveToLocation) == 0x000010, "Wrong size on TngAIControllerInterface_RemoteDriveToLocation");
static_assert(offsetof(TngAIControllerInterface_RemoteDriveToLocation, Destination) == 0x000000, "Member 'TngAIControllerInterface_RemoteDriveToLocation::Destination' has a wrong offset!");
static_assert(offsetof(TngAIControllerInterface_RemoteDriveToLocation, MaxSpeedRate) == 0x00000C, "Member 'TngAIControllerInterface_RemoteDriveToLocation::MaxSpeedRate' has a wrong offset!");

// Function TangoLib.TngAIControllerInterface.RemoveCombatTargets
// 0x0008 (0x0008 - 0x0000)
struct TngAIControllerInterface_RemoveCombatTargets final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAIControllerInterface_RemoveCombatTargets) == 0x000008, "Wrong alignment on TngAIControllerInterface_RemoveCombatTargets");
static_assert(sizeof(TngAIControllerInterface_RemoveCombatTargets) == 0x000008, "Wrong size on TngAIControllerInterface_RemoveCombatTargets");
static_assert(offsetof(TngAIControllerInterface_RemoveCombatTargets, Actor) == 0x000000, "Member 'TngAIControllerInterface_RemoveCombatTargets::Actor' has a wrong offset!");

// Function TangoLib.TngAIControllerInterface.SetPathFindFilter
// 0x0008 (0x0008 - 0x0000)
struct TngAIControllerInterface_SetPathFindFilter final
{
public:
	TSubclassOf<class UNavigationQueryFilter>     NewFilter;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAIControllerInterface_SetPathFindFilter) == 0x000008, "Wrong alignment on TngAIControllerInterface_SetPathFindFilter");
static_assert(sizeof(TngAIControllerInterface_SetPathFindFilter) == 0x000008, "Wrong size on TngAIControllerInterface_SetPathFindFilter");
static_assert(offsetof(TngAIControllerInterface_SetPathFindFilter, NewFilter) == 0x000000, "Member 'TngAIControllerInterface_SetPathFindFilter::NewFilter' has a wrong offset!");

// Function TangoLib.TngAIControllerInterface.SetSlowDownAtGoal
// 0x0001 (0x0001 - 0x0000)
struct TngAIControllerInterface_SetSlowDownAtGoal final
{
public:
	bool                                          NewFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAIControllerInterface_SetSlowDownAtGoal) == 0x000001, "Wrong alignment on TngAIControllerInterface_SetSlowDownAtGoal");
static_assert(sizeof(TngAIControllerInterface_SetSlowDownAtGoal) == 0x000001, "Wrong size on TngAIControllerInterface_SetSlowDownAtGoal");
static_assert(offsetof(TngAIControllerInterface_SetSlowDownAtGoal, NewFlag) == 0x000000, "Member 'TngAIControllerInterface_SetSlowDownAtGoal::NewFlag' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.K2_AddItem
// 0x0020 (0x0020 - 0x0000)
struct TngInventoryComponent_K2_AddItem final
{
public:
	class AActor*                                 Receiver;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTngItemObject>             ItemClass;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFake;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngInventoryComponent_K2_AddItem) == 0x000008, "Wrong alignment on TngInventoryComponent_K2_AddItem");
static_assert(sizeof(TngInventoryComponent_K2_AddItem) == 0x000020, "Wrong size on TngInventoryComponent_K2_AddItem");
static_assert(offsetof(TngInventoryComponent_K2_AddItem, Receiver) == 0x000000, "Member 'TngInventoryComponent_K2_AddItem::Receiver' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_K2_AddItem, ItemClass) == 0x000008, "Member 'TngInventoryComponent_K2_AddItem::ItemClass' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_K2_AddItem, Count) == 0x000010, "Member 'TngInventoryComponent_K2_AddItem::Count' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_K2_AddItem, IsFake) == 0x000014, "Member 'TngInventoryComponent_K2_AddItem::IsFake' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_K2_AddItem, ReturnValue) == 0x000018, "Member 'TngInventoryComponent_K2_AddItem::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.K2_AddItemList
// 0x0020 (0x0020 - 0x0000)
struct TngInventoryComponent_K2_AddItemList final
{
public:
	class AActor*                                 Receiver;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTngInventoryItem>              ItemList;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsRemove;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_K2_AddItemList) == 0x000008, "Wrong alignment on TngInventoryComponent_K2_AddItemList");
static_assert(sizeof(TngInventoryComponent_K2_AddItemList) == 0x000020, "Wrong size on TngInventoryComponent_K2_AddItemList");
static_assert(offsetof(TngInventoryComponent_K2_AddItemList, Receiver) == 0x000000, "Member 'TngInventoryComponent_K2_AddItemList::Receiver' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_K2_AddItemList, ItemList) == 0x000008, "Member 'TngInventoryComponent_K2_AddItemList::ItemList' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_K2_AddItemList, IsRemove) == 0x000018, "Member 'TngInventoryComponent_K2_AddItemList::IsRemove' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_K2_AddItemList, ReturnValue) == 0x00001C, "Member 'TngInventoryComponent_K2_AddItemList::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.K2_GetInventoryCount
// 0x0010 (0x0010 - 0x0000)
struct TngInventoryComponent_K2_GetInventoryCount final
{
public:
	class AActor*                                 Receiver;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngInventoryComponent_K2_GetInventoryCount) == 0x000008, "Wrong alignment on TngInventoryComponent_K2_GetInventoryCount");
static_assert(sizeof(TngInventoryComponent_K2_GetInventoryCount) == 0x000010, "Wrong size on TngInventoryComponent_K2_GetInventoryCount");
static_assert(offsetof(TngInventoryComponent_K2_GetInventoryCount, Receiver) == 0x000000, "Member 'TngInventoryComponent_K2_GetInventoryCount::Receiver' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_K2_GetInventoryCount, ReturnValue) == 0x000008, "Member 'TngInventoryComponent_K2_GetInventoryCount::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.K2_GetInventoryCountFromTag
// 0x0018 (0x0018 - 0x0000)
struct TngInventoryComponent_K2_GetInventoryCountFromTag final
{
public:
	class AActor*                                 Receiver;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CheckTag;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngInventoryComponent_K2_GetInventoryCountFromTag) == 0x000008, "Wrong alignment on TngInventoryComponent_K2_GetInventoryCountFromTag");
static_assert(sizeof(TngInventoryComponent_K2_GetInventoryCountFromTag) == 0x000018, "Wrong size on TngInventoryComponent_K2_GetInventoryCountFromTag");
static_assert(offsetof(TngInventoryComponent_K2_GetInventoryCountFromTag, Receiver) == 0x000000, "Member 'TngInventoryComponent_K2_GetInventoryCountFromTag::Receiver' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_K2_GetInventoryCountFromTag, CheckTag) == 0x000008, "Member 'TngInventoryComponent_K2_GetInventoryCountFromTag::CheckTag' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_K2_GetInventoryCountFromTag, ReturnValue) == 0x000010, "Member 'TngInventoryComponent_K2_GetInventoryCountFromTag::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.K2_GetItemCountFromClass
// 0x0018 (0x0018 - 0x0000)
struct TngInventoryComponent_K2_GetItemCountFromClass final
{
public:
	class AActor*                                 Receiver;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTngItemObject>             ItemClass;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckInherit;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_K2_GetItemCountFromClass) == 0x000008, "Wrong alignment on TngInventoryComponent_K2_GetItemCountFromClass");
static_assert(sizeof(TngInventoryComponent_K2_GetItemCountFromClass) == 0x000018, "Wrong size on TngInventoryComponent_K2_GetItemCountFromClass");
static_assert(offsetof(TngInventoryComponent_K2_GetItemCountFromClass, Receiver) == 0x000000, "Member 'TngInventoryComponent_K2_GetItemCountFromClass::Receiver' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_K2_GetItemCountFromClass, ItemClass) == 0x000008, "Member 'TngInventoryComponent_K2_GetItemCountFromClass::ItemClass' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_K2_GetItemCountFromClass, CheckInherit) == 0x000010, "Member 'TngInventoryComponent_K2_GetItemCountFromClass::CheckInherit' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_K2_GetItemCountFromClass, ReturnValue) == 0x000014, "Member 'TngInventoryComponent_K2_GetItemCountFromClass::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.K2_GetItemCountFromTag
// 0x0018 (0x0018 - 0x0000)
struct TngInventoryComponent_K2_GetItemCountFromTag final
{
public:
	class AActor*                                 Receiver;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CheckTag;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngInventoryComponent_K2_GetItemCountFromTag) == 0x000008, "Wrong alignment on TngInventoryComponent_K2_GetItemCountFromTag");
static_assert(sizeof(TngInventoryComponent_K2_GetItemCountFromTag) == 0x000018, "Wrong size on TngInventoryComponent_K2_GetItemCountFromTag");
static_assert(offsetof(TngInventoryComponent_K2_GetItemCountFromTag, Receiver) == 0x000000, "Member 'TngInventoryComponent_K2_GetItemCountFromTag::Receiver' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_K2_GetItemCountFromTag, CheckTag) == 0x000008, "Member 'TngInventoryComponent_K2_GetItemCountFromTag::CheckTag' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_K2_GetItemCountFromTag, ReturnValue) == 0x000010, "Member 'TngInventoryComponent_K2_GetItemCountFromTag::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.K2_TransferInventory
// 0x0010 (0x0010 - 0x0000)
struct TngInventoryComponent_K2_TransferInventory final
{
public:
	class AActor*                                 Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Receiver;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_K2_TransferInventory) == 0x000008, "Wrong alignment on TngInventoryComponent_K2_TransferInventory");
static_assert(sizeof(TngInventoryComponent_K2_TransferInventory) == 0x000010, "Wrong size on TngInventoryComponent_K2_TransferInventory");
static_assert(offsetof(TngInventoryComponent_K2_TransferInventory, Sender) == 0x000000, "Member 'TngInventoryComponent_K2_TransferInventory::Sender' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_K2_TransferInventory, Receiver) == 0x000008, "Member 'TngInventoryComponent_K2_TransferInventory::Receiver' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.K2_TransferItem
// 0x0020 (0x0020 - 0x0000)
struct TngInventoryComponent_K2_TransferItem final
{
public:
	class AActor*                                 Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Receiver;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTngItemObject>             ItemClass;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_K2_TransferItem) == 0x000008, "Wrong alignment on TngInventoryComponent_K2_TransferItem");
static_assert(sizeof(TngInventoryComponent_K2_TransferItem) == 0x000020, "Wrong size on TngInventoryComponent_K2_TransferItem");
static_assert(offsetof(TngInventoryComponent_K2_TransferItem, Sender) == 0x000000, "Member 'TngInventoryComponent_K2_TransferItem::Sender' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_K2_TransferItem, Receiver) == 0x000008, "Member 'TngInventoryComponent_K2_TransferItem::Receiver' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_K2_TransferItem, ItemClass) == 0x000010, "Member 'TngInventoryComponent_K2_TransferItem::ItemClass' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_K2_TransferItem, Count) == 0x000018, "Member 'TngInventoryComponent_K2_TransferItem::Count' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_K2_TransferItem, ReturnValue) == 0x00001C, "Member 'TngInventoryComponent_K2_TransferItem::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.AddItem
// 0x0018 (0x0018 - 0x0000)
struct TngInventoryComponent_AddItem final
{
public:
	TSubclassOf<class UTngItemObject>             ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFake;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngInventoryComponent_AddItem) == 0x000008, "Wrong alignment on TngInventoryComponent_AddItem");
static_assert(sizeof(TngInventoryComponent_AddItem) == 0x000018, "Wrong size on TngInventoryComponent_AddItem");
static_assert(offsetof(TngInventoryComponent_AddItem, ItemClass) == 0x000000, "Member 'TngInventoryComponent_AddItem::ItemClass' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_AddItem, Count) == 0x000008, "Member 'TngInventoryComponent_AddItem::Count' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_AddItem, IsFake) == 0x00000C, "Member 'TngInventoryComponent_AddItem::IsFake' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_AddItem, ReturnValue) == 0x000010, "Member 'TngInventoryComponent_AddItem::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.AddItemList
// 0x0018 (0x0018 - 0x0000)
struct TngInventoryComponent_AddItemList final
{
public:
	TArray<struct FTngInventoryItem>              ItemList;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsRemove;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_AddItemList) == 0x000008, "Wrong alignment on TngInventoryComponent_AddItemList");
static_assert(sizeof(TngInventoryComponent_AddItemList) == 0x000018, "Wrong size on TngInventoryComponent_AddItemList");
static_assert(offsetof(TngInventoryComponent_AddItemList, ItemList) == 0x000000, "Member 'TngInventoryComponent_AddItemList::ItemList' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_AddItemList, IsRemove) == 0x000010, "Member 'TngInventoryComponent_AddItemList::IsRemove' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_AddItemList, ReturnValue) == 0x000014, "Member 'TngInventoryComponent_AddItemList::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.Blueprint_PostChangeItemCount
// 0x0010 (0x0010 - 0x0000)
struct TngInventoryComponent_Blueprint_PostChangeItemCount final
{
public:
	TSubclassOf<class UTngItemObject>             ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCount;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldCount;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_Blueprint_PostChangeItemCount) == 0x000008, "Wrong alignment on TngInventoryComponent_Blueprint_PostChangeItemCount");
static_assert(sizeof(TngInventoryComponent_Blueprint_PostChangeItemCount) == 0x000010, "Wrong size on TngInventoryComponent_Blueprint_PostChangeItemCount");
static_assert(offsetof(TngInventoryComponent_Blueprint_PostChangeItemCount, ItemClass) == 0x000000, "Member 'TngInventoryComponent_Blueprint_PostChangeItemCount::ItemClass' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_Blueprint_PostChangeItemCount, NewCount) == 0x000008, "Member 'TngInventoryComponent_Blueprint_PostChangeItemCount::NewCount' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_Blueprint_PostChangeItemCount, OldCount) == 0x00000C, "Member 'TngInventoryComponent_Blueprint_PostChangeItemCount::OldCount' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.GetInventoryFromClass
// 0x0020 (0x0020 - 0x0000)
struct TngInventoryComponent_GetInventoryFromClass final
{
public:
	TSubclassOf<class UTngItemObject>             ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckInherit;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTngInventoryItem                      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_GetInventoryFromClass) == 0x000008, "Wrong alignment on TngInventoryComponent_GetInventoryFromClass");
static_assert(sizeof(TngInventoryComponent_GetInventoryFromClass) == 0x000020, "Wrong size on TngInventoryComponent_GetInventoryFromClass");
static_assert(offsetof(TngInventoryComponent_GetInventoryFromClass, ItemClass) == 0x000000, "Member 'TngInventoryComponent_GetInventoryFromClass::ItemClass' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_GetInventoryFromClass, GetIndex) == 0x000008, "Member 'TngInventoryComponent_GetInventoryFromClass::GetIndex' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_GetInventoryFromClass, CheckInherit) == 0x00000C, "Member 'TngInventoryComponent_GetInventoryFromClass::CheckInherit' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_GetInventoryFromClass, ReturnValue) == 0x000010, "Member 'TngInventoryComponent_GetInventoryFromClass::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.GetInventoryFromIndex
// 0x0018 (0x0018 - 0x0000)
struct TngInventoryComponent_GetInventoryFromIndex final
{
public:
	int32                                         GetIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTngInventoryItem                      ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_GetInventoryFromIndex) == 0x000008, "Wrong alignment on TngInventoryComponent_GetInventoryFromIndex");
static_assert(sizeof(TngInventoryComponent_GetInventoryFromIndex) == 0x000018, "Wrong size on TngInventoryComponent_GetInventoryFromIndex");
static_assert(offsetof(TngInventoryComponent_GetInventoryFromIndex, GetIndex) == 0x000000, "Member 'TngInventoryComponent_GetInventoryFromIndex::GetIndex' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_GetInventoryFromIndex, ReturnValue) == 0x000008, "Member 'TngInventoryComponent_GetInventoryFromIndex::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.GetInventoryFromTag
// 0x0020 (0x0020 - 0x0000)
struct TngInventoryComponent_GetInventoryFromTag final
{
public:
	class FName                                   CheckTag;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTngInventoryItem                      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_GetInventoryFromTag) == 0x000008, "Wrong alignment on TngInventoryComponent_GetInventoryFromTag");
static_assert(sizeof(TngInventoryComponent_GetInventoryFromTag) == 0x000020, "Wrong size on TngInventoryComponent_GetInventoryFromTag");
static_assert(offsetof(TngInventoryComponent_GetInventoryFromTag, CheckTag) == 0x000000, "Member 'TngInventoryComponent_GetInventoryFromTag::CheckTag' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_GetInventoryFromTag, GetIndex) == 0x000008, "Member 'TngInventoryComponent_GetInventoryFromTag::GetIndex' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_GetInventoryFromTag, ReturnValue) == 0x000010, "Member 'TngInventoryComponent_GetInventoryFromTag::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.GetInventoryListFromClass
// 0x0020 (0x0020 - 0x0000)
struct TngInventoryComponent_GetInventoryListFromClass final
{
public:
	TSubclassOf<class UTngItemObject>             ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckInherit;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTngInventoryItem>              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_GetInventoryListFromClass) == 0x000008, "Wrong alignment on TngInventoryComponent_GetInventoryListFromClass");
static_assert(sizeof(TngInventoryComponent_GetInventoryListFromClass) == 0x000020, "Wrong size on TngInventoryComponent_GetInventoryListFromClass");
static_assert(offsetof(TngInventoryComponent_GetInventoryListFromClass, ItemClass) == 0x000000, "Member 'TngInventoryComponent_GetInventoryListFromClass::ItemClass' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_GetInventoryListFromClass, CheckInherit) == 0x000008, "Member 'TngInventoryComponent_GetInventoryListFromClass::CheckInherit' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_GetInventoryListFromClass, ReturnValue) == 0x000010, "Member 'TngInventoryComponent_GetInventoryListFromClass::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.GetInventoryListFromTag
// 0x0018 (0x0018 - 0x0000)
struct TngInventoryComponent_GetInventoryListFromTag final
{
public:
	class FName                                   CheckTag;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTngInventoryItem>              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_GetInventoryListFromTag) == 0x000008, "Wrong alignment on TngInventoryComponent_GetInventoryListFromTag");
static_assert(sizeof(TngInventoryComponent_GetInventoryListFromTag) == 0x000018, "Wrong size on TngInventoryComponent_GetInventoryListFromTag");
static_assert(offsetof(TngInventoryComponent_GetInventoryListFromTag, CheckTag) == 0x000000, "Member 'TngInventoryComponent_GetInventoryListFromTag::CheckTag' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_GetInventoryListFromTag, ReturnValue) == 0x000008, "Member 'TngInventoryComponent_GetInventoryListFromTag::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.RemoveAllItem
// 0x0010 (0x0010 - 0x0000)
struct TngInventoryComponent_RemoveAllItem final
{
public:
	TSubclassOf<class UTngItemObject>             ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngInventoryComponent_RemoveAllItem) == 0x000008, "Wrong alignment on TngInventoryComponent_RemoveAllItem");
static_assert(sizeof(TngInventoryComponent_RemoveAllItem) == 0x000010, "Wrong size on TngInventoryComponent_RemoveAllItem");
static_assert(offsetof(TngInventoryComponent_RemoveAllItem, ItemClass) == 0x000000, "Member 'TngInventoryComponent_RemoveAllItem::ItemClass' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_RemoveAllItem, ReturnValue) == 0x000008, "Member 'TngInventoryComponent_RemoveAllItem::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.RemoveItem
// 0x0010 (0x0010 - 0x0000)
struct TngInventoryComponent_RemoveItem final
{
public:
	TSubclassOf<class UTngItemObject>             ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_RemoveItem) == 0x000008, "Wrong alignment on TngInventoryComponent_RemoveItem");
static_assert(sizeof(TngInventoryComponent_RemoveItem) == 0x000010, "Wrong size on TngInventoryComponent_RemoveItem");
static_assert(offsetof(TngInventoryComponent_RemoveItem, ItemClass) == 0x000000, "Member 'TngInventoryComponent_RemoveItem::ItemClass' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_RemoveItem, Count) == 0x000008, "Member 'TngInventoryComponent_RemoveItem::Count' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_RemoveItem, ReturnValue) == 0x00000C, "Member 'TngInventoryComponent_RemoveItem::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.SetInventoryReturnFlag
// 0x0001 (0x0001 - 0x0000)
struct TngInventoryComponent_SetInventoryReturnFlag final
{
public:
	bool                                          ReturnBool;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_SetInventoryReturnFlag) == 0x000001, "Wrong alignment on TngInventoryComponent_SetInventoryReturnFlag");
static_assert(sizeof(TngInventoryComponent_SetInventoryReturnFlag) == 0x000001, "Wrong size on TngInventoryComponent_SetInventoryReturnFlag");
static_assert(offsetof(TngInventoryComponent_SetInventoryReturnFlag, ReturnBool) == 0x000000, "Member 'TngInventoryComponent_SetInventoryReturnFlag::ReturnBool' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.SetInventoryReturnNumber
// 0x0004 (0x0004 - 0x0000)
struct TngInventoryComponent_SetInventoryReturnNumber final
{
public:
	int32                                         ReturnInt;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_SetInventoryReturnNumber) == 0x000004, "Wrong alignment on TngInventoryComponent_SetInventoryReturnNumber");
static_assert(sizeof(TngInventoryComponent_SetInventoryReturnNumber) == 0x000004, "Wrong size on TngInventoryComponent_SetInventoryReturnNumber");
static_assert(offsetof(TngInventoryComponent_SetInventoryReturnNumber, ReturnInt) == 0x000000, "Member 'TngInventoryComponent_SetInventoryReturnNumber::ReturnInt' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.SetItem
// 0x0010 (0x0010 - 0x0000)
struct TngInventoryComponent_SetItem final
{
public:
	TSubclassOf<class UTngItemObject>             ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_SetItem) == 0x000008, "Wrong alignment on TngInventoryComponent_SetItem");
static_assert(sizeof(TngInventoryComponent_SetItem) == 0x000010, "Wrong size on TngInventoryComponent_SetItem");
static_assert(offsetof(TngInventoryComponent_SetItem, ItemClass) == 0x000000, "Member 'TngInventoryComponent_SetItem::ItemClass' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_SetItem, Count) == 0x000008, "Member 'TngInventoryComponent_SetItem::Count' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_SetItem, ReturnValue) == 0x00000C, "Member 'TngInventoryComponent_SetItem::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.TransferAllItem
// 0x0018 (0x0018 - 0x0000)
struct TngInventoryComponent_TransferAllItem final
{
public:
	class AActor*                                 Receiver;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTngItemObject>             ItemClass;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngInventoryComponent_TransferAllItem) == 0x000008, "Wrong alignment on TngInventoryComponent_TransferAllItem");
static_assert(sizeof(TngInventoryComponent_TransferAllItem) == 0x000018, "Wrong size on TngInventoryComponent_TransferAllItem");
static_assert(offsetof(TngInventoryComponent_TransferAllItem, Receiver) == 0x000000, "Member 'TngInventoryComponent_TransferAllItem::Receiver' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_TransferAllItem, ItemClass) == 0x000008, "Member 'TngInventoryComponent_TransferAllItem::ItemClass' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_TransferAllItem, ReturnValue) == 0x000010, "Member 'TngInventoryComponent_TransferAllItem::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.TransferInventory
// 0x0008 (0x0008 - 0x0000)
struct TngInventoryComponent_TransferInventory final
{
public:
	class AActor*                                 Receiver;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_TransferInventory) == 0x000008, "Wrong alignment on TngInventoryComponent_TransferInventory");
static_assert(sizeof(TngInventoryComponent_TransferInventory) == 0x000008, "Wrong size on TngInventoryComponent_TransferInventory");
static_assert(offsetof(TngInventoryComponent_TransferInventory, Receiver) == 0x000000, "Member 'TngInventoryComponent_TransferInventory::Receiver' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.TransferItem
// 0x0018 (0x0018 - 0x0000)
struct TngInventoryComponent_TransferItem final
{
public:
	class AActor*                                 Receiver;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTngItemObject>             ItemClass;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_TransferItem) == 0x000008, "Wrong alignment on TngInventoryComponent_TransferItem");
static_assert(sizeof(TngInventoryComponent_TransferItem) == 0x000018, "Wrong size on TngInventoryComponent_TransferItem");
static_assert(offsetof(TngInventoryComponent_TransferItem, Receiver) == 0x000000, "Member 'TngInventoryComponent_TransferItem::Receiver' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_TransferItem, ItemClass) == 0x000008, "Member 'TngInventoryComponent_TransferItem::ItemClass' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_TransferItem, Count) == 0x000010, "Member 'TngInventoryComponent_TransferItem::Count' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_TransferItem, ReturnValue) == 0x000014, "Member 'TngInventoryComponent_TransferItem::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.Blueprint_ShouldAddItemCount
// 0x0010 (0x0010 - 0x0000)
struct TngInventoryComponent_Blueprint_ShouldAddItemCount final
{
public:
	TSubclassOf<class UTngItemObject>             ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_Blueprint_ShouldAddItemCount) == 0x000008, "Wrong alignment on TngInventoryComponent_Blueprint_ShouldAddItemCount");
static_assert(sizeof(TngInventoryComponent_Blueprint_ShouldAddItemCount) == 0x000010, "Wrong size on TngInventoryComponent_Blueprint_ShouldAddItemCount");
static_assert(offsetof(TngInventoryComponent_Blueprint_ShouldAddItemCount, ItemClass) == 0x000000, "Member 'TngInventoryComponent_Blueprint_ShouldAddItemCount::ItemClass' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_Blueprint_ShouldAddItemCount, Count) == 0x000008, "Member 'TngInventoryComponent_Blueprint_ShouldAddItemCount::Count' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_Blueprint_ShouldAddItemCount, ReturnValue) == 0x00000C, "Member 'TngInventoryComponent_Blueprint_ShouldAddItemCount::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.Blueprint_ShouldDeleteItem
// 0x0010 (0x0010 - 0x0000)
struct TngInventoryComponent_Blueprint_ShouldDeleteItem final
{
public:
	TSubclassOf<class UTngItemObject>             ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngInventoryComponent_Blueprint_ShouldDeleteItem) == 0x000008, "Wrong alignment on TngInventoryComponent_Blueprint_ShouldDeleteItem");
static_assert(sizeof(TngInventoryComponent_Blueprint_ShouldDeleteItem) == 0x000010, "Wrong size on TngInventoryComponent_Blueprint_ShouldDeleteItem");
static_assert(offsetof(TngInventoryComponent_Blueprint_ShouldDeleteItem, ItemClass) == 0x000000, "Member 'TngInventoryComponent_Blueprint_ShouldDeleteItem::ItemClass' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_Blueprint_ShouldDeleteItem, ReturnValue) == 0x000008, "Member 'TngInventoryComponent_Blueprint_ShouldDeleteItem::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.Blueprint_ShouldNewItem
// 0x0010 (0x0010 - 0x0000)
struct TngInventoryComponent_Blueprint_ShouldNewItem final
{
public:
	TSubclassOf<class UTngItemObject>             ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngInventoryComponent_Blueprint_ShouldNewItem) == 0x000008, "Wrong alignment on TngInventoryComponent_Blueprint_ShouldNewItem");
static_assert(sizeof(TngInventoryComponent_Blueprint_ShouldNewItem) == 0x000010, "Wrong size on TngInventoryComponent_Blueprint_ShouldNewItem");
static_assert(offsetof(TngInventoryComponent_Blueprint_ShouldNewItem, ItemClass) == 0x000000, "Member 'TngInventoryComponent_Blueprint_ShouldNewItem::ItemClass' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_Blueprint_ShouldNewItem, ReturnValue) == 0x000008, "Member 'TngInventoryComponent_Blueprint_ShouldNewItem::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.Blueprint_ShouldRemoveItemCount
// 0x0010 (0x0010 - 0x0000)
struct TngInventoryComponent_Blueprint_ShouldRemoveItemCount final
{
public:
	TSubclassOf<class UTngItemObject>             ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_Blueprint_ShouldRemoveItemCount) == 0x000008, "Wrong alignment on TngInventoryComponent_Blueprint_ShouldRemoveItemCount");
static_assert(sizeof(TngInventoryComponent_Blueprint_ShouldRemoveItemCount) == 0x000010, "Wrong size on TngInventoryComponent_Blueprint_ShouldRemoveItemCount");
static_assert(offsetof(TngInventoryComponent_Blueprint_ShouldRemoveItemCount, ItemClass) == 0x000000, "Member 'TngInventoryComponent_Blueprint_ShouldRemoveItemCount::ItemClass' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_Blueprint_ShouldRemoveItemCount, Count) == 0x000008, "Member 'TngInventoryComponent_Blueprint_ShouldRemoveItemCount::Count' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_Blueprint_ShouldRemoveItemCount, ReturnValue) == 0x00000C, "Member 'TngInventoryComponent_Blueprint_ShouldRemoveItemCount::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.GetInventoryCount
// 0x0004 (0x0004 - 0x0000)
struct TngInventoryComponent_GetInventoryCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_GetInventoryCount) == 0x000004, "Wrong alignment on TngInventoryComponent_GetInventoryCount");
static_assert(sizeof(TngInventoryComponent_GetInventoryCount) == 0x000004, "Wrong size on TngInventoryComponent_GetInventoryCount");
static_assert(offsetof(TngInventoryComponent_GetInventoryCount, ReturnValue) == 0x000000, "Member 'TngInventoryComponent_GetInventoryCount::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.GetInventoryCountFromTag
// 0x000C (0x000C - 0x0000)
struct TngInventoryComponent_GetInventoryCountFromTag final
{
public:
	class FName                                   CheckTag;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_GetInventoryCountFromTag) == 0x000004, "Wrong alignment on TngInventoryComponent_GetInventoryCountFromTag");
static_assert(sizeof(TngInventoryComponent_GetInventoryCountFromTag) == 0x00000C, "Wrong size on TngInventoryComponent_GetInventoryCountFromTag");
static_assert(offsetof(TngInventoryComponent_GetInventoryCountFromTag, CheckTag) == 0x000000, "Member 'TngInventoryComponent_GetInventoryCountFromTag::CheckTag' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_GetInventoryCountFromTag, ReturnValue) == 0x000008, "Member 'TngInventoryComponent_GetInventoryCountFromTag::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.GetInventoryListAll
// 0x0010 (0x0010 - 0x0000)
struct TngInventoryComponent_GetInventoryListAll final
{
public:
	TArray<struct FTngInventoryItem>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_GetInventoryListAll) == 0x000008, "Wrong alignment on TngInventoryComponent_GetInventoryListAll");
static_assert(sizeof(TngInventoryComponent_GetInventoryListAll) == 0x000010, "Wrong size on TngInventoryComponent_GetInventoryListAll");
static_assert(offsetof(TngInventoryComponent_GetInventoryListAll, ReturnValue) == 0x000000, "Member 'TngInventoryComponent_GetInventoryListAll::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.GetItemCount
// 0x0004 (0x0004 - 0x0000)
struct TngInventoryComponent_GetItemCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_GetItemCount) == 0x000004, "Wrong alignment on TngInventoryComponent_GetItemCount");
static_assert(sizeof(TngInventoryComponent_GetItemCount) == 0x000004, "Wrong size on TngInventoryComponent_GetItemCount");
static_assert(offsetof(TngInventoryComponent_GetItemCount, ReturnValue) == 0x000000, "Member 'TngInventoryComponent_GetItemCount::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.GetItemCountFromClass
// 0x0010 (0x0010 - 0x0000)
struct TngInventoryComponent_GetItemCountFromClass final
{
public:
	TSubclassOf<class UTngItemObject>             ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckInherit;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_GetItemCountFromClass) == 0x000008, "Wrong alignment on TngInventoryComponent_GetItemCountFromClass");
static_assert(sizeof(TngInventoryComponent_GetItemCountFromClass) == 0x000010, "Wrong size on TngInventoryComponent_GetItemCountFromClass");
static_assert(offsetof(TngInventoryComponent_GetItemCountFromClass, ItemClass) == 0x000000, "Member 'TngInventoryComponent_GetItemCountFromClass::ItemClass' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_GetItemCountFromClass, CheckInherit) == 0x000008, "Member 'TngInventoryComponent_GetItemCountFromClass::CheckInherit' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_GetItemCountFromClass, ReturnValue) == 0x00000C, "Member 'TngInventoryComponent_GetItemCountFromClass::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInventoryComponent.GetItemCountFromTag
// 0x000C (0x000C - 0x0000)
struct TngInventoryComponent_GetItemCountFromTag final
{
public:
	class FName                                   CheckTag;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInventoryComponent_GetItemCountFromTag) == 0x000004, "Wrong alignment on TngInventoryComponent_GetItemCountFromTag");
static_assert(sizeof(TngInventoryComponent_GetItemCountFromTag) == 0x00000C, "Wrong size on TngInventoryComponent_GetItemCountFromTag");
static_assert(offsetof(TngInventoryComponent_GetItemCountFromTag, CheckTag) == 0x000000, "Member 'TngInventoryComponent_GetItemCountFromTag::CheckTag' has a wrong offset!");
static_assert(offsetof(TngInventoryComponent_GetItemCountFromTag, ReturnValue) == 0x000008, "Member 'TngInventoryComponent_GetItemCountFromTag::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.SetValueAsBool
// 0x000C (0x000C - 0x0000)
struct TngDynamicBlackboardComponent_SetValueAsBool final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetValue;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDynamicBlackboardComponent_SetValueAsBool) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_SetValueAsBool");
static_assert(sizeof(TngDynamicBlackboardComponent_SetValueAsBool) == 0x00000C, "Wrong size on TngDynamicBlackboardComponent_SetValueAsBool");
static_assert(offsetof(TngDynamicBlackboardComponent_SetValueAsBool, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_SetValueAsBool::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_SetValueAsBool, SetValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_SetValueAsBool::SetValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.SetValueAsClass
// 0x0010 (0x0010 - 0x0000)
struct TngDynamicBlackboardComponent_SetValueAsClass final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 SetValue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDynamicBlackboardComponent_SetValueAsClass) == 0x000008, "Wrong alignment on TngDynamicBlackboardComponent_SetValueAsClass");
static_assert(sizeof(TngDynamicBlackboardComponent_SetValueAsClass) == 0x000010, "Wrong size on TngDynamicBlackboardComponent_SetValueAsClass");
static_assert(offsetof(TngDynamicBlackboardComponent_SetValueAsClass, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_SetValueAsClass::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_SetValueAsClass, SetValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_SetValueAsClass::SetValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.SetValueAsEnum
// 0x000C (0x000C - 0x0000)
struct TngDynamicBlackboardComponent_SetValueAsEnum final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SetValue;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDynamicBlackboardComponent_SetValueAsEnum) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_SetValueAsEnum");
static_assert(sizeof(TngDynamicBlackboardComponent_SetValueAsEnum) == 0x00000C, "Wrong size on TngDynamicBlackboardComponent_SetValueAsEnum");
static_assert(offsetof(TngDynamicBlackboardComponent_SetValueAsEnum, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_SetValueAsEnum::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_SetValueAsEnum, SetValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_SetValueAsEnum::SetValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.SetValueAsFloat
// 0x000C (0x000C - 0x0000)
struct TngDynamicBlackboardComponent_SetValueAsFloat final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SetValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDynamicBlackboardComponent_SetValueAsFloat) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_SetValueAsFloat");
static_assert(sizeof(TngDynamicBlackboardComponent_SetValueAsFloat) == 0x00000C, "Wrong size on TngDynamicBlackboardComponent_SetValueAsFloat");
static_assert(offsetof(TngDynamicBlackboardComponent_SetValueAsFloat, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_SetValueAsFloat::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_SetValueAsFloat, SetValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_SetValueAsFloat::SetValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.SetValueAsInt
// 0x000C (0x000C - 0x0000)
struct TngDynamicBlackboardComponent_SetValueAsInt final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDynamicBlackboardComponent_SetValueAsInt) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_SetValueAsInt");
static_assert(sizeof(TngDynamicBlackboardComponent_SetValueAsInt) == 0x00000C, "Wrong size on TngDynamicBlackboardComponent_SetValueAsInt");
static_assert(offsetof(TngDynamicBlackboardComponent_SetValueAsInt, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_SetValueAsInt::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_SetValueAsInt, SetValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_SetValueAsInt::SetValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.SetValueAsName
// 0x0010 (0x0010 - 0x0000)
struct TngDynamicBlackboardComponent_SetValueAsName final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SetValue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDynamicBlackboardComponent_SetValueAsName) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_SetValueAsName");
static_assert(sizeof(TngDynamicBlackboardComponent_SetValueAsName) == 0x000010, "Wrong size on TngDynamicBlackboardComponent_SetValueAsName");
static_assert(offsetof(TngDynamicBlackboardComponent_SetValueAsName, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_SetValueAsName::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_SetValueAsName, SetValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_SetValueAsName::SetValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.SetValueAsObject
// 0x0010 (0x0010 - 0x0000)
struct TngDynamicBlackboardComponent_SetValueAsObject final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SetValue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDynamicBlackboardComponent_SetValueAsObject) == 0x000008, "Wrong alignment on TngDynamicBlackboardComponent_SetValueAsObject");
static_assert(sizeof(TngDynamicBlackboardComponent_SetValueAsObject) == 0x000010, "Wrong size on TngDynamicBlackboardComponent_SetValueAsObject");
static_assert(offsetof(TngDynamicBlackboardComponent_SetValueAsObject, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_SetValueAsObject::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_SetValueAsObject, SetValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_SetValueAsObject::SetValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.SetValueAsRotator
// 0x0014 (0x0014 - 0x0000)
struct TngDynamicBlackboardComponent_SetValueAsRotator final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SetValue;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDynamicBlackboardComponent_SetValueAsRotator) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_SetValueAsRotator");
static_assert(sizeof(TngDynamicBlackboardComponent_SetValueAsRotator) == 0x000014, "Wrong size on TngDynamicBlackboardComponent_SetValueAsRotator");
static_assert(offsetof(TngDynamicBlackboardComponent_SetValueAsRotator, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_SetValueAsRotator::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_SetValueAsRotator, SetValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_SetValueAsRotator::SetValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.SetValueAsString
// 0x0018 (0x0018 - 0x0000)
struct TngDynamicBlackboardComponent_SetValueAsString final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetValue;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDynamicBlackboardComponent_SetValueAsString) == 0x000008, "Wrong alignment on TngDynamicBlackboardComponent_SetValueAsString");
static_assert(sizeof(TngDynamicBlackboardComponent_SetValueAsString) == 0x000018, "Wrong size on TngDynamicBlackboardComponent_SetValueAsString");
static_assert(offsetof(TngDynamicBlackboardComponent_SetValueAsString, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_SetValueAsString::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_SetValueAsString, SetValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_SetValueAsString::SetValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.SetValueAsVector
// 0x0014 (0x0014 - 0x0000)
struct TngDynamicBlackboardComponent_SetValueAsVector final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SetValue;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDynamicBlackboardComponent_SetValueAsVector) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_SetValueAsVector");
static_assert(sizeof(TngDynamicBlackboardComponent_SetValueAsVector) == 0x000014, "Wrong size on TngDynamicBlackboardComponent_SetValueAsVector");
static_assert(offsetof(TngDynamicBlackboardComponent_SetValueAsVector, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_SetValueAsVector::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_SetValueAsVector, SetValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_SetValueAsVector::SetValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.CheckValueAsBool
// 0x000C (0x000C - 0x0000)
struct TngDynamicBlackboardComponent_CheckValueAsBool final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDynamicBlackboardComponent_CheckValueAsBool) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_CheckValueAsBool");
static_assert(sizeof(TngDynamicBlackboardComponent_CheckValueAsBool) == 0x00000C, "Wrong size on TngDynamicBlackboardComponent_CheckValueAsBool");
static_assert(offsetof(TngDynamicBlackboardComponent_CheckValueAsBool, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_CheckValueAsBool::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_CheckValueAsBool, ReturnValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_CheckValueAsBool::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.CheckValueAsClass
// 0x000C (0x000C - 0x0000)
struct TngDynamicBlackboardComponent_CheckValueAsClass final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDynamicBlackboardComponent_CheckValueAsClass) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_CheckValueAsClass");
static_assert(sizeof(TngDynamicBlackboardComponent_CheckValueAsClass) == 0x00000C, "Wrong size on TngDynamicBlackboardComponent_CheckValueAsClass");
static_assert(offsetof(TngDynamicBlackboardComponent_CheckValueAsClass, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_CheckValueAsClass::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_CheckValueAsClass, ReturnValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_CheckValueAsClass::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.CheckValueAsEnum
// 0x000C (0x000C - 0x0000)
struct TngDynamicBlackboardComponent_CheckValueAsEnum final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDynamicBlackboardComponent_CheckValueAsEnum) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_CheckValueAsEnum");
static_assert(sizeof(TngDynamicBlackboardComponent_CheckValueAsEnum) == 0x00000C, "Wrong size on TngDynamicBlackboardComponent_CheckValueAsEnum");
static_assert(offsetof(TngDynamicBlackboardComponent_CheckValueAsEnum, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_CheckValueAsEnum::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_CheckValueAsEnum, ReturnValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_CheckValueAsEnum::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.CheckValueAsFloat
// 0x000C (0x000C - 0x0000)
struct TngDynamicBlackboardComponent_CheckValueAsFloat final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDynamicBlackboardComponent_CheckValueAsFloat) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_CheckValueAsFloat");
static_assert(sizeof(TngDynamicBlackboardComponent_CheckValueAsFloat) == 0x00000C, "Wrong size on TngDynamicBlackboardComponent_CheckValueAsFloat");
static_assert(offsetof(TngDynamicBlackboardComponent_CheckValueAsFloat, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_CheckValueAsFloat::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_CheckValueAsFloat, ReturnValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_CheckValueAsFloat::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.CheckValueAsInt
// 0x000C (0x000C - 0x0000)
struct TngDynamicBlackboardComponent_CheckValueAsInt final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDynamicBlackboardComponent_CheckValueAsInt) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_CheckValueAsInt");
static_assert(sizeof(TngDynamicBlackboardComponent_CheckValueAsInt) == 0x00000C, "Wrong size on TngDynamicBlackboardComponent_CheckValueAsInt");
static_assert(offsetof(TngDynamicBlackboardComponent_CheckValueAsInt, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_CheckValueAsInt::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_CheckValueAsInt, ReturnValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_CheckValueAsInt::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.CheckValueAsName
// 0x000C (0x000C - 0x0000)
struct TngDynamicBlackboardComponent_CheckValueAsName final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDynamicBlackboardComponent_CheckValueAsName) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_CheckValueAsName");
static_assert(sizeof(TngDynamicBlackboardComponent_CheckValueAsName) == 0x00000C, "Wrong size on TngDynamicBlackboardComponent_CheckValueAsName");
static_assert(offsetof(TngDynamicBlackboardComponent_CheckValueAsName, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_CheckValueAsName::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_CheckValueAsName, ReturnValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_CheckValueAsName::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.CheckValueAsObject
// 0x000C (0x000C - 0x0000)
struct TngDynamicBlackboardComponent_CheckValueAsObject final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDynamicBlackboardComponent_CheckValueAsObject) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_CheckValueAsObject");
static_assert(sizeof(TngDynamicBlackboardComponent_CheckValueAsObject) == 0x00000C, "Wrong size on TngDynamicBlackboardComponent_CheckValueAsObject");
static_assert(offsetof(TngDynamicBlackboardComponent_CheckValueAsObject, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_CheckValueAsObject::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_CheckValueAsObject, ReturnValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_CheckValueAsObject::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.CheckValueAsRotator
// 0x000C (0x000C - 0x0000)
struct TngDynamicBlackboardComponent_CheckValueAsRotator final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDynamicBlackboardComponent_CheckValueAsRotator) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_CheckValueAsRotator");
static_assert(sizeof(TngDynamicBlackboardComponent_CheckValueAsRotator) == 0x00000C, "Wrong size on TngDynamicBlackboardComponent_CheckValueAsRotator");
static_assert(offsetof(TngDynamicBlackboardComponent_CheckValueAsRotator, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_CheckValueAsRotator::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_CheckValueAsRotator, ReturnValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_CheckValueAsRotator::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.CheckValueAsString
// 0x000C (0x000C - 0x0000)
struct TngDynamicBlackboardComponent_CheckValueAsString final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDynamicBlackboardComponent_CheckValueAsString) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_CheckValueAsString");
static_assert(sizeof(TngDynamicBlackboardComponent_CheckValueAsString) == 0x00000C, "Wrong size on TngDynamicBlackboardComponent_CheckValueAsString");
static_assert(offsetof(TngDynamicBlackboardComponent_CheckValueAsString, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_CheckValueAsString::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_CheckValueAsString, ReturnValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_CheckValueAsString::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.CheckValueAsVector
// 0x000C (0x000C - 0x0000)
struct TngDynamicBlackboardComponent_CheckValueAsVector final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDynamicBlackboardComponent_CheckValueAsVector) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_CheckValueAsVector");
static_assert(sizeof(TngDynamicBlackboardComponent_CheckValueAsVector) == 0x00000C, "Wrong size on TngDynamicBlackboardComponent_CheckValueAsVector");
static_assert(offsetof(TngDynamicBlackboardComponent_CheckValueAsVector, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_CheckValueAsVector::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_CheckValueAsVector, ReturnValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_CheckValueAsVector::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.GetValueAsBool
// 0x000C (0x000C - 0x0000)
struct TngDynamicBlackboardComponent_GetValueAsBool final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDynamicBlackboardComponent_GetValueAsBool) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_GetValueAsBool");
static_assert(sizeof(TngDynamicBlackboardComponent_GetValueAsBool) == 0x00000C, "Wrong size on TngDynamicBlackboardComponent_GetValueAsBool");
static_assert(offsetof(TngDynamicBlackboardComponent_GetValueAsBool, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_GetValueAsBool::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_GetValueAsBool, ReturnValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_GetValueAsBool::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.GetValueAsClass
// 0x0010 (0x0010 - 0x0000)
struct TngDynamicBlackboardComponent_GetValueAsClass final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDynamicBlackboardComponent_GetValueAsClass) == 0x000008, "Wrong alignment on TngDynamicBlackboardComponent_GetValueAsClass");
static_assert(sizeof(TngDynamicBlackboardComponent_GetValueAsClass) == 0x000010, "Wrong size on TngDynamicBlackboardComponent_GetValueAsClass");
static_assert(offsetof(TngDynamicBlackboardComponent_GetValueAsClass, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_GetValueAsClass::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_GetValueAsClass, ReturnValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_GetValueAsClass::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.GetValueAsEnum
// 0x000C (0x000C - 0x0000)
struct TngDynamicBlackboardComponent_GetValueAsEnum final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDynamicBlackboardComponent_GetValueAsEnum) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_GetValueAsEnum");
static_assert(sizeof(TngDynamicBlackboardComponent_GetValueAsEnum) == 0x00000C, "Wrong size on TngDynamicBlackboardComponent_GetValueAsEnum");
static_assert(offsetof(TngDynamicBlackboardComponent_GetValueAsEnum, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_GetValueAsEnum::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_GetValueAsEnum, ReturnValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_GetValueAsEnum::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.GetValueAsFloat
// 0x000C (0x000C - 0x0000)
struct TngDynamicBlackboardComponent_GetValueAsFloat final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDynamicBlackboardComponent_GetValueAsFloat) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_GetValueAsFloat");
static_assert(sizeof(TngDynamicBlackboardComponent_GetValueAsFloat) == 0x00000C, "Wrong size on TngDynamicBlackboardComponent_GetValueAsFloat");
static_assert(offsetof(TngDynamicBlackboardComponent_GetValueAsFloat, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_GetValueAsFloat::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_GetValueAsFloat, ReturnValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_GetValueAsFloat::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.GetValueAsInt
// 0x000C (0x000C - 0x0000)
struct TngDynamicBlackboardComponent_GetValueAsInt final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDynamicBlackboardComponent_GetValueAsInt) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_GetValueAsInt");
static_assert(sizeof(TngDynamicBlackboardComponent_GetValueAsInt) == 0x00000C, "Wrong size on TngDynamicBlackboardComponent_GetValueAsInt");
static_assert(offsetof(TngDynamicBlackboardComponent_GetValueAsInt, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_GetValueAsInt::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_GetValueAsInt, ReturnValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_GetValueAsInt::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.GetValueAsName
// 0x0010 (0x0010 - 0x0000)
struct TngDynamicBlackboardComponent_GetValueAsName final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDynamicBlackboardComponent_GetValueAsName) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_GetValueAsName");
static_assert(sizeof(TngDynamicBlackboardComponent_GetValueAsName) == 0x000010, "Wrong size on TngDynamicBlackboardComponent_GetValueAsName");
static_assert(offsetof(TngDynamicBlackboardComponent_GetValueAsName, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_GetValueAsName::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_GetValueAsName, ReturnValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_GetValueAsName::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.GetValueAsObject
// 0x0010 (0x0010 - 0x0000)
struct TngDynamicBlackboardComponent_GetValueAsObject final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDynamicBlackboardComponent_GetValueAsObject) == 0x000008, "Wrong alignment on TngDynamicBlackboardComponent_GetValueAsObject");
static_assert(sizeof(TngDynamicBlackboardComponent_GetValueAsObject) == 0x000010, "Wrong size on TngDynamicBlackboardComponent_GetValueAsObject");
static_assert(offsetof(TngDynamicBlackboardComponent_GetValueAsObject, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_GetValueAsObject::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_GetValueAsObject, ReturnValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_GetValueAsObject::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.GetValueAsRotator
// 0x0014 (0x0014 - 0x0000)
struct TngDynamicBlackboardComponent_GetValueAsRotator final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDynamicBlackboardComponent_GetValueAsRotator) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_GetValueAsRotator");
static_assert(sizeof(TngDynamicBlackboardComponent_GetValueAsRotator) == 0x000014, "Wrong size on TngDynamicBlackboardComponent_GetValueAsRotator");
static_assert(offsetof(TngDynamicBlackboardComponent_GetValueAsRotator, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_GetValueAsRotator::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_GetValueAsRotator, ReturnValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_GetValueAsRotator::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.GetValueAsString
// 0x0018 (0x0018 - 0x0000)
struct TngDynamicBlackboardComponent_GetValueAsString final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDynamicBlackboardComponent_GetValueAsString) == 0x000008, "Wrong alignment on TngDynamicBlackboardComponent_GetValueAsString");
static_assert(sizeof(TngDynamicBlackboardComponent_GetValueAsString) == 0x000018, "Wrong size on TngDynamicBlackboardComponent_GetValueAsString");
static_assert(offsetof(TngDynamicBlackboardComponent_GetValueAsString, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_GetValueAsString::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_GetValueAsString, ReturnValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_GetValueAsString::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicBlackboardComponent.GetValueAsVector
// 0x0014 (0x0014 - 0x0000)
struct TngDynamicBlackboardComponent_GetValueAsVector final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDynamicBlackboardComponent_GetValueAsVector) == 0x000004, "Wrong alignment on TngDynamicBlackboardComponent_GetValueAsVector");
static_assert(sizeof(TngDynamicBlackboardComponent_GetValueAsVector) == 0x000014, "Wrong size on TngDynamicBlackboardComponent_GetValueAsVector");
static_assert(offsetof(TngDynamicBlackboardComponent_GetValueAsVector, KeyName) == 0x000000, "Member 'TngDynamicBlackboardComponent_GetValueAsVector::KeyName' has a wrong offset!");
static_assert(offsetof(TngDynamicBlackboardComponent_GetValueAsVector, ReturnValue) == 0x000008, "Member 'TngDynamicBlackboardComponent_GetValueAsVector::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicDelegateComponent.BindActorDelegateFromItem
// 0x0020 (0x0020 - 0x0000)
struct TngDynamicDelegateComponent_BindActorDelegateFromItem final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DelegateName;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class AActor* DelegateActor, class FName DelegateName, class UObject* AdvancedData)> FunctionItem;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDynamicDelegateComponent_BindActorDelegateFromItem) == 0x000008, "Wrong alignment on TngDynamicDelegateComponent_BindActorDelegateFromItem");
static_assert(sizeof(TngDynamicDelegateComponent_BindActorDelegateFromItem) == 0x000020, "Wrong size on TngDynamicDelegateComponent_BindActorDelegateFromItem");
static_assert(offsetof(TngDynamicDelegateComponent_BindActorDelegateFromItem, TargetActor) == 0x000000, "Member 'TngDynamicDelegateComponent_BindActorDelegateFromItem::TargetActor' has a wrong offset!");
static_assert(offsetof(TngDynamicDelegateComponent_BindActorDelegateFromItem, DelegateName) == 0x000008, "Member 'TngDynamicDelegateComponent_BindActorDelegateFromItem::DelegateName' has a wrong offset!");
static_assert(offsetof(TngDynamicDelegateComponent_BindActorDelegateFromItem, FunctionItem) == 0x000010, "Member 'TngDynamicDelegateComponent_BindActorDelegateFromItem::FunctionItem' has a wrong offset!");

// Function TangoLib.TngDynamicDelegateComponent.CallActorDelegate
// 0x0020 (0x0020 - 0x0000)
struct TngDynamicDelegateComponent_CallActorDelegate final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DelegateName;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AdvancedData;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDynamicDelegateComponent_CallActorDelegate) == 0x000008, "Wrong alignment on TngDynamicDelegateComponent_CallActorDelegate");
static_assert(sizeof(TngDynamicDelegateComponent_CallActorDelegate) == 0x000020, "Wrong size on TngDynamicDelegateComponent_CallActorDelegate");
static_assert(offsetof(TngDynamicDelegateComponent_CallActorDelegate, TargetActor) == 0x000000, "Member 'TngDynamicDelegateComponent_CallActorDelegate::TargetActor' has a wrong offset!");
static_assert(offsetof(TngDynamicDelegateComponent_CallActorDelegate, DelegateName) == 0x000008, "Member 'TngDynamicDelegateComponent_CallActorDelegate::DelegateName' has a wrong offset!");
static_assert(offsetof(TngDynamicDelegateComponent_CallActorDelegate, AdvancedData) == 0x000010, "Member 'TngDynamicDelegateComponent_CallActorDelegate::AdvancedData' has a wrong offset!");
static_assert(offsetof(TngDynamicDelegateComponent_CallActorDelegate, ReturnValue) == 0x000018, "Member 'TngDynamicDelegateComponent_CallActorDelegate::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicDelegateComponent.UnbindActorDelegateFromItem
// 0x0020 (0x0020 - 0x0000)
struct TngDynamicDelegateComponent_UnbindActorDelegateFromItem final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DelegateName;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class AActor* DelegateActor, class FName DelegateName, class UObject* AdvancedData)> FunctionItem;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDynamicDelegateComponent_UnbindActorDelegateFromItem) == 0x000008, "Wrong alignment on TngDynamicDelegateComponent_UnbindActorDelegateFromItem");
static_assert(sizeof(TngDynamicDelegateComponent_UnbindActorDelegateFromItem) == 0x000020, "Wrong size on TngDynamicDelegateComponent_UnbindActorDelegateFromItem");
static_assert(offsetof(TngDynamicDelegateComponent_UnbindActorDelegateFromItem, TargetActor) == 0x000000, "Member 'TngDynamicDelegateComponent_UnbindActorDelegateFromItem::TargetActor' has a wrong offset!");
static_assert(offsetof(TngDynamicDelegateComponent_UnbindActorDelegateFromItem, DelegateName) == 0x000008, "Member 'TngDynamicDelegateComponent_UnbindActorDelegateFromItem::DelegateName' has a wrong offset!");
static_assert(offsetof(TngDynamicDelegateComponent_UnbindActorDelegateFromItem, FunctionItem) == 0x000010, "Member 'TngDynamicDelegateComponent_UnbindActorDelegateFromItem::FunctionItem' has a wrong offset!");

// Function TangoLib.TngDynamicDelegateComponent.BindDelegateFromItem
// 0x0018 (0x0018 - 0x0000)
struct TngDynamicDelegateComponent_BindDelegateFromItem final
{
public:
	class FName                                   DelegateName;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class AActor* DelegateActor, class FName DelegateName, class UObject* AdvancedData)> FunctionItem;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDynamicDelegateComponent_BindDelegateFromItem) == 0x000004, "Wrong alignment on TngDynamicDelegateComponent_BindDelegateFromItem");
static_assert(sizeof(TngDynamicDelegateComponent_BindDelegateFromItem) == 0x000018, "Wrong size on TngDynamicDelegateComponent_BindDelegateFromItem");
static_assert(offsetof(TngDynamicDelegateComponent_BindDelegateFromItem, DelegateName) == 0x000000, "Member 'TngDynamicDelegateComponent_BindDelegateFromItem::DelegateName' has a wrong offset!");
static_assert(offsetof(TngDynamicDelegateComponent_BindDelegateFromItem, FunctionItem) == 0x000008, "Member 'TngDynamicDelegateComponent_BindDelegateFromItem::FunctionItem' has a wrong offset!");

// Function TangoLib.TngDynamicDelegateComponent.CallDelegate
// 0x0018 (0x0018 - 0x0000)
struct TngDynamicDelegateComponent_CallDelegate final
{
public:
	class FName                                   DelegateName;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AdvancedData;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDynamicDelegateComponent_CallDelegate) == 0x000008, "Wrong alignment on TngDynamicDelegateComponent_CallDelegate");
static_assert(sizeof(TngDynamicDelegateComponent_CallDelegate) == 0x000018, "Wrong size on TngDynamicDelegateComponent_CallDelegate");
static_assert(offsetof(TngDynamicDelegateComponent_CallDelegate, DelegateName) == 0x000000, "Member 'TngDynamicDelegateComponent_CallDelegate::DelegateName' has a wrong offset!");
static_assert(offsetof(TngDynamicDelegateComponent_CallDelegate, AdvancedData) == 0x000008, "Member 'TngDynamicDelegateComponent_CallDelegate::AdvancedData' has a wrong offset!");
static_assert(offsetof(TngDynamicDelegateComponent_CallDelegate, ReturnValue) == 0x000010, "Member 'TngDynamicDelegateComponent_CallDelegate::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDynamicDelegateComponent.UnbindDelegateFromItem
// 0x0018 (0x0018 - 0x0000)
struct TngDynamicDelegateComponent_UnbindDelegateFromItem final
{
public:
	class FName                                   DelegateName;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class AActor* DelegateActor, class FName DelegateName, class UObject* AdvancedData)> FunctionItem;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDynamicDelegateComponent_UnbindDelegateFromItem) == 0x000004, "Wrong alignment on TngDynamicDelegateComponent_UnbindDelegateFromItem");
static_assert(sizeof(TngDynamicDelegateComponent_UnbindDelegateFromItem) == 0x000018, "Wrong size on TngDynamicDelegateComponent_UnbindDelegateFromItem");
static_assert(offsetof(TngDynamicDelegateComponent_UnbindDelegateFromItem, DelegateName) == 0x000000, "Member 'TngDynamicDelegateComponent_UnbindDelegateFromItem::DelegateName' has a wrong offset!");
static_assert(offsetof(TngDynamicDelegateComponent_UnbindDelegateFromItem, FunctionItem) == 0x000008, "Member 'TngDynamicDelegateComponent_UnbindDelegateFromItem::FunctionItem' has a wrong offset!");

// Function TangoLib.TngAbilityInterface.Blueprint_GetAbilityListForReceive
// 0x0028 (0x0028 - 0x0000)
struct TngAbilityInterface_Blueprint_GetAbilityListForReceive final
{
public:
	class UObject*                                Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAbilityInterface_Blueprint_GetAbilityListForReceive) == 0x000008, "Wrong alignment on TngAbilityInterface_Blueprint_GetAbilityListForReceive");
static_assert(sizeof(TngAbilityInterface_Blueprint_GetAbilityListForReceive) == 0x000028, "Wrong size on TngAbilityInterface_Blueprint_GetAbilityListForReceive");
static_assert(offsetof(TngAbilityInterface_Blueprint_GetAbilityListForReceive, Sender) == 0x000000, "Member 'TngAbilityInterface_Blueprint_GetAbilityListForReceive::Sender' has a wrong offset!");
static_assert(offsetof(TngAbilityInterface_Blueprint_GetAbilityListForReceive, ReturnValue) == 0x000008, "Member 'TngAbilityInterface_Blueprint_GetAbilityListForReceive::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAbilityInterface.Blueprint_InvokeAbility
// 0x0028 (0x0028 - 0x0000)
struct TngAbilityInterface_Blueprint_InvokeAbility final
{
public:
	class UObject*                                Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Receiver;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InvokeTag;                                         // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AdvanceParam;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngAbilityInterface_Blueprint_InvokeAbility) == 0x000008, "Wrong alignment on TngAbilityInterface_Blueprint_InvokeAbility");
static_assert(sizeof(TngAbilityInterface_Blueprint_InvokeAbility) == 0x000028, "Wrong size on TngAbilityInterface_Blueprint_InvokeAbility");
static_assert(offsetof(TngAbilityInterface_Blueprint_InvokeAbility, Sender) == 0x000000, "Member 'TngAbilityInterface_Blueprint_InvokeAbility::Sender' has a wrong offset!");
static_assert(offsetof(TngAbilityInterface_Blueprint_InvokeAbility, Receiver) == 0x000008, "Member 'TngAbilityInterface_Blueprint_InvokeAbility::Receiver' has a wrong offset!");
static_assert(offsetof(TngAbilityInterface_Blueprint_InvokeAbility, InvokeTag) == 0x000010, "Member 'TngAbilityInterface_Blueprint_InvokeAbility::InvokeTag' has a wrong offset!");
static_assert(offsetof(TngAbilityInterface_Blueprint_InvokeAbility, AdvanceParam) == 0x000018, "Member 'TngAbilityInterface_Blueprint_InvokeAbility::AdvanceParam' has a wrong offset!");
static_assert(offsetof(TngAbilityInterface_Blueprint_InvokeAbility, ReturnValue) == 0x000020, "Member 'TngAbilityInterface_Blueprint_InvokeAbility::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipRelevantInterface.BlueprintNative_BeginAttack
// 0x0001 (0x0001 - 0x0000)
struct TngEquipRelevantInterface_BlueprintNative_BeginAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipRelevantInterface_BlueprintNative_BeginAttack) == 0x000001, "Wrong alignment on TngEquipRelevantInterface_BlueprintNative_BeginAttack");
static_assert(sizeof(TngEquipRelevantInterface_BlueprintNative_BeginAttack) == 0x000001, "Wrong size on TngEquipRelevantInterface_BlueprintNative_BeginAttack");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_BeginAttack, ReturnValue) == 0x000000, "Member 'TngEquipRelevantInterface_BlueprintNative_BeginAttack::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipRelevantInterface.BlueprintNative_ChangeAttackMode
// 0x0008 (0x0008 - 0x0000)
struct TngEquipRelevantInterface_BlueprintNative_ChangeAttackMode final
{
public:
	int32                                         AttackModeNo;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngEquipRelevantInterface_BlueprintNative_ChangeAttackMode) == 0x000004, "Wrong alignment on TngEquipRelevantInterface_BlueprintNative_ChangeAttackMode");
static_assert(sizeof(TngEquipRelevantInterface_BlueprintNative_ChangeAttackMode) == 0x000008, "Wrong size on TngEquipRelevantInterface_BlueprintNative_ChangeAttackMode");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_ChangeAttackMode, AttackModeNo) == 0x000000, "Member 'TngEquipRelevantInterface_BlueprintNative_ChangeAttackMode::AttackModeNo' has a wrong offset!");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_ChangeAttackMode, ReturnValue) == 0x000004, "Member 'TngEquipRelevantInterface_BlueprintNative_ChangeAttackMode::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipRelevantInterface.BlueprintNative_ChargeAttack
// 0x0001 (0x0001 - 0x0000)
struct TngEquipRelevantInterface_BlueprintNative_ChargeAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipRelevantInterface_BlueprintNative_ChargeAttack) == 0x000001, "Wrong alignment on TngEquipRelevantInterface_BlueprintNative_ChargeAttack");
static_assert(sizeof(TngEquipRelevantInterface_BlueprintNative_ChargeAttack) == 0x000001, "Wrong size on TngEquipRelevantInterface_BlueprintNative_ChargeAttack");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_ChargeAttack, ReturnValue) == 0x000000, "Member 'TngEquipRelevantInterface_BlueprintNative_ChargeAttack::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipRelevantInterface.BlueprintNative_Drop
// 0x0001 (0x0001 - 0x0000)
struct TngEquipRelevantInterface_BlueprintNative_Drop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipRelevantInterface_BlueprintNative_Drop) == 0x000001, "Wrong alignment on TngEquipRelevantInterface_BlueprintNative_Drop");
static_assert(sizeof(TngEquipRelevantInterface_BlueprintNative_Drop) == 0x000001, "Wrong size on TngEquipRelevantInterface_BlueprintNative_Drop");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_Drop, ReturnValue) == 0x000000, "Member 'TngEquipRelevantInterface_BlueprintNative_Drop::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipRelevantInterface.BlueprintNative_EndAttack
// 0x0001 (0x0001 - 0x0000)
struct TngEquipRelevantInterface_BlueprintNative_EndAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipRelevantInterface_BlueprintNative_EndAttack) == 0x000001, "Wrong alignment on TngEquipRelevantInterface_BlueprintNative_EndAttack");
static_assert(sizeof(TngEquipRelevantInterface_BlueprintNative_EndAttack) == 0x000001, "Wrong size on TngEquipRelevantInterface_BlueprintNative_EndAttack");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_EndAttack, ReturnValue) == 0x000000, "Member 'TngEquipRelevantInterface_BlueprintNative_EndAttack::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipRelevantInterface.BlueprintNative_Equip
// 0x0018 (0x0018 - 0x0000)
struct TngEquipRelevantInterface_BlueprintNative_Equip final
{
public:
	class AActor*                                 ToActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngEquipRelevantInterface_BlueprintNative_Equip) == 0x000008, "Wrong alignment on TngEquipRelevantInterface_BlueprintNative_Equip");
static_assert(sizeof(TngEquipRelevantInterface_BlueprintNative_Equip) == 0x000018, "Wrong size on TngEquipRelevantInterface_BlueprintNative_Equip");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_Equip, ToActor) == 0x000000, "Member 'TngEquipRelevantInterface_BlueprintNative_Equip::ToActor' has a wrong offset!");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_Equip, SocketName) == 0x000008, "Member 'TngEquipRelevantInterface_BlueprintNative_Equip::SocketName' has a wrong offset!");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_Equip, ReturnValue) == 0x000010, "Member 'TngEquipRelevantInterface_BlueprintNative_Equip::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipRelevantInterface.BlueprintNative_GetActionTags
// 0x0028 (0x0028 - 0x0000)
struct TngEquipRelevantInterface_BlueprintNative_GetActionTags final
{
public:
	class AActor*                                 SendActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GetTags;                                           // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipRelevantInterface_BlueprintNative_GetActionTags) == 0x000008, "Wrong alignment on TngEquipRelevantInterface_BlueprintNative_GetActionTags");
static_assert(sizeof(TngEquipRelevantInterface_BlueprintNative_GetActionTags) == 0x000028, "Wrong size on TngEquipRelevantInterface_BlueprintNative_GetActionTags");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_GetActionTags, SendActor) == 0x000000, "Member 'TngEquipRelevantInterface_BlueprintNative_GetActionTags::SendActor' has a wrong offset!");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_GetActionTags, GetTags) == 0x000008, "Member 'TngEquipRelevantInterface_BlueprintNative_GetActionTags::GetTags' has a wrong offset!");

// Function TangoLib.TngEquipRelevantInterface.BlueprintNative_GetConditionTags
// 0x0028 (0x0028 - 0x0000)
struct TngEquipRelevantInterface_BlueprintNative_GetConditionTags final
{
public:
	class AActor*                                 SendActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GetTags;                                           // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipRelevantInterface_BlueprintNative_GetConditionTags) == 0x000008, "Wrong alignment on TngEquipRelevantInterface_BlueprintNative_GetConditionTags");
static_assert(sizeof(TngEquipRelevantInterface_BlueprintNative_GetConditionTags) == 0x000028, "Wrong size on TngEquipRelevantInterface_BlueprintNative_GetConditionTags");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_GetConditionTags, SendActor) == 0x000000, "Member 'TngEquipRelevantInterface_BlueprintNative_GetConditionTags::SendActor' has a wrong offset!");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_GetConditionTags, GetTags) == 0x000008, "Member 'TngEquipRelevantInterface_BlueprintNative_GetConditionTags::GetTags' has a wrong offset!");

// Function TangoLib.TngEquipRelevantInterface.BlueprintNative_ReloadAttack
// 0x0001 (0x0001 - 0x0000)
struct TngEquipRelevantInterface_BlueprintNative_ReloadAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipRelevantInterface_BlueprintNative_ReloadAttack) == 0x000001, "Wrong alignment on TngEquipRelevantInterface_BlueprintNative_ReloadAttack");
static_assert(sizeof(TngEquipRelevantInterface_BlueprintNative_ReloadAttack) == 0x000001, "Wrong size on TngEquipRelevantInterface_BlueprintNative_ReloadAttack");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_ReloadAttack, ReturnValue) == 0x000000, "Member 'TngEquipRelevantInterface_BlueprintNative_ReloadAttack::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipRelevantInterface.BlueprintNative_SendActionTag
// 0x0018 (0x0018 - 0x0000)
struct TngEquipRelevantInterface_BlueprintNative_SendActionTag final
{
public:
	class AActor*                                 SendActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SendTag;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngEquipRelevantInterface_BlueprintNative_SendActionTag) == 0x000008, "Wrong alignment on TngEquipRelevantInterface_BlueprintNative_SendActionTag");
static_assert(sizeof(TngEquipRelevantInterface_BlueprintNative_SendActionTag) == 0x000018, "Wrong size on TngEquipRelevantInterface_BlueprintNative_SendActionTag");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_SendActionTag, SendActor) == 0x000000, "Member 'TngEquipRelevantInterface_BlueprintNative_SendActionTag::SendActor' has a wrong offset!");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_SendActionTag, SendTag) == 0x000008, "Member 'TngEquipRelevantInterface_BlueprintNative_SendActionTag::SendTag' has a wrong offset!");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_SendActionTag, ReturnValue) == 0x000010, "Member 'TngEquipRelevantInterface_BlueprintNative_SendActionTag::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipRelevantInterface.BlueprintNative_SetAmmoInfinite
// 0x0002 (0x0002 - 0x0000)
struct TngEquipRelevantInterface_BlueprintNative_SetAmmoInfinite final
{
public:
	bool                                          NewInfinite;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipRelevantInterface_BlueprintNative_SetAmmoInfinite) == 0x000001, "Wrong alignment on TngEquipRelevantInterface_BlueprintNative_SetAmmoInfinite");
static_assert(sizeof(TngEquipRelevantInterface_BlueprintNative_SetAmmoInfinite) == 0x000002, "Wrong size on TngEquipRelevantInterface_BlueprintNative_SetAmmoInfinite");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_SetAmmoInfinite, NewInfinite) == 0x000000, "Member 'TngEquipRelevantInterface_BlueprintNative_SetAmmoInfinite::NewInfinite' has a wrong offset!");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_SetAmmoInfinite, ReturnValue) == 0x000001, "Member 'TngEquipRelevantInterface_BlueprintNative_SetAmmoInfinite::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipRelevantInterface.BlueprintNative_SetPrecisionLevel
// 0x0008 (0x0008 - 0x0000)
struct TngEquipRelevantInterface_BlueprintNative_SetPrecisionLevel final
{
public:
	float                                         NewPrecisionLevel;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngEquipRelevantInterface_BlueprintNative_SetPrecisionLevel) == 0x000004, "Wrong alignment on TngEquipRelevantInterface_BlueprintNative_SetPrecisionLevel");
static_assert(sizeof(TngEquipRelevantInterface_BlueprintNative_SetPrecisionLevel) == 0x000008, "Wrong size on TngEquipRelevantInterface_BlueprintNative_SetPrecisionLevel");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_SetPrecisionLevel, NewPrecisionLevel) == 0x000000, "Member 'TngEquipRelevantInterface_BlueprintNative_SetPrecisionLevel::NewPrecisionLevel' has a wrong offset!");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_SetPrecisionLevel, ReturnValue) == 0x000004, "Member 'TngEquipRelevantInterface_BlueprintNative_SetPrecisionLevel::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipRelevantInterface.BlueprintNative_SetVisible
// 0x0002 (0x0002 - 0x0000)
struct TngEquipRelevantInterface_BlueprintNative_SetVisible final
{
public:
	bool                                          NewVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipRelevantInterface_BlueprintNative_SetVisible) == 0x000001, "Wrong alignment on TngEquipRelevantInterface_BlueprintNative_SetVisible");
static_assert(sizeof(TngEquipRelevantInterface_BlueprintNative_SetVisible) == 0x000002, "Wrong size on TngEquipRelevantInterface_BlueprintNative_SetVisible");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_SetVisible, NewVisible) == 0x000000, "Member 'TngEquipRelevantInterface_BlueprintNative_SetVisible::NewVisible' has a wrong offset!");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_SetVisible, ReturnValue) == 0x000001, "Member 'TngEquipRelevantInterface_BlueprintNative_SetVisible::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipRelevantInterface.BlueprintNative_Unequip
// 0x0001 (0x0001 - 0x0000)
struct TngEquipRelevantInterface_BlueprintNative_Unequip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipRelevantInterface_BlueprintNative_Unequip) == 0x000001, "Wrong alignment on TngEquipRelevantInterface_BlueprintNative_Unequip");
static_assert(sizeof(TngEquipRelevantInterface_BlueprintNative_Unequip) == 0x000001, "Wrong size on TngEquipRelevantInterface_BlueprintNative_Unequip");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_Unequip, ReturnValue) == 0x000000, "Member 'TngEquipRelevantInterface_BlueprintNative_Unequip::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipRelevantInterface.BlueprintNative_GetCondition
// 0x0014 (0x0014 - 0x0000)
struct TngEquipRelevantInterface_BlueprintNative_GetCondition final
{
public:
	int32                                         AttackModeNo;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTngEquipCondition                     Condition;                                         // 0x0004(0x000C)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngEquipRelevantInterface_BlueprintNative_GetCondition) == 0x000004, "Wrong alignment on TngEquipRelevantInterface_BlueprintNative_GetCondition");
static_assert(sizeof(TngEquipRelevantInterface_BlueprintNative_GetCondition) == 0x000014, "Wrong size on TngEquipRelevantInterface_BlueprintNative_GetCondition");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_GetCondition, AttackModeNo) == 0x000000, "Member 'TngEquipRelevantInterface_BlueprintNative_GetCondition::AttackModeNo' has a wrong offset!");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_GetCondition, Condition) == 0x000004, "Member 'TngEquipRelevantInterface_BlueprintNative_GetCondition::Condition' has a wrong offset!");
static_assert(offsetof(TngEquipRelevantInterface_BlueprintNative_GetCondition, ReturnValue) == 0x000010, "Member 'TngEquipRelevantInterface_BlueprintNative_GetCondition::ReturnValue' has a wrong offset!");

// Function TangoLib.TngStateItem.Blueprint_BeginState
// 0x0008 (0x0008 - 0x0000)
struct TngStateItem_Blueprint_BeginState final
{
public:
	class FName                                   PrevState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngStateItem_Blueprint_BeginState) == 0x000004, "Wrong alignment on TngStateItem_Blueprint_BeginState");
static_assert(sizeof(TngStateItem_Blueprint_BeginState) == 0x000008, "Wrong size on TngStateItem_Blueprint_BeginState");
static_assert(offsetof(TngStateItem_Blueprint_BeginState, PrevState) == 0x000000, "Member 'TngStateItem_Blueprint_BeginState::PrevState' has a wrong offset!");

// Function TangoLib.TngStateItem.Blueprint_CheckIntercept
// 0x000C (0x000C - 0x0000)
struct TngStateItem_Blueprint_CheckIntercept final
{
public:
	class FName                                   State;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngStateItem_Blueprint_CheckIntercept) == 0x000004, "Wrong alignment on TngStateItem_Blueprint_CheckIntercept");
static_assert(sizeof(TngStateItem_Blueprint_CheckIntercept) == 0x00000C, "Wrong size on TngStateItem_Blueprint_CheckIntercept");
static_assert(offsetof(TngStateItem_Blueprint_CheckIntercept, State) == 0x000000, "Member 'TngStateItem_Blueprint_CheckIntercept::State' has a wrong offset!");
static_assert(offsetof(TngStateItem_Blueprint_CheckIntercept, ReturnValue) == 0x000008, "Member 'TngStateItem_Blueprint_CheckIntercept::ReturnValue' has a wrong offset!");

// Function TangoLib.TngStateItem.Blueprint_EndState
// 0x0008 (0x0008 - 0x0000)
struct TngStateItem_Blueprint_EndState final
{
public:
	class FName                                   NextState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngStateItem_Blueprint_EndState) == 0x000004, "Wrong alignment on TngStateItem_Blueprint_EndState");
static_assert(sizeof(TngStateItem_Blueprint_EndState) == 0x000008, "Wrong size on TngStateItem_Blueprint_EndState");
static_assert(offsetof(TngStateItem_Blueprint_EndState, NextState) == 0x000000, "Member 'TngStateItem_Blueprint_EndState::NextState' has a wrong offset!");

// Function TangoLib.TngStateItem.Blueprint_UpdateState
// 0x0004 (0x0004 - 0x0000)
struct TngStateItem_Blueprint_UpdateState final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngStateItem_Blueprint_UpdateState) == 0x000004, "Wrong alignment on TngStateItem_Blueprint_UpdateState");
static_assert(sizeof(TngStateItem_Blueprint_UpdateState) == 0x000004, "Wrong size on TngStateItem_Blueprint_UpdateState");
static_assert(offsetof(TngStateItem_Blueprint_UpdateState, DeltaTime) == 0x000000, "Member 'TngStateItem_Blueprint_UpdateState::DeltaTime' has a wrong offset!");

// Function TangoLib.TngStateItem.GetCurrentStateName
// 0x0010 (0x0010 - 0x0000)
struct TngStateItem_GetCurrentStateName final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngStateItem_GetCurrentStateName) == 0x000004, "Wrong alignment on TngStateItem_GetCurrentStateName");
static_assert(sizeof(TngStateItem_GetCurrentStateName) == 0x000010, "Wrong size on TngStateItem_GetCurrentStateName");
static_assert(offsetof(TngStateItem_GetCurrentStateName, SlotName) == 0x000000, "Member 'TngStateItem_GetCurrentStateName::SlotName' has a wrong offset!");
static_assert(offsetof(TngStateItem_GetCurrentStateName, ReturnValue) == 0x000008, "Member 'TngStateItem_GetCurrentStateName::ReturnValue' has a wrong offset!");

// Function TangoLib.TngStateItem.GetOwner
// 0x0008 (0x0008 - 0x0000)
struct TngStateItem_GetOwner final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngStateItem_GetOwner) == 0x000008, "Wrong alignment on TngStateItem_GetOwner");
static_assert(sizeof(TngStateItem_GetOwner) == 0x000008, "Wrong size on TngStateItem_GetOwner");
static_assert(offsetof(TngStateItem_GetOwner, ReturnValue) == 0x000000, "Member 'TngStateItem_GetOwner::ReturnValue' has a wrong offset!");

// Function TangoLib.TngStateItem.GetOwnerActorClass
// 0x0010 (0x0010 - 0x0000)
struct TngStateItem_GetOwnerActorClass final
{
public:
	TSubclassOf<class AActor>                     ClassType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngStateItem_GetOwnerActorClass) == 0x000008, "Wrong alignment on TngStateItem_GetOwnerActorClass");
static_assert(sizeof(TngStateItem_GetOwnerActorClass) == 0x000010, "Wrong size on TngStateItem_GetOwnerActorClass");
static_assert(offsetof(TngStateItem_GetOwnerActorClass, ClassType) == 0x000000, "Member 'TngStateItem_GetOwnerActorClass::ClassType' has a wrong offset!");
static_assert(offsetof(TngStateItem_GetOwnerActorClass, ReturnValue) == 0x000008, "Member 'TngStateItem_GetOwnerActorClass::ReturnValue' has a wrong offset!");

// Function TangoLib.TngStateItem.GetOwnerComponent
// 0x0008 (0x0008 - 0x0000)
struct TngStateItem_GetOwnerComponent final
{
public:
	class UTngStateCoordinateComponent*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngStateItem_GetOwnerComponent) == 0x000008, "Wrong alignment on TngStateItem_GetOwnerComponent");
static_assert(sizeof(TngStateItem_GetOwnerComponent) == 0x000008, "Wrong size on TngStateItem_GetOwnerComponent");
static_assert(offsetof(TngStateItem_GetOwnerComponent, ReturnValue) == 0x000000, "Member 'TngStateItem_GetOwnerComponent::ReturnValue' has a wrong offset!");

// Function TangoLib.TngStateItem.GetOwnerComponentClass
// 0x0010 (0x0010 - 0x0000)
struct TngStateItem_GetOwnerComponentClass final
{
public:
	TSubclassOf<class UActorComponent>            ClassType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngStateItem_GetOwnerComponentClass) == 0x000008, "Wrong alignment on TngStateItem_GetOwnerComponentClass");
static_assert(sizeof(TngStateItem_GetOwnerComponentClass) == 0x000010, "Wrong size on TngStateItem_GetOwnerComponentClass");
static_assert(offsetof(TngStateItem_GetOwnerComponentClass, ClassType) == 0x000000, "Member 'TngStateItem_GetOwnerComponentClass::ClassType' has a wrong offset!");
static_assert(offsetof(TngStateItem_GetOwnerComponentClass, ReturnValue) == 0x000008, "Member 'TngStateItem_GetOwnerComponentClass::ReturnValue' has a wrong offset!");

// Function TangoLib.TngStateItem.SetFinish
// 0x0001 (0x0001 - 0x0000)
struct TngStateItem_SetFinish final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngStateItem_SetFinish) == 0x000001, "Wrong alignment on TngStateItem_SetFinish");
static_assert(sizeof(TngStateItem_SetFinish) == 0x000001, "Wrong size on TngStateItem_SetFinish");
static_assert(offsetof(TngStateItem_SetFinish, Flag) == 0x000000, "Member 'TngStateItem_SetFinish::Flag' has a wrong offset!");

// Function TangoLib.TngStateItem.SetFinishAndNextState
// 0x0008 (0x0008 - 0x0000)
struct TngStateItem_SetFinishAndNextState final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngStateItem_SetFinishAndNextState) == 0x000004, "Wrong alignment on TngStateItem_SetFinishAndNextState");
static_assert(sizeof(TngStateItem_SetFinishAndNextState) == 0x000008, "Wrong size on TngStateItem_SetFinishAndNextState");
static_assert(offsetof(TngStateItem_SetFinishAndNextState, Name_0) == 0x000000, "Member 'TngStateItem_SetFinishAndNextState::Name_0' has a wrong offset!");

// Function TangoLib.TngStateItem.SetPassive
// 0x0001 (0x0001 - 0x0000)
struct TngStateItem_SetPassive final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngStateItem_SetPassive) == 0x000001, "Wrong alignment on TngStateItem_SetPassive");
static_assert(sizeof(TngStateItem_SetPassive) == 0x000001, "Wrong size on TngStateItem_SetPassive");
static_assert(offsetof(TngStateItem_SetPassive, Flag) == 0x000000, "Member 'TngStateItem_SetPassive::Flag' has a wrong offset!");

// Function TangoLib.TngStateItem.SetRemove
// 0x0001 (0x0001 - 0x0000)
struct TngStateItem_SetRemove final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngStateItem_SetRemove) == 0x000001, "Wrong alignment on TngStateItem_SetRemove");
static_assert(sizeof(TngStateItem_SetRemove) == 0x000001, "Wrong size on TngStateItem_SetRemove");
static_assert(offsetof(TngStateItem_SetRemove, Flag) == 0x000000, "Member 'TngStateItem_SetRemove::Flag' has a wrong offset!");

// Function TangoLib.TngAIPerceptionComponent.FindDamageStimulus
// 0x0060 (0x0060 - 0x0000)
struct TngAIPerceptionComponent_FindDamageStimulus final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTngDamageStimulus                     DamageStimulus;                                    // 0x0008(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          Succeeded;                                         // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngAIPerceptionComponent_FindDamageStimulus) == 0x000008, "Wrong alignment on TngAIPerceptionComponent_FindDamageStimulus");
static_assert(sizeof(TngAIPerceptionComponent_FindDamageStimulus) == 0x000060, "Wrong size on TngAIPerceptionComponent_FindDamageStimulus");
static_assert(offsetof(TngAIPerceptionComponent_FindDamageStimulus, ID) == 0x000000, "Member 'TngAIPerceptionComponent_FindDamageStimulus::ID' has a wrong offset!");
static_assert(offsetof(TngAIPerceptionComponent_FindDamageStimulus, DamageStimulus) == 0x000008, "Member 'TngAIPerceptionComponent_FindDamageStimulus::DamageStimulus' has a wrong offset!");
static_assert(offsetof(TngAIPerceptionComponent_FindDamageStimulus, Succeeded) == 0x000058, "Member 'TngAIPerceptionComponent_FindDamageStimulus::Succeeded' has a wrong offset!");

// Function TangoLib.TngEffectActor.IsActiveEffect
// 0x0001 (0x0001 - 0x0000)
struct TngEffectActor_IsActiveEffect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEffectActor_IsActiveEffect) == 0x000001, "Wrong alignment on TngEffectActor_IsActiveEffect");
static_assert(sizeof(TngEffectActor_IsActiveEffect) == 0x000001, "Wrong size on TngEffectActor_IsActiveEffect");
static_assert(offsetof(TngEffectActor_IsActiveEffect, ReturnValue) == 0x000000, "Member 'TngEffectActor_IsActiveEffect::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEffectActor.StartEffect
// 0x0010 (0x0010 - 0x0000)
struct TngEffectActor_StartEffect final
{
public:
	class UTngEffectAsset*                        EffectAsset;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleSortPriority;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngEffectActor_StartEffect) == 0x000008, "Wrong alignment on TngEffectActor_StartEffect");
static_assert(sizeof(TngEffectActor_StartEffect) == 0x000010, "Wrong size on TngEffectActor_StartEffect");
static_assert(offsetof(TngEffectActor_StartEffect, EffectAsset) == 0x000000, "Member 'TngEffectActor_StartEffect::EffectAsset' has a wrong offset!");
static_assert(offsetof(TngEffectActor_StartEffect, ParticleSortPriority) == 0x000008, "Member 'TngEffectActor_StartEffect::ParticleSortPriority' has a wrong offset!");

// Function TangoLib.TngEffectActor.GetEffectComponent
// 0x0008 (0x0008 - 0x0000)
struct TngEffectActor_GetEffectComponent final
{
public:
	class UTngEffectComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEffectActor_GetEffectComponent) == 0x000008, "Wrong alignment on TngEffectActor_GetEffectComponent");
static_assert(sizeof(TngEffectActor_GetEffectComponent) == 0x000008, "Wrong size on TngEffectActor_GetEffectComponent");
static_assert(offsetof(TngEffectActor_GetEffectComponent, ReturnValue) == 0x000000, "Member 'TngEffectActor_GetEffectComponent::ReturnValue' has a wrong offset!");

// Function TangoLib.TngGameSystem.Blueprint_DisplayDebug
// 0x0008 (0x0008 - 0x0000)
struct TngGameSystem_Blueprint_DisplayDebug final
{
public:
	class UCanvas*                                Canvas;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGameSystem_Blueprint_DisplayDebug) == 0x000008, "Wrong alignment on TngGameSystem_Blueprint_DisplayDebug");
static_assert(sizeof(TngGameSystem_Blueprint_DisplayDebug) == 0x000008, "Wrong size on TngGameSystem_Blueprint_DisplayDebug");
static_assert(offsetof(TngGameSystem_Blueprint_DisplayDebug, Canvas) == 0x000000, "Member 'TngGameSystem_Blueprint_DisplayDebug::Canvas' has a wrong offset!");

// Function TangoLib.TngGameSystem.Blueprint_LevelChanged
// 0x0010 (0x0010 - 0x0000)
struct TngGameSystem_Blueprint_LevelChanged final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGameSystem_Blueprint_LevelChanged) == 0x000008, "Wrong alignment on TngGameSystem_Blueprint_LevelChanged");
static_assert(sizeof(TngGameSystem_Blueprint_LevelChanged) == 0x000010, "Wrong size on TngGameSystem_Blueprint_LevelChanged");
static_assert(offsetof(TngGameSystem_Blueprint_LevelChanged, LevelName) == 0x000000, "Member 'TngGameSystem_Blueprint_LevelChanged::LevelName' has a wrong offset!");

// Function TangoLib.TngGameSystem.Blueprint_PostUpdate
// 0x0004 (0x0004 - 0x0000)
struct TngGameSystem_Blueprint_PostUpdate final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGameSystem_Blueprint_PostUpdate) == 0x000004, "Wrong alignment on TngGameSystem_Blueprint_PostUpdate");
static_assert(sizeof(TngGameSystem_Blueprint_PostUpdate) == 0x000004, "Wrong size on TngGameSystem_Blueprint_PostUpdate");
static_assert(offsetof(TngGameSystem_Blueprint_PostUpdate, DeltaSeconds) == 0x000000, "Member 'TngGameSystem_Blueprint_PostUpdate::DeltaSeconds' has a wrong offset!");

// Function TangoLib.TngGameSystem.Blueprint_PreUpdate
// 0x0004 (0x0004 - 0x0000)
struct TngGameSystem_Blueprint_PreUpdate final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGameSystem_Blueprint_PreUpdate) == 0x000004, "Wrong alignment on TngGameSystem_Blueprint_PreUpdate");
static_assert(sizeof(TngGameSystem_Blueprint_PreUpdate) == 0x000004, "Wrong size on TngGameSystem_Blueprint_PreUpdate");
static_assert(offsetof(TngGameSystem_Blueprint_PreUpdate, DeltaSeconds) == 0x000000, "Member 'TngGameSystem_Blueprint_PreUpdate::DeltaSeconds' has a wrong offset!");

// Function TangoLib.TngGameSystem.GetOwnerGameInstance
// 0x0008 (0x0008 - 0x0000)
struct TngGameSystem_GetOwnerGameInstance final
{
public:
	class UTngGameInstance*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGameSystem_GetOwnerGameInstance) == 0x000008, "Wrong alignment on TngGameSystem_GetOwnerGameInstance");
static_assert(sizeof(TngGameSystem_GetOwnerGameInstance) == 0x000008, "Wrong size on TngGameSystem_GetOwnerGameInstance");
static_assert(offsetof(TngGameSystem_GetOwnerGameInstance, ReturnValue) == 0x000000, "Member 'TngGameSystem_GetOwnerGameInstance::ReturnValue' has a wrong offset!");

// Function TangoLib.TngSaveLoadSystem.LoadActorProperties
// 0x0010 (0x0010 - 0x0000)
struct TngSaveLoadSystem_LoadActorProperties final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckTag;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngSaveLoadSystem_LoadActorProperties) == 0x000008, "Wrong alignment on TngSaveLoadSystem_LoadActorProperties");
static_assert(sizeof(TngSaveLoadSystem_LoadActorProperties) == 0x000010, "Wrong size on TngSaveLoadSystem_LoadActorProperties");
static_assert(offsetof(TngSaveLoadSystem_LoadActorProperties, Actor) == 0x000000, "Member 'TngSaveLoadSystem_LoadActorProperties::Actor' has a wrong offset!");
static_assert(offsetof(TngSaveLoadSystem_LoadActorProperties, CheckTag) == 0x000008, "Member 'TngSaveLoadSystem_LoadActorProperties::CheckTag' has a wrong offset!");

// Function TangoLib.TngSaveLoadSystem.SaveActorProperties
// 0x0010 (0x0010 - 0x0000)
struct TngSaveLoadSystem_SaveActorProperties final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckTag;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngSaveLoadSystem_SaveActorProperties) == 0x000008, "Wrong alignment on TngSaveLoadSystem_SaveActorProperties");
static_assert(sizeof(TngSaveLoadSystem_SaveActorProperties) == 0x000010, "Wrong size on TngSaveLoadSystem_SaveActorProperties");
static_assert(offsetof(TngSaveLoadSystem_SaveActorProperties, Actor) == 0x000000, "Member 'TngSaveLoadSystem_SaveActorProperties::Actor' has a wrong offset!");
static_assert(offsetof(TngSaveLoadSystem_SaveActorProperties, CheckTag) == 0x000008, "Member 'TngSaveLoadSystem_SaveActorProperties::CheckTag' has a wrong offset!");

// Function TangoLib.TngEffectAsset.StartEffect
// 0x0018 (0x0018 - 0x0000)
struct TngEffectAsset_StartEffect final
{
public:
	class USceneComponent*                        AttachComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFollow;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachName;                                        // 0x000C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleSortPriority;                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEffectAsset_StartEffect) == 0x000008, "Wrong alignment on TngEffectAsset_StartEffect");
static_assert(sizeof(TngEffectAsset_StartEffect) == 0x000018, "Wrong size on TngEffectAsset_StartEffect");
static_assert(offsetof(TngEffectAsset_StartEffect, AttachComponent) == 0x000000, "Member 'TngEffectAsset_StartEffect::AttachComponent' has a wrong offset!");
static_assert(offsetof(TngEffectAsset_StartEffect, bFollow) == 0x000008, "Member 'TngEffectAsset_StartEffect::bFollow' has a wrong offset!");
static_assert(offsetof(TngEffectAsset_StartEffect, AttachName) == 0x00000C, "Member 'TngEffectAsset_StartEffect::AttachName' has a wrong offset!");
static_assert(offsetof(TngEffectAsset_StartEffect, ParticleSortPriority) == 0x000014, "Member 'TngEffectAsset_StartEffect::ParticleSortPriority' has a wrong offset!");

// Function TangoLib.TngEffectAsset.StartEffectAtTransform
// 0x0050 (0x0050 - 0x0000)
struct TngEffectAsset_StartEffectAtTransform final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ParticleSortPriority;                              // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngEffectAsset_StartEffectAtTransform) == 0x000010, "Wrong alignment on TngEffectAsset_StartEffectAtTransform");
static_assert(sizeof(TngEffectAsset_StartEffectAtTransform) == 0x000050, "Wrong size on TngEffectAsset_StartEffectAtTransform");
static_assert(offsetof(TngEffectAsset_StartEffectAtTransform, WorldContextObject) == 0x000000, "Member 'TngEffectAsset_StartEffectAtTransform::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngEffectAsset_StartEffectAtTransform, Transform) == 0x000010, "Member 'TngEffectAsset_StartEffectAtTransform::Transform' has a wrong offset!");
static_assert(offsetof(TngEffectAsset_StartEffectAtTransform, ParticleSortPriority) == 0x000040, "Member 'TngEffectAsset_StartEffectAtTransform::ParticleSortPriority' has a wrong offset!");

// Function TangoLib.TngEffectAsset.StartEffectToAttach
// 0x0050 (0x0050 - 0x0000)
struct TngEffectAsset_StartEffectToAttach final
{
public:
	class USceneComponent*                        AttachComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachName;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Offset;                                            // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ParticleSortPriority;                              // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngEffectAsset_StartEffectToAttach) == 0x000010, "Wrong alignment on TngEffectAsset_StartEffectToAttach");
static_assert(sizeof(TngEffectAsset_StartEffectToAttach) == 0x000050, "Wrong size on TngEffectAsset_StartEffectToAttach");
static_assert(offsetof(TngEffectAsset_StartEffectToAttach, AttachComponent) == 0x000000, "Member 'TngEffectAsset_StartEffectToAttach::AttachComponent' has a wrong offset!");
static_assert(offsetof(TngEffectAsset_StartEffectToAttach, AttachName) == 0x000008, "Member 'TngEffectAsset_StartEffectToAttach::AttachName' has a wrong offset!");
static_assert(offsetof(TngEffectAsset_StartEffectToAttach, Offset) == 0x000010, "Member 'TngEffectAsset_StartEffectToAttach::Offset' has a wrong offset!");
static_assert(offsetof(TngEffectAsset_StartEffectToAttach, ParticleSortPriority) == 0x000040, "Member 'TngEffectAsset_StartEffectToAttach::ParticleSortPriority' has a wrong offset!");

// Function TangoLib.TngActorFunction.GetActorFeetLocation
// 0x0018 (0x0018 - 0x0000)
struct TngActorFunction_GetActorFeetLocation final
{
public:
	const class AActor*                           TargetActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FeetLocation;                                      // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngActorFunction_GetActorFeetLocation) == 0x000008, "Wrong alignment on TngActorFunction_GetActorFeetLocation");
static_assert(sizeof(TngActorFunction_GetActorFeetLocation) == 0x000018, "Wrong size on TngActorFunction_GetActorFeetLocation");
static_assert(offsetof(TngActorFunction_GetActorFeetLocation, TargetActor) == 0x000000, "Member 'TngActorFunction_GetActorFeetLocation::TargetActor' has a wrong offset!");
static_assert(offsetof(TngActorFunction_GetActorFeetLocation, FeetLocation) == 0x000008, "Member 'TngActorFunction_GetActorFeetLocation::FeetLocation' has a wrong offset!");

// Function TangoLib.TngActorFunction.GetAIInvalidLocation
// 0x000C (0x000C - 0x0000)
struct TngActorFunction_GetAIInvalidLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngActorFunction_GetAIInvalidLocation) == 0x000004, "Wrong alignment on TngActorFunction_GetAIInvalidLocation");
static_assert(sizeof(TngActorFunction_GetAIInvalidLocation) == 0x00000C, "Wrong size on TngActorFunction_GetAIInvalidLocation");
static_assert(offsetof(TngActorFunction_GetAIInvalidLocation, ReturnValue) == 0x000000, "Member 'TngActorFunction_GetAIInvalidLocation::ReturnValue' has a wrong offset!");

// Function TangoLib.TngActorFunction.GetLocalRotation
// 0x0030 (0x0030 - 0x0000)
struct TngActorFunction_GetLocalRotation final
{
public:
	struct FVector                                OriginLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OriginDirection;                                   // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngActorFunction_GetLocalRotation) == 0x000004, "Wrong alignment on TngActorFunction_GetLocalRotation");
static_assert(sizeof(TngActorFunction_GetLocalRotation) == 0x000030, "Wrong size on TngActorFunction_GetLocalRotation");
static_assert(offsetof(TngActorFunction_GetLocalRotation, OriginLocation) == 0x000000, "Member 'TngActorFunction_GetLocalRotation::OriginLocation' has a wrong offset!");
static_assert(offsetof(TngActorFunction_GetLocalRotation, OriginDirection) == 0x00000C, "Member 'TngActorFunction_GetLocalRotation::OriginDirection' has a wrong offset!");
static_assert(offsetof(TngActorFunction_GetLocalRotation, TargetLocation) == 0x000018, "Member 'TngActorFunction_GetLocalRotation::TargetLocation' has a wrong offset!");
static_assert(offsetof(TngActorFunction_GetLocalRotation, ReturnValue) == 0x000024, "Member 'TngActorFunction_GetLocalRotation::ReturnValue' has a wrong offset!");

// Function TangoLib.TngActorFunction.GetLocalRotationActorToActor
// 0x0020 (0x0020 - 0x0000)
struct TngActorFunction_GetLocalRotationActorToActor final
{
public:
	const class AActor*                           OriginActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           TargetActor;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngActorFunction_GetLocalRotationActorToActor) == 0x000008, "Wrong alignment on TngActorFunction_GetLocalRotationActorToActor");
static_assert(sizeof(TngActorFunction_GetLocalRotationActorToActor) == 0x000020, "Wrong size on TngActorFunction_GetLocalRotationActorToActor");
static_assert(offsetof(TngActorFunction_GetLocalRotationActorToActor, OriginActor) == 0x000000, "Member 'TngActorFunction_GetLocalRotationActorToActor::OriginActor' has a wrong offset!");
static_assert(offsetof(TngActorFunction_GetLocalRotationActorToActor, TargetActor) == 0x000008, "Member 'TngActorFunction_GetLocalRotationActorToActor::TargetActor' has a wrong offset!");
static_assert(offsetof(TngActorFunction_GetLocalRotationActorToActor, ReturnValue) == 0x000010, "Member 'TngActorFunction_GetLocalRotationActorToActor::ReturnValue' has a wrong offset!");

// Function TangoLib.TngActorFunction.GetNearActor
// 0x0020 (0x0020 - 0x0000)
struct TngActorFunction_GetNearActor final
{
public:
	const class AActor*                           TargetActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorList;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngActorFunction_GetNearActor) == 0x000008, "Wrong alignment on TngActorFunction_GetNearActor");
static_assert(sizeof(TngActorFunction_GetNearActor) == 0x000020, "Wrong size on TngActorFunction_GetNearActor");
static_assert(offsetof(TngActorFunction_GetNearActor, TargetActor) == 0x000000, "Member 'TngActorFunction_GetNearActor::TargetActor' has a wrong offset!");
static_assert(offsetof(TngActorFunction_GetNearActor, ActorList) == 0x000008, "Member 'TngActorFunction_GetNearActor::ActorList' has a wrong offset!");
static_assert(offsetof(TngActorFunction_GetNearActor, ReturnValue) == 0x000018, "Member 'TngActorFunction_GetNearActor::ReturnValue' has a wrong offset!");

// Function TangoLib.TngActorFunction.MoveTeleportCharacter
// 0x0018 (0x0018 - 0x0000)
struct TngActorFunction_MoveTeleportCharacter final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SetVec;                                            // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngActorFunction_MoveTeleportCharacter) == 0x000008, "Wrong alignment on TngActorFunction_MoveTeleportCharacter");
static_assert(sizeof(TngActorFunction_MoveTeleportCharacter) == 0x000018, "Wrong size on TngActorFunction_MoveTeleportCharacter");
static_assert(offsetof(TngActorFunction_MoveTeleportCharacter, TargetActor) == 0x000000, "Member 'TngActorFunction_MoveTeleportCharacter::TargetActor' has a wrong offset!");
static_assert(offsetof(TngActorFunction_MoveTeleportCharacter, SetVec) == 0x000008, "Member 'TngActorFunction_MoveTeleportCharacter::SetVec' has a wrong offset!");

// Function TangoLib.TngActorFunction.PointTeleportCharacter
// 0x0018 (0x0018 - 0x0000)
struct TngActorFunction_PointTeleportCharacter final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SetPoint;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngActorFunction_PointTeleportCharacter) == 0x000008, "Wrong alignment on TngActorFunction_PointTeleportCharacter");
static_assert(sizeof(TngActorFunction_PointTeleportCharacter) == 0x000018, "Wrong size on TngActorFunction_PointTeleportCharacter");
static_assert(offsetof(TngActorFunction_PointTeleportCharacter, TargetActor) == 0x000000, "Member 'TngActorFunction_PointTeleportCharacter::TargetActor' has a wrong offset!");
static_assert(offsetof(TngActorFunction_PointTeleportCharacter, SetPoint) == 0x000008, "Member 'TngActorFunction_PointTeleportCharacter::SetPoint' has a wrong offset!");

// Function TangoLib.TngActorFunction.RotationTeleportCharacter
// 0x0018 (0x0018 - 0x0000)
struct TngActorFunction_RotationTeleportCharacter final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SetRotation;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngActorFunction_RotationTeleportCharacter) == 0x000008, "Wrong alignment on TngActorFunction_RotationTeleportCharacter");
static_assert(sizeof(TngActorFunction_RotationTeleportCharacter) == 0x000018, "Wrong size on TngActorFunction_RotationTeleportCharacter");
static_assert(offsetof(TngActorFunction_RotationTeleportCharacter, TargetActor) == 0x000000, "Member 'TngActorFunction_RotationTeleportCharacter::TargetActor' has a wrong offset!");
static_assert(offsetof(TngActorFunction_RotationTeleportCharacter, SetRotation) == 0x000008, "Member 'TngActorFunction_RotationTeleportCharacter::SetRotation' has a wrong offset!");

// Function TangoLib.TngActorFunction.SetShowOnlyActors
// 0x0018 (0x0018 - 0x0000)
struct TngActorFunction_SetShowOnlyActors final
{
public:
	class USceneCaptureComponent*                 Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         SetActors;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngActorFunction_SetShowOnlyActors) == 0x000008, "Wrong alignment on TngActorFunction_SetShowOnlyActors");
static_assert(sizeof(TngActorFunction_SetShowOnlyActors) == 0x000018, "Wrong size on TngActorFunction_SetShowOnlyActors");
static_assert(offsetof(TngActorFunction_SetShowOnlyActors, Component) == 0x000000, "Member 'TngActorFunction_SetShowOnlyActors::Component' has a wrong offset!");
static_assert(offsetof(TngActorFunction_SetShowOnlyActors, SetActors) == 0x000008, "Member 'TngActorFunction_SetShowOnlyActors::SetActors' has a wrong offset!");

// Function TangoLib.TngActorFunction.TngAttachToName
// 0x0028 (0x0028 - 0x0000)
struct TngActorFunction_TngAttachToName final
{
public:
	class AActor*                                 ParentActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ChildActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentAttachName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChildAttachName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               LocationRule;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               RotationRule;                                      // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               ScaleRule;                                         // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeldSimulatedBodies;                              // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngActorFunction_TngAttachToName) == 0x000008, "Wrong alignment on TngActorFunction_TngAttachToName");
static_assert(sizeof(TngActorFunction_TngAttachToName) == 0x000028, "Wrong size on TngActorFunction_TngAttachToName");
static_assert(offsetof(TngActorFunction_TngAttachToName, ParentActor) == 0x000000, "Member 'TngActorFunction_TngAttachToName::ParentActor' has a wrong offset!");
static_assert(offsetof(TngActorFunction_TngAttachToName, ChildActor) == 0x000008, "Member 'TngActorFunction_TngAttachToName::ChildActor' has a wrong offset!");
static_assert(offsetof(TngActorFunction_TngAttachToName, ParentAttachName) == 0x000010, "Member 'TngActorFunction_TngAttachToName::ParentAttachName' has a wrong offset!");
static_assert(offsetof(TngActorFunction_TngAttachToName, ChildAttachName) == 0x000018, "Member 'TngActorFunction_TngAttachToName::ChildAttachName' has a wrong offset!");
static_assert(offsetof(TngActorFunction_TngAttachToName, LocationRule) == 0x000020, "Member 'TngActorFunction_TngAttachToName::LocationRule' has a wrong offset!");
static_assert(offsetof(TngActorFunction_TngAttachToName, RotationRule) == 0x000021, "Member 'TngActorFunction_TngAttachToName::RotationRule' has a wrong offset!");
static_assert(offsetof(TngActorFunction_TngAttachToName, ScaleRule) == 0x000022, "Member 'TngActorFunction_TngAttachToName::ScaleRule' has a wrong offset!");
static_assert(offsetof(TngActorFunction_TngAttachToName, bWeldSimulatedBodies) == 0x000023, "Member 'TngActorFunction_TngAttachToName::bWeldSimulatedBodies' has a wrong offset!");
static_assert(offsetof(TngActorFunction_TngAttachToName, ReturnValue) == 0x000024, "Member 'TngActorFunction_TngAttachToName::ReturnValue' has a wrong offset!");

// Function TangoLib.TngActorFunction.TngCheckRenderInWindow
// 0x0018 (0x0018 - 0x0000)
struct TngActorFunction_TngCheckRenderInWindow final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckTrace;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngActorFunction_TngCheckRenderInWindow) == 0x000008, "Wrong alignment on TngActorFunction_TngCheckRenderInWindow");
static_assert(sizeof(TngActorFunction_TngCheckRenderInWindow) == 0x000018, "Wrong size on TngActorFunction_TngCheckRenderInWindow");
static_assert(offsetof(TngActorFunction_TngCheckRenderInWindow, Actor) == 0x000000, "Member 'TngActorFunction_TngCheckRenderInWindow::Actor' has a wrong offset!");
static_assert(offsetof(TngActorFunction_TngCheckRenderInWindow, Location) == 0x000008, "Member 'TngActorFunction_TngCheckRenderInWindow::Location' has a wrong offset!");
static_assert(offsetof(TngActorFunction_TngCheckRenderInWindow, CheckTrace) == 0x000014, "Member 'TngActorFunction_TngCheckRenderInWindow::CheckTrace' has a wrong offset!");
static_assert(offsetof(TngActorFunction_TngCheckRenderInWindow, ReturnValue) == 0x000015, "Member 'TngActorFunction_TngCheckRenderInWindow::ReturnValue' has a wrong offset!");

// Function TangoLib.TngActorFunction.TngGetActorLength
// 0x0018 (0x0018 - 0x0000)
struct TngActorFunction_TngGetActorLength final
{
public:
	const class AActor*                           ActorA;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           ActorB;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngActorFunction_TngGetActorLength) == 0x000008, "Wrong alignment on TngActorFunction_TngGetActorLength");
static_assert(sizeof(TngActorFunction_TngGetActorLength) == 0x000018, "Wrong size on TngActorFunction_TngGetActorLength");
static_assert(offsetof(TngActorFunction_TngGetActorLength, ActorA) == 0x000000, "Member 'TngActorFunction_TngGetActorLength::ActorA' has a wrong offset!");
static_assert(offsetof(TngActorFunction_TngGetActorLength, ActorB) == 0x000008, "Member 'TngActorFunction_TngGetActorLength::ActorB' has a wrong offset!");
static_assert(offsetof(TngActorFunction_TngGetActorLength, ReturnValue) == 0x000010, "Member 'TngActorFunction_TngGetActorLength::ReturnValue' has a wrong offset!");

// Function TangoLib.TngActorFunction.TngGetActorsInActorOwningLevel
// 0x0018 (0x0018 - 0x0000)
struct TngActorFunction_TngGetActorsInActorOwningLevel final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngActorFunction_TngGetActorsInActorOwningLevel) == 0x000008, "Wrong alignment on TngActorFunction_TngGetActorsInActorOwningLevel");
static_assert(sizeof(TngActorFunction_TngGetActorsInActorOwningLevel) == 0x000018, "Wrong size on TngActorFunction_TngGetActorsInActorOwningLevel");
static_assert(offsetof(TngActorFunction_TngGetActorsInActorOwningLevel, Actor) == 0x000000, "Member 'TngActorFunction_TngGetActorsInActorOwningLevel::Actor' has a wrong offset!");
static_assert(offsetof(TngActorFunction_TngGetActorsInActorOwningLevel, OutActors) == 0x000008, "Member 'TngActorFunction_TngGetActorsInActorOwningLevel::OutActors' has a wrong offset!");

// Function TangoLib.TngActorFunction.TngGetActorsInLevel
// 0x0018 (0x0018 - 0x0000)
struct TngActorFunction_TngGetActorsInLevel final
{
public:
	class ULevelStreamingDynamic*                 Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngActorFunction_TngGetActorsInLevel) == 0x000008, "Wrong alignment on TngActorFunction_TngGetActorsInLevel");
static_assert(sizeof(TngActorFunction_TngGetActorsInLevel) == 0x000018, "Wrong size on TngActorFunction_TngGetActorsInLevel");
static_assert(offsetof(TngActorFunction_TngGetActorsInLevel, Level) == 0x000000, "Member 'TngActorFunction_TngGetActorsInLevel::Level' has a wrong offset!");
static_assert(offsetof(TngActorFunction_TngGetActorsInLevel, OutActors) == 0x000008, "Member 'TngActorFunction_TngGetActorsInLevel::OutActors' has a wrong offset!");

// Function TangoLib.TngActorFunction.TngGetLastRenderTime
// 0x0010 (0x0010 - 0x0000)
struct TngActorFunction_TngGetLastRenderTime final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngActorFunction_TngGetLastRenderTime) == 0x000008, "Wrong alignment on TngActorFunction_TngGetLastRenderTime");
static_assert(sizeof(TngActorFunction_TngGetLastRenderTime) == 0x000010, "Wrong size on TngActorFunction_TngGetLastRenderTime");
static_assert(offsetof(TngActorFunction_TngGetLastRenderTime, Actor) == 0x000000, "Member 'TngActorFunction_TngGetLastRenderTime::Actor' has a wrong offset!");
static_assert(offsetof(TngActorFunction_TngGetLastRenderTime, ReturnValue) == 0x000008, "Member 'TngActorFunction_TngGetLastRenderTime::ReturnValue' has a wrong offset!");

// Function TangoLib.TngActorFunction.TngGetTransformInActor
// 0x0050 (0x0050 - 0x0000)
struct TngActorFunction_TngGetTransformInActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERelativeTransformSpace                       Space;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0xF];                                       // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0020(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngActorFunction_TngGetTransformInActor) == 0x000010, "Wrong alignment on TngActorFunction_TngGetTransformInActor");
static_assert(sizeof(TngActorFunction_TngGetTransformInActor) == 0x000050, "Wrong size on TngActorFunction_TngGetTransformInActor");
static_assert(offsetof(TngActorFunction_TngGetTransformInActor, Actor) == 0x000000, "Member 'TngActorFunction_TngGetTransformInActor::Actor' has a wrong offset!");
static_assert(offsetof(TngActorFunction_TngGetTransformInActor, Name_0) == 0x000008, "Member 'TngActorFunction_TngGetTransformInActor::Name_0' has a wrong offset!");
static_assert(offsetof(TngActorFunction_TngGetTransformInActor, Space) == 0x000010, "Member 'TngActorFunction_TngGetTransformInActor::Space' has a wrong offset!");
static_assert(offsetof(TngActorFunction_TngGetTransformInActor, ReturnValue) == 0x000020, "Member 'TngActorFunction_TngGetTransformInActor::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAIController.Blueprint_PostTakeDamage
// 0x00B8 (0x00B8 - 0x0000)
struct TngAIController_Blueprint_PostTakeDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0010(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                DamageImpulse;                                     // 0x0098(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x00A8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00B0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAIController_Blueprint_PostTakeDamage) == 0x000008, "Wrong alignment on TngAIController_Blueprint_PostTakeDamage");
static_assert(sizeof(TngAIController_Blueprint_PostTakeDamage) == 0x0000B8, "Wrong size on TngAIController_Blueprint_PostTakeDamage");
static_assert(offsetof(TngAIController_Blueprint_PostTakeDamage, Damage) == 0x000000, "Member 'TngAIController_Blueprint_PostTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(TngAIController_Blueprint_PostTakeDamage, DamageType) == 0x000008, "Member 'TngAIController_Blueprint_PostTakeDamage::DamageType' has a wrong offset!");
static_assert(offsetof(TngAIController_Blueprint_PostTakeDamage, Hit) == 0x000010, "Member 'TngAIController_Blueprint_PostTakeDamage::Hit' has a wrong offset!");
static_assert(offsetof(TngAIController_Blueprint_PostTakeDamage, DamageImpulse) == 0x000098, "Member 'TngAIController_Blueprint_PostTakeDamage::DamageImpulse' has a wrong offset!");
static_assert(offsetof(TngAIController_Blueprint_PostTakeDamage, InstigatedBy) == 0x0000A8, "Member 'TngAIController_Blueprint_PostTakeDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(TngAIController_Blueprint_PostTakeDamage, DamageCauser) == 0x0000B0, "Member 'TngAIController_Blueprint_PostTakeDamage::DamageCauser' has a wrong offset!");

// Function TangoLib.TngAIController.MoveToward
// 0x000C (0x000C - 0x0000)
struct TngAIController_MoveToward final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAIController_MoveToward) == 0x000004, "Wrong alignment on TngAIController_MoveToward");
static_assert(sizeof(TngAIController_MoveToward) == 0x00000C, "Wrong size on TngAIController_MoveToward");
static_assert(offsetof(TngAIController_MoveToward, Velocity) == 0x000000, "Member 'TngAIController_MoveToward::Velocity' has a wrong offset!");

// Function TangoLib.TngAIController.PauseMovement
// 0x0001 (0x0001 - 0x0000)
struct TngAIController_PauseMovement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAIController_PauseMovement) == 0x000001, "Wrong alignment on TngAIController_PauseMovement");
static_assert(sizeof(TngAIController_PauseMovement) == 0x000001, "Wrong size on TngAIController_PauseMovement");
static_assert(offsetof(TngAIController_PauseMovement, ReturnValue) == 0x000000, "Member 'TngAIController_PauseMovement::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAIController.Receive_PostTakeDamage
// 0x00B8 (0x00B8 - 0x0000)
struct TngAIController_Receive_PostTakeDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0010(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                DamageImpulse;                                     // 0x0098(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x00A8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00B0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAIController_Receive_PostTakeDamage) == 0x000008, "Wrong alignment on TngAIController_Receive_PostTakeDamage");
static_assert(sizeof(TngAIController_Receive_PostTakeDamage) == 0x0000B8, "Wrong size on TngAIController_Receive_PostTakeDamage");
static_assert(offsetof(TngAIController_Receive_PostTakeDamage, Damage) == 0x000000, "Member 'TngAIController_Receive_PostTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(TngAIController_Receive_PostTakeDamage, DamageType) == 0x000008, "Member 'TngAIController_Receive_PostTakeDamage::DamageType' has a wrong offset!");
static_assert(offsetof(TngAIController_Receive_PostTakeDamage, Hit) == 0x000010, "Member 'TngAIController_Receive_PostTakeDamage::Hit' has a wrong offset!");
static_assert(offsetof(TngAIController_Receive_PostTakeDamage, DamageImpulse) == 0x000098, "Member 'TngAIController_Receive_PostTakeDamage::DamageImpulse' has a wrong offset!");
static_assert(offsetof(TngAIController_Receive_PostTakeDamage, InstigatedBy) == 0x0000A8, "Member 'TngAIController_Receive_PostTakeDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(TngAIController_Receive_PostTakeDamage, DamageCauser) == 0x0000B0, "Member 'TngAIController_Receive_PostTakeDamage::DamageCauser' has a wrong offset!");

// Function TangoLib.TngAIController.ReceiveSmartLinkReached
// 0x0018 (0x0018 - 0x0000)
struct TngAIController_ReceiveSmartLinkReached final
{
public:
	class ATngNavLinkProxy*                       NavLink;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngAIController_ReceiveSmartLinkReached) == 0x000008, "Wrong alignment on TngAIController_ReceiveSmartLinkReached");
static_assert(sizeof(TngAIController_ReceiveSmartLinkReached) == 0x000018, "Wrong size on TngAIController_ReceiveSmartLinkReached");
static_assert(offsetof(TngAIController_ReceiveSmartLinkReached, NavLink) == 0x000000, "Member 'TngAIController_ReceiveSmartLinkReached::NavLink' has a wrong offset!");
static_assert(offsetof(TngAIController_ReceiveSmartLinkReached, Destination) == 0x000008, "Member 'TngAIController_ReceiveSmartLinkReached::Destination' has a wrong offset!");

// Function TangoLib.TngAIController.ResumeMovement
// 0x0001 (0x0001 - 0x0000)
struct TngAIController_ResumeMovement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAIController_ResumeMovement) == 0x000001, "Wrong alignment on TngAIController_ResumeMovement");
static_assert(sizeof(TngAIController_ResumeMovement) == 0x000001, "Wrong size on TngAIController_ResumeMovement");
static_assert(offsetof(TngAIController_ResumeMovement, ReturnValue) == 0x000000, "Member 'TngAIController_ResumeMovement::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAIController.SetDivergenceWhenFollowingWalkway
// 0x0004 (0x0004 - 0x0000)
struct TngAIController_SetDivergenceWhenFollowingWalkway final
{
public:
	float                                         NewVal;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAIController_SetDivergenceWhenFollowingWalkway) == 0x000004, "Wrong alignment on TngAIController_SetDivergenceWhenFollowingWalkway");
static_assert(sizeof(TngAIController_SetDivergenceWhenFollowingWalkway) == 0x000004, "Wrong size on TngAIController_SetDivergenceWhenFollowingWalkway");
static_assert(offsetof(TngAIController_SetDivergenceWhenFollowingWalkway, NewVal) == 0x000000, "Member 'TngAIController_SetDivergenceWhenFollowingWalkway::NewVal' has a wrong offset!");

// Function TangoLib.TngAIController.SetDriveInputMaxSpeed
// 0x0004 (0x0004 - 0x0000)
struct TngAIController_SetDriveInputMaxSpeed final
{
public:
	float                                         NewMaxSpeed;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAIController_SetDriveInputMaxSpeed) == 0x000004, "Wrong alignment on TngAIController_SetDriveInputMaxSpeed");
static_assert(sizeof(TngAIController_SetDriveInputMaxSpeed) == 0x000004, "Wrong size on TngAIController_SetDriveInputMaxSpeed");
static_assert(offsetof(TngAIController_SetDriveInputMaxSpeed, NewMaxSpeed) == 0x000000, "Member 'TngAIController_SetDriveInputMaxSpeed::NewMaxSpeed' has a wrong offset!");

// Function TangoLib.TngAIController.SetGenericTeamId
// 0x0001 (0x0001 - 0x0000)
struct TngAIController_SetGenericTeamId final
{
public:
	struct FGenericTeamId                         NewTeamID;                                         // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAIController_SetGenericTeamId) == 0x000001, "Wrong alignment on TngAIController_SetGenericTeamId");
static_assert(sizeof(TngAIController_SetGenericTeamId) == 0x000001, "Wrong size on TngAIController_SetGenericTeamId");
static_assert(offsetof(TngAIController_SetGenericTeamId, NewTeamID) == 0x000000, "Member 'TngAIController_SetGenericTeamId::NewTeamID' has a wrong offset!");

// Function TangoLib.TngAIController.TurnBodyForNavLinkMode
// 0x000C (0x000C - 0x0000)
struct TngAIController_TurnBodyForNavLinkMode final
{
public:
	struct FVector                                Destination;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAIController_TurnBodyForNavLinkMode) == 0x000004, "Wrong alignment on TngAIController_TurnBodyForNavLinkMode");
static_assert(sizeof(TngAIController_TurnBodyForNavLinkMode) == 0x00000C, "Wrong size on TngAIController_TurnBodyForNavLinkMode");
static_assert(offsetof(TngAIController_TurnBodyForNavLinkMode, Destination) == 0x000000, "Member 'TngAIController_TurnBodyForNavLinkMode::Destination' has a wrong offset!");

// Function TangoLib.TngAIController.GetCombatTarget
// 0x0010 (0x0010 - 0x0000)
struct TngAIController_GetCombatTarget final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAIController_GetCombatTarget) == 0x000008, "Wrong alignment on TngAIController_GetCombatTarget");
static_assert(sizeof(TngAIController_GetCombatTarget) == 0x000010, "Wrong size on TngAIController_GetCombatTarget");
static_assert(offsetof(TngAIController_GetCombatTarget, Index_0) == 0x000000, "Member 'TngAIController_GetCombatTarget::Index_0' has a wrong offset!");
static_assert(offsetof(TngAIController_GetCombatTarget, ReturnValue) == 0x000008, "Member 'TngAIController_GetCombatTarget::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAIController.GetCombatTargetNum
// 0x0004 (0x0004 - 0x0000)
struct TngAIController_GetCombatTargetNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAIController_GetCombatTargetNum) == 0x000004, "Wrong alignment on TngAIController_GetCombatTargetNum");
static_assert(sizeof(TngAIController_GetCombatTargetNum) == 0x000004, "Wrong size on TngAIController_GetCombatTargetNum");
static_assert(offsetof(TngAIController_GetCombatTargetNum, ReturnValue) == 0x000000, "Member 'TngAIController_GetCombatTargetNum::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAIController.GetCurrentCombatTarget
// 0x0008 (0x0008 - 0x0000)
struct TngAIController_GetCurrentCombatTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAIController_GetCurrentCombatTarget) == 0x000008, "Wrong alignment on TngAIController_GetCurrentCombatTarget");
static_assert(sizeof(TngAIController_GetCurrentCombatTarget) == 0x000008, "Wrong size on TngAIController_GetCurrentCombatTarget");
static_assert(offsetof(TngAIController_GetCurrentCombatTarget, ReturnValue) == 0x000000, "Member 'TngAIController_GetCurrentCombatTarget::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAIController.GetDivergenceWhenFollowingWalkway
// 0x0004 (0x0004 - 0x0000)
struct TngAIController_GetDivergenceWhenFollowingWalkway final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAIController_GetDivergenceWhenFollowingWalkway) == 0x000004, "Wrong alignment on TngAIController_GetDivergenceWhenFollowingWalkway");
static_assert(sizeof(TngAIController_GetDivergenceWhenFollowingWalkway) == 0x000004, "Wrong size on TngAIController_GetDivergenceWhenFollowingWalkway");
static_assert(offsetof(TngAIController_GetDivergenceWhenFollowingWalkway, ReturnValue) == 0x000000, "Member 'TngAIController_GetDivergenceWhenFollowingWalkway::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAIController.GetGenericTeamId
// 0x0001 (0x0001 - 0x0000)
struct TngAIController_GetGenericTeamId final
{
public:
	struct FGenericTeamId                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAIController_GetGenericTeamId) == 0x000001, "Wrong alignment on TngAIController_GetGenericTeamId");
static_assert(sizeof(TngAIController_GetGenericTeamId) == 0x000001, "Wrong size on TngAIController_GetGenericTeamId");
static_assert(offsetof(TngAIController_GetGenericTeamId, ReturnValue) == 0x000000, "Member 'TngAIController_GetGenericTeamId::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAIController.IsCurrentCombatTarget
// 0x0001 (0x0001 - 0x0000)
struct TngAIController_IsCurrentCombatTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAIController_IsCurrentCombatTarget) == 0x000001, "Wrong alignment on TngAIController_IsCurrentCombatTarget");
static_assert(sizeof(TngAIController_IsCurrentCombatTarget) == 0x000001, "Wrong size on TngAIController_IsCurrentCombatTarget");
static_assert(offsetof(TngAIController_IsCurrentCombatTarget, ReturnValue) == 0x000000, "Member 'TngAIController_IsCurrentCombatTarget::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAISense_Damage.ReportDamageEvent
// 0x0038 (0x0038 - 0x0000)
struct TngAISense_Damage_ReportDamageEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamagedActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageAmount;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EventLocation;                                     // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngAISense_Damage_ReportDamageEvent) == 0x000008, "Wrong alignment on TngAISense_Damage_ReportDamageEvent");
static_assert(sizeof(TngAISense_Damage_ReportDamageEvent) == 0x000038, "Wrong size on TngAISense_Damage_ReportDamageEvent");
static_assert(offsetof(TngAISense_Damage_ReportDamageEvent, WorldContextObject) == 0x000000, "Member 'TngAISense_Damage_ReportDamageEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngAISense_Damage_ReportDamageEvent, DamagedActor) == 0x000008, "Member 'TngAISense_Damage_ReportDamageEvent::DamagedActor' has a wrong offset!");
static_assert(offsetof(TngAISense_Damage_ReportDamageEvent, Instigator) == 0x000010, "Member 'TngAISense_Damage_ReportDamageEvent::Instigator' has a wrong offset!");
static_assert(offsetof(TngAISense_Damage_ReportDamageEvent, DamageAmount) == 0x000018, "Member 'TngAISense_Damage_ReportDamageEvent::DamageAmount' has a wrong offset!");
static_assert(offsetof(TngAISense_Damage_ReportDamageEvent, EventLocation) == 0x00001C, "Member 'TngAISense_Damage_ReportDamageEvent::EventLocation' has a wrong offset!");
static_assert(offsetof(TngAISense_Damage_ReportDamageEvent, HitLocation) == 0x000028, "Member 'TngAISense_Damage_ReportDamageEvent::HitLocation' has a wrong offset!");

// Function TangoLib.TngAnimInstance.CancelCoopAnimation
// 0x0008 (0x0008 - 0x0000)
struct TngAnimInstance_CancelCoopAnimation final
{
public:
	float                                         BlendOutTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngAnimInstance_CancelCoopAnimation) == 0x000004, "Wrong alignment on TngAnimInstance_CancelCoopAnimation");
static_assert(sizeof(TngAnimInstance_CancelCoopAnimation) == 0x000008, "Wrong size on TngAnimInstance_CancelCoopAnimation");
static_assert(offsetof(TngAnimInstance_CancelCoopAnimation, BlendOutTime) == 0x000000, "Member 'TngAnimInstance_CancelCoopAnimation::BlendOutTime' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_CancelCoopAnimation, ReturnValue) == 0x000004, "Member 'TngAnimInstance_CancelCoopAnimation::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstance.ForceMeshUpdateFlagToTickAndRefresh
// 0x0004 (0x0004 - 0x0000)
struct TngAnimInstance_ForceMeshUpdateFlagToTickAndRefresh final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_ForceMeshUpdateFlagToTickAndRefresh) == 0x000004, "Wrong alignment on TngAnimInstance_ForceMeshUpdateFlagToTickAndRefresh");
static_assert(sizeof(TngAnimInstance_ForceMeshUpdateFlagToTickAndRefresh) == 0x000004, "Wrong size on TngAnimInstance_ForceMeshUpdateFlagToTickAndRefresh");
static_assert(offsetof(TngAnimInstance_ForceMeshUpdateFlagToTickAndRefresh, Duration) == 0x000000, "Member 'TngAnimInstance_ForceMeshUpdateFlagToTickAndRefresh::Duration' has a wrong offset!");

// Function TangoLib.TngAnimInstance.GetCurrentRootMoveHitResult
// 0x0088 (0x0088 - 0x0000)
struct TngAnimInstance_GetCurrentRootMoveHitResult final
{
public:
	struct FHitResult                             ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_GetCurrentRootMoveHitResult) == 0x000004, "Wrong alignment on TngAnimInstance_GetCurrentRootMoveHitResult");
static_assert(sizeof(TngAnimInstance_GetCurrentRootMoveHitResult) == 0x000088, "Wrong size on TngAnimInstance_GetCurrentRootMoveHitResult");
static_assert(offsetof(TngAnimInstance_GetCurrentRootMoveHitResult, ReturnValue) == 0x000000, "Member 'TngAnimInstance_GetCurrentRootMoveHitResult::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstance.GetCurrentRootMoveVelocityTransform
// 0x0030 (0x0030 - 0x0000)
struct TngAnimInstance_GetCurrentRootMoveVelocityTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_GetCurrentRootMoveVelocityTransform) == 0x000010, "Wrong alignment on TngAnimInstance_GetCurrentRootMoveVelocityTransform");
static_assert(sizeof(TngAnimInstance_GetCurrentRootMoveVelocityTransform) == 0x000030, "Wrong size on TngAnimInstance_GetCurrentRootMoveVelocityTransform");
static_assert(offsetof(TngAnimInstance_GetCurrentRootMoveVelocityTransform, ReturnValue) == 0x000000, "Member 'TngAnimInstance_GetCurrentRootMoveVelocityTransform::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstance.GetRootMotionCurveValue
// 0x0030 (0x0030 - 0x0000)
struct TngAnimInstance_GetRootMotionCurveValue final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_GetRootMotionCurveValue) == 0x000010, "Wrong alignment on TngAnimInstance_GetRootMotionCurveValue");
static_assert(sizeof(TngAnimInstance_GetRootMotionCurveValue) == 0x000030, "Wrong size on TngAnimInstance_GetRootMotionCurveValue");
static_assert(offsetof(TngAnimInstance_GetRootMotionCurveValue, ReturnValue) == 0x000000, "Member 'TngAnimInstance_GetRootMotionCurveValue::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstance.GetRootMotionCurveValueAtRotVelocity
// 0x0040 (0x0040 - 0x0000)
struct TngAnimInstance_GetRootMotionCurveValueAtRotVelocity final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_GetRootMotionCurveValueAtRotVelocity) == 0x000010, "Wrong alignment on TngAnimInstance_GetRootMotionCurveValueAtRotVelocity");
static_assert(sizeof(TngAnimInstance_GetRootMotionCurveValueAtRotVelocity) == 0x000040, "Wrong size on TngAnimInstance_GetRootMotionCurveValueAtRotVelocity");
static_assert(offsetof(TngAnimInstance_GetRootMotionCurveValueAtRotVelocity, DeltaSeconds) == 0x000000, "Member 'TngAnimInstance_GetRootMotionCurveValueAtRotVelocity::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_GetRootMotionCurveValueAtRotVelocity, ReturnValue) == 0x000010, "Member 'TngAnimInstance_GetRootMotionCurveValueAtRotVelocity::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstance.GetStateWeight
// 0x0014 (0x0014 - 0x0000)
struct TngAnimInstance_GetStateWeight final
{
public:
	class FName                                   MachineName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_GetStateWeight) == 0x000004, "Wrong alignment on TngAnimInstance_GetStateWeight");
static_assert(sizeof(TngAnimInstance_GetStateWeight) == 0x000014, "Wrong size on TngAnimInstance_GetStateWeight");
static_assert(offsetof(TngAnimInstance_GetStateWeight, MachineName) == 0x000000, "Member 'TngAnimInstance_GetStateWeight::MachineName' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_GetStateWeight, StateName) == 0x000008, "Member 'TngAnimInstance_GetStateWeight::StateName' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_GetStateWeight, ReturnValue) == 0x000010, "Member 'TngAnimInstance_GetStateWeight::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstance.IsAnyStateActive
// 0x0020 (0x0020 - 0x0000)
struct TngAnimInstance_IsAnyStateActive final
{
public:
	class FName                                   MachineName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           StateNames;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ThresholdWeight;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngAnimInstance_IsAnyStateActive) == 0x000008, "Wrong alignment on TngAnimInstance_IsAnyStateActive");
static_assert(sizeof(TngAnimInstance_IsAnyStateActive) == 0x000020, "Wrong size on TngAnimInstance_IsAnyStateActive");
static_assert(offsetof(TngAnimInstance_IsAnyStateActive, MachineName) == 0x000000, "Member 'TngAnimInstance_IsAnyStateActive::MachineName' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_IsAnyStateActive, StateNames) == 0x000008, "Member 'TngAnimInstance_IsAnyStateActive::StateNames' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_IsAnyStateActive, ThresholdWeight) == 0x000018, "Member 'TngAnimInstance_IsAnyStateActive::ThresholdWeight' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_IsAnyStateActive, ReturnValue) == 0x00001C, "Member 'TngAnimInstance_IsAnyStateActive::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstance.IsStateActive
// 0x0018 (0x0018 - 0x0000)
struct TngAnimInstance_IsStateActive final
{
public:
	class FName                                   MachineName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThresholdWeight;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngAnimInstance_IsStateActive) == 0x000004, "Wrong alignment on TngAnimInstance_IsStateActive");
static_assert(sizeof(TngAnimInstance_IsStateActive) == 0x000018, "Wrong size on TngAnimInstance_IsStateActive");
static_assert(offsetof(TngAnimInstance_IsStateActive, MachineName) == 0x000000, "Member 'TngAnimInstance_IsStateActive::MachineName' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_IsStateActive, StateName) == 0x000008, "Member 'TngAnimInstance_IsStateActive::StateName' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_IsStateActive, ThresholdWeight) == 0x000010, "Member 'TngAnimInstance_IsStateActive::ThresholdWeight' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_IsStateActive, ReturnValue) == 0x000014, "Member 'TngAnimInstance_IsStateActive::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstance.ModifySweepMove
// 0x00A0 (0x00A0 - 0x0000)
struct TngAnimInstance_ModifySweepMove final
{
public:
	struct FVector                                InDeltaMove;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutDeltaMove;                                      // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             ReturnValue;                                       // 0x0018(0x0088)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_ModifySweepMove) == 0x000004, "Wrong alignment on TngAnimInstance_ModifySweepMove");
static_assert(sizeof(TngAnimInstance_ModifySweepMove) == 0x0000A0, "Wrong size on TngAnimInstance_ModifySweepMove");
static_assert(offsetof(TngAnimInstance_ModifySweepMove, InDeltaMove) == 0x000000, "Member 'TngAnimInstance_ModifySweepMove::InDeltaMove' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_ModifySweepMove, OutDeltaMove) == 0x00000C, "Member 'TngAnimInstance_ModifySweepMove::OutDeltaMove' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_ModifySweepMove, ReturnValue) == 0x000018, "Member 'TngAnimInstance_ModifySweepMove::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstance.OnUpdateCoopAnimationAsSlave
// 0x0028 (0x0028 - 0x0000)
struct TngAnimInstance_OnUpdateCoopAnimationAsSlave final
{
public:
	class UTngAnimInstance*                       Master;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewLocation;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewRotation;                                       // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ElaspedTime;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngAnimInstance_OnUpdateCoopAnimationAsSlave) == 0x000008, "Wrong alignment on TngAnimInstance_OnUpdateCoopAnimationAsSlave");
static_assert(sizeof(TngAnimInstance_OnUpdateCoopAnimationAsSlave) == 0x000028, "Wrong size on TngAnimInstance_OnUpdateCoopAnimationAsSlave");
static_assert(offsetof(TngAnimInstance_OnUpdateCoopAnimationAsSlave, Master) == 0x000000, "Member 'TngAnimInstance_OnUpdateCoopAnimationAsSlave::Master' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_OnUpdateCoopAnimationAsSlave, NewLocation) == 0x000008, "Member 'TngAnimInstance_OnUpdateCoopAnimationAsSlave::NewLocation' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_OnUpdateCoopAnimationAsSlave, NewRotation) == 0x000014, "Member 'TngAnimInstance_OnUpdateCoopAnimationAsSlave::NewRotation' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_OnUpdateCoopAnimationAsSlave, ElaspedTime) == 0x000020, "Member 'TngAnimInstance_OnUpdateCoopAnimationAsSlave::ElaspedTime' has a wrong offset!");

// Function TangoLib.TngAnimInstance.PlayCoopAnimation
// 0x0028 (0x0028 - 0x0000)
struct TngAnimInstance_PlayCoopAnimation final
{
public:
	struct FTngCoopAnimPlayParam                  CoopAnimPlayParam;                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MontageSectionName;                                // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngAnimInstance_PlayCoopAnimation) == 0x000008, "Wrong alignment on TngAnimInstance_PlayCoopAnimation");
static_assert(sizeof(TngAnimInstance_PlayCoopAnimation) == 0x000028, "Wrong size on TngAnimInstance_PlayCoopAnimation");
static_assert(offsetof(TngAnimInstance_PlayCoopAnimation, CoopAnimPlayParam) == 0x000000, "Member 'TngAnimInstance_PlayCoopAnimation::CoopAnimPlayParam' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_PlayCoopAnimation, PlayRate) == 0x000018, "Member 'TngAnimInstance_PlayCoopAnimation::PlayRate' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_PlayCoopAnimation, MontageSectionName) == 0x00001C, "Member 'TngAnimInstance_PlayCoopAnimation::MontageSectionName' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_PlayCoopAnimation, ReturnValue) == 0x000024, "Member 'TngAnimInstance_PlayCoopAnimation::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstance.PlayExtraAnimation
// 0x0028 (0x0028 - 0x0000)
struct TngAnimInstance_PlayExtraAnimation final
{
public:
	struct FTngPlayAnimData                       InAnimData;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ETngPlayAnimTransit                           TransitType;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngAnimInstance_PlayExtraAnimation) == 0x000008, "Wrong alignment on TngAnimInstance_PlayExtraAnimation");
static_assert(sizeof(TngAnimInstance_PlayExtraAnimation) == 0x000028, "Wrong size on TngAnimInstance_PlayExtraAnimation");
static_assert(offsetof(TngAnimInstance_PlayExtraAnimation, InAnimData) == 0x000000, "Member 'TngAnimInstance_PlayExtraAnimation::InAnimData' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_PlayExtraAnimation, TransitType) == 0x000020, "Member 'TngAnimInstance_PlayExtraAnimation::TransitType' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_PlayExtraAnimation, ReturnValue) == 0x000021, "Member 'TngAnimInstance_PlayExtraAnimation::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstance.RemoveDelegateOnBeginExtraAnim
// 0x0010 (0x0010 - 0x0000)
struct TngAnimInstance_RemoveDelegateOnBeginExtraAnim final
{
public:
	TDelegate<void()>                             CallbackFunc;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_RemoveDelegateOnBeginExtraAnim) == 0x000004, "Wrong alignment on TngAnimInstance_RemoveDelegateOnBeginExtraAnim");
static_assert(sizeof(TngAnimInstance_RemoveDelegateOnBeginExtraAnim) == 0x000010, "Wrong size on TngAnimInstance_RemoveDelegateOnBeginExtraAnim");
static_assert(offsetof(TngAnimInstance_RemoveDelegateOnBeginExtraAnim, CallbackFunc) == 0x000000, "Member 'TngAnimInstance_RemoveDelegateOnBeginExtraAnim::CallbackFunc' has a wrong offset!");

// Function TangoLib.TngAnimInstance.RemoveDelegateOnChangeStateExtraAnim
// 0x0010 (0x0010 - 0x0000)
struct TngAnimInstance_RemoveDelegateOnChangeStateExtraAnim final
{
public:
	TDelegate<void(ETngExtraPlayState NewState)>  CallbackFunc;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_RemoveDelegateOnChangeStateExtraAnim) == 0x000004, "Wrong alignment on TngAnimInstance_RemoveDelegateOnChangeStateExtraAnim");
static_assert(sizeof(TngAnimInstance_RemoveDelegateOnChangeStateExtraAnim) == 0x000010, "Wrong size on TngAnimInstance_RemoveDelegateOnChangeStateExtraAnim");
static_assert(offsetof(TngAnimInstance_RemoveDelegateOnChangeStateExtraAnim, CallbackFunc) == 0x000000, "Member 'TngAnimInstance_RemoveDelegateOnChangeStateExtraAnim::CallbackFunc' has a wrong offset!");

// Function TangoLib.TngAnimInstance.RemoveDelegateOnCompletedExtraAnim
// 0x0010 (0x0010 - 0x0000)
struct TngAnimInstance_RemoveDelegateOnCompletedExtraAnim final
{
public:
	TDelegate<void(class FName ContactTag)>       CallbackFunc;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_RemoveDelegateOnCompletedExtraAnim) == 0x000004, "Wrong alignment on TngAnimInstance_RemoveDelegateOnCompletedExtraAnim");
static_assert(sizeof(TngAnimInstance_RemoveDelegateOnCompletedExtraAnim) == 0x000010, "Wrong size on TngAnimInstance_RemoveDelegateOnCompletedExtraAnim");
static_assert(offsetof(TngAnimInstance_RemoveDelegateOnCompletedExtraAnim, CallbackFunc) == 0x000000, "Member 'TngAnimInstance_RemoveDelegateOnCompletedExtraAnim::CallbackFunc' has a wrong offset!");

// Function TangoLib.TngAnimInstance.SetCoopAnimPosAdjust
// 0x0001 (0x0001 - 0x0000)
struct TngAnimInstance_SetCoopAnimPosAdjust final
{
public:
	bool                                          _Enable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_SetCoopAnimPosAdjust) == 0x000001, "Wrong alignment on TngAnimInstance_SetCoopAnimPosAdjust");
static_assert(sizeof(TngAnimInstance_SetCoopAnimPosAdjust) == 0x000001, "Wrong size on TngAnimInstance_SetCoopAnimPosAdjust");
static_assert(offsetof(TngAnimInstance_SetCoopAnimPosAdjust, _Enable) == 0x000000, "Member 'TngAnimInstance_SetCoopAnimPosAdjust::_Enable' has a wrong offset!");

// Function TangoLib.TngAnimInstance.SetDelegateOnBeginExtraAnim
// 0x0010 (0x0010 - 0x0000)
struct TngAnimInstance_SetDelegateOnBeginExtraAnim final
{
public:
	TDelegate<void()>                             CallbackFunc;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_SetDelegateOnBeginExtraAnim) == 0x000004, "Wrong alignment on TngAnimInstance_SetDelegateOnBeginExtraAnim");
static_assert(sizeof(TngAnimInstance_SetDelegateOnBeginExtraAnim) == 0x000010, "Wrong size on TngAnimInstance_SetDelegateOnBeginExtraAnim");
static_assert(offsetof(TngAnimInstance_SetDelegateOnBeginExtraAnim, CallbackFunc) == 0x000000, "Member 'TngAnimInstance_SetDelegateOnBeginExtraAnim::CallbackFunc' has a wrong offset!");

// Function TangoLib.TngAnimInstance.SetDelegateOnChangeStateExtraAnim
// 0x0010 (0x0010 - 0x0000)
struct TngAnimInstance_SetDelegateOnChangeStateExtraAnim final
{
public:
	TDelegate<void(ETngExtraPlayState NewState)>  CallbackFunc;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_SetDelegateOnChangeStateExtraAnim) == 0x000004, "Wrong alignment on TngAnimInstance_SetDelegateOnChangeStateExtraAnim");
static_assert(sizeof(TngAnimInstance_SetDelegateOnChangeStateExtraAnim) == 0x000010, "Wrong size on TngAnimInstance_SetDelegateOnChangeStateExtraAnim");
static_assert(offsetof(TngAnimInstance_SetDelegateOnChangeStateExtraAnim, CallbackFunc) == 0x000000, "Member 'TngAnimInstance_SetDelegateOnChangeStateExtraAnim::CallbackFunc' has a wrong offset!");

// Function TangoLib.TngAnimInstance.SetDelegateOnCompletedExtraAnim
// 0x0010 (0x0010 - 0x0000)
struct TngAnimInstance_SetDelegateOnCompletedExtraAnim final
{
public:
	TDelegate<void(class FName ContactTag)>       CallbackFunc;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_SetDelegateOnCompletedExtraAnim) == 0x000004, "Wrong alignment on TngAnimInstance_SetDelegateOnCompletedExtraAnim");
static_assert(sizeof(TngAnimInstance_SetDelegateOnCompletedExtraAnim) == 0x000010, "Wrong size on TngAnimInstance_SetDelegateOnCompletedExtraAnim");
static_assert(offsetof(TngAnimInstance_SetDelegateOnCompletedExtraAnim, CallbackFunc) == 0x000000, "Member 'TngAnimInstance_SetDelegateOnCompletedExtraAnim::CallbackFunc' has a wrong offset!");

// Function TangoLib.TngAnimInstance.StopExtraAnimation
// 0x0004 (0x0004 - 0x0000)
struct TngAnimInstance_StopExtraAnimation final
{
public:
	float                                         BlendOutTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_StopExtraAnimation) == 0x000004, "Wrong alignment on TngAnimInstance_StopExtraAnimation");
static_assert(sizeof(TngAnimInstance_StopExtraAnimation) == 0x000004, "Wrong size on TngAnimInstance_StopExtraAnimation");
static_assert(offsetof(TngAnimInstance_StopExtraAnimation, BlendOutTime) == 0x000000, "Member 'TngAnimInstance_StopExtraAnimation::BlendOutTime' has a wrong offset!");

// Function TangoLib.TngAnimInstance.UpdateRootMotionCurveMove
// 0x0008 (0x0008 - 0x0000)
struct TngAnimInstance_UpdateRootMotionCurveMove final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSweep;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngAnimInstance_UpdateRootMotionCurveMove) == 0x000004, "Wrong alignment on TngAnimInstance_UpdateRootMotionCurveMove");
static_assert(sizeof(TngAnimInstance_UpdateRootMotionCurveMove) == 0x000008, "Wrong size on TngAnimInstance_UpdateRootMotionCurveMove");
static_assert(offsetof(TngAnimInstance_UpdateRootMotionCurveMove, DeltaSeconds) == 0x000000, "Member 'TngAnimInstance_UpdateRootMotionCurveMove::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_UpdateRootMotionCurveMove, bSweep) == 0x000004, "Member 'TngAnimInstance_UpdateRootMotionCurveMove::bSweep' has a wrong offset!");

// Function TangoLib.TngAnimInstance.GetExtraAnimPlayBlendInOut
// 0x0008 (0x0008 - 0x0000)
struct TngAnimInstance_GetExtraAnimPlayBlendInOut final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutTime;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_GetExtraAnimPlayBlendInOut) == 0x000004, "Wrong alignment on TngAnimInstance_GetExtraAnimPlayBlendInOut");
static_assert(sizeof(TngAnimInstance_GetExtraAnimPlayBlendInOut) == 0x000008, "Wrong size on TngAnimInstance_GetExtraAnimPlayBlendInOut");
static_assert(offsetof(TngAnimInstance_GetExtraAnimPlayBlendInOut, InTime) == 0x000000, "Member 'TngAnimInstance_GetExtraAnimPlayBlendInOut::InTime' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_GetExtraAnimPlayBlendInOut, OutTime) == 0x000004, "Member 'TngAnimInstance_GetExtraAnimPlayBlendInOut::OutTime' has a wrong offset!");

// Function TangoLib.TngAnimInstance.GetExtraAnimPlayBlendInTime
// 0x0004 (0x0004 - 0x0000)
struct TngAnimInstance_GetExtraAnimPlayBlendInTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_GetExtraAnimPlayBlendInTime) == 0x000004, "Wrong alignment on TngAnimInstance_GetExtraAnimPlayBlendInTime");
static_assert(sizeof(TngAnimInstance_GetExtraAnimPlayBlendInTime) == 0x000004, "Wrong size on TngAnimInstance_GetExtraAnimPlayBlendInTime");
static_assert(offsetof(TngAnimInstance_GetExtraAnimPlayBlendInTime, ReturnValue) == 0x000000, "Member 'TngAnimInstance_GetExtraAnimPlayBlendInTime::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstance.GetExtraAnimPlayBlendOutTime
// 0x0004 (0x0004 - 0x0000)
struct TngAnimInstance_GetExtraAnimPlayBlendOutTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_GetExtraAnimPlayBlendOutTime) == 0x000004, "Wrong alignment on TngAnimInstance_GetExtraAnimPlayBlendOutTime");
static_assert(sizeof(TngAnimInstance_GetExtraAnimPlayBlendOutTime) == 0x000004, "Wrong size on TngAnimInstance_GetExtraAnimPlayBlendOutTime");
static_assert(offsetof(TngAnimInstance_GetExtraAnimPlayBlendOutTime, ReturnValue) == 0x000000, "Member 'TngAnimInstance_GetExtraAnimPlayBlendOutTime::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstance.GetOwningCharacterMovement
// 0x0008 (0x0008 - 0x0000)
struct TngAnimInstance_GetOwningCharacterMovement final
{
public:
	class UTngCharacterMovementComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_GetOwningCharacterMovement) == 0x000008, "Wrong alignment on TngAnimInstance_GetOwningCharacterMovement");
static_assert(sizeof(TngAnimInstance_GetOwningCharacterMovement) == 0x000008, "Wrong size on TngAnimInstance_GetOwningCharacterMovement");
static_assert(offsetof(TngAnimInstance_GetOwningCharacterMovement, ReturnValue) == 0x000000, "Member 'TngAnimInstance_GetOwningCharacterMovement::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstance.GetOwningTngCharacter
// 0x0008 (0x0008 - 0x0000)
struct TngAnimInstance_GetOwningTngCharacter final
{
public:
	class ATngCharacter*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_GetOwningTngCharacter) == 0x000008, "Wrong alignment on TngAnimInstance_GetOwningTngCharacter");
static_assert(sizeof(TngAnimInstance_GetOwningTngCharacter) == 0x000008, "Wrong size on TngAnimInstance_GetOwningTngCharacter");
static_assert(offsetof(TngAnimInstance_GetOwningTngCharacter, ReturnValue) == 0x000000, "Member 'TngAnimInstance_GetOwningTngCharacter::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstance.HasRootMotionCurveData
// 0x0001 (0x0001 - 0x0000)
struct TngAnimInstance_HasRootMotionCurveData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_HasRootMotionCurveData) == 0x000001, "Wrong alignment on TngAnimInstance_HasRootMotionCurveData");
static_assert(sizeof(TngAnimInstance_HasRootMotionCurveData) == 0x000001, "Wrong size on TngAnimInstance_HasRootMotionCurveData");
static_assert(offsetof(TngAnimInstance_HasRootMotionCurveData, ReturnValue) == 0x000000, "Member 'TngAnimInstance_HasRootMotionCurveData::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstance.IsActiveExtraAnim
// 0x0001 (0x0001 - 0x0000)
struct TngAnimInstance_IsActiveExtraAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_IsActiveExtraAnim) == 0x000001, "Wrong alignment on TngAnimInstance_IsActiveExtraAnim");
static_assert(sizeof(TngAnimInstance_IsActiveExtraAnim) == 0x000001, "Wrong size on TngAnimInstance_IsActiveExtraAnim");
static_assert(offsetof(TngAnimInstance_IsActiveExtraAnim, ReturnValue) == 0x000000, "Member 'TngAnimInstance_IsActiveExtraAnim::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstance.IsAnyPlayingSlotAnimation
// 0x000C (0x000C - 0x0000)
struct TngAnimInstance_IsAnyPlayingSlotAnimation final
{
public:
	class FName                                   SlotNodeName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngAnimInstance_IsAnyPlayingSlotAnimation) == 0x000004, "Wrong alignment on TngAnimInstance_IsAnyPlayingSlotAnimation");
static_assert(sizeof(TngAnimInstance_IsAnyPlayingSlotAnimation) == 0x00000C, "Wrong size on TngAnimInstance_IsAnyPlayingSlotAnimation");
static_assert(offsetof(TngAnimInstance_IsAnyPlayingSlotAnimation, SlotNodeName) == 0x000000, "Member 'TngAnimInstance_IsAnyPlayingSlotAnimation::SlotNodeName' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_IsAnyPlayingSlotAnimation, ReturnValue) == 0x000008, "Member 'TngAnimInstance_IsAnyPlayingSlotAnimation::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstance.IsCompatibleAnim
// 0x0010 (0x0010 - 0x0000)
struct TngAnimInstance_IsCompatibleAnim final
{
public:
	class UAnimSequenceBase*                      AnimAsset;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngAnimInstance_IsCompatibleAnim) == 0x000008, "Wrong alignment on TngAnimInstance_IsCompatibleAnim");
static_assert(sizeof(TngAnimInstance_IsCompatibleAnim) == 0x000010, "Wrong size on TngAnimInstance_IsCompatibleAnim");
static_assert(offsetof(TngAnimInstance_IsCompatibleAnim, AnimAsset) == 0x000000, "Member 'TngAnimInstance_IsCompatibleAnim::AnimAsset' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_IsCompatibleAnim, ReturnValue) == 0x000008, "Member 'TngAnimInstance_IsCompatibleAnim::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstance.IsMontagePlaying
// 0x000C (0x000C - 0x0000)
struct TngAnimInstance_IsMontagePlaying final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngAnimInstance_IsMontagePlaying) == 0x000004, "Wrong alignment on TngAnimInstance_IsMontagePlaying");
static_assert(sizeof(TngAnimInstance_IsMontagePlaying) == 0x00000C, "Wrong size on TngAnimInstance_IsMontagePlaying");
static_assert(offsetof(TngAnimInstance_IsMontagePlaying, SlotName) == 0x000000, "Member 'TngAnimInstance_IsMontagePlaying::SlotName' has a wrong offset!");
static_assert(offsetof(TngAnimInstance_IsMontagePlaying, ReturnValue) == 0x000008, "Member 'TngAnimInstance_IsMontagePlaying::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstance.IsPlayingExtraAnim
// 0x0001 (0x0001 - 0x0000)
struct TngAnimInstance_IsPlayingExtraAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstance_IsPlayingExtraAnim) == 0x000001, "Wrong alignment on TngAnimInstance_IsPlayingExtraAnim");
static_assert(sizeof(TngAnimInstance_IsPlayingExtraAnim) == 0x000001, "Wrong size on TngAnimInstance_IsPlayingExtraAnim");
static_assert(offsetof(TngAnimInstance_IsPlayingExtraAnim, ReturnValue) == 0x000000, "Member 'TngAnimInstance_IsPlayingExtraAnim::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstanceUtility.GetTngAnimInstance
// 0x0010 (0x0010 - 0x0000)
struct TngAnimInstanceUtility_GetTngAnimInstance final
{
public:
	class USkeletalMeshComponent*                 SkelMeshComp;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTngAnimInstance*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstanceUtility_GetTngAnimInstance) == 0x000008, "Wrong alignment on TngAnimInstanceUtility_GetTngAnimInstance");
static_assert(sizeof(TngAnimInstanceUtility_GetTngAnimInstance) == 0x000010, "Wrong size on TngAnimInstanceUtility_GetTngAnimInstance");
static_assert(offsetof(TngAnimInstanceUtility_GetTngAnimInstance, SkelMeshComp) == 0x000000, "Member 'TngAnimInstanceUtility_GetTngAnimInstance::SkelMeshComp' has a wrong offset!");
static_assert(offsetof(TngAnimInstanceUtility_GetTngAnimInstance, ReturnValue) == 0x000008, "Member 'TngAnimInstanceUtility_GetTngAnimInstance::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstanceUtility.GetTngAnimInstanceFromActor
// 0x0010 (0x0010 - 0x0000)
struct TngAnimInstanceUtility_GetTngAnimInstanceFromActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTngAnimInstance*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstanceUtility_GetTngAnimInstanceFromActor) == 0x000008, "Wrong alignment on TngAnimInstanceUtility_GetTngAnimInstanceFromActor");
static_assert(sizeof(TngAnimInstanceUtility_GetTngAnimInstanceFromActor) == 0x000010, "Wrong size on TngAnimInstanceUtility_GetTngAnimInstanceFromActor");
static_assert(offsetof(TngAnimInstanceUtility_GetTngAnimInstanceFromActor, Actor) == 0x000000, "Member 'TngAnimInstanceUtility_GetTngAnimInstanceFromActor::Actor' has a wrong offset!");
static_assert(offsetof(TngAnimInstanceUtility_GetTngAnimInstanceFromActor, ReturnValue) == 0x000008, "Member 'TngAnimInstanceUtility_GetTngAnimInstanceFromActor::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstanceUtility.MakeCoopAnimPlayParamForPair
// 0x0030 (0x0030 - 0x0000)
struct TngAnimInstanceUtility_MakeCoopAnimPlayParamForPair final
{
public:
	class AActor*                                 Master;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Slave;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTngCoopAnimAsset*                      Asset;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTngCoopAnimPlayParam                  ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstanceUtility_MakeCoopAnimPlayParamForPair) == 0x000008, "Wrong alignment on TngAnimInstanceUtility_MakeCoopAnimPlayParamForPair");
static_assert(sizeof(TngAnimInstanceUtility_MakeCoopAnimPlayParamForPair) == 0x000030, "Wrong size on TngAnimInstanceUtility_MakeCoopAnimPlayParamForPair");
static_assert(offsetof(TngAnimInstanceUtility_MakeCoopAnimPlayParamForPair, Master) == 0x000000, "Member 'TngAnimInstanceUtility_MakeCoopAnimPlayParamForPair::Master' has a wrong offset!");
static_assert(offsetof(TngAnimInstanceUtility_MakeCoopAnimPlayParamForPair, Slave) == 0x000008, "Member 'TngAnimInstanceUtility_MakeCoopAnimPlayParamForPair::Slave' has a wrong offset!");
static_assert(offsetof(TngAnimInstanceUtility_MakeCoopAnimPlayParamForPair, Asset) == 0x000010, "Member 'TngAnimInstanceUtility_MakeCoopAnimPlayParamForPair::Asset' has a wrong offset!");
static_assert(offsetof(TngAnimInstanceUtility_MakeCoopAnimPlayParamForPair, ReturnValue) == 0x000018, "Member 'TngAnimInstanceUtility_MakeCoopAnimPlayParamForPair::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstanceUtility.MakeCoopAnimPlayParamForTrio
// 0x0038 (0x0038 - 0x0000)
struct TngAnimInstanceUtility_MakeCoopAnimPlayParamForTrio final
{
public:
	class AActor*                                 Master;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Slave1;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Slave2;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTngCoopAnimAsset*                      Asset;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTngCoopAnimPlayParam                  ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAnimInstanceUtility_MakeCoopAnimPlayParamForTrio) == 0x000008, "Wrong alignment on TngAnimInstanceUtility_MakeCoopAnimPlayParamForTrio");
static_assert(sizeof(TngAnimInstanceUtility_MakeCoopAnimPlayParamForTrio) == 0x000038, "Wrong size on TngAnimInstanceUtility_MakeCoopAnimPlayParamForTrio");
static_assert(offsetof(TngAnimInstanceUtility_MakeCoopAnimPlayParamForTrio, Master) == 0x000000, "Member 'TngAnimInstanceUtility_MakeCoopAnimPlayParamForTrio::Master' has a wrong offset!");
static_assert(offsetof(TngAnimInstanceUtility_MakeCoopAnimPlayParamForTrio, Slave1) == 0x000008, "Member 'TngAnimInstanceUtility_MakeCoopAnimPlayParamForTrio::Slave1' has a wrong offset!");
static_assert(offsetof(TngAnimInstanceUtility_MakeCoopAnimPlayParamForTrio, Slave2) == 0x000010, "Member 'TngAnimInstanceUtility_MakeCoopAnimPlayParamForTrio::Slave2' has a wrong offset!");
static_assert(offsetof(TngAnimInstanceUtility_MakeCoopAnimPlayParamForTrio, Asset) == 0x000018, "Member 'TngAnimInstanceUtility_MakeCoopAnimPlayParamForTrio::Asset' has a wrong offset!");
static_assert(offsetof(TngAnimInstanceUtility_MakeCoopAnimPlayParamForTrio, ReturnValue) == 0x000020, "Member 'TngAnimInstanceUtility_MakeCoopAnimPlayParamForTrio::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstanceUtility.PlayExtraAnimationUtil
// 0x0030 (0x0030 - 0x0000)
struct TngAnimInstanceUtility_PlayExtraAnimationUtil final
{
public:
	class UAnimInstance*                          Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTngPlayAnimData                       InAnimData;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ETngPlayAnimTransit                           TransitType;                                       // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngAnimInstanceUtility_PlayExtraAnimationUtil) == 0x000008, "Wrong alignment on TngAnimInstanceUtility_PlayExtraAnimationUtil");
static_assert(sizeof(TngAnimInstanceUtility_PlayExtraAnimationUtil) == 0x000030, "Wrong size on TngAnimInstanceUtility_PlayExtraAnimationUtil");
static_assert(offsetof(TngAnimInstanceUtility_PlayExtraAnimationUtil, Instance) == 0x000000, "Member 'TngAnimInstanceUtility_PlayExtraAnimationUtil::Instance' has a wrong offset!");
static_assert(offsetof(TngAnimInstanceUtility_PlayExtraAnimationUtil, InAnimData) == 0x000008, "Member 'TngAnimInstanceUtility_PlayExtraAnimationUtil::InAnimData' has a wrong offset!");
static_assert(offsetof(TngAnimInstanceUtility_PlayExtraAnimationUtil, TransitType) == 0x000028, "Member 'TngAnimInstanceUtility_PlayExtraAnimationUtil::TransitType' has a wrong offset!");
static_assert(offsetof(TngAnimInstanceUtility_PlayExtraAnimationUtil, ReturnValue) == 0x000029, "Member 'TngAnimInstanceUtility_PlayExtraAnimationUtil::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimInstanceUtility.StopExtraAnimationUtil
// 0x0010 (0x0010 - 0x0000)
struct TngAnimInstanceUtility_StopExtraAnimationUtil final
{
public:
	class UAnimInstance*                          Instance;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngAnimInstanceUtility_StopExtraAnimationUtil) == 0x000008, "Wrong alignment on TngAnimInstanceUtility_StopExtraAnimationUtil");
static_assert(sizeof(TngAnimInstanceUtility_StopExtraAnimationUtil) == 0x000010, "Wrong size on TngAnimInstanceUtility_StopExtraAnimationUtil");
static_assert(offsetof(TngAnimInstanceUtility_StopExtraAnimationUtil, Instance) == 0x000000, "Member 'TngAnimInstanceUtility_StopExtraAnimationUtil::Instance' has a wrong offset!");
static_assert(offsetof(TngAnimInstanceUtility_StopExtraAnimationUtil, BlendOutTime) == 0x000008, "Member 'TngAnimInstanceUtility_StopExtraAnimationUtil::BlendOutTime' has a wrong offset!");

// Function TangoLib.TngNavLinkProxy.AgentTeleportTo
// 0x0028 (0x0028 - 0x0000)
struct TngNavLinkProxy_AgentTeleportTo final
{
public:
	class AActor*                                 Agent;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DestLocation;                                      // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DestRotation;                                      // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngNavLinkProxy_AgentTeleportTo) == 0x000008, "Wrong alignment on TngNavLinkProxy_AgentTeleportTo");
static_assert(sizeof(TngNavLinkProxy_AgentTeleportTo) == 0x000028, "Wrong size on TngNavLinkProxy_AgentTeleportTo");
static_assert(offsetof(TngNavLinkProxy_AgentTeleportTo, Agent) == 0x000000, "Member 'TngNavLinkProxy_AgentTeleportTo::Agent' has a wrong offset!");
static_assert(offsetof(TngNavLinkProxy_AgentTeleportTo, DestLocation) == 0x000008, "Member 'TngNavLinkProxy_AgentTeleportTo::DestLocation' has a wrong offset!");
static_assert(offsetof(TngNavLinkProxy_AgentTeleportTo, DestRotation) == 0x000014, "Member 'TngNavLinkProxy_AgentTeleportTo::DestRotation' has a wrong offset!");
static_assert(offsetof(TngNavLinkProxy_AgentTeleportTo, ReturnValue) == 0x000020, "Member 'TngNavLinkProxy_AgentTeleportTo::ReturnValue' has a wrong offset!");

// Function TangoLib.TngNavLinkProxy.FindPairLocation
// 0x001C (0x001C - 0x0000)
struct TngNavLinkProxy_FindPairLocation final
{
public:
	struct FVector                                TestLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DestLocation;                                      // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngNavLinkProxy_FindPairLocation) == 0x000004, "Wrong alignment on TngNavLinkProxy_FindPairLocation");
static_assert(sizeof(TngNavLinkProxy_FindPairLocation) == 0x00001C, "Wrong size on TngNavLinkProxy_FindPairLocation");
static_assert(offsetof(TngNavLinkProxy_FindPairLocation, TestLocation) == 0x000000, "Member 'TngNavLinkProxy_FindPairLocation::TestLocation' has a wrong offset!");
static_assert(offsetof(TngNavLinkProxy_FindPairLocation, DestLocation) == 0x00000C, "Member 'TngNavLinkProxy_FindPairLocation::DestLocation' has a wrong offset!");
static_assert(offsetof(TngNavLinkProxy_FindPairLocation, ReturnValue) == 0x000018, "Member 'TngNavLinkProxy_FindPairLocation::ReturnValue' has a wrong offset!");

// Function TangoLib.TngNavLinkProxy.PauseMove
// 0x0008 (0x0008 - 0x0000)
struct TngNavLinkProxy_PauseMove final
{
public:
	class AActor*                                 Agent;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngNavLinkProxy_PauseMove) == 0x000008, "Wrong alignment on TngNavLinkProxy_PauseMove");
static_assert(sizeof(TngNavLinkProxy_PauseMove) == 0x000008, "Wrong size on TngNavLinkProxy_PauseMove");
static_assert(offsetof(TngNavLinkProxy_PauseMove, Agent) == 0x000000, "Member 'TngNavLinkProxy_PauseMove::Agent' has a wrong offset!");

// Function TangoLib.TngNavLinkProxy.ReceiveSmartLinkReachedAtExit
// 0x0018 (0x0018 - 0x0000)
struct TngNavLinkProxy_ReceiveSmartLinkReachedAtExit final
{
public:
	class AActor*                                 Agent;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngNavLinkProxy_ReceiveSmartLinkReachedAtExit) == 0x000008, "Wrong alignment on TngNavLinkProxy_ReceiveSmartLinkReachedAtExit");
static_assert(sizeof(TngNavLinkProxy_ReceiveSmartLinkReachedAtExit) == 0x000018, "Wrong size on TngNavLinkProxy_ReceiveSmartLinkReachedAtExit");
static_assert(offsetof(TngNavLinkProxy_ReceiveSmartLinkReachedAtExit, Agent) == 0x000000, "Member 'TngNavLinkProxy_ReceiveSmartLinkReachedAtExit::Agent' has a wrong offset!");
static_assert(offsetof(TngNavLinkProxy_ReceiveSmartLinkReachedAtExit, Destination) == 0x000008, "Member 'TngNavLinkProxy_ReceiveSmartLinkReachedAtExit::Destination' has a wrong offset!");

// Function TangoLib.TngNavLinkProxy.ResumeMove
// 0x0008 (0x0008 - 0x0000)
struct TngNavLinkProxy_ResumeMove final
{
public:
	class AActor*                                 Agent;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngNavLinkProxy_ResumeMove) == 0x000008, "Wrong alignment on TngNavLinkProxy_ResumeMove");
static_assert(sizeof(TngNavLinkProxy_ResumeMove) == 0x000008, "Wrong size on TngNavLinkProxy_ResumeMove");
static_assert(offsetof(TngNavLinkProxy_ResumeMove, Agent) == 0x000000, "Member 'TngNavLinkProxy_ResumeMove::Agent' has a wrong offset!");

// Function TangoLib.TngAnimNotifyStateInterface.BlueprintNative_NotifyStateBegin
// 0x0028 (0x0028 - 0x0000)
struct TngAnimNotifyStateInterface_BlueprintNative_NotifyStateBegin final
{
public:
	const class UAnimNotifyState*                 AnimNotify;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Animation;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDuration;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x001C(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngAnimNotifyStateInterface_BlueprintNative_NotifyStateBegin) == 0x000008, "Wrong alignment on TngAnimNotifyStateInterface_BlueprintNative_NotifyStateBegin");
static_assert(sizeof(TngAnimNotifyStateInterface_BlueprintNative_NotifyStateBegin) == 0x000028, "Wrong size on TngAnimNotifyStateInterface_BlueprintNative_NotifyStateBegin");
static_assert(offsetof(TngAnimNotifyStateInterface_BlueprintNative_NotifyStateBegin, AnimNotify) == 0x000000, "Member 'TngAnimNotifyStateInterface_BlueprintNative_NotifyStateBegin::AnimNotify' has a wrong offset!");
static_assert(offsetof(TngAnimNotifyStateInterface_BlueprintNative_NotifyStateBegin, MeshComp) == 0x000008, "Member 'TngAnimNotifyStateInterface_BlueprintNative_NotifyStateBegin::MeshComp' has a wrong offset!");
static_assert(offsetof(TngAnimNotifyStateInterface_BlueprintNative_NotifyStateBegin, Animation) == 0x000010, "Member 'TngAnimNotifyStateInterface_BlueprintNative_NotifyStateBegin::Animation' has a wrong offset!");
static_assert(offsetof(TngAnimNotifyStateInterface_BlueprintNative_NotifyStateBegin, TotalDuration) == 0x000018, "Member 'TngAnimNotifyStateInterface_BlueprintNative_NotifyStateBegin::TotalDuration' has a wrong offset!");
static_assert(offsetof(TngAnimNotifyStateInterface_BlueprintNative_NotifyStateBegin, GameplayTag) == 0x00001C, "Member 'TngAnimNotifyStateInterface_BlueprintNative_NotifyStateBegin::GameplayTag' has a wrong offset!");
static_assert(offsetof(TngAnimNotifyStateInterface_BlueprintNative_NotifyStateBegin, ReturnValue) == 0x000024, "Member 'TngAnimNotifyStateInterface_BlueprintNative_NotifyStateBegin::ReturnValue' has a wrong offset!");

// Function TangoLib.TngAnimNotifyStateInterface.BlueprintNative_NotifyStateEnd
// 0x0028 (0x0028 - 0x0000)
struct TngAnimNotifyStateInterface_BlueprintNative_NotifyStateEnd final
{
public:
	const class UAnimNotifyState*                 AnimNotify;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Animation;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngAnimNotifyStateInterface_BlueprintNative_NotifyStateEnd) == 0x000008, "Wrong alignment on TngAnimNotifyStateInterface_BlueprintNative_NotifyStateEnd");
static_assert(sizeof(TngAnimNotifyStateInterface_BlueprintNative_NotifyStateEnd) == 0x000028, "Wrong size on TngAnimNotifyStateInterface_BlueprintNative_NotifyStateEnd");
static_assert(offsetof(TngAnimNotifyStateInterface_BlueprintNative_NotifyStateEnd, AnimNotify) == 0x000000, "Member 'TngAnimNotifyStateInterface_BlueprintNative_NotifyStateEnd::AnimNotify' has a wrong offset!");
static_assert(offsetof(TngAnimNotifyStateInterface_BlueprintNative_NotifyStateEnd, MeshComp) == 0x000008, "Member 'TngAnimNotifyStateInterface_BlueprintNative_NotifyStateEnd::MeshComp' has a wrong offset!");
static_assert(offsetof(TngAnimNotifyStateInterface_BlueprintNative_NotifyStateEnd, Animation) == 0x000010, "Member 'TngAnimNotifyStateInterface_BlueprintNative_NotifyStateEnd::Animation' has a wrong offset!");
static_assert(offsetof(TngAnimNotifyStateInterface_BlueprintNative_NotifyStateEnd, GameplayTag) == 0x000018, "Member 'TngAnimNotifyStateInterface_BlueprintNative_NotifyStateEnd::GameplayTag' has a wrong offset!");
static_assert(offsetof(TngAnimNotifyStateInterface_BlueprintNative_NotifyStateEnd, ReturnValue) == 0x000020, "Member 'TngAnimNotifyStateInterface_BlueprintNative_NotifyStateEnd::ReturnValue' has a wrong offset!");

// Function TangoLib.TngApplicationFunction.CanEverRender
// 0x0001 (0x0001 - 0x0000)
struct TngApplicationFunction_CanEverRender final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngApplicationFunction_CanEverRender) == 0x000001, "Wrong alignment on TngApplicationFunction_CanEverRender");
static_assert(sizeof(TngApplicationFunction_CanEverRender) == 0x000001, "Wrong size on TngApplicationFunction_CanEverRender");
static_assert(offsetof(TngApplicationFunction_CanEverRender, ReturnValue) == 0x000000, "Member 'TngApplicationFunction_CanEverRender::ReturnValue' has a wrong offset!");

// Function TangoLib.TngApplicationFunction.IsConsoleMachine
// 0x0001 (0x0001 - 0x0000)
struct TngApplicationFunction_IsConsoleMachine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngApplicationFunction_IsConsoleMachine) == 0x000001, "Wrong alignment on TngApplicationFunction_IsConsoleMachine");
static_assert(sizeof(TngApplicationFunction_IsConsoleMachine) == 0x000001, "Wrong size on TngApplicationFunction_IsConsoleMachine");
static_assert(offsetof(TngApplicationFunction_IsConsoleMachine, ReturnValue) == 0x000000, "Member 'TngApplicationFunction_IsConsoleMachine::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInteractComponent.Blueprint_BeginInteract
// 0x0018 (0x0018 - 0x0000)
struct TngInteractComponent_Blueprint_BeginInteract final
{
public:
	class AActor*                                 SendActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AdvanceObject;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInteractComponent_Blueprint_BeginInteract) == 0x000008, "Wrong alignment on TngInteractComponent_Blueprint_BeginInteract");
static_assert(sizeof(TngInteractComponent_Blueprint_BeginInteract) == 0x000018, "Wrong size on TngInteractComponent_Blueprint_BeginInteract");
static_assert(offsetof(TngInteractComponent_Blueprint_BeginInteract, SendActor) == 0x000000, "Member 'TngInteractComponent_Blueprint_BeginInteract::SendActor' has a wrong offset!");
static_assert(offsetof(TngInteractComponent_Blueprint_BeginInteract, Tag) == 0x000008, "Member 'TngInteractComponent_Blueprint_BeginInteract::Tag' has a wrong offset!");
static_assert(offsetof(TngInteractComponent_Blueprint_BeginInteract, AdvanceObject) == 0x000010, "Member 'TngInteractComponent_Blueprint_BeginInteract::AdvanceObject' has a wrong offset!");

// Function TangoLib.TngInteractComponent.Blueprint_EndInteract
// 0x0018 (0x0018 - 0x0000)
struct TngInteractComponent_Blueprint_EndInteract final
{
public:
	class AActor*                                 SendActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AdvanceObject;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInteractComponent_Blueprint_EndInteract) == 0x000008, "Wrong alignment on TngInteractComponent_Blueprint_EndInteract");
static_assert(sizeof(TngInteractComponent_Blueprint_EndInteract) == 0x000018, "Wrong size on TngInteractComponent_Blueprint_EndInteract");
static_assert(offsetof(TngInteractComponent_Blueprint_EndInteract, SendActor) == 0x000000, "Member 'TngInteractComponent_Blueprint_EndInteract::SendActor' has a wrong offset!");
static_assert(offsetof(TngInteractComponent_Blueprint_EndInteract, Tag) == 0x000008, "Member 'TngInteractComponent_Blueprint_EndInteract::Tag' has a wrong offset!");
static_assert(offsetof(TngInteractComponent_Blueprint_EndInteract, AdvanceObject) == 0x000010, "Member 'TngInteractComponent_Blueprint_EndInteract::AdvanceObject' has a wrong offset!");

// Function TangoLib.TngInteractComponent.Blueprint_ShouldInteract
// 0x0018 (0x0018 - 0x0000)
struct TngInteractComponent_Blueprint_ShouldInteract final
{
public:
	class AActor*                                 SendActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngInteractComponent_Blueprint_ShouldInteract) == 0x000008, "Wrong alignment on TngInteractComponent_Blueprint_ShouldInteract");
static_assert(sizeof(TngInteractComponent_Blueprint_ShouldInteract) == 0x000018, "Wrong size on TngInteractComponent_Blueprint_ShouldInteract");
static_assert(offsetof(TngInteractComponent_Blueprint_ShouldInteract, SendActor) == 0x000000, "Member 'TngInteractComponent_Blueprint_ShouldInteract::SendActor' has a wrong offset!");
static_assert(offsetof(TngInteractComponent_Blueprint_ShouldInteract, Tag) == 0x000008, "Member 'TngInteractComponent_Blueprint_ShouldInteract::Tag' has a wrong offset!");
static_assert(offsetof(TngInteractComponent_Blueprint_ShouldInteract, ReturnValue) == 0x000010, "Member 'TngInteractComponent_Blueprint_ShouldInteract::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInteractComponent.Blueprint_UpdateInteract
// 0x0018 (0x0018 - 0x0000)
struct TngInteractComponent_Blueprint_UpdateInteract final
{
public:
	class AActor*                                 SendActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AdvanceObject;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInteractComponent_Blueprint_UpdateInteract) == 0x000008, "Wrong alignment on TngInteractComponent_Blueprint_UpdateInteract");
static_assert(sizeof(TngInteractComponent_Blueprint_UpdateInteract) == 0x000018, "Wrong size on TngInteractComponent_Blueprint_UpdateInteract");
static_assert(offsetof(TngInteractComponent_Blueprint_UpdateInteract, SendActor) == 0x000000, "Member 'TngInteractComponent_Blueprint_UpdateInteract::SendActor' has a wrong offset!");
static_assert(offsetof(TngInteractComponent_Blueprint_UpdateInteract, Tag) == 0x000008, "Member 'TngInteractComponent_Blueprint_UpdateInteract::Tag' has a wrong offset!");
static_assert(offsetof(TngInteractComponent_Blueprint_UpdateInteract, AdvanceObject) == 0x000010, "Member 'TngInteractComponent_Blueprint_UpdateInteract::AdvanceObject' has a wrong offset!");

// Function TangoLib.TngInteractComponent.CheckSleepInteract
// 0x000C (0x000C - 0x0000)
struct TngInteractComponent_CheckSleepInteract final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngInteractComponent_CheckSleepInteract) == 0x000004, "Wrong alignment on TngInteractComponent_CheckSleepInteract");
static_assert(sizeof(TngInteractComponent_CheckSleepInteract) == 0x00000C, "Wrong size on TngInteractComponent_CheckSleepInteract");
static_assert(offsetof(TngInteractComponent_CheckSleepInteract, Tag) == 0x000000, "Member 'TngInteractComponent_CheckSleepInteract::Tag' has a wrong offset!");
static_assert(offsetof(TngInteractComponent_CheckSleepInteract, ReturnValue) == 0x000008, "Member 'TngInteractComponent_CheckSleepInteract::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInteractComponent.InitializeInteractTags
// 0x0020 (0x0020 - 0x0000)
struct TngInteractComponent_InitializeInteractTags final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInteractComponent_InitializeInteractTags) == 0x000008, "Wrong alignment on TngInteractComponent_InitializeInteractTags");
static_assert(sizeof(TngInteractComponent_InitializeInteractTags) == 0x000020, "Wrong size on TngInteractComponent_InitializeInteractTags");
static_assert(offsetof(TngInteractComponent_InitializeInteractTags, Tags) == 0x000000, "Member 'TngInteractComponent_InitializeInteractTags::Tags' has a wrong offset!");

// Function TangoLib.TngInteractComponent.IsValidTag
// 0x000C (0x000C - 0x0000)
struct TngInteractComponent_IsValidTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngInteractComponent_IsValidTag) == 0x000004, "Wrong alignment on TngInteractComponent_IsValidTag");
static_assert(sizeof(TngInteractComponent_IsValidTag) == 0x00000C, "Wrong size on TngInteractComponent_IsValidTag");
static_assert(offsetof(TngInteractComponent_IsValidTag, Tag) == 0x000000, "Member 'TngInteractComponent_IsValidTag::Tag' has a wrong offset!");
static_assert(offsetof(TngInteractComponent_IsValidTag, ReturnValue) == 0x000008, "Member 'TngInteractComponent_IsValidTag::ReturnValue' has a wrong offset!");

// Function TangoLib.TngInteractComponent.SetReturnFlag
// 0x0001 (0x0001 - 0x0000)
struct TngInteractComponent_SetReturnFlag final
{
public:
	bool                                          ReturnBool;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInteractComponent_SetReturnFlag) == 0x000001, "Wrong alignment on TngInteractComponent_SetReturnFlag");
static_assert(sizeof(TngInteractComponent_SetReturnFlag) == 0x000001, "Wrong size on TngInteractComponent_SetReturnFlag");
static_assert(offsetof(TngInteractComponent_SetReturnFlag, ReturnBool) == 0x000000, "Member 'TngInteractComponent_SetReturnFlag::ReturnBool' has a wrong offset!");

// Function TangoLib.TngInteractComponent.SleepInteract
// 0x0008 (0x0008 - 0x0000)
struct TngInteractComponent_SleepInteract final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInteractComponent_SleepInteract) == 0x000004, "Wrong alignment on TngInteractComponent_SleepInteract");
static_assert(sizeof(TngInteractComponent_SleepInteract) == 0x000008, "Wrong size on TngInteractComponent_SleepInteract");
static_assert(offsetof(TngInteractComponent_SleepInteract, Tag) == 0x000000, "Member 'TngInteractComponent_SleepInteract::Tag' has a wrong offset!");

// Function TangoLib.TngInteractComponent.WakeUpInteract
// 0x0008 (0x0008 - 0x0000)
struct TngInteractComponent_WakeUpInteract final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngInteractComponent_WakeUpInteract) == 0x000004, "Wrong alignment on TngInteractComponent_WakeUpInteract");
static_assert(sizeof(TngInteractComponent_WakeUpInteract) == 0x000008, "Wrong size on TngInteractComponent_WakeUpInteract");
static_assert(offsetof(TngInteractComponent_WakeUpInteract, Tag) == 0x000000, "Member 'TngInteractComponent_WakeUpInteract::Tag' has a wrong offset!");

// Function TangoLib.TngAttackComponent.IsAttacking
// 0x0001 (0x0001 - 0x0000)
struct TngAttackComponent_IsAttacking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngAttackComponent_IsAttacking) == 0x000001, "Wrong alignment on TngAttackComponent_IsAttacking");
static_assert(sizeof(TngAttackComponent_IsAttacking) == 0x000001, "Wrong size on TngAttackComponent_IsAttacking");
static_assert(offsetof(TngAttackComponent_IsAttacking, ReturnValue) == 0x000000, "Member 'TngAttackComponent_IsAttacking::ReturnValue' has a wrong offset!");

// Function TangoLib.TngBoundaryComponent.GetRandomPointInNavigableBoundary
// 0x0010 (0x0010 - 0x0000)
struct TngBoundaryComponent_GetRandomPointInNavigableBoundary final
{
public:
	struct FVector                                OutPoint;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngBoundaryComponent_GetRandomPointInNavigableBoundary) == 0x000004, "Wrong alignment on TngBoundaryComponent_GetRandomPointInNavigableBoundary");
static_assert(sizeof(TngBoundaryComponent_GetRandomPointInNavigableBoundary) == 0x000010, "Wrong size on TngBoundaryComponent_GetRandomPointInNavigableBoundary");
static_assert(offsetof(TngBoundaryComponent_GetRandomPointInNavigableBoundary, OutPoint) == 0x000000, "Member 'TngBoundaryComponent_GetRandomPointInNavigableBoundary::OutPoint' has a wrong offset!");
static_assert(offsetof(TngBoundaryComponent_GetRandomPointInNavigableBoundary, ReturnValue) == 0x00000C, "Member 'TngBoundaryComponent_GetRandomPointInNavigableBoundary::ReturnValue' has a wrong offset!");

// Function TangoLib.TngBoundaryComponent.IsInside
// 0x0010 (0x0010 - 0x0000)
struct TngBoundaryComponent_IsInside final
{
public:
	struct FVector                                CheckLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngBoundaryComponent_IsInside) == 0x000004, "Wrong alignment on TngBoundaryComponent_IsInside");
static_assert(sizeof(TngBoundaryComponent_IsInside) == 0x000010, "Wrong size on TngBoundaryComponent_IsInside");
static_assert(offsetof(TngBoundaryComponent_IsInside, CheckLocation) == 0x000000, "Member 'TngBoundaryComponent_IsInside::CheckLocation' has a wrong offset!");
static_assert(offsetof(TngBoundaryComponent_IsInside, ReturnValue) == 0x00000C, "Member 'TngBoundaryComponent_IsInside::ReturnValue' has a wrong offset!");

// Function TangoLib.TngPickRelevantInterface.BlueprintNative_Pick
// 0x0010 (0x0010 - 0x0000)
struct TngPickRelevantInterface_BlueprintNative_Pick final
{
public:
	class AActor*                                 ToActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngPickRelevantInterface_BlueprintNative_Pick) == 0x000008, "Wrong alignment on TngPickRelevantInterface_BlueprintNative_Pick");
static_assert(sizeof(TngPickRelevantInterface_BlueprintNative_Pick) == 0x000010, "Wrong size on TngPickRelevantInterface_BlueprintNative_Pick");
static_assert(offsetof(TngPickRelevantInterface_BlueprintNative_Pick, ToActor) == 0x000000, "Member 'TngPickRelevantInterface_BlueprintNative_Pick::ToActor' has a wrong offset!");
static_assert(offsetof(TngPickRelevantInterface_BlueprintNative_Pick, ReturnValue) == 0x000008, "Member 'TngPickRelevantInterface_BlueprintNative_Pick::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacter.BindToOnPostCharacterDied
// 0x0010 (0x0010 - 0x0000)
struct TngCharacter_BindToOnPostCharacterDied final
{
public:
	TDelegate<void()>                             CallbackFunc;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacter_BindToOnPostCharacterDied) == 0x000004, "Wrong alignment on TngCharacter_BindToOnPostCharacterDied");
static_assert(sizeof(TngCharacter_BindToOnPostCharacterDied) == 0x000010, "Wrong size on TngCharacter_BindToOnPostCharacterDied");
static_assert(offsetof(TngCharacter_BindToOnPostCharacterDied, CallbackFunc) == 0x000000, "Member 'TngCharacter_BindToOnPostCharacterDied::CallbackFunc' has a wrong offset!");

// Function TangoLib.TngCharacter.GetAnimGraphStateWeight
// 0x0014 (0x0014 - 0x0000)
struct TngCharacter_GetAnimGraphStateWeight final
{
public:
	class FName                                   MachineName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacter_GetAnimGraphStateWeight) == 0x000004, "Wrong alignment on TngCharacter_GetAnimGraphStateWeight");
static_assert(sizeof(TngCharacter_GetAnimGraphStateWeight) == 0x000014, "Wrong size on TngCharacter_GetAnimGraphStateWeight");
static_assert(offsetof(TngCharacter_GetAnimGraphStateWeight, MachineName) == 0x000000, "Member 'TngCharacter_GetAnimGraphStateWeight::MachineName' has a wrong offset!");
static_assert(offsetof(TngCharacter_GetAnimGraphStateWeight, StateName) == 0x000008, "Member 'TngCharacter_GetAnimGraphStateWeight::StateName' has a wrong offset!");
static_assert(offsetof(TngCharacter_GetAnimGraphStateWeight, ReturnValue) == 0x000010, "Member 'TngCharacter_GetAnimGraphStateWeight::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacter.IsAnimGraphStateActive
// 0x0018 (0x0018 - 0x0000)
struct TngCharacter_IsAnimGraphStateActive final
{
public:
	class FName                                   MachineName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThresholdWeight;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngCharacter_IsAnimGraphStateActive) == 0x000004, "Wrong alignment on TngCharacter_IsAnimGraphStateActive");
static_assert(sizeof(TngCharacter_IsAnimGraphStateActive) == 0x000018, "Wrong size on TngCharacter_IsAnimGraphStateActive");
static_assert(offsetof(TngCharacter_IsAnimGraphStateActive, MachineName) == 0x000000, "Member 'TngCharacter_IsAnimGraphStateActive::MachineName' has a wrong offset!");
static_assert(offsetof(TngCharacter_IsAnimGraphStateActive, StateName) == 0x000008, "Member 'TngCharacter_IsAnimGraphStateActive::StateName' has a wrong offset!");
static_assert(offsetof(TngCharacter_IsAnimGraphStateActive, ThresholdWeight) == 0x000010, "Member 'TngCharacter_IsAnimGraphStateActive::ThresholdWeight' has a wrong offset!");
static_assert(offsetof(TngCharacter_IsAnimGraphStateActive, ReturnValue) == 0x000014, "Member 'TngCharacter_IsAnimGraphStateActive::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacter.IsAnyAnimGraphStateActive
// 0x0020 (0x0020 - 0x0000)
struct TngCharacter_IsAnyAnimGraphStateActive final
{
public:
	class FName                                   MachineName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           StateNames;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ThresholdWeight;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngCharacter_IsAnyAnimGraphStateActive) == 0x000008, "Wrong alignment on TngCharacter_IsAnyAnimGraphStateActive");
static_assert(sizeof(TngCharacter_IsAnyAnimGraphStateActive) == 0x000020, "Wrong size on TngCharacter_IsAnyAnimGraphStateActive");
static_assert(offsetof(TngCharacter_IsAnyAnimGraphStateActive, MachineName) == 0x000000, "Member 'TngCharacter_IsAnyAnimGraphStateActive::MachineName' has a wrong offset!");
static_assert(offsetof(TngCharacter_IsAnyAnimGraphStateActive, StateNames) == 0x000008, "Member 'TngCharacter_IsAnyAnimGraphStateActive::StateNames' has a wrong offset!");
static_assert(offsetof(TngCharacter_IsAnyAnimGraphStateActive, ThresholdWeight) == 0x000018, "Member 'TngCharacter_IsAnyAnimGraphStateActive::ThresholdWeight' has a wrong offset!");
static_assert(offsetof(TngCharacter_IsAnyAnimGraphStateActive, ReturnValue) == 0x00001C, "Member 'TngCharacter_IsAnyAnimGraphStateActive::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacter.JumpByHeight
// 0x0004 (0x0004 - 0x0000)
struct TngCharacter_JumpByHeight final
{
public:
	float                                         Height;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacter_JumpByHeight) == 0x000004, "Wrong alignment on TngCharacter_JumpByHeight");
static_assert(sizeof(TngCharacter_JumpByHeight) == 0x000004, "Wrong size on TngCharacter_JumpByHeight");
static_assert(offsetof(TngCharacter_JumpByHeight, Height) == 0x000000, "Member 'TngCharacter_JumpByHeight::Height' has a wrong offset!");

// Function TangoLib.TngCharacter.JumpByTarget
// 0x0014 (0x0014 - 0x0000)
struct TngCharacter_JumpByTarget final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpHeight;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpTime;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacter_JumpByTarget) == 0x000004, "Wrong alignment on TngCharacter_JumpByTarget");
static_assert(sizeof(TngCharacter_JumpByTarget) == 0x000014, "Wrong size on TngCharacter_JumpByTarget");
static_assert(offsetof(TngCharacter_JumpByTarget, TargetLocation) == 0x000000, "Member 'TngCharacter_JumpByTarget::TargetLocation' has a wrong offset!");
static_assert(offsetof(TngCharacter_JumpByTarget, JumpHeight) == 0x00000C, "Member 'TngCharacter_JumpByTarget::JumpHeight' has a wrong offset!");
static_assert(offsetof(TngCharacter_JumpByTarget, JumpTime) == 0x000010, "Member 'TngCharacter_JumpByTarget::JumpTime' has a wrong offset!");

// Function TangoLib.TngCharacter.ModifyAttackDamageAmount
// 0x0020 (0x0020 - 0x0000)
struct TngCharacter_ModifyAttackDamageAmount final
{
public:
	class FName                                   AtkDmgName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultDmgAmount;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                DmgType;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngCharacter_ModifyAttackDamageAmount) == 0x000008, "Wrong alignment on TngCharacter_ModifyAttackDamageAmount");
static_assert(sizeof(TngCharacter_ModifyAttackDamageAmount) == 0x000020, "Wrong size on TngCharacter_ModifyAttackDamageAmount");
static_assert(offsetof(TngCharacter_ModifyAttackDamageAmount, AtkDmgName) == 0x000000, "Member 'TngCharacter_ModifyAttackDamageAmount::AtkDmgName' has a wrong offset!");
static_assert(offsetof(TngCharacter_ModifyAttackDamageAmount, DefaultDmgAmount) == 0x000008, "Member 'TngCharacter_ModifyAttackDamageAmount::DefaultDmgAmount' has a wrong offset!");
static_assert(offsetof(TngCharacter_ModifyAttackDamageAmount, DmgType) == 0x000010, "Member 'TngCharacter_ModifyAttackDamageAmount::DmgType' has a wrong offset!");
static_assert(offsetof(TngCharacter_ModifyAttackDamageAmount, ReturnValue) == 0x000018, "Member 'TngCharacter_ModifyAttackDamageAmount::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacter.PlaySlotAnimationAsDynamicMontage
// 0x0030 (0x0030 - 0x0000)
struct TngCharacter_PlaySlotAnimationAsDynamicMontage final
{
public:
	class UAnimSequenceBase*                      Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTriggerTime;                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTimeToStartMontageAt;                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacter_PlaySlotAnimationAsDynamicMontage) == 0x000008, "Wrong alignment on TngCharacter_PlaySlotAnimationAsDynamicMontage");
static_assert(sizeof(TngCharacter_PlaySlotAnimationAsDynamicMontage) == 0x000030, "Wrong size on TngCharacter_PlaySlotAnimationAsDynamicMontage");
static_assert(offsetof(TngCharacter_PlaySlotAnimationAsDynamicMontage, Asset) == 0x000000, "Member 'TngCharacter_PlaySlotAnimationAsDynamicMontage::Asset' has a wrong offset!");
static_assert(offsetof(TngCharacter_PlaySlotAnimationAsDynamicMontage, SlotNodeName) == 0x000008, "Member 'TngCharacter_PlaySlotAnimationAsDynamicMontage::SlotNodeName' has a wrong offset!");
static_assert(offsetof(TngCharacter_PlaySlotAnimationAsDynamicMontage, BlendInTime) == 0x000010, "Member 'TngCharacter_PlaySlotAnimationAsDynamicMontage::BlendInTime' has a wrong offset!");
static_assert(offsetof(TngCharacter_PlaySlotAnimationAsDynamicMontage, BlendOutTime) == 0x000014, "Member 'TngCharacter_PlaySlotAnimationAsDynamicMontage::BlendOutTime' has a wrong offset!");
static_assert(offsetof(TngCharacter_PlaySlotAnimationAsDynamicMontage, InPlayRate) == 0x000018, "Member 'TngCharacter_PlaySlotAnimationAsDynamicMontage::InPlayRate' has a wrong offset!");
static_assert(offsetof(TngCharacter_PlaySlotAnimationAsDynamicMontage, LoopCount) == 0x00001C, "Member 'TngCharacter_PlaySlotAnimationAsDynamicMontage::LoopCount' has a wrong offset!");
static_assert(offsetof(TngCharacter_PlaySlotAnimationAsDynamicMontage, BlendOutTriggerTime) == 0x000020, "Member 'TngCharacter_PlaySlotAnimationAsDynamicMontage::BlendOutTriggerTime' has a wrong offset!");
static_assert(offsetof(TngCharacter_PlaySlotAnimationAsDynamicMontage, InTimeToStartMontageAt) == 0x000024, "Member 'TngCharacter_PlaySlotAnimationAsDynamicMontage::InTimeToStartMontageAt' has a wrong offset!");
static_assert(offsetof(TngCharacter_PlaySlotAnimationAsDynamicMontage, ReturnValue) == 0x000028, "Member 'TngCharacter_PlaySlotAnimationAsDynamicMontage::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacter.SetBaseTranslationOffset
// 0x000C (0x000C - 0x0000)
struct TngCharacter_SetBaseTranslationOffset final
{
public:
	struct FVector                                SetOffset;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacter_SetBaseTranslationOffset) == 0x000004, "Wrong alignment on TngCharacter_SetBaseTranslationOffset");
static_assert(sizeof(TngCharacter_SetBaseTranslationOffset) == 0x00000C, "Wrong size on TngCharacter_SetBaseTranslationOffset");
static_assert(offsetof(TngCharacter_SetBaseTranslationOffset, SetOffset) == 0x000000, "Member 'TngCharacter_SetBaseTranslationOffset::SetOffset' has a wrong offset!");

// Function TangoLib.TngCharacter.SetCharacterDeadFlag
// 0x0001 (0x0001 - 0x0000)
struct TngCharacter_SetCharacterDeadFlag final
{
public:
	bool                                          bDead;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacter_SetCharacterDeadFlag) == 0x000001, "Wrong alignment on TngCharacter_SetCharacterDeadFlag");
static_assert(sizeof(TngCharacter_SetCharacterDeadFlag) == 0x000001, "Wrong size on TngCharacter_SetCharacterDeadFlag");
static_assert(offsetof(TngCharacter_SetCharacterDeadFlag, bDead) == 0x000000, "Member 'TngCharacter_SetCharacterDeadFlag::bDead' has a wrong offset!");

// Function TangoLib.TngCharacter.SetIgnoreGravity
// 0x0001 (0x0001 - 0x0000)
struct TngCharacter_SetIgnoreGravity final
{
public:
	bool                                          NewFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacter_SetIgnoreGravity) == 0x000001, "Wrong alignment on TngCharacter_SetIgnoreGravity");
static_assert(sizeof(TngCharacter_SetIgnoreGravity) == 0x000001, "Wrong size on TngCharacter_SetIgnoreGravity");
static_assert(offsetof(TngCharacter_SetIgnoreGravity, NewFlag) == 0x000000, "Member 'TngCharacter_SetIgnoreGravity::NewFlag' has a wrong offset!");

// Function TangoLib.TngCharacter.ShowMaterialSectionBySlotName
// 0x0010 (0x0010 - 0x0000)
struct TngCharacter_ShowMaterialSectionBySlotName final
{
public:
	class FName                                   MaterialSlotName;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShow;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LODIndex;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacter_ShowMaterialSectionBySlotName) == 0x000004, "Wrong alignment on TngCharacter_ShowMaterialSectionBySlotName");
static_assert(sizeof(TngCharacter_ShowMaterialSectionBySlotName) == 0x000010, "Wrong size on TngCharacter_ShowMaterialSectionBySlotName");
static_assert(offsetof(TngCharacter_ShowMaterialSectionBySlotName, MaterialSlotName) == 0x000000, "Member 'TngCharacter_ShowMaterialSectionBySlotName::MaterialSlotName' has a wrong offset!");
static_assert(offsetof(TngCharacter_ShowMaterialSectionBySlotName, bShow) == 0x000008, "Member 'TngCharacter_ShowMaterialSectionBySlotName::bShow' has a wrong offset!");
static_assert(offsetof(TngCharacter_ShowMaterialSectionBySlotName, LODIndex) == 0x00000C, "Member 'TngCharacter_ShowMaterialSectionBySlotName::LODIndex' has a wrong offset!");

// Function TangoLib.TngCharacter.StopSlotAnimation
// 0x000C (0x000C - 0x0000)
struct TngCharacter_StopSlotAnimation final
{
public:
	float                                         InBlendOutTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacter_StopSlotAnimation) == 0x000004, "Wrong alignment on TngCharacter_StopSlotAnimation");
static_assert(sizeof(TngCharacter_StopSlotAnimation) == 0x00000C, "Wrong size on TngCharacter_StopSlotAnimation");
static_assert(offsetof(TngCharacter_StopSlotAnimation, InBlendOutTime) == 0x000000, "Member 'TngCharacter_StopSlotAnimation::InBlendOutTime' has a wrong offset!");
static_assert(offsetof(TngCharacter_StopSlotAnimation, SlotNodeName) == 0x000004, "Member 'TngCharacter_StopSlotAnimation::SlotNodeName' has a wrong offset!");

// Function TangoLib.TngCharacter.CalcCharacterLocationFromFooting
// 0x0018 (0x0018 - 0x0000)
struct TngCharacter_CalcCharacterLocationFromFooting final
{
public:
	struct FVector                                Footing;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacter_CalcCharacterLocationFromFooting) == 0x000004, "Wrong alignment on TngCharacter_CalcCharacterLocationFromFooting");
static_assert(sizeof(TngCharacter_CalcCharacterLocationFromFooting) == 0x000018, "Wrong size on TngCharacter_CalcCharacterLocationFromFooting");
static_assert(offsetof(TngCharacter_CalcCharacterLocationFromFooting, Footing) == 0x000000, "Member 'TngCharacter_CalcCharacterLocationFromFooting::Footing' has a wrong offset!");
static_assert(offsetof(TngCharacter_CalcCharacterLocationFromFooting, ReturnValue) == 0x00000C, "Member 'TngCharacter_CalcCharacterLocationFromFooting::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacter.GetHalfHeight
// 0x0004 (0x0004 - 0x0000)
struct TngCharacter_GetHalfHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacter_GetHalfHeight) == 0x000004, "Wrong alignment on TngCharacter_GetHalfHeight");
static_assert(sizeof(TngCharacter_GetHalfHeight) == 0x000004, "Wrong size on TngCharacter_GetHalfHeight");
static_assert(offsetof(TngCharacter_GetHalfHeight, ReturnValue) == 0x000000, "Member 'TngCharacter_GetHalfHeight::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacter.GetTngAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct TngCharacter_GetTngAnimInstance final
{
public:
	class UTngAnimInstance*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacter_GetTngAnimInstance) == 0x000008, "Wrong alignment on TngCharacter_GetTngAnimInstance");
static_assert(sizeof(TngCharacter_GetTngAnimInstance) == 0x000008, "Wrong size on TngCharacter_GetTngAnimInstance");
static_assert(offsetof(TngCharacter_GetTngAnimInstance, ReturnValue) == 0x000000, "Member 'TngCharacter_GetTngAnimInstance::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacter.GetTngCharacterMovement
// 0x0008 (0x0008 - 0x0000)
struct TngCharacter_GetTngCharacterMovement final
{
public:
	class UTngCharacterMovementComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacter_GetTngCharacterMovement) == 0x000008, "Wrong alignment on TngCharacter_GetTngCharacterMovement");
static_assert(sizeof(TngCharacter_GetTngCharacterMovement) == 0x000008, "Wrong size on TngCharacter_GetTngCharacterMovement");
static_assert(offsetof(TngCharacter_GetTngCharacterMovement, ReturnValue) == 0x000000, "Member 'TngCharacter_GetTngCharacterMovement::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacter.IsCharacterDead
// 0x0001 (0x0001 - 0x0000)
struct TngCharacter_IsCharacterDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacter_IsCharacterDead) == 0x000001, "Wrong alignment on TngCharacter_IsCharacterDead");
static_assert(sizeof(TngCharacter_IsCharacterDead) == 0x000001, "Wrong size on TngCharacter_IsCharacterDead");
static_assert(offsetof(TngCharacter_IsCharacterDead, ReturnValue) == 0x000000, "Member 'TngCharacter_IsCharacterDead::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacter.IsCompatibleAnim
// 0x0010 (0x0010 - 0x0000)
struct TngCharacter_IsCompatibleAnim final
{
public:
	class UAnimSequenceBase*                      AnimAsset;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngCharacter_IsCompatibleAnim) == 0x000008, "Wrong alignment on TngCharacter_IsCompatibleAnim");
static_assert(sizeof(TngCharacter_IsCompatibleAnim) == 0x000010, "Wrong size on TngCharacter_IsCompatibleAnim");
static_assert(offsetof(TngCharacter_IsCompatibleAnim, AnimAsset) == 0x000000, "Member 'TngCharacter_IsCompatibleAnim::AnimAsset' has a wrong offset!");
static_assert(offsetof(TngCharacter_IsCompatibleAnim, ReturnValue) == 0x000008, "Member 'TngCharacter_IsCompatibleAnim::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacter.IsPlayingSlotAnimation
// 0x0018 (0x0018 - 0x0000)
struct TngCharacter_IsPlayingSlotAnimation final
{
public:
	const class UAnimSequenceBase*                Asset;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngCharacter_IsPlayingSlotAnimation) == 0x000008, "Wrong alignment on TngCharacter_IsPlayingSlotAnimation");
static_assert(sizeof(TngCharacter_IsPlayingSlotAnimation) == 0x000018, "Wrong size on TngCharacter_IsPlayingSlotAnimation");
static_assert(offsetof(TngCharacter_IsPlayingSlotAnimation, Asset) == 0x000000, "Member 'TngCharacter_IsPlayingSlotAnimation::Asset' has a wrong offset!");
static_assert(offsetof(TngCharacter_IsPlayingSlotAnimation, SlotNodeName) == 0x000008, "Member 'TngCharacter_IsPlayingSlotAnimation::SlotNodeName' has a wrong offset!");
static_assert(offsetof(TngCharacter_IsPlayingSlotAnimation, ReturnValue) == 0x000010, "Member 'TngCharacter_IsPlayingSlotAnimation::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacterFunction.CalcCharacterLocationFromFeet
// 0x0020 (0x0020 - 0x0000)
struct TngCharacterFunction_CalcCharacterLocationFromFeet final
{
public:
	class ACharacter*                             Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FeetLocation;                                      // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterFunction_CalcCharacterLocationFromFeet) == 0x000008, "Wrong alignment on TngCharacterFunction_CalcCharacterLocationFromFeet");
static_assert(sizeof(TngCharacterFunction_CalcCharacterLocationFromFeet) == 0x000020, "Wrong size on TngCharacterFunction_CalcCharacterLocationFromFeet");
static_assert(offsetof(TngCharacterFunction_CalcCharacterLocationFromFeet, Target) == 0x000000, "Member 'TngCharacterFunction_CalcCharacterLocationFromFeet::Target' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_CalcCharacterLocationFromFeet, FeetLocation) == 0x000008, "Member 'TngCharacterFunction_CalcCharacterLocationFromFeet::FeetLocation' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_CalcCharacterLocationFromFeet, ReturnValue) == 0x000014, "Member 'TngCharacterFunction_CalcCharacterLocationFromFeet::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacterFunction.ChangeCharacterCollision
// 0x0020 (0x0020 - 0x0000)
struct TngCharacterFunction_ChangeCharacterCollision final
{
public:
	class ACharacter*                             Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAlignTop;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsClampSize;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IsClampTopMrgin;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngCharacterFunction_ChangeCharacterCollision) == 0x000008, "Wrong alignment on TngCharacterFunction_ChangeCharacterCollision");
static_assert(sizeof(TngCharacterFunction_ChangeCharacterCollision) == 0x000020, "Wrong size on TngCharacterFunction_ChangeCharacterCollision");
static_assert(offsetof(TngCharacterFunction_ChangeCharacterCollision, Target) == 0x000000, "Member 'TngCharacterFunction_ChangeCharacterCollision::Target' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_ChangeCharacterCollision, HalfHeight) == 0x000008, "Member 'TngCharacterFunction_ChangeCharacterCollision::HalfHeight' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_ChangeCharacterCollision, Radius) == 0x00000C, "Member 'TngCharacterFunction_ChangeCharacterCollision::Radius' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_ChangeCharacterCollision, IsAlignTop) == 0x000010, "Member 'TngCharacterFunction_ChangeCharacterCollision::IsAlignTop' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_ChangeCharacterCollision, IsClampSize) == 0x000011, "Member 'TngCharacterFunction_ChangeCharacterCollision::IsClampSize' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_ChangeCharacterCollision, IsClampTopMrgin) == 0x000014, "Member 'TngCharacterFunction_ChangeCharacterCollision::IsClampTopMrgin' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_ChangeCharacterCollision, ReturnValue) == 0x000018, "Member 'TngCharacterFunction_ChangeCharacterCollision::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacterFunction.SetCharacterOnLanded
// 0x0020 (0x0020 - 0x0000)
struct TngCharacterFunction_SetCharacterOnLanded final
{
public:
	class ACharacter*                             Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FHitResult& Hit)>       SetCallback;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngCharacterFunction_SetCharacterOnLanded) == 0x000008, "Wrong alignment on TngCharacterFunction_SetCharacterOnLanded");
static_assert(sizeof(TngCharacterFunction_SetCharacterOnLanded) == 0x000020, "Wrong size on TngCharacterFunction_SetCharacterOnLanded");
static_assert(offsetof(TngCharacterFunction_SetCharacterOnLanded, Target) == 0x000000, "Member 'TngCharacterFunction_SetCharacterOnLanded::Target' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_SetCharacterOnLanded, SetCallback) == 0x000008, "Member 'TngCharacterFunction_SetCharacterOnLanded::SetCallback' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_SetCharacterOnLanded, ReturnValue) == 0x000018, "Member 'TngCharacterFunction_SetCharacterOnLanded::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacterFunction.ShowCharacterMaterialSectionBySlotName
// 0x0018 (0x0018 - 0x0000)
struct TngCharacterFunction_ShowCharacterMaterialSectionBySlotName final
{
public:
	class ACharacter*                             Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialSlotName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShow;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LODIndex;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterFunction_ShowCharacterMaterialSectionBySlotName) == 0x000008, "Wrong alignment on TngCharacterFunction_ShowCharacterMaterialSectionBySlotName");
static_assert(sizeof(TngCharacterFunction_ShowCharacterMaterialSectionBySlotName) == 0x000018, "Wrong size on TngCharacterFunction_ShowCharacterMaterialSectionBySlotName");
static_assert(offsetof(TngCharacterFunction_ShowCharacterMaterialSectionBySlotName, Target) == 0x000000, "Member 'TngCharacterFunction_ShowCharacterMaterialSectionBySlotName::Target' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_ShowCharacterMaterialSectionBySlotName, MaterialSlotName) == 0x000008, "Member 'TngCharacterFunction_ShowCharacterMaterialSectionBySlotName::MaterialSlotName' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_ShowCharacterMaterialSectionBySlotName, bShow) == 0x000010, "Member 'TngCharacterFunction_ShowCharacterMaterialSectionBySlotName::bShow' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_ShowCharacterMaterialSectionBySlotName, LODIndex) == 0x000014, "Member 'TngCharacterFunction_ShowCharacterMaterialSectionBySlotName::LODIndex' has a wrong offset!");

// Function TangoLib.TngCharacterFunction.TeleportToActor
// 0x0018 (0x0018 - 0x0000)
struct TngCharacterFunction_TeleportToActor final
{
public:
	class ACharacter*                             Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DestActor;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsATest;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoCheck;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bByFeet;                                           // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0013(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngCharacterFunction_TeleportToActor) == 0x000008, "Wrong alignment on TngCharacterFunction_TeleportToActor");
static_assert(sizeof(TngCharacterFunction_TeleportToActor) == 0x000018, "Wrong size on TngCharacterFunction_TeleportToActor");
static_assert(offsetof(TngCharacterFunction_TeleportToActor, Target) == 0x000000, "Member 'TngCharacterFunction_TeleportToActor::Target' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_TeleportToActor, DestActor) == 0x000008, "Member 'TngCharacterFunction_TeleportToActor::DestActor' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_TeleportToActor, bIsATest) == 0x000010, "Member 'TngCharacterFunction_TeleportToActor::bIsATest' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_TeleportToActor, bNoCheck) == 0x000011, "Member 'TngCharacterFunction_TeleportToActor::bNoCheck' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_TeleportToActor, bByFeet) == 0x000012, "Member 'TngCharacterFunction_TeleportToActor::bByFeet' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_TeleportToActor, ReturnValue) == 0x000013, "Member 'TngCharacterFunction_TeleportToActor::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacterFunction.TeleportToByFeet
// 0x0028 (0x0028 - 0x0000)
struct TngCharacterFunction_TeleportToByFeet final
{
public:
	class ACharacter*                             Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DestFeetLocation;                                  // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DestRotation;                                      // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsATest;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoCheck;                                          // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngCharacterFunction_TeleportToByFeet) == 0x000008, "Wrong alignment on TngCharacterFunction_TeleportToByFeet");
static_assert(sizeof(TngCharacterFunction_TeleportToByFeet) == 0x000028, "Wrong size on TngCharacterFunction_TeleportToByFeet");
static_assert(offsetof(TngCharacterFunction_TeleportToByFeet, Target) == 0x000000, "Member 'TngCharacterFunction_TeleportToByFeet::Target' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_TeleportToByFeet, DestFeetLocation) == 0x000008, "Member 'TngCharacterFunction_TeleportToByFeet::DestFeetLocation' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_TeleportToByFeet, DestRotation) == 0x000014, "Member 'TngCharacterFunction_TeleportToByFeet::DestRotation' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_TeleportToByFeet, bIsATest) == 0x000020, "Member 'TngCharacterFunction_TeleportToByFeet::bIsATest' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_TeleportToByFeet, bNoCheck) == 0x000021, "Member 'TngCharacterFunction_TeleportToByFeet::bNoCheck' has a wrong offset!");
static_assert(offsetof(TngCharacterFunction_TeleportToByFeet, ReturnValue) == 0x000022, "Member 'TngCharacterFunction_TeleportToByFeet::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacterMovementComponent.CalcDotProductDriveDirection
// 0x0004 (0x0004 - 0x0000)
struct TngCharacterMovementComponent_CalcDotProductDriveDirection final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementComponent_CalcDotProductDriveDirection) == 0x000004, "Wrong alignment on TngCharacterMovementComponent_CalcDotProductDriveDirection");
static_assert(sizeof(TngCharacterMovementComponent_CalcDotProductDriveDirection) == 0x000004, "Wrong size on TngCharacterMovementComponent_CalcDotProductDriveDirection");
static_assert(offsetof(TngCharacterMovementComponent_CalcDotProductDriveDirection, ReturnValue) == 0x000000, "Member 'TngCharacterMovementComponent_CalcDotProductDriveDirection::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacterMovementComponent.EnableModifyRootMotionByRotation
// 0x000C (0x000C - 0x0000)
struct TngCharacterMovementComponent_EnableModifyRootMotionByRotation final
{
public:
	struct FRotator                               Rot;                                               // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementComponent_EnableModifyRootMotionByRotation) == 0x000004, "Wrong alignment on TngCharacterMovementComponent_EnableModifyRootMotionByRotation");
static_assert(sizeof(TngCharacterMovementComponent_EnableModifyRootMotionByRotation) == 0x00000C, "Wrong size on TngCharacterMovementComponent_EnableModifyRootMotionByRotation");
static_assert(offsetof(TngCharacterMovementComponent_EnableModifyRootMotionByRotation, Rot) == 0x000000, "Member 'TngCharacterMovementComponent_EnableModifyRootMotionByRotation::Rot' has a wrong offset!");

// Function TangoLib.TngCharacterMovementComponent.GetModifyRootMotionVelocityScale
// 0x000C (0x000C - 0x0000)
struct TngCharacterMovementComponent_GetModifyRootMotionVelocityScale final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementComponent_GetModifyRootMotionVelocityScale) == 0x000004, "Wrong alignment on TngCharacterMovementComponent_GetModifyRootMotionVelocityScale");
static_assert(sizeof(TngCharacterMovementComponent_GetModifyRootMotionVelocityScale) == 0x00000C, "Wrong size on TngCharacterMovementComponent_GetModifyRootMotionVelocityScale");
static_assert(offsetof(TngCharacterMovementComponent_GetModifyRootMotionVelocityScale, ReturnValue) == 0x000000, "Member 'TngCharacterMovementComponent_GetModifyRootMotionVelocityScale::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacterMovementComponent.GetModifyRootMotionYawScale
// 0x0004 (0x0004 - 0x0000)
struct TngCharacterMovementComponent_GetModifyRootMotionYawScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementComponent_GetModifyRootMotionYawScale) == 0x000004, "Wrong alignment on TngCharacterMovementComponent_GetModifyRootMotionYawScale");
static_assert(sizeof(TngCharacterMovementComponent_GetModifyRootMotionYawScale) == 0x000004, "Wrong size on TngCharacterMovementComponent_GetModifyRootMotionYawScale");
static_assert(offsetof(TngCharacterMovementComponent_GetModifyRootMotionYawScale, ReturnValue) == 0x000000, "Member 'TngCharacterMovementComponent_GetModifyRootMotionYawScale::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacterMovementComponent.GetVewlocityWithoutForces
// 0x000C (0x000C - 0x0000)
struct TngCharacterMovementComponent_GetVewlocityWithoutForces final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementComponent_GetVewlocityWithoutForces) == 0x000004, "Wrong alignment on TngCharacterMovementComponent_GetVewlocityWithoutForces");
static_assert(sizeof(TngCharacterMovementComponent_GetVewlocityWithoutForces) == 0x00000C, "Wrong size on TngCharacterMovementComponent_GetVewlocityWithoutForces");
static_assert(offsetof(TngCharacterMovementComponent_GetVewlocityWithoutForces, ReturnValue) == 0x000000, "Member 'TngCharacterMovementComponent_GetVewlocityWithoutForces::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacterMovementComponent.SetBumpCount
// 0x0004 (0x0004 - 0x0000)
struct TngCharacterMovementComponent_SetBumpCount final
{
public:
	int32                                         NewCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementComponent_SetBumpCount) == 0x000004, "Wrong alignment on TngCharacterMovementComponent_SetBumpCount");
static_assert(sizeof(TngCharacterMovementComponent_SetBumpCount) == 0x000004, "Wrong size on TngCharacterMovementComponent_SetBumpCount");
static_assert(offsetof(TngCharacterMovementComponent_SetBumpCount, NewCount) == 0x000000, "Member 'TngCharacterMovementComponent_SetBumpCount::NewCount' has a wrong offset!");

// Function TangoLib.TngCharacterMovementComponent.SetIgnoreGravity
// 0x0001 (0x0001 - 0x0000)
struct TngCharacterMovementComponent_SetIgnoreGravity final
{
public:
	bool                                          NewFlag;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementComponent_SetIgnoreGravity) == 0x000001, "Wrong alignment on TngCharacterMovementComponent_SetIgnoreGravity");
static_assert(sizeof(TngCharacterMovementComponent_SetIgnoreGravity) == 0x000001, "Wrong size on TngCharacterMovementComponent_SetIgnoreGravity");
static_assert(offsetof(TngCharacterMovementComponent_SetIgnoreGravity, NewFlag) == 0x000000, "Member 'TngCharacterMovementComponent_SetIgnoreGravity::NewFlag' has a wrong offset!");

// Function TangoLib.TngCharacterMovementComponent.SetModifyRootMotionVelocityScale
// 0x000C (0x000C - 0x0000)
struct TngCharacterMovementComponent_SetModifyRootMotionVelocityScale final
{
public:
	struct FVector                                NewScale;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementComponent_SetModifyRootMotionVelocityScale) == 0x000004, "Wrong alignment on TngCharacterMovementComponent_SetModifyRootMotionVelocityScale");
static_assert(sizeof(TngCharacterMovementComponent_SetModifyRootMotionVelocityScale) == 0x00000C, "Wrong size on TngCharacterMovementComponent_SetModifyRootMotionVelocityScale");
static_assert(offsetof(TngCharacterMovementComponent_SetModifyRootMotionVelocityScale, NewScale) == 0x000000, "Member 'TngCharacterMovementComponent_SetModifyRootMotionVelocityScale::NewScale' has a wrong offset!");

// Function TangoLib.TngCharacterMovementComponent.SetModifyRootMotionYawScale
// 0x0004 (0x0004 - 0x0000)
struct TngCharacterMovementComponent_SetModifyRootMotionYawScale final
{
public:
	float                                         NewScale;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementComponent_SetModifyRootMotionYawScale) == 0x000004, "Wrong alignment on TngCharacterMovementComponent_SetModifyRootMotionYawScale");
static_assert(sizeof(TngCharacterMovementComponent_SetModifyRootMotionYawScale) == 0x000004, "Wrong size on TngCharacterMovementComponent_SetModifyRootMotionYawScale");
static_assert(offsetof(TngCharacterMovementComponent_SetModifyRootMotionYawScale, NewScale) == 0x000000, "Member 'TngCharacterMovementComponent_SetModifyRootMotionYawScale::NewScale' has a wrong offset!");

// Function TangoLib.TngCharacterMovementComponent.GetBumpCount
// 0x0004 (0x0004 - 0x0000)
struct TngCharacterMovementComponent_GetBumpCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementComponent_GetBumpCount) == 0x000004, "Wrong alignment on TngCharacterMovementComponent_GetBumpCount");
static_assert(sizeof(TngCharacterMovementComponent_GetBumpCount) == 0x000004, "Wrong size on TngCharacterMovementComponent_GetBumpCount");
static_assert(offsetof(TngCharacterMovementComponent_GetBumpCount, ReturnValue) == 0x000000, "Member 'TngCharacterMovementComponent_GetBumpCount::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacterMovementInterface.CanDriveInputStrafing
// 0x0001 (0x0001 - 0x0000)
struct TngCharacterMovementInterface_CanDriveInputStrafing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementInterface_CanDriveInputStrafing) == 0x000001, "Wrong alignment on TngCharacterMovementInterface_CanDriveInputStrafing");
static_assert(sizeof(TngCharacterMovementInterface_CanDriveInputStrafing) == 0x000001, "Wrong size on TngCharacterMovementInterface_CanDriveInputStrafing");
static_assert(offsetof(TngCharacterMovementInterface_CanDriveInputStrafing, ReturnValue) == 0x000000, "Member 'TngCharacterMovementInterface_CanDriveInputStrafing::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacterMovementInterface.FlushDriveInput
// 0x0048 (0x0048 - 0x0000)
struct TngCharacterMovementInterface_FlushDriveInput final
{
public:
	struct FTngDriveInfo                          DriveInfo;                                         // 0x0000(0x0044)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0044(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngCharacterMovementInterface_FlushDriveInput) == 0x000004, "Wrong alignment on TngCharacterMovementInterface_FlushDriveInput");
static_assert(sizeof(TngCharacterMovementInterface_FlushDriveInput) == 0x000048, "Wrong size on TngCharacterMovementInterface_FlushDriveInput");
static_assert(offsetof(TngCharacterMovementInterface_FlushDriveInput, DriveInfo) == 0x000000, "Member 'TngCharacterMovementInterface_FlushDriveInput::DriveInfo' has a wrong offset!");
static_assert(offsetof(TngCharacterMovementInterface_FlushDriveInput, ReturnValue) == 0x000044, "Member 'TngCharacterMovementInterface_FlushDriveInput::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacterMovementInterface.GetDriveInputInfo
// 0x0048 (0x0048 - 0x0000)
struct TngCharacterMovementInterface_GetDriveInputInfo final
{
public:
	struct FTngDriveInfo                          DriveInfo;                                         // 0x0000(0x0044)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0044(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngCharacterMovementInterface_GetDriveInputInfo) == 0x000004, "Wrong alignment on TngCharacterMovementInterface_GetDriveInputInfo");
static_assert(sizeof(TngCharacterMovementInterface_GetDriveInputInfo) == 0x000048, "Wrong size on TngCharacterMovementInterface_GetDriveInputInfo");
static_assert(offsetof(TngCharacterMovementInterface_GetDriveInputInfo, DriveInfo) == 0x000000, "Member 'TngCharacterMovementInterface_GetDriveInputInfo::DriveInfo' has a wrong offset!");
static_assert(offsetof(TngCharacterMovementInterface_GetDriveInputInfo, ReturnValue) == 0x000044, "Member 'TngCharacterMovementInterface_GetDriveInputInfo::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacterMovementInterface.GetDriveInputMaxSpeed
// 0x0004 (0x0004 - 0x0000)
struct TngCharacterMovementInterface_GetDriveInputMaxSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementInterface_GetDriveInputMaxSpeed) == 0x000004, "Wrong alignment on TngCharacterMovementInterface_GetDriveInputMaxSpeed");
static_assert(sizeof(TngCharacterMovementInterface_GetDriveInputMaxSpeed) == 0x000004, "Wrong size on TngCharacterMovementInterface_GetDriveInputMaxSpeed");
static_assert(offsetof(TngCharacterMovementInterface_GetDriveInputMaxSpeed, ReturnValue) == 0x000000, "Member 'TngCharacterMovementInterface_GetDriveInputMaxSpeed::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacterMovementInterface.GetDriveInputStrafingInterpSpeed
// 0x0004 (0x0004 - 0x0000)
struct TngCharacterMovementInterface_GetDriveInputStrafingInterpSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementInterface_GetDriveInputStrafingInterpSpeed) == 0x000004, "Wrong alignment on TngCharacterMovementInterface_GetDriveInputStrafingInterpSpeed");
static_assert(sizeof(TngCharacterMovementInterface_GetDriveInputStrafingInterpSpeed) == 0x000004, "Wrong size on TngCharacterMovementInterface_GetDriveInputStrafingInterpSpeed");
static_assert(offsetof(TngCharacterMovementInterface_GetDriveInputStrafingInterpSpeed, ReturnValue) == 0x000000, "Member 'TngCharacterMovementInterface_GetDriveInputStrafingInterpSpeed::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacterMovementInterface.HasDriveInputAimLocation
// 0x0001 (0x0001 - 0x0000)
struct TngCharacterMovementInterface_HasDriveInputAimLocation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementInterface_HasDriveInputAimLocation) == 0x000001, "Wrong alignment on TngCharacterMovementInterface_HasDriveInputAimLocation");
static_assert(sizeof(TngCharacterMovementInterface_HasDriveInputAimLocation) == 0x000001, "Wrong size on TngCharacterMovementInterface_HasDriveInputAimLocation");
static_assert(offsetof(TngCharacterMovementInterface_HasDriveInputAimLocation, ReturnValue) == 0x000000, "Member 'TngCharacterMovementInterface_HasDriveInputAimLocation::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacterMovementInterface.HasDriveInputAimTarget
// 0x0001 (0x0001 - 0x0000)
struct TngCharacterMovementInterface_HasDriveInputAimTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementInterface_HasDriveInputAimTarget) == 0x000001, "Wrong alignment on TngCharacterMovementInterface_HasDriveInputAimTarget");
static_assert(sizeof(TngCharacterMovementInterface_HasDriveInputAimTarget) == 0x000001, "Wrong size on TngCharacterMovementInterface_HasDriveInputAimTarget");
static_assert(offsetof(TngCharacterMovementInterface_HasDriveInputAimTarget, ReturnValue) == 0x000000, "Member 'TngCharacterMovementInterface_HasDriveInputAimTarget::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacterMovementInterface.RequestDriveInput
// 0x000C (0x000C - 0x0000)
struct TngCharacterMovementInterface_RequestDriveInput final
{
public:
	struct FVector                                MoveVelocity;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementInterface_RequestDriveInput) == 0x000004, "Wrong alignment on TngCharacterMovementInterface_RequestDriveInput");
static_assert(sizeof(TngCharacterMovementInterface_RequestDriveInput) == 0x00000C, "Wrong size on TngCharacterMovementInterface_RequestDriveInput");
static_assert(offsetof(TngCharacterMovementInterface_RequestDriveInput, MoveVelocity) == 0x000000, "Member 'TngCharacterMovementInterface_RequestDriveInput::MoveVelocity' has a wrong offset!");

// Function TangoLib.TngCharacterMovementInterface.SetDriveInputAiming
// 0x0001 (0x0001 - 0x0000)
struct TngCharacterMovementInterface_SetDriveInputAiming final
{
public:
	bool                                          IsAiming;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementInterface_SetDriveInputAiming) == 0x000001, "Wrong alignment on TngCharacterMovementInterface_SetDriveInputAiming");
static_assert(sizeof(TngCharacterMovementInterface_SetDriveInputAiming) == 0x000001, "Wrong size on TngCharacterMovementInterface_SetDriveInputAiming");
static_assert(offsetof(TngCharacterMovementInterface_SetDriveInputAiming, IsAiming) == 0x000000, "Member 'TngCharacterMovementInterface_SetDriveInputAiming::IsAiming' has a wrong offset!");

// Function TangoLib.TngCharacterMovementInterface.SetDriveInputAimLocation
// 0x0018 (0x0018 - 0x0000)
struct TngCharacterMovementInterface_SetDriveInputAimLocation final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PivotJointName;                                    // 0x000C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngDriveInputJointAxis                       JointAxis;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngCharacterMovementInterface_SetDriveInputAimLocation) == 0x000004, "Wrong alignment on TngCharacterMovementInterface_SetDriveInputAimLocation");
static_assert(sizeof(TngCharacterMovementInterface_SetDriveInputAimLocation) == 0x000018, "Wrong size on TngCharacterMovementInterface_SetDriveInputAimLocation");
static_assert(offsetof(TngCharacterMovementInterface_SetDriveInputAimLocation, TargetLocation) == 0x000000, "Member 'TngCharacterMovementInterface_SetDriveInputAimLocation::TargetLocation' has a wrong offset!");
static_assert(offsetof(TngCharacterMovementInterface_SetDriveInputAimLocation, PivotJointName) == 0x00000C, "Member 'TngCharacterMovementInterface_SetDriveInputAimLocation::PivotJointName' has a wrong offset!");
static_assert(offsetof(TngCharacterMovementInterface_SetDriveInputAimLocation, JointAxis) == 0x000014, "Member 'TngCharacterMovementInterface_SetDriveInputAimLocation::JointAxis' has a wrong offset!");

// Function TangoLib.TngCharacterMovementInterface.SetDriveInputAimTarget
// 0x0020 (0x0020 - 0x0000)
struct TngCharacterMovementInterface_SetDriveInputAimTarget final
{
public:
	struct FVector                                AimToLocation;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AimToActor;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngCharacterMovementInterface_SetDriveInputAimTarget) == 0x000008, "Wrong alignment on TngCharacterMovementInterface_SetDriveInputAimTarget");
static_assert(sizeof(TngCharacterMovementInterface_SetDriveInputAimTarget) == 0x000020, "Wrong size on TngCharacterMovementInterface_SetDriveInputAimTarget");
static_assert(offsetof(TngCharacterMovementInterface_SetDriveInputAimTarget, AimToLocation) == 0x000000, "Member 'TngCharacterMovementInterface_SetDriveInputAimTarget::AimToLocation' has a wrong offset!");
static_assert(offsetof(TngCharacterMovementInterface_SetDriveInputAimTarget, AimToActor) == 0x000010, "Member 'TngCharacterMovementInterface_SetDriveInputAimTarget::AimToActor' has a wrong offset!");
static_assert(offsetof(TngCharacterMovementInterface_SetDriveInputAimTarget, ReturnValue) == 0x000018, "Member 'TngCharacterMovementInterface_SetDriveInputAimTarget::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCharacterMovementInterface.SetDriveInputMaxSpeed
// 0x0004 (0x0004 - 0x0000)
struct TngCharacterMovementInterface_SetDriveInputMaxSpeed final
{
public:
	float                                         NewMaxSpeedRate;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementInterface_SetDriveInputMaxSpeed) == 0x000004, "Wrong alignment on TngCharacterMovementInterface_SetDriveInputMaxSpeed");
static_assert(sizeof(TngCharacterMovementInterface_SetDriveInputMaxSpeed) == 0x000004, "Wrong size on TngCharacterMovementInterface_SetDriveInputMaxSpeed");
static_assert(offsetof(TngCharacterMovementInterface_SetDriveInputMaxSpeed, NewMaxSpeedRate) == 0x000000, "Member 'TngCharacterMovementInterface_SetDriveInputMaxSpeed::NewMaxSpeedRate' has a wrong offset!");

// Function TangoLib.TngCharacterMovementInterface.SetDriveInputMove
// 0x0014 (0x0014 - 0x0000)
struct TngCharacterMovementInterface_SetDriveInputMove final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWorldDirection;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngCharacterMovementInterface_SetDriveInputMove) == 0x000004, "Wrong alignment on TngCharacterMovementInterface_SetDriveInputMove");
static_assert(sizeof(TngCharacterMovementInterface_SetDriveInputMove) == 0x000014, "Wrong size on TngCharacterMovementInterface_SetDriveInputMove");
static_assert(offsetof(TngCharacterMovementInterface_SetDriveInputMove, Direction) == 0x000000, "Member 'TngCharacterMovementInterface_SetDriveInputMove::Direction' has a wrong offset!");
static_assert(offsetof(TngCharacterMovementInterface_SetDriveInputMove, Speed) == 0x00000C, "Member 'TngCharacterMovementInterface_SetDriveInputMove::Speed' has a wrong offset!");
static_assert(offsetof(TngCharacterMovementInterface_SetDriveInputMove, IsWorldDirection) == 0x000010, "Member 'TngCharacterMovementInterface_SetDriveInputMove::IsWorldDirection' has a wrong offset!");

// Function TangoLib.TngCharacterMovementInterface.SetDriveInputMoveAim
// 0x000C (0x000C - 0x0000)
struct TngCharacterMovementInterface_SetDriveInputMoveAim final
{
public:
	struct FRotator                               DeltaMove;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementInterface_SetDriveInputMoveAim) == 0x000004, "Wrong alignment on TngCharacterMovementInterface_SetDriveInputMoveAim");
static_assert(sizeof(TngCharacterMovementInterface_SetDriveInputMoveAim) == 0x00000C, "Wrong size on TngCharacterMovementInterface_SetDriveInputMoveAim");
static_assert(offsetof(TngCharacterMovementInterface_SetDriveInputMoveAim, DeltaMove) == 0x000000, "Member 'TngCharacterMovementInterface_SetDriveInputMoveAim::DeltaMove' has a wrong offset!");

// Function TangoLib.TngCharacterMovementInterface.SetDriveInputSpeed
// 0x0004 (0x0004 - 0x0000)
struct TngCharacterMovementInterface_SetDriveInputSpeed final
{
public:
	float                                         NewSpeed;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementInterface_SetDriveInputSpeed) == 0x000004, "Wrong alignment on TngCharacterMovementInterface_SetDriveInputSpeed");
static_assert(sizeof(TngCharacterMovementInterface_SetDriveInputSpeed) == 0x000004, "Wrong size on TngCharacterMovementInterface_SetDriveInputSpeed");
static_assert(offsetof(TngCharacterMovementInterface_SetDriveInputSpeed, NewSpeed) == 0x000000, "Member 'TngCharacterMovementInterface_SetDriveInputSpeed::NewSpeed' has a wrong offset!");

// Function TangoLib.TngCharacterMovementInterface.SetDriveInputStrafing
// 0x0001 (0x0001 - 0x0000)
struct TngCharacterMovementInterface_SetDriveInputStrafing final
{
public:
	bool                                          IsStrafing;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementInterface_SetDriveInputStrafing) == 0x000001, "Wrong alignment on TngCharacterMovementInterface_SetDriveInputStrafing");
static_assert(sizeof(TngCharacterMovementInterface_SetDriveInputStrafing) == 0x000001, "Wrong size on TngCharacterMovementInterface_SetDriveInputStrafing");
static_assert(offsetof(TngCharacterMovementInterface_SetDriveInputStrafing, IsStrafing) == 0x000000, "Member 'TngCharacterMovementInterface_SetDriveInputStrafing::IsStrafing' has a wrong offset!");

// Function TangoLib.TngCharacterMovementInterface.SetDriveInputStrafingInterpSpeed
// 0x0004 (0x0004 - 0x0000)
struct TngCharacterMovementInterface_SetDriveInputStrafingInterpSpeed final
{
public:
	float                                         InSpeed;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCharacterMovementInterface_SetDriveInputStrafingInterpSpeed) == 0x000004, "Wrong alignment on TngCharacterMovementInterface_SetDriveInputStrafingInterpSpeed");
static_assert(sizeof(TngCharacterMovementInterface_SetDriveInputStrafingInterpSpeed) == 0x000004, "Wrong size on TngCharacterMovementInterface_SetDriveInputStrafingInterpSpeed");
static_assert(offsetof(TngCharacterMovementInterface_SetDriveInputStrafingInterpSpeed, InSpeed) == 0x000000, "Member 'TngCharacterMovementInterface_SetDriveInputStrafingInterpSpeed::InSpeed' has a wrong offset!");

// Function TangoLib.TngCrowdCharacter.AddCrowdStreamVelocity
// 0x000C (0x000C - 0x0000)
struct TngCrowdCharacter_AddCrowdStreamVelocity final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCrowdCharacter_AddCrowdStreamVelocity) == 0x000004, "Wrong alignment on TngCrowdCharacter_AddCrowdStreamVelocity");
static_assert(sizeof(TngCrowdCharacter_AddCrowdStreamVelocity) == 0x00000C, "Wrong size on TngCrowdCharacter_AddCrowdStreamVelocity");
static_assert(offsetof(TngCrowdCharacter_AddCrowdStreamVelocity, Velocity) == 0x000000, "Member 'TngCrowdCharacter_AddCrowdStreamVelocity::Velocity' has a wrong offset!");

// Function TangoLib.TngCrowdCharacter.SetCrowdStreamHome
// 0x000C (0x000C - 0x0000)
struct TngCrowdCharacter_SetCrowdStreamHome final
{
public:
	struct FVector                                HomeLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCrowdCharacter_SetCrowdStreamHome) == 0x000004, "Wrong alignment on TngCrowdCharacter_SetCrowdStreamHome");
static_assert(sizeof(TngCrowdCharacter_SetCrowdStreamHome) == 0x00000C, "Wrong size on TngCrowdCharacter_SetCrowdStreamHome");
static_assert(offsetof(TngCrowdCharacter_SetCrowdStreamHome, HomeLocation) == 0x000000, "Member 'TngCrowdCharacter_SetCrowdStreamHome::HomeLocation' has a wrong offset!");

// Function TangoLib.TngCrowdCharacter.SetCrowdStreamLane
// 0x0004 (0x0004 - 0x0000)
struct TngCrowdCharacter_SetCrowdStreamLane final
{
public:
	float                                         NewLane;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCrowdCharacter_SetCrowdStreamLane) == 0x000004, "Wrong alignment on TngCrowdCharacter_SetCrowdStreamLane");
static_assert(sizeof(TngCrowdCharacter_SetCrowdStreamLane) == 0x000004, "Wrong size on TngCrowdCharacter_SetCrowdStreamLane");
static_assert(offsetof(TngCrowdCharacter_SetCrowdStreamLane, NewLane) == 0x000000, "Member 'TngCrowdCharacter_SetCrowdStreamLane::NewLane' has a wrong offset!");

// Function TangoLib.TngCrowdCharacter.SetCrowdStreamOwner
// 0x0008 (0x0008 - 0x0000)
struct TngCrowdCharacter_SetCrowdStreamOwner final
{
public:
	class AActor*                                 NewOwner;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCrowdCharacter_SetCrowdStreamOwner) == 0x000008, "Wrong alignment on TngCrowdCharacter_SetCrowdStreamOwner");
static_assert(sizeof(TngCrowdCharacter_SetCrowdStreamOwner) == 0x000008, "Wrong size on TngCrowdCharacter_SetCrowdStreamOwner");
static_assert(offsetof(TngCrowdCharacter_SetCrowdStreamOwner, NewOwner) == 0x000000, "Member 'TngCrowdCharacter_SetCrowdStreamOwner::NewOwner' has a wrong offset!");

// Function TangoLib.TngCrowdCharacter.SetCrowdStreamRow
// 0x0004 (0x0004 - 0x0000)
struct TngCrowdCharacter_SetCrowdStreamRow final
{
public:
	float                                         NewRow;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCrowdCharacter_SetCrowdStreamRow) == 0x000004, "Wrong alignment on TngCrowdCharacter_SetCrowdStreamRow");
static_assert(sizeof(TngCrowdCharacter_SetCrowdStreamRow) == 0x000004, "Wrong size on TngCrowdCharacter_SetCrowdStreamRow");
static_assert(offsetof(TngCrowdCharacter_SetCrowdStreamRow, NewRow) == 0x000000, "Member 'TngCrowdCharacter_SetCrowdStreamRow::NewRow' has a wrong offset!");

// Function TangoLib.TngCrowdCharacter.SetCrowdStreamTag
// 0x0004 (0x0004 - 0x0000)
struct TngCrowdCharacter_SetCrowdStreamTag final
{
public:
	int32                                         NewTag;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCrowdCharacter_SetCrowdStreamTag) == 0x000004, "Wrong alignment on TngCrowdCharacter_SetCrowdStreamTag");
static_assert(sizeof(TngCrowdCharacter_SetCrowdStreamTag) == 0x000004, "Wrong size on TngCrowdCharacter_SetCrowdStreamTag");
static_assert(offsetof(TngCrowdCharacter_SetCrowdStreamTag, NewTag) == 0x000000, "Member 'TngCrowdCharacter_SetCrowdStreamTag::NewTag' has a wrong offset!");

// Function TangoLib.TngCrowdCharacter.SetCrowdStreamVelocity
// 0x000C (0x000C - 0x0000)
struct TngCrowdCharacter_SetCrowdStreamVelocity final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCrowdCharacter_SetCrowdStreamVelocity) == 0x000004, "Wrong alignment on TngCrowdCharacter_SetCrowdStreamVelocity");
static_assert(sizeof(TngCrowdCharacter_SetCrowdStreamVelocity) == 0x00000C, "Wrong size on TngCrowdCharacter_SetCrowdStreamVelocity");
static_assert(offsetof(TngCrowdCharacter_SetCrowdStreamVelocity, Velocity) == 0x000000, "Member 'TngCrowdCharacter_SetCrowdStreamVelocity::Velocity' has a wrong offset!");

// Function TangoLib.TngCrowdCharacter.GetCrowdStreamHome
// 0x000C (0x000C - 0x0000)
struct TngCrowdCharacter_GetCrowdStreamHome final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCrowdCharacter_GetCrowdStreamHome) == 0x000004, "Wrong alignment on TngCrowdCharacter_GetCrowdStreamHome");
static_assert(sizeof(TngCrowdCharacter_GetCrowdStreamHome) == 0x00000C, "Wrong size on TngCrowdCharacter_GetCrowdStreamHome");
static_assert(offsetof(TngCrowdCharacter_GetCrowdStreamHome, ReturnValue) == 0x000000, "Member 'TngCrowdCharacter_GetCrowdStreamHome::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCrowdCharacter.GetCrowdStreamLane
// 0x0004 (0x0004 - 0x0000)
struct TngCrowdCharacter_GetCrowdStreamLane final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCrowdCharacter_GetCrowdStreamLane) == 0x000004, "Wrong alignment on TngCrowdCharacter_GetCrowdStreamLane");
static_assert(sizeof(TngCrowdCharacter_GetCrowdStreamLane) == 0x000004, "Wrong size on TngCrowdCharacter_GetCrowdStreamLane");
static_assert(offsetof(TngCrowdCharacter_GetCrowdStreamLane, ReturnValue) == 0x000000, "Member 'TngCrowdCharacter_GetCrowdStreamLane::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCrowdCharacter.GetCrowdStreamOwner
// 0x0008 (0x0008 - 0x0000)
struct TngCrowdCharacter_GetCrowdStreamOwner final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCrowdCharacter_GetCrowdStreamOwner) == 0x000008, "Wrong alignment on TngCrowdCharacter_GetCrowdStreamOwner");
static_assert(sizeof(TngCrowdCharacter_GetCrowdStreamOwner) == 0x000008, "Wrong size on TngCrowdCharacter_GetCrowdStreamOwner");
static_assert(offsetof(TngCrowdCharacter_GetCrowdStreamOwner, ReturnValue) == 0x000000, "Member 'TngCrowdCharacter_GetCrowdStreamOwner::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCrowdCharacter.GetCrowdStreamRow
// 0x0004 (0x0004 - 0x0000)
struct TngCrowdCharacter_GetCrowdStreamRow final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCrowdCharacter_GetCrowdStreamRow) == 0x000004, "Wrong alignment on TngCrowdCharacter_GetCrowdStreamRow");
static_assert(sizeof(TngCrowdCharacter_GetCrowdStreamRow) == 0x000004, "Wrong size on TngCrowdCharacter_GetCrowdStreamRow");
static_assert(offsetof(TngCrowdCharacter_GetCrowdStreamRow, ReturnValue) == 0x000000, "Member 'TngCrowdCharacter_GetCrowdStreamRow::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCrowdCharacter.GetCrowdStreamTag
// 0x0004 (0x0004 - 0x0000)
struct TngCrowdCharacter_GetCrowdStreamTag final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCrowdCharacter_GetCrowdStreamTag) == 0x000004, "Wrong alignment on TngCrowdCharacter_GetCrowdStreamTag");
static_assert(sizeof(TngCrowdCharacter_GetCrowdStreamTag) == 0x000004, "Wrong size on TngCrowdCharacter_GetCrowdStreamTag");
static_assert(offsetof(TngCrowdCharacter_GetCrowdStreamTag, ReturnValue) == 0x000000, "Member 'TngCrowdCharacter_GetCrowdStreamTag::ReturnValue' has a wrong offset!");

// Function TangoLib.TngCrowdCharacter.GetCrowdStreamVelocity
// 0x000C (0x000C - 0x0000)
struct TngCrowdCharacter_GetCrowdStreamVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngCrowdCharacter_GetCrowdStreamVelocity) == 0x000004, "Wrong alignment on TngCrowdCharacter_GetCrowdStreamVelocity");
static_assert(sizeof(TngCrowdCharacter_GetCrowdStreamVelocity) == 0x00000C, "Wrong size on TngCrowdCharacter_GetCrowdStreamVelocity");
static_assert(offsetof(TngCrowdCharacter_GetCrowdStreamVelocity, ReturnValue) == 0x000000, "Member 'TngCrowdCharacter_GetCrowdStreamVelocity::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDamageSystem.ApplyDamageTNG
// 0x0030 (0x0030 - 0x0000)
struct TngDamageSystem_ApplyDamageTNG final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDamage;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            EventInstigator;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDamageSystem_ApplyDamageTNG) == 0x000008, "Wrong alignment on TngDamageSystem_ApplyDamageTNG");
static_assert(sizeof(TngDamageSystem_ApplyDamageTNG) == 0x000030, "Wrong size on TngDamageSystem_ApplyDamageTNG");
static_assert(offsetof(TngDamageSystem_ApplyDamageTNG, DamagedActor) == 0x000000, "Member 'TngDamageSystem_ApplyDamageTNG::DamagedActor' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyDamageTNG, BaseDamage) == 0x000008, "Member 'TngDamageSystem_ApplyDamageTNG::BaseDamage' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyDamageTNG, EventInstigator) == 0x000010, "Member 'TngDamageSystem_ApplyDamageTNG::EventInstigator' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyDamageTNG, DamageCauser) == 0x000018, "Member 'TngDamageSystem_ApplyDamageTNG::DamageCauser' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyDamageTNG, DamageTypeClass) == 0x000020, "Member 'TngDamageSystem_ApplyDamageTNG::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyDamageTNG, ReturnValue) == 0x000028, "Member 'TngDamageSystem_ApplyDamageTNG::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDamageSystem.ApplyPointDamageTNG
// 0x00C0 (0x00C0 - 0x0000)
struct TngDamageSystem_ApplyPointDamageTNG final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDamage;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitFromDirection;                                  // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x0018(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00A8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x00B0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x00B8(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDamageSystem_ApplyPointDamageTNG) == 0x000008, "Wrong alignment on TngDamageSystem_ApplyPointDamageTNG");
static_assert(sizeof(TngDamageSystem_ApplyPointDamageTNG) == 0x0000C0, "Wrong size on TngDamageSystem_ApplyPointDamageTNG");
static_assert(offsetof(TngDamageSystem_ApplyPointDamageTNG, DamagedActor) == 0x000000, "Member 'TngDamageSystem_ApplyPointDamageTNG::DamagedActor' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyPointDamageTNG, BaseDamage) == 0x000008, "Member 'TngDamageSystem_ApplyPointDamageTNG::BaseDamage' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyPointDamageTNG, HitFromDirection) == 0x00000C, "Member 'TngDamageSystem_ApplyPointDamageTNG::HitFromDirection' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyPointDamageTNG, HitInfo) == 0x000018, "Member 'TngDamageSystem_ApplyPointDamageTNG::HitInfo' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyPointDamageTNG, EventInstigator) == 0x0000A0, "Member 'TngDamageSystem_ApplyPointDamageTNG::EventInstigator' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyPointDamageTNG, DamageCauser) == 0x0000A8, "Member 'TngDamageSystem_ApplyPointDamageTNG::DamageCauser' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyPointDamageTNG, DamageTypeClass) == 0x0000B0, "Member 'TngDamageSystem_ApplyPointDamageTNG::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyPointDamageTNG, ReturnValue) == 0x0000B8, "Member 'TngDamageSystem_ApplyPointDamageTNG::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDamageSystem.ApplyRadialDamageTNG
// 0x0050 (0x0050 - 0x0000)
struct TngDamageSystem_ApplyRadialDamageTNG final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDamage;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageRadius;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedByController;                            // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoFullDamage;                                     // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             DamagePreventionChannel;                           // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x004A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDamageSystem_ApplyRadialDamageTNG) == 0x000008, "Wrong alignment on TngDamageSystem_ApplyRadialDamageTNG");
static_assert(sizeof(TngDamageSystem_ApplyRadialDamageTNG) == 0x000050, "Wrong size on TngDamageSystem_ApplyRadialDamageTNG");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageTNG, WorldContextObject) == 0x000000, "Member 'TngDamageSystem_ApplyRadialDamageTNG::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageTNG, BaseDamage) == 0x000008, "Member 'TngDamageSystem_ApplyRadialDamageTNG::BaseDamage' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageTNG, Origin) == 0x00000C, "Member 'TngDamageSystem_ApplyRadialDamageTNG::Origin' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageTNG, DamageRadius) == 0x000018, "Member 'TngDamageSystem_ApplyRadialDamageTNG::DamageRadius' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageTNG, DamageTypeClass) == 0x000020, "Member 'TngDamageSystem_ApplyRadialDamageTNG::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageTNG, IgnoreActors) == 0x000028, "Member 'TngDamageSystem_ApplyRadialDamageTNG::IgnoreActors' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageTNG, DamageCauser) == 0x000038, "Member 'TngDamageSystem_ApplyRadialDamageTNG::DamageCauser' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageTNG, InstigatedByController) == 0x000040, "Member 'TngDamageSystem_ApplyRadialDamageTNG::InstigatedByController' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageTNG, bDoFullDamage) == 0x000048, "Member 'TngDamageSystem_ApplyRadialDamageTNG::bDoFullDamage' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageTNG, DamagePreventionChannel) == 0x000049, "Member 'TngDamageSystem_ApplyRadialDamageTNG::DamagePreventionChannel' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageTNG, ReturnValue) == 0x00004A, "Member 'TngDamageSystem_ApplyRadialDamageTNG::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDamageSystem.ApplyRadialDamageWithFalloffTNG
// 0x0058 (0x0058 - 0x0000)
struct TngDamageSystem_ApplyRadialDamageWithFalloffTNG final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDamage;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumDamage;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageInnerRadius;                                 // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageOuterRadius;                                 // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageFalloff;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedByController;                            // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             DamagePreventionChannel;                           // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0051(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDamageSystem_ApplyRadialDamageWithFalloffTNG) == 0x000008, "Wrong alignment on TngDamageSystem_ApplyRadialDamageWithFalloffTNG");
static_assert(sizeof(TngDamageSystem_ApplyRadialDamageWithFalloffTNG) == 0x000058, "Wrong size on TngDamageSystem_ApplyRadialDamageWithFalloffTNG");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageWithFalloffTNG, WorldContextObject) == 0x000000, "Member 'TngDamageSystem_ApplyRadialDamageWithFalloffTNG::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageWithFalloffTNG, BaseDamage) == 0x000008, "Member 'TngDamageSystem_ApplyRadialDamageWithFalloffTNG::BaseDamage' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageWithFalloffTNG, MinimumDamage) == 0x00000C, "Member 'TngDamageSystem_ApplyRadialDamageWithFalloffTNG::MinimumDamage' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageWithFalloffTNG, Origin) == 0x000010, "Member 'TngDamageSystem_ApplyRadialDamageWithFalloffTNG::Origin' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageWithFalloffTNG, DamageInnerRadius) == 0x00001C, "Member 'TngDamageSystem_ApplyRadialDamageWithFalloffTNG::DamageInnerRadius' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageWithFalloffTNG, DamageOuterRadius) == 0x000020, "Member 'TngDamageSystem_ApplyRadialDamageWithFalloffTNG::DamageOuterRadius' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageWithFalloffTNG, DamageFalloff) == 0x000024, "Member 'TngDamageSystem_ApplyRadialDamageWithFalloffTNG::DamageFalloff' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageWithFalloffTNG, DamageTypeClass) == 0x000028, "Member 'TngDamageSystem_ApplyRadialDamageWithFalloffTNG::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageWithFalloffTNG, IgnoreActors) == 0x000030, "Member 'TngDamageSystem_ApplyRadialDamageWithFalloffTNG::IgnoreActors' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageWithFalloffTNG, DamageCauser) == 0x000040, "Member 'TngDamageSystem_ApplyRadialDamageWithFalloffTNG::DamageCauser' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageWithFalloffTNG, InstigatedByController) == 0x000048, "Member 'TngDamageSystem_ApplyRadialDamageWithFalloffTNG::InstigatedByController' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageWithFalloffTNG, DamagePreventionChannel) == 0x000050, "Member 'TngDamageSystem_ApplyRadialDamageWithFalloffTNG::DamagePreventionChannel' has a wrong offset!");
static_assert(offsetof(TngDamageSystem_ApplyRadialDamageWithFalloffTNG, ReturnValue) == 0x000051, "Member 'TngDamageSystem_ApplyRadialDamageWithFalloffTNG::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDamageType.GetDamageDuration
// 0x0010 (0x0010 - 0x0000)
struct TngDamageType_GetDamageDuration final
{
public:
	const class UDamageType*                      DmgType;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDamageType_GetDamageDuration) == 0x000008, "Wrong alignment on TngDamageType_GetDamageDuration");
static_assert(sizeof(TngDamageType_GetDamageDuration) == 0x000010, "Wrong size on TngDamageType_GetDamageDuration");
static_assert(offsetof(TngDamageType_GetDamageDuration, DmgType) == 0x000000, "Member 'TngDamageType_GetDamageDuration::DmgType' has a wrong offset!");
static_assert(offsetof(TngDamageType_GetDamageDuration, ReturnValue) == 0x000008, "Member 'TngDamageType_GetDamageDuration::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDamageType.GetDamageTagsFromClass
// 0x0028 (0x0028 - 0x0000)
struct TngDamageType_GetDamageTagsFromClass final
{
public:
	TSubclassOf<class UDamageType>                DmgTypeClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDamageType_GetDamageTagsFromClass) == 0x000008, "Wrong alignment on TngDamageType_GetDamageTagsFromClass");
static_assert(sizeof(TngDamageType_GetDamageTagsFromClass) == 0x000028, "Wrong size on TngDamageType_GetDamageTagsFromClass");
static_assert(offsetof(TngDamageType_GetDamageTagsFromClass, DmgTypeClass) == 0x000000, "Member 'TngDamageType_GetDamageTagsFromClass::DmgTypeClass' has a wrong offset!");
static_assert(offsetof(TngDamageType_GetDamageTagsFromClass, ReturnValue) == 0x000008, "Member 'TngDamageType_GetDamageTagsFromClass::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDamageType.GetDamageTagsFromDamageType
// 0x0028 (0x0028 - 0x0000)
struct TngDamageType_GetDamageTagsFromDamageType final
{
public:
	const class UDamageType*                      DmgType;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDamageType_GetDamageTagsFromDamageType) == 0x000008, "Wrong alignment on TngDamageType_GetDamageTagsFromDamageType");
static_assert(sizeof(TngDamageType_GetDamageTagsFromDamageType) == 0x000028, "Wrong size on TngDamageType_GetDamageTagsFromDamageType");
static_assert(offsetof(TngDamageType_GetDamageTagsFromDamageType, DmgType) == 0x000000, "Member 'TngDamageType_GetDamageTagsFromDamageType::DmgType' has a wrong offset!");
static_assert(offsetof(TngDamageType_GetDamageTagsFromDamageType, ReturnValue) == 0x000008, "Member 'TngDamageType_GetDamageTagsFromDamageType::ReturnValue' has a wrong offset!");

// Function TangoLib.TngPlayerService.Blueprint_DisplayDebug
// 0x0008 (0x0008 - 0x0000)
struct TngPlayerService_Blueprint_DisplayDebug final
{
public:
	class UCanvas*                                Canvas;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngPlayerService_Blueprint_DisplayDebug) == 0x000008, "Wrong alignment on TngPlayerService_Blueprint_DisplayDebug");
static_assert(sizeof(TngPlayerService_Blueprint_DisplayDebug) == 0x000008, "Wrong size on TngPlayerService_Blueprint_DisplayDebug");
static_assert(offsetof(TngPlayerService_Blueprint_DisplayDebug, Canvas) == 0x000000, "Member 'TngPlayerService_Blueprint_DisplayDebug::Canvas' has a wrong offset!");

// Function TangoLib.TngPlayerService.Blueprint_PostUpdate
// 0x0004 (0x0004 - 0x0000)
struct TngPlayerService_Blueprint_PostUpdate final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngPlayerService_Blueprint_PostUpdate) == 0x000004, "Wrong alignment on TngPlayerService_Blueprint_PostUpdate");
static_assert(sizeof(TngPlayerService_Blueprint_PostUpdate) == 0x000004, "Wrong size on TngPlayerService_Blueprint_PostUpdate");
static_assert(offsetof(TngPlayerService_Blueprint_PostUpdate, DeltaSeconds) == 0x000000, "Member 'TngPlayerService_Blueprint_PostUpdate::DeltaSeconds' has a wrong offset!");

// Function TangoLib.TngPlayerService.Blueprint_PreUpdate
// 0x0004 (0x0004 - 0x0000)
struct TngPlayerService_Blueprint_PreUpdate final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngPlayerService_Blueprint_PreUpdate) == 0x000004, "Wrong alignment on TngPlayerService_Blueprint_PreUpdate");
static_assert(sizeof(TngPlayerService_Blueprint_PreUpdate) == 0x000004, "Wrong size on TngPlayerService_Blueprint_PreUpdate");
static_assert(offsetof(TngPlayerService_Blueprint_PreUpdate, DeltaSeconds) == 0x000000, "Member 'TngPlayerService_Blueprint_PreUpdate::DeltaSeconds' has a wrong offset!");

// Function TangoLib.TngPlayerService.GetOwnerPlayerController
// 0x0008 (0x0008 - 0x0000)
struct TngPlayerService_GetOwnerPlayerController final
{
public:
	class ATngPlayerController*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngPlayerService_GetOwnerPlayerController) == 0x000008, "Wrong alignment on TngPlayerService_GetOwnerPlayerController");
static_assert(sizeof(TngPlayerService_GetOwnerPlayerController) == 0x000008, "Wrong size on TngPlayerService_GetOwnerPlayerController");
static_assert(offsetof(TngPlayerService_GetOwnerPlayerController, ReturnValue) == 0x000000, "Member 'TngPlayerService_GetOwnerPlayerController::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDebugBoard.K2_EntryOnTngDebugBoardDraw
// 0x0018 (0x0018 - 0x0000)
struct TngDebugBoard_K2_EntryOnTngDebugBoardDraw final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UCanvas* Canvas)>        Temp;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_K2_EntryOnTngDebugBoardDraw) == 0x000008, "Wrong alignment on TngDebugBoard_K2_EntryOnTngDebugBoardDraw");
static_assert(sizeof(TngDebugBoard_K2_EntryOnTngDebugBoardDraw) == 0x000018, "Wrong size on TngDebugBoard_K2_EntryOnTngDebugBoardDraw");
static_assert(offsetof(TngDebugBoard_K2_EntryOnTngDebugBoardDraw, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_K2_EntryOnTngDebugBoardDraw::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_K2_EntryOnTngDebugBoardDraw, Temp) == 0x000008, "Member 'TngDebugBoard_K2_EntryOnTngDebugBoardDraw::Temp' has a wrong offset!");

// Function TangoLib.TngDebugBoard.K2_RemoveOnTngDebugBoardDraw
// 0x0018 (0x0018 - 0x0000)
struct TngDebugBoard_K2_RemoveOnTngDebugBoardDraw final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UCanvas* Canvas)>        Temp;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_K2_RemoveOnTngDebugBoardDraw) == 0x000008, "Wrong alignment on TngDebugBoard_K2_RemoveOnTngDebugBoardDraw");
static_assert(sizeof(TngDebugBoard_K2_RemoveOnTngDebugBoardDraw) == 0x000018, "Wrong size on TngDebugBoard_K2_RemoveOnTngDebugBoardDraw");
static_assert(offsetof(TngDebugBoard_K2_RemoveOnTngDebugBoardDraw, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_K2_RemoveOnTngDebugBoardDraw::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_K2_RemoveOnTngDebugBoardDraw, Temp) == 0x000008, "Member 'TngDebugBoard_K2_RemoveOnTngDebugBoardDraw::Temp' has a wrong offset!");

// Function TangoLib.TngDebugBoard.Tng64BitmapToString
// 0x0028 (0x0028 - 0x0000)
struct TngDebugBoard_Tng64BitmapToString final
{
public:
	int64                                         Param;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColonType;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrawMax;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reverse;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_Tng64BitmapToString) == 0x000008, "Wrong alignment on TngDebugBoard_Tng64BitmapToString");
static_assert(sizeof(TngDebugBoard_Tng64BitmapToString) == 0x000028, "Wrong size on TngDebugBoard_Tng64BitmapToString");
static_assert(offsetof(TngDebugBoard_Tng64BitmapToString, Param) == 0x000000, "Member 'TngDebugBoard_Tng64BitmapToString::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_Tng64BitmapToString, ColonType) == 0x000008, "Member 'TngDebugBoard_Tng64BitmapToString::ColonType' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_Tng64BitmapToString, DrawMax) == 0x00000C, "Member 'TngDebugBoard_Tng64BitmapToString::DrawMax' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_Tng64BitmapToString, Reverse) == 0x000010, "Member 'TngDebugBoard_Tng64BitmapToString::Reverse' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_Tng64BitmapToString, ReturnValue) == 0x000018, "Member 'TngDebugBoard_Tng64BitmapToString::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngBitmapToString
// 0x0020 (0x0020 - 0x0000)
struct TngDebugBoard_TngBitmapToString final
{
public:
	int32                                         Param;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColonType;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrawMax;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reverse;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_TngBitmapToString) == 0x000008, "Wrong alignment on TngDebugBoard_TngBitmapToString");
static_assert(sizeof(TngDebugBoard_TngBitmapToString) == 0x000020, "Wrong size on TngDebugBoard_TngBitmapToString");
static_assert(offsetof(TngDebugBoard_TngBitmapToString, Param) == 0x000000, "Member 'TngDebugBoard_TngBitmapToString::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngBitmapToString, ColonType) == 0x000004, "Member 'TngDebugBoard_TngBitmapToString::ColonType' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngBitmapToString, DrawMax) == 0x000008, "Member 'TngDebugBoard_TngBitmapToString::DrawMax' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngBitmapToString, Reverse) == 0x00000C, "Member 'TngDebugBoard_TngBitmapToString::Reverse' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngBitmapToString, ReturnValue) == 0x000010, "Member 'TngDebugBoard_TngBitmapToString::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngBooleanToMark
// 0x0018 (0x0018 - 0x0000)
struct TngDebugBoard_TngBooleanToMark final
{
public:
	bool                                          Param;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_TngBooleanToMark) == 0x000008, "Wrong alignment on TngDebugBoard_TngBooleanToMark");
static_assert(sizeof(TngDebugBoard_TngBooleanToMark) == 0x000018, "Wrong size on TngDebugBoard_TngBooleanToMark");
static_assert(offsetof(TngDebugBoard_TngBooleanToMark, Param) == 0x000000, "Member 'TngDebugBoard_TngBooleanToMark::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngBooleanToMark, ReturnValue) == 0x000008, "Member 'TngDebugBoard_TngBooleanToMark::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngBooleanToString
// 0x0018 (0x0018 - 0x0000)
struct TngDebugBoard_TngBooleanToString final
{
public:
	bool                                          Param;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_TngBooleanToString) == 0x000008, "Wrong alignment on TngDebugBoard_TngBooleanToString");
static_assert(sizeof(TngDebugBoard_TngBooleanToString) == 0x000018, "Wrong size on TngDebugBoard_TngBooleanToString");
static_assert(offsetof(TngDebugBoard_TngBooleanToString, Param) == 0x000000, "Member 'TngDebugBoard_TngBooleanToString::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngBooleanToString, ReturnValue) == 0x000008, "Member 'TngDebugBoard_TngBooleanToString::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngDebugDraw2DBitmap
// 0x0030 (0x0030 - 0x0000)
struct TngDebugBoard_TngDebugDraw2DBitmap final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosX;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0014(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PopLength;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_TngDebugDraw2DBitmap) == 0x000008, "Wrong alignment on TngDebugBoard_TngDebugDraw2DBitmap");
static_assert(sizeof(TngDebugBoard_TngDebugDraw2DBitmap) == 0x000030, "Wrong size on TngDebugBoard_TngDebugDraw2DBitmap");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DBitmap, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_TngDebugDraw2DBitmap::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DBitmap, Param) == 0x000008, "Member 'TngDebugBoard_TngDebugDraw2DBitmap::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DBitmap, PosX) == 0x00000C, "Member 'TngDebugBoard_TngDebugDraw2DBitmap::PosX' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DBitmap, PosY) == 0x000010, "Member 'TngDebugBoard_TngDebugDraw2DBitmap::PosY' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DBitmap, Color) == 0x000014, "Member 'TngDebugBoard_TngDebugDraw2DBitmap::Color' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DBitmap, TextScale) == 0x000024, "Member 'TngDebugBoard_TngDebugDraw2DBitmap::TextScale' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DBitmap, DrawTime) == 0x000028, "Member 'TngDebugBoard_TngDebugDraw2DBitmap::DrawTime' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DBitmap, PopLength) == 0x00002C, "Member 'TngDebugBoard_TngDebugDraw2DBitmap::PopLength' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngDebugDraw2DBoolean
// 0x0030 (0x0030 - 0x0000)
struct TngDebugBoard_TngDebugDraw2DBoolean final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param;                                             // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PosX;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0014(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PopLength;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_TngDebugDraw2DBoolean) == 0x000008, "Wrong alignment on TngDebugBoard_TngDebugDraw2DBoolean");
static_assert(sizeof(TngDebugBoard_TngDebugDraw2DBoolean) == 0x000030, "Wrong size on TngDebugBoard_TngDebugDraw2DBoolean");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DBoolean, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_TngDebugDraw2DBoolean::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DBoolean, Param) == 0x000008, "Member 'TngDebugBoard_TngDebugDraw2DBoolean::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DBoolean, PosX) == 0x00000C, "Member 'TngDebugBoard_TngDebugDraw2DBoolean::PosX' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DBoolean, PosY) == 0x000010, "Member 'TngDebugBoard_TngDebugDraw2DBoolean::PosY' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DBoolean, Color) == 0x000014, "Member 'TngDebugBoard_TngDebugDraw2DBoolean::Color' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DBoolean, TextScale) == 0x000024, "Member 'TngDebugBoard_TngDebugDraw2DBoolean::TextScale' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DBoolean, DrawTime) == 0x000028, "Member 'TngDebugBoard_TngDebugDraw2DBoolean::DrawTime' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DBoolean, PopLength) == 0x00002C, "Member 'TngDebugBoard_TngDebugDraw2DBoolean::PopLength' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngDebugDraw2DFloat
// 0x0030 (0x0030 - 0x0000)
struct TngDebugBoard_TngDebugDraw2DFloat final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosX;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0014(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PopLength;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_TngDebugDraw2DFloat) == 0x000008, "Wrong alignment on TngDebugBoard_TngDebugDraw2DFloat");
static_assert(sizeof(TngDebugBoard_TngDebugDraw2DFloat) == 0x000030, "Wrong size on TngDebugBoard_TngDebugDraw2DFloat");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DFloat, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_TngDebugDraw2DFloat::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DFloat, Param) == 0x000008, "Member 'TngDebugBoard_TngDebugDraw2DFloat::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DFloat, PosX) == 0x00000C, "Member 'TngDebugBoard_TngDebugDraw2DFloat::PosX' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DFloat, PosY) == 0x000010, "Member 'TngDebugBoard_TngDebugDraw2DFloat::PosY' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DFloat, Color) == 0x000014, "Member 'TngDebugBoard_TngDebugDraw2DFloat::Color' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DFloat, TextScale) == 0x000024, "Member 'TngDebugBoard_TngDebugDraw2DFloat::TextScale' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DFloat, DrawTime) == 0x000028, "Member 'TngDebugBoard_TngDebugDraw2DFloat::DrawTime' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DFloat, PopLength) == 0x00002C, "Member 'TngDebugBoard_TngDebugDraw2DFloat::PopLength' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngDebugDraw2DGameplayTags
// 0x0050 (0x0050 - 0x0000)
struct TngDebugBoard_TngDebugDraw2DGameplayTags final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Param;                                             // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         PosX;                                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextScale;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PopLength;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugBoard_TngDebugDraw2DGameplayTags) == 0x000008, "Wrong alignment on TngDebugBoard_TngDebugDraw2DGameplayTags");
static_assert(sizeof(TngDebugBoard_TngDebugDraw2DGameplayTags) == 0x000050, "Wrong size on TngDebugBoard_TngDebugDraw2DGameplayTags");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DGameplayTags, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_TngDebugDraw2DGameplayTags::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DGameplayTags, Param) == 0x000008, "Member 'TngDebugBoard_TngDebugDraw2DGameplayTags::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DGameplayTags, PosX) == 0x000028, "Member 'TngDebugBoard_TngDebugDraw2DGameplayTags::PosX' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DGameplayTags, PosY) == 0x00002C, "Member 'TngDebugBoard_TngDebugDraw2DGameplayTags::PosY' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DGameplayTags, Color) == 0x000030, "Member 'TngDebugBoard_TngDebugDraw2DGameplayTags::Color' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DGameplayTags, TextScale) == 0x000040, "Member 'TngDebugBoard_TngDebugDraw2DGameplayTags::TextScale' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DGameplayTags, DrawTime) == 0x000044, "Member 'TngDebugBoard_TngDebugDraw2DGameplayTags::DrawTime' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DGameplayTags, PopLength) == 0x000048, "Member 'TngDebugBoard_TngDebugDraw2DGameplayTags::PopLength' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngDebugDraw2DInteger
// 0x0030 (0x0030 - 0x0000)
struct TngDebugBoard_TngDebugDraw2DInteger final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosX;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0014(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextScale;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PopLength;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_TngDebugDraw2DInteger) == 0x000008, "Wrong alignment on TngDebugBoard_TngDebugDraw2DInteger");
static_assert(sizeof(TngDebugBoard_TngDebugDraw2DInteger) == 0x000030, "Wrong size on TngDebugBoard_TngDebugDraw2DInteger");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DInteger, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_TngDebugDraw2DInteger::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DInteger, Param) == 0x000008, "Member 'TngDebugBoard_TngDebugDraw2DInteger::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DInteger, PosX) == 0x00000C, "Member 'TngDebugBoard_TngDebugDraw2DInteger::PosX' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DInteger, PosY) == 0x000010, "Member 'TngDebugBoard_TngDebugDraw2DInteger::PosY' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DInteger, Color) == 0x000014, "Member 'TngDebugBoard_TngDebugDraw2DInteger::Color' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DInteger, TextScale) == 0x000024, "Member 'TngDebugBoard_TngDebugDraw2DInteger::TextScale' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DInteger, DrawTime) == 0x000028, "Member 'TngDebugBoard_TngDebugDraw2DInteger::DrawTime' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DInteger, PopLength) == 0x00002C, "Member 'TngDebugBoard_TngDebugDraw2DInteger::PopLength' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngDebugDraw2DObject
// 0x0038 (0x0038 - 0x0000)
struct TngDebugBoard_TngDebugDraw2DObject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          Param;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosX;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PopLength;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugBoard_TngDebugDraw2DObject) == 0x000008, "Wrong alignment on TngDebugBoard_TngDebugDraw2DObject");
static_assert(sizeof(TngDebugBoard_TngDebugDraw2DObject) == 0x000038, "Wrong size on TngDebugBoard_TngDebugDraw2DObject");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DObject, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_TngDebugDraw2DObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DObject, Param) == 0x000008, "Member 'TngDebugBoard_TngDebugDraw2DObject::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DObject, PosX) == 0x000010, "Member 'TngDebugBoard_TngDebugDraw2DObject::PosX' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DObject, PosY) == 0x000014, "Member 'TngDebugBoard_TngDebugDraw2DObject::PosY' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DObject, Color) == 0x000018, "Member 'TngDebugBoard_TngDebugDraw2DObject::Color' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DObject, TextScale) == 0x000028, "Member 'TngDebugBoard_TngDebugDraw2DObject::TextScale' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DObject, DrawTime) == 0x00002C, "Member 'TngDebugBoard_TngDebugDraw2DObject::DrawTime' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DObject, PopLength) == 0x000030, "Member 'TngDebugBoard_TngDebugDraw2DObject::PopLength' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngDebugDraw2DRotator
// 0x0038 (0x0038 - 0x0000)
struct TngDebugBoard_TngDebugDraw2DRotator final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Param;                                             // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PosX;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x001C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PopLength;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_TngDebugDraw2DRotator) == 0x000008, "Wrong alignment on TngDebugBoard_TngDebugDraw2DRotator");
static_assert(sizeof(TngDebugBoard_TngDebugDraw2DRotator) == 0x000038, "Wrong size on TngDebugBoard_TngDebugDraw2DRotator");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DRotator, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_TngDebugDraw2DRotator::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DRotator, Param) == 0x000008, "Member 'TngDebugBoard_TngDebugDraw2DRotator::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DRotator, PosX) == 0x000014, "Member 'TngDebugBoard_TngDebugDraw2DRotator::PosX' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DRotator, PosY) == 0x000018, "Member 'TngDebugBoard_TngDebugDraw2DRotator::PosY' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DRotator, Color) == 0x00001C, "Member 'TngDebugBoard_TngDebugDraw2DRotator::Color' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DRotator, TextScale) == 0x00002C, "Member 'TngDebugBoard_TngDebugDraw2DRotator::TextScale' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DRotator, DrawTime) == 0x000030, "Member 'TngDebugBoard_TngDebugDraw2DRotator::DrawTime' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DRotator, PopLength) == 0x000034, "Member 'TngDebugBoard_TngDebugDraw2DRotator::PopLength' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngDebugDraw2DText
// 0x0040 (0x0040 - 0x0000)
struct TngDebugBoard_TngDebugDraw2DText final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosX;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PopLength;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugBoard_TngDebugDraw2DText) == 0x000008, "Wrong alignment on TngDebugBoard_TngDebugDraw2DText");
static_assert(sizeof(TngDebugBoard_TngDebugDraw2DText) == 0x000040, "Wrong size on TngDebugBoard_TngDebugDraw2DText");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DText, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_TngDebugDraw2DText::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DText, Text) == 0x000008, "Member 'TngDebugBoard_TngDebugDraw2DText::Text' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DText, PosX) == 0x000018, "Member 'TngDebugBoard_TngDebugDraw2DText::PosX' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DText, PosY) == 0x00001C, "Member 'TngDebugBoard_TngDebugDraw2DText::PosY' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DText, Color) == 0x000020, "Member 'TngDebugBoard_TngDebugDraw2DText::Color' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DText, TextScale) == 0x000030, "Member 'TngDebugBoard_TngDebugDraw2DText::TextScale' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DText, DrawTime) == 0x000034, "Member 'TngDebugBoard_TngDebugDraw2DText::DrawTime' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DText, PopLength) == 0x000038, "Member 'TngDebugBoard_TngDebugDraw2DText::PopLength' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngDebugDraw2DVector
// 0x0038 (0x0038 - 0x0000)
struct TngDebugBoard_TngDebugDraw2DVector final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Param;                                             // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosX;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x001C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PopLength;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_TngDebugDraw2DVector) == 0x000008, "Wrong alignment on TngDebugBoard_TngDebugDraw2DVector");
static_assert(sizeof(TngDebugBoard_TngDebugDraw2DVector) == 0x000038, "Wrong size on TngDebugBoard_TngDebugDraw2DVector");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DVector, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_TngDebugDraw2DVector::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DVector, Param) == 0x000008, "Member 'TngDebugBoard_TngDebugDraw2DVector::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DVector, PosX) == 0x000014, "Member 'TngDebugBoard_TngDebugDraw2DVector::PosX' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DVector, PosY) == 0x000018, "Member 'TngDebugBoard_TngDebugDraw2DVector::PosY' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DVector, Color) == 0x00001C, "Member 'TngDebugBoard_TngDebugDraw2DVector::Color' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DVector, TextScale) == 0x00002C, "Member 'TngDebugBoard_TngDebugDraw2DVector::TextScale' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DVector, DrawTime) == 0x000030, "Member 'TngDebugBoard_TngDebugDraw2DVector::DrawTime' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw2DVector, PopLength) == 0x000034, "Member 'TngDebugBoard_TngDebugDraw2DVector::PopLength' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngDebugDraw3DBitmap
// 0x0038 (0x0038 - 0x0000)
struct TngDebugBoard_TngDebugDraw3DBitmap final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PopLength;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugBoard_TngDebugDraw3DBitmap) == 0x000008, "Wrong alignment on TngDebugBoard_TngDebugDraw3DBitmap");
static_assert(sizeof(TngDebugBoard_TngDebugDraw3DBitmap) == 0x000038, "Wrong size on TngDebugBoard_TngDebugDraw3DBitmap");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DBitmap, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_TngDebugDraw3DBitmap::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DBitmap, Param) == 0x000008, "Member 'TngDebugBoard_TngDebugDraw3DBitmap::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DBitmap, Location) == 0x00000C, "Member 'TngDebugBoard_TngDebugDraw3DBitmap::Location' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DBitmap, Color) == 0x000018, "Member 'TngDebugBoard_TngDebugDraw3DBitmap::Color' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DBitmap, TextScale) == 0x000028, "Member 'TngDebugBoard_TngDebugDraw3DBitmap::TextScale' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DBitmap, DrawTime) == 0x00002C, "Member 'TngDebugBoard_TngDebugDraw3DBitmap::DrawTime' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DBitmap, PopLength) == 0x000030, "Member 'TngDebugBoard_TngDebugDraw3DBitmap::PopLength' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngDebugDraw3DBoolean
// 0x0038 (0x0038 - 0x0000)
struct TngDebugBoard_TngDebugDraw3DBoolean final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param;                                             // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PopLength;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugBoard_TngDebugDraw3DBoolean) == 0x000008, "Wrong alignment on TngDebugBoard_TngDebugDraw3DBoolean");
static_assert(sizeof(TngDebugBoard_TngDebugDraw3DBoolean) == 0x000038, "Wrong size on TngDebugBoard_TngDebugDraw3DBoolean");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DBoolean, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_TngDebugDraw3DBoolean::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DBoolean, Param) == 0x000008, "Member 'TngDebugBoard_TngDebugDraw3DBoolean::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DBoolean, Location) == 0x00000C, "Member 'TngDebugBoard_TngDebugDraw3DBoolean::Location' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DBoolean, Color) == 0x000018, "Member 'TngDebugBoard_TngDebugDraw3DBoolean::Color' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DBoolean, TextScale) == 0x000028, "Member 'TngDebugBoard_TngDebugDraw3DBoolean::TextScale' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DBoolean, DrawTime) == 0x00002C, "Member 'TngDebugBoard_TngDebugDraw3DBoolean::DrawTime' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DBoolean, PopLength) == 0x000030, "Member 'TngDebugBoard_TngDebugDraw3DBoolean::PopLength' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngDebugDraw3DFloat
// 0x0038 (0x0038 - 0x0000)
struct TngDebugBoard_TngDebugDraw3DFloat final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PopLength;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugBoard_TngDebugDraw3DFloat) == 0x000008, "Wrong alignment on TngDebugBoard_TngDebugDraw3DFloat");
static_assert(sizeof(TngDebugBoard_TngDebugDraw3DFloat) == 0x000038, "Wrong size on TngDebugBoard_TngDebugDraw3DFloat");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DFloat, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_TngDebugDraw3DFloat::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DFloat, Param) == 0x000008, "Member 'TngDebugBoard_TngDebugDraw3DFloat::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DFloat, Location) == 0x00000C, "Member 'TngDebugBoard_TngDebugDraw3DFloat::Location' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DFloat, Color) == 0x000018, "Member 'TngDebugBoard_TngDebugDraw3DFloat::Color' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DFloat, TextScale) == 0x000028, "Member 'TngDebugBoard_TngDebugDraw3DFloat::TextScale' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DFloat, DrawTime) == 0x00002C, "Member 'TngDebugBoard_TngDebugDraw3DFloat::DrawTime' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DFloat, PopLength) == 0x000030, "Member 'TngDebugBoard_TngDebugDraw3DFloat::PopLength' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngDebugDraw3DGameplayTags
// 0x0050 (0x0050 - 0x0000)
struct TngDebugBoard_TngDebugDraw3DGameplayTags final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Param;                                             // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0028(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0034(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextScale;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PopLength;                                         // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_TngDebugDraw3DGameplayTags) == 0x000008, "Wrong alignment on TngDebugBoard_TngDebugDraw3DGameplayTags");
static_assert(sizeof(TngDebugBoard_TngDebugDraw3DGameplayTags) == 0x000050, "Wrong size on TngDebugBoard_TngDebugDraw3DGameplayTags");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DGameplayTags, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_TngDebugDraw3DGameplayTags::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DGameplayTags, Param) == 0x000008, "Member 'TngDebugBoard_TngDebugDraw3DGameplayTags::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DGameplayTags, Location) == 0x000028, "Member 'TngDebugBoard_TngDebugDraw3DGameplayTags::Location' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DGameplayTags, Color) == 0x000034, "Member 'TngDebugBoard_TngDebugDraw3DGameplayTags::Color' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DGameplayTags, TextScale) == 0x000044, "Member 'TngDebugBoard_TngDebugDraw3DGameplayTags::TextScale' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DGameplayTags, DrawTime) == 0x000048, "Member 'TngDebugBoard_TngDebugDraw3DGameplayTags::DrawTime' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DGameplayTags, PopLength) == 0x00004C, "Member 'TngDebugBoard_TngDebugDraw3DGameplayTags::PopLength' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngDebugDraw3DInteger
// 0x0038 (0x0038 - 0x0000)
struct TngDebugBoard_TngDebugDraw3DInteger final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextScale;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PopLength;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugBoard_TngDebugDraw3DInteger) == 0x000008, "Wrong alignment on TngDebugBoard_TngDebugDraw3DInteger");
static_assert(sizeof(TngDebugBoard_TngDebugDraw3DInteger) == 0x000038, "Wrong size on TngDebugBoard_TngDebugDraw3DInteger");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DInteger, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_TngDebugDraw3DInteger::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DInteger, Param) == 0x000008, "Member 'TngDebugBoard_TngDebugDraw3DInteger::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DInteger, Location) == 0x00000C, "Member 'TngDebugBoard_TngDebugDraw3DInteger::Location' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DInteger, Color) == 0x000018, "Member 'TngDebugBoard_TngDebugDraw3DInteger::Color' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DInteger, TextScale) == 0x000028, "Member 'TngDebugBoard_TngDebugDraw3DInteger::TextScale' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DInteger, DrawTime) == 0x00002C, "Member 'TngDebugBoard_TngDebugDraw3DInteger::DrawTime' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DInteger, PopLength) == 0x000030, "Member 'TngDebugBoard_TngDebugDraw3DInteger::PopLength' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngDebugDraw3DObject
// 0x0038 (0x0038 - 0x0000)
struct TngDebugBoard_TngDebugDraw3DObject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          Param;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x001C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextScale;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PopLength;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_TngDebugDraw3DObject) == 0x000008, "Wrong alignment on TngDebugBoard_TngDebugDraw3DObject");
static_assert(sizeof(TngDebugBoard_TngDebugDraw3DObject) == 0x000038, "Wrong size on TngDebugBoard_TngDebugDraw3DObject");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DObject, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_TngDebugDraw3DObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DObject, Param) == 0x000008, "Member 'TngDebugBoard_TngDebugDraw3DObject::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DObject, Location) == 0x000010, "Member 'TngDebugBoard_TngDebugDraw3DObject::Location' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DObject, Color) == 0x00001C, "Member 'TngDebugBoard_TngDebugDraw3DObject::Color' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DObject, TextScale) == 0x00002C, "Member 'TngDebugBoard_TngDebugDraw3DObject::TextScale' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DObject, DrawTime) == 0x000030, "Member 'TngDebugBoard_TngDebugDraw3DObject::DrawTime' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DObject, PopLength) == 0x000034, "Member 'TngDebugBoard_TngDebugDraw3DObject::PopLength' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngDebugDraw3DRotator
// 0x0040 (0x0040 - 0x0000)
struct TngDebugBoard_TngDebugDraw3DRotator final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Param;                                             // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PopLength;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugBoard_TngDebugDraw3DRotator) == 0x000008, "Wrong alignment on TngDebugBoard_TngDebugDraw3DRotator");
static_assert(sizeof(TngDebugBoard_TngDebugDraw3DRotator) == 0x000040, "Wrong size on TngDebugBoard_TngDebugDraw3DRotator");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DRotator, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_TngDebugDraw3DRotator::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DRotator, Param) == 0x000008, "Member 'TngDebugBoard_TngDebugDraw3DRotator::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DRotator, Location) == 0x000014, "Member 'TngDebugBoard_TngDebugDraw3DRotator::Location' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DRotator, Color) == 0x000020, "Member 'TngDebugBoard_TngDebugDraw3DRotator::Color' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DRotator, TextScale) == 0x000030, "Member 'TngDebugBoard_TngDebugDraw3DRotator::TextScale' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DRotator, DrawTime) == 0x000034, "Member 'TngDebugBoard_TngDebugDraw3DRotator::DrawTime' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DRotator, PopLength) == 0x000038, "Member 'TngDebugBoard_TngDebugDraw3DRotator::PopLength' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngDebugDraw3DText
// 0x0040 (0x0040 - 0x0000)
struct TngDebugBoard_TngDebugDraw3DText final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0024(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextScale;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PopLength;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_TngDebugDraw3DText) == 0x000008, "Wrong alignment on TngDebugBoard_TngDebugDraw3DText");
static_assert(sizeof(TngDebugBoard_TngDebugDraw3DText) == 0x000040, "Wrong size on TngDebugBoard_TngDebugDraw3DText");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DText, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_TngDebugDraw3DText::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DText, Text) == 0x000008, "Member 'TngDebugBoard_TngDebugDraw3DText::Text' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DText, Location) == 0x000018, "Member 'TngDebugBoard_TngDebugDraw3DText::Location' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DText, Color) == 0x000024, "Member 'TngDebugBoard_TngDebugDraw3DText::Color' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DText, TextScale) == 0x000034, "Member 'TngDebugBoard_TngDebugDraw3DText::TextScale' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DText, DrawTime) == 0x000038, "Member 'TngDebugBoard_TngDebugDraw3DText::DrawTime' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DText, PopLength) == 0x00003C, "Member 'TngDebugBoard_TngDebugDraw3DText::PopLength' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngDebugDraw3DVector
// 0x0040 (0x0040 - 0x0000)
struct TngDebugBoard_TngDebugDraw3DVector final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Param;                                             // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PopLength;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugBoard_TngDebugDraw3DVector) == 0x000008, "Wrong alignment on TngDebugBoard_TngDebugDraw3DVector");
static_assert(sizeof(TngDebugBoard_TngDebugDraw3DVector) == 0x000040, "Wrong size on TngDebugBoard_TngDebugDraw3DVector");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DVector, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_TngDebugDraw3DVector::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DVector, Param) == 0x000008, "Member 'TngDebugBoard_TngDebugDraw3DVector::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DVector, Location) == 0x000014, "Member 'TngDebugBoard_TngDebugDraw3DVector::Location' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DVector, Color) == 0x000020, "Member 'TngDebugBoard_TngDebugDraw3DVector::Color' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DVector, TextScale) == 0x000030, "Member 'TngDebugBoard_TngDebugDraw3DVector::TextScale' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DVector, DrawTime) == 0x000034, "Member 'TngDebugBoard_TngDebugDraw3DVector::DrawTime' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDraw3DVector, PopLength) == 0x000038, "Member 'TngDebugBoard_TngDebugDraw3DVector::PopLength' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngDebugDrawLineActor
// 0x0038 (0x0038 - 0x0000)
struct TngDebugBoard_TngDebugDrawLineActor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           Param;                                             // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_TngDebugDrawLineActor) == 0x000008, "Wrong alignment on TngDebugBoard_TngDebugDrawLineActor");
static_assert(sizeof(TngDebugBoard_TngDebugDrawLineActor) == 0x000038, "Wrong size on TngDebugBoard_TngDebugDrawLineActor");
static_assert(offsetof(TngDebugBoard_TngDebugDrawLineActor, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_TngDebugDrawLineActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDrawLineActor, Location) == 0x000008, "Member 'TngDebugBoard_TngDebugDrawLineActor::Location' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDrawLineActor, Param) == 0x000018, "Member 'TngDebugBoard_TngDebugDrawLineActor::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDrawLineActor, Color) == 0x000020, "Member 'TngDebugBoard_TngDebugDrawLineActor::Color' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDrawLineActor, LineScale) == 0x000030, "Member 'TngDebugBoard_TngDebugDrawLineActor::LineScale' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDrawLineActor, DrawTime) == 0x000034, "Member 'TngDebugBoard_TngDebugDrawLineActor::DrawTime' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngDebugDrawLineActors
// 0x0040 (0x0040 - 0x0000)
struct TngDebugBoard_TngDebugDrawLineActors final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Param;                                             // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0028(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineScale;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_TngDebugDrawLineActors) == 0x000008, "Wrong alignment on TngDebugBoard_TngDebugDrawLineActors");
static_assert(sizeof(TngDebugBoard_TngDebugDrawLineActors) == 0x000040, "Wrong size on TngDebugBoard_TngDebugDrawLineActors");
static_assert(offsetof(TngDebugBoard_TngDebugDrawLineActors, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_TngDebugDrawLineActors::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDrawLineActors, Location) == 0x000008, "Member 'TngDebugBoard_TngDebugDrawLineActors::Location' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDrawLineActors, Param) == 0x000018, "Member 'TngDebugBoard_TngDebugDrawLineActors::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDrawLineActors, Color) == 0x000028, "Member 'TngDebugBoard_TngDebugDrawLineActors::Color' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDrawLineActors, LineScale) == 0x000038, "Member 'TngDebugBoard_TngDebugDrawLineActors::LineScale' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDrawLineActors, DrawTime) == 0x00003C, "Member 'TngDebugBoard_TngDebugDrawLineActors::DrawTime' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngDebugDrawLineLocation
// 0x0038 (0x0038 - 0x0000)
struct TngDebugBoard_TngDebugDrawLineLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Param;                                             // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineScale;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_TngDebugDrawLineLocation) == 0x000008, "Wrong alignment on TngDebugBoard_TngDebugDrawLineLocation");
static_assert(sizeof(TngDebugBoard_TngDebugDrawLineLocation) == 0x000038, "Wrong size on TngDebugBoard_TngDebugDrawLineLocation");
static_assert(offsetof(TngDebugBoard_TngDebugDrawLineLocation, WorldContextObject) == 0x000000, "Member 'TngDebugBoard_TngDebugDrawLineLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDrawLineLocation, Location) == 0x000008, "Member 'TngDebugBoard_TngDebugDrawLineLocation::Location' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDrawLineLocation, Param) == 0x000014, "Member 'TngDebugBoard_TngDebugDrawLineLocation::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDrawLineLocation, Color) == 0x000020, "Member 'TngDebugBoard_TngDebugDrawLineLocation::Color' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDrawLineLocation, LineScale) == 0x000030, "Member 'TngDebugBoard_TngDebugDrawLineLocation::LineScale' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngDebugDrawLineLocation, DrawTime) == 0x000034, "Member 'TngDebugBoard_TngDebugDrawLineLocation::DrawTime' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngFloatToString
// 0x0018 (0x0018 - 0x0000)
struct TngDebugBoard_TngFloatToString final
{
public:
	float                                         Param;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_TngFloatToString) == 0x000008, "Wrong alignment on TngDebugBoard_TngFloatToString");
static_assert(sizeof(TngDebugBoard_TngFloatToString) == 0x000018, "Wrong size on TngDebugBoard_TngFloatToString");
static_assert(offsetof(TngDebugBoard_TngFloatToString, Param) == 0x000000, "Member 'TngDebugBoard_TngFloatToString::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngFloatToString, ReturnValue) == 0x000008, "Member 'TngDebugBoard_TngFloatToString::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngGameplayTagsToString
// 0x0038 (0x0038 - 0x0000)
struct TngDebugBoard_TngGameplayTagsToString final
{
public:
	struct FGameplayTagContainer                  Param;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsOneLine;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_TngGameplayTagsToString) == 0x000008, "Wrong alignment on TngDebugBoard_TngGameplayTagsToString");
static_assert(sizeof(TngDebugBoard_TngGameplayTagsToString) == 0x000038, "Wrong size on TngDebugBoard_TngGameplayTagsToString");
static_assert(offsetof(TngDebugBoard_TngGameplayTagsToString, Param) == 0x000000, "Member 'TngDebugBoard_TngGameplayTagsToString::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngGameplayTagsToString, IsOneLine) == 0x000020, "Member 'TngDebugBoard_TngGameplayTagsToString::IsOneLine' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngGameplayTagsToString, ReturnValue) == 0x000028, "Member 'TngDebugBoard_TngGameplayTagsToString::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngIntegerToString
// 0x0018 (0x0018 - 0x0000)
struct TngDebugBoard_TngIntegerToString final
{
public:
	int32                                         Param;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_TngIntegerToString) == 0x000008, "Wrong alignment on TngDebugBoard_TngIntegerToString");
static_assert(sizeof(TngDebugBoard_TngIntegerToString) == 0x000018, "Wrong size on TngDebugBoard_TngIntegerToString");
static_assert(offsetof(TngDebugBoard_TngIntegerToString, Param) == 0x000000, "Member 'TngDebugBoard_TngIntegerToString::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngIntegerToString, ReturnValue) == 0x000008, "Member 'TngDebugBoard_TngIntegerToString::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngObjectToString
// 0x0018 (0x0018 - 0x0000)
struct TngDebugBoard_TngObjectToString final
{
public:
	const class UObject*                          Param;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_TngObjectToString) == 0x000008, "Wrong alignment on TngDebugBoard_TngObjectToString");
static_assert(sizeof(TngDebugBoard_TngObjectToString) == 0x000018, "Wrong size on TngDebugBoard_TngObjectToString");
static_assert(offsetof(TngDebugBoard_TngObjectToString, Param) == 0x000000, "Member 'TngDebugBoard_TngObjectToString::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngObjectToString, ReturnValue) == 0x000008, "Member 'TngDebugBoard_TngObjectToString::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngRotatorToString
// 0x0020 (0x0020 - 0x0000)
struct TngDebugBoard_TngRotatorToString final
{
public:
	struct FRotator                               Param;                                             // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_TngRotatorToString) == 0x000008, "Wrong alignment on TngDebugBoard_TngRotatorToString");
static_assert(sizeof(TngDebugBoard_TngRotatorToString) == 0x000020, "Wrong size on TngDebugBoard_TngRotatorToString");
static_assert(offsetof(TngDebugBoard_TngRotatorToString, Param) == 0x000000, "Member 'TngDebugBoard_TngRotatorToString::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngRotatorToString, ReturnValue) == 0x000010, "Member 'TngDebugBoard_TngRotatorToString::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngStrLen
// 0x0028 (0x0028 - 0x0000)
struct TngDebugBoard_TngStrLen final
{
public:
	const class UFont*                            InFont;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InText;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         XL;                                                // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YL;                                                // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugBoard_TngStrLen) == 0x000008, "Wrong alignment on TngDebugBoard_TngStrLen");
static_assert(sizeof(TngDebugBoard_TngStrLen) == 0x000028, "Wrong size on TngDebugBoard_TngStrLen");
static_assert(offsetof(TngDebugBoard_TngStrLen, InFont) == 0x000000, "Member 'TngDebugBoard_TngStrLen::InFont' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngStrLen, InText) == 0x000008, "Member 'TngDebugBoard_TngStrLen::InText' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngStrLen, XL) == 0x000018, "Member 'TngDebugBoard_TngStrLen::XL' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngStrLen, YL) == 0x00001C, "Member 'TngDebugBoard_TngStrLen::YL' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngStrLen, ReturnValue) == 0x000020, "Member 'TngDebugBoard_TngStrLen::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDebugBoard.TngVectorToString
// 0x0020 (0x0020 - 0x0000)
struct TngDebugBoard_TngVectorToString final
{
public:
	struct FVector                                Param;                                             // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugBoard_TngVectorToString) == 0x000008, "Wrong alignment on TngDebugBoard_TngVectorToString");
static_assert(sizeof(TngDebugBoard_TngVectorToString) == 0x000020, "Wrong size on TngDebugBoard_TngVectorToString");
static_assert(offsetof(TngDebugBoard_TngVectorToString, Param) == 0x000000, "Member 'TngDebugBoard_TngVectorToString::Param' has a wrong offset!");
static_assert(offsetof(TngDebugBoard_TngVectorToString, ReturnValue) == 0x000010, "Member 'TngDebugBoard_TngVectorToString::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDebugCircle.SetDebugCircle
// 0x0028 (0x0028 - 0x0000)
struct TngDebugCircle_SetDebugCircle final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetCommand;                                        // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugCircle_SetDebugCircle) == 0x000008, "Wrong alignment on TngDebugCircle_SetDebugCircle");
static_assert(sizeof(TngDebugCircle_SetDebugCircle) == 0x000028, "Wrong size on TngDebugCircle_SetDebugCircle");
static_assert(offsetof(TngDebugCircle_SetDebugCircle, WorldContextObject) == 0x000000, "Member 'TngDebugCircle_SetDebugCircle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugCircle_SetDebugCircle, Page) == 0x000008, "Member 'TngDebugCircle_SetDebugCircle::Page' has a wrong offset!");
static_assert(offsetof(TngDebugCircle_SetDebugCircle, Index_0) == 0x00000C, "Member 'TngDebugCircle_SetDebugCircle::Index_0' has a wrong offset!");
static_assert(offsetof(TngDebugCircle_SetDebugCircle, SetCommand) == 0x000010, "Member 'TngDebugCircle_SetDebugCircle::SetCommand' has a wrong offset!");
static_assert(offsetof(TngDebugCircle_SetDebugCircle, ReturnValue) == 0x000020, "Member 'TngDebugCircle_SetDebugCircle::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDebugCircle.SetDebugCircleEnable
// 0x0010 (0x0010 - 0x0000)
struct TngDebugCircle_SetDebugCircleEnable final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetFlag;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugCircle_SetDebugCircleEnable) == 0x000008, "Wrong alignment on TngDebugCircle_SetDebugCircleEnable");
static_assert(sizeof(TngDebugCircle_SetDebugCircleEnable) == 0x000010, "Wrong size on TngDebugCircle_SetDebugCircleEnable");
static_assert(offsetof(TngDebugCircle_SetDebugCircleEnable, WorldContextObject) == 0x000000, "Member 'TngDebugCircle_SetDebugCircleEnable::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugCircle_SetDebugCircleEnable, SetFlag) == 0x000008, "Member 'TngDebugCircle_SetDebugCircleEnable::SetFlag' has a wrong offset!");

// Function TangoLib.TngDebugDrawComponent.DrawBoxFromActor
// 0x0020 (0x0020 - 0x0000)
struct TngDebugDrawComponent_DrawBoxFromActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           A;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Size;                                              // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugDrawComponent_DrawBoxFromActor) == 0x000008, "Wrong alignment on TngDebugDrawComponent_DrawBoxFromActor");
static_assert(sizeof(TngDebugDrawComponent_DrawBoxFromActor) == 0x000020, "Wrong size on TngDebugDrawComponent_DrawBoxFromActor");
static_assert(offsetof(TngDebugDrawComponent_DrawBoxFromActor, Target) == 0x000000, "Member 'TngDebugDrawComponent_DrawBoxFromActor::Target' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawBoxFromActor, A) == 0x000008, "Member 'TngDebugDrawComponent_DrawBoxFromActor::A' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawBoxFromActor, Size) == 0x000010, "Member 'TngDebugDrawComponent_DrawBoxFromActor::Size' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawBoxFromActor, Color) == 0x00001C, "Member 'TngDebugDrawComponent_DrawBoxFromActor::Color' has a wrong offset!");

// Function TangoLib.TngDebugDrawComponent.DrawBoxFromTransform
// 0x0050 (0x0050 - 0x0000)
struct TngDebugDrawComponent_DrawBoxFromTransform final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             A;                                                 // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Size;                                              // 0x0040(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugDrawComponent_DrawBoxFromTransform) == 0x000010, "Wrong alignment on TngDebugDrawComponent_DrawBoxFromTransform");
static_assert(sizeof(TngDebugDrawComponent_DrawBoxFromTransform) == 0x000050, "Wrong size on TngDebugDrawComponent_DrawBoxFromTransform");
static_assert(offsetof(TngDebugDrawComponent_DrawBoxFromTransform, Target) == 0x000000, "Member 'TngDebugDrawComponent_DrawBoxFromTransform::Target' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawBoxFromTransform, A) == 0x000010, "Member 'TngDebugDrawComponent_DrawBoxFromTransform::A' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawBoxFromTransform, Size) == 0x000040, "Member 'TngDebugDrawComponent_DrawBoxFromTransform::Size' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawBoxFromTransform, Color) == 0x00004C, "Member 'TngDebugDrawComponent_DrawBoxFromTransform::Color' has a wrong offset!");

// Function TangoLib.TngDebugDrawComponent.DrawCircleFromActor
// 0x0018 (0x0018 - 0x0000)
struct TngDebugDrawComponent_DrawCircleFromActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           A;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugDrawComponent_DrawCircleFromActor) == 0x000008, "Wrong alignment on TngDebugDrawComponent_DrawCircleFromActor");
static_assert(sizeof(TngDebugDrawComponent_DrawCircleFromActor) == 0x000018, "Wrong size on TngDebugDrawComponent_DrawCircleFromActor");
static_assert(offsetof(TngDebugDrawComponent_DrawCircleFromActor, Target) == 0x000000, "Member 'TngDebugDrawComponent_DrawCircleFromActor::Target' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawCircleFromActor, A) == 0x000008, "Member 'TngDebugDrawComponent_DrawCircleFromActor::A' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawCircleFromActor, Size) == 0x000010, "Member 'TngDebugDrawComponent_DrawCircleFromActor::Size' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawCircleFromActor, Color) == 0x000014, "Member 'TngDebugDrawComponent_DrawCircleFromActor::Color' has a wrong offset!");

// Function TangoLib.TngDebugDrawComponent.DrawCircleFromPoint
// 0x0020 (0x0020 - 0x0000)
struct TngDebugDrawComponent_DrawCircleFromPoint final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                A;                                                 // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugDrawComponent_DrawCircleFromPoint) == 0x000008, "Wrong alignment on TngDebugDrawComponent_DrawCircleFromPoint");
static_assert(sizeof(TngDebugDrawComponent_DrawCircleFromPoint) == 0x000020, "Wrong size on TngDebugDrawComponent_DrawCircleFromPoint");
static_assert(offsetof(TngDebugDrawComponent_DrawCircleFromPoint, Target) == 0x000000, "Member 'TngDebugDrawComponent_DrawCircleFromPoint::Target' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawCircleFromPoint, A) == 0x000008, "Member 'TngDebugDrawComponent_DrawCircleFromPoint::A' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawCircleFromPoint, Size) == 0x000014, "Member 'TngDebugDrawComponent_DrawCircleFromPoint::Size' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawCircleFromPoint, Color) == 0x000018, "Member 'TngDebugDrawComponent_DrawCircleFromPoint::Color' has a wrong offset!");

// Function TangoLib.TngDebugDrawComponent.DrawLineFromActorToActor
// 0x0020 (0x0020 - 0x0000)
struct TngDebugDrawComponent_DrawLineFromActorToActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           A;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           B;                                                 // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsArrow;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugDrawComponent_DrawLineFromActorToActor) == 0x000008, "Wrong alignment on TngDebugDrawComponent_DrawLineFromActorToActor");
static_assert(sizeof(TngDebugDrawComponent_DrawLineFromActorToActor) == 0x000020, "Wrong size on TngDebugDrawComponent_DrawLineFromActorToActor");
static_assert(offsetof(TngDebugDrawComponent_DrawLineFromActorToActor, Target) == 0x000000, "Member 'TngDebugDrawComponent_DrawLineFromActorToActor::Target' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawLineFromActorToActor, A) == 0x000008, "Member 'TngDebugDrawComponent_DrawLineFromActorToActor::A' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawLineFromActorToActor, B) == 0x000010, "Member 'TngDebugDrawComponent_DrawLineFromActorToActor::B' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawLineFromActorToActor, Color) == 0x000018, "Member 'TngDebugDrawComponent_DrawLineFromActorToActor::Color' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawLineFromActorToActor, IsArrow) == 0x00001C, "Member 'TngDebugDrawComponent_DrawLineFromActorToActor::IsArrow' has a wrong offset!");

// Function TangoLib.TngDebugDrawComponent.DrawLineFromActorToPoint
// 0x0028 (0x0028 - 0x0000)
struct TngDebugDrawComponent_DrawLineFromActorToPoint final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           A;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsArrow;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugDrawComponent_DrawLineFromActorToPoint) == 0x000008, "Wrong alignment on TngDebugDrawComponent_DrawLineFromActorToPoint");
static_assert(sizeof(TngDebugDrawComponent_DrawLineFromActorToPoint) == 0x000028, "Wrong size on TngDebugDrawComponent_DrawLineFromActorToPoint");
static_assert(offsetof(TngDebugDrawComponent_DrawLineFromActorToPoint, Target) == 0x000000, "Member 'TngDebugDrawComponent_DrawLineFromActorToPoint::Target' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawLineFromActorToPoint, A) == 0x000008, "Member 'TngDebugDrawComponent_DrawLineFromActorToPoint::A' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawLineFromActorToPoint, B) == 0x000010, "Member 'TngDebugDrawComponent_DrawLineFromActorToPoint::B' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawLineFromActorToPoint, Color) == 0x00001C, "Member 'TngDebugDrawComponent_DrawLineFromActorToPoint::Color' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawLineFromActorToPoint, IsArrow) == 0x000020, "Member 'TngDebugDrawComponent_DrawLineFromActorToPoint::IsArrow' has a wrong offset!");

// Function TangoLib.TngDebugDrawComponent.DrawLineFromPointToPoint
// 0x0028 (0x0028 - 0x0000)
struct TngDebugDrawComponent_DrawLineFromPointToPoint final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                A;                                                 // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsArrow;                                           // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugDrawComponent_DrawLineFromPointToPoint) == 0x000008, "Wrong alignment on TngDebugDrawComponent_DrawLineFromPointToPoint");
static_assert(sizeof(TngDebugDrawComponent_DrawLineFromPointToPoint) == 0x000028, "Wrong size on TngDebugDrawComponent_DrawLineFromPointToPoint");
static_assert(offsetof(TngDebugDrawComponent_DrawLineFromPointToPoint, Target) == 0x000000, "Member 'TngDebugDrawComponent_DrawLineFromPointToPoint::Target' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawLineFromPointToPoint, A) == 0x000008, "Member 'TngDebugDrawComponent_DrawLineFromPointToPoint::A' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawLineFromPointToPoint, B) == 0x000014, "Member 'TngDebugDrawComponent_DrawLineFromPointToPoint::B' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawLineFromPointToPoint, Color) == 0x000020, "Member 'TngDebugDrawComponent_DrawLineFromPointToPoint::Color' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawLineFromPointToPoint, IsArrow) == 0x000024, "Member 'TngDebugDrawComponent_DrawLineFromPointToPoint::IsArrow' has a wrong offset!");

// Function TangoLib.TngDebugDrawComponent.DrawPinFromActor
// 0x0020 (0x0020 - 0x0000)
struct TngDebugDrawComponent_DrawPinFromActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           A;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Size;                                              // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugDrawComponent_DrawPinFromActor) == 0x000008, "Wrong alignment on TngDebugDrawComponent_DrawPinFromActor");
static_assert(sizeof(TngDebugDrawComponent_DrawPinFromActor) == 0x000020, "Wrong size on TngDebugDrawComponent_DrawPinFromActor");
static_assert(offsetof(TngDebugDrawComponent_DrawPinFromActor, Target) == 0x000000, "Member 'TngDebugDrawComponent_DrawPinFromActor::Target' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawPinFromActor, A) == 0x000008, "Member 'TngDebugDrawComponent_DrawPinFromActor::A' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawPinFromActor, Size) == 0x000010, "Member 'TngDebugDrawComponent_DrawPinFromActor::Size' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawPinFromActor, Color) == 0x00001C, "Member 'TngDebugDrawComponent_DrawPinFromActor::Color' has a wrong offset!");

// Function TangoLib.TngDebugDrawComponent.DrawPinFromPoint
// 0x0028 (0x0028 - 0x0000)
struct TngDebugDrawComponent_DrawPinFromPoint final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                A;                                                 // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Size;                                              // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugDrawComponent_DrawPinFromPoint) == 0x000008, "Wrong alignment on TngDebugDrawComponent_DrawPinFromPoint");
static_assert(sizeof(TngDebugDrawComponent_DrawPinFromPoint) == 0x000028, "Wrong size on TngDebugDrawComponent_DrawPinFromPoint");
static_assert(offsetof(TngDebugDrawComponent_DrawPinFromPoint, Target) == 0x000000, "Member 'TngDebugDrawComponent_DrawPinFromPoint::Target' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawPinFromPoint, A) == 0x000008, "Member 'TngDebugDrawComponent_DrawPinFromPoint::A' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawPinFromPoint, Size) == 0x000014, "Member 'TngDebugDrawComponent_DrawPinFromPoint::Size' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawPinFromPoint, Color) == 0x000020, "Member 'TngDebugDrawComponent_DrawPinFromPoint::Color' has a wrong offset!");

// Function TangoLib.TngDebugDrawComponent.DrawSphereFromActor
// 0x0018 (0x0018 - 0x0000)
struct TngDebugDrawComponent_DrawSphereFromActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           A;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugDrawComponent_DrawSphereFromActor) == 0x000008, "Wrong alignment on TngDebugDrawComponent_DrawSphereFromActor");
static_assert(sizeof(TngDebugDrawComponent_DrawSphereFromActor) == 0x000018, "Wrong size on TngDebugDrawComponent_DrawSphereFromActor");
static_assert(offsetof(TngDebugDrawComponent_DrawSphereFromActor, Target) == 0x000000, "Member 'TngDebugDrawComponent_DrawSphereFromActor::Target' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawSphereFromActor, A) == 0x000008, "Member 'TngDebugDrawComponent_DrawSphereFromActor::A' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawSphereFromActor, Size) == 0x000010, "Member 'TngDebugDrawComponent_DrawSphereFromActor::Size' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawSphereFromActor, Color) == 0x000014, "Member 'TngDebugDrawComponent_DrawSphereFromActor::Color' has a wrong offset!");

// Function TangoLib.TngDebugDrawComponent.DrawSphereFromPoint
// 0x0020 (0x0020 - 0x0000)
struct TngDebugDrawComponent_DrawSphereFromPoint final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                A;                                                 // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugDrawComponent_DrawSphereFromPoint) == 0x000008, "Wrong alignment on TngDebugDrawComponent_DrawSphereFromPoint");
static_assert(sizeof(TngDebugDrawComponent_DrawSphereFromPoint) == 0x000020, "Wrong size on TngDebugDrawComponent_DrawSphereFromPoint");
static_assert(offsetof(TngDebugDrawComponent_DrawSphereFromPoint, Target) == 0x000000, "Member 'TngDebugDrawComponent_DrawSphereFromPoint::Target' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawSphereFromPoint, A) == 0x000008, "Member 'TngDebugDrawComponent_DrawSphereFromPoint::A' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawSphereFromPoint, Size) == 0x000014, "Member 'TngDebugDrawComponent_DrawSphereFromPoint::Size' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawSphereFromPoint, Color) == 0x000018, "Member 'TngDebugDrawComponent_DrawSphereFromPoint::Color' has a wrong offset!");

// Function TangoLib.TngDebugDrawComponent.DrawSphereFromTransform
// 0x0050 (0x0050 - 0x0000)
struct TngDebugDrawComponent_DrawSphereFromTransform final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             A;                                                 // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugDrawComponent_DrawSphereFromTransform) == 0x000010, "Wrong alignment on TngDebugDrawComponent_DrawSphereFromTransform");
static_assert(sizeof(TngDebugDrawComponent_DrawSphereFromTransform) == 0x000050, "Wrong size on TngDebugDrawComponent_DrawSphereFromTransform");
static_assert(offsetof(TngDebugDrawComponent_DrawSphereFromTransform, Target) == 0x000000, "Member 'TngDebugDrawComponent_DrawSphereFromTransform::Target' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawSphereFromTransform, A) == 0x000010, "Member 'TngDebugDrawComponent_DrawSphereFromTransform::A' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawSphereFromTransform, Size) == 0x000040, "Member 'TngDebugDrawComponent_DrawSphereFromTransform::Size' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawSphereFromTransform, Color) == 0x000044, "Member 'TngDebugDrawComponent_DrawSphereFromTransform::Color' has a wrong offset!");

// Function TangoLib.TngDebugDrawComponent.DrawTextFromActor
// 0x0028 (0x0028 - 0x0000)
struct TngDebugDrawComponent_DrawTextFromActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           A;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugDrawComponent_DrawTextFromActor) == 0x000008, "Wrong alignment on TngDebugDrawComponent_DrawTextFromActor");
static_assert(sizeof(TngDebugDrawComponent_DrawTextFromActor) == 0x000028, "Wrong size on TngDebugDrawComponent_DrawTextFromActor");
static_assert(offsetof(TngDebugDrawComponent_DrawTextFromActor, Target) == 0x000000, "Member 'TngDebugDrawComponent_DrawTextFromActor::Target' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawTextFromActor, A) == 0x000008, "Member 'TngDebugDrawComponent_DrawTextFromActor::A' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawTextFromActor, Text) == 0x000010, "Member 'TngDebugDrawComponent_DrawTextFromActor::Text' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawTextFromActor, Color) == 0x000020, "Member 'TngDebugDrawComponent_DrawTextFromActor::Color' has a wrong offset!");

// Function TangoLib.TngDebugDrawComponent.DrawTextFromPoint
// 0x0030 (0x0030 - 0x0000)
struct TngDebugDrawComponent_DrawTextFromPoint final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                A;                                                 // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugDrawComponent_DrawTextFromPoint) == 0x000008, "Wrong alignment on TngDebugDrawComponent_DrawTextFromPoint");
static_assert(sizeof(TngDebugDrawComponent_DrawTextFromPoint) == 0x000030, "Wrong size on TngDebugDrawComponent_DrawTextFromPoint");
static_assert(offsetof(TngDebugDrawComponent_DrawTextFromPoint, Target) == 0x000000, "Member 'TngDebugDrawComponent_DrawTextFromPoint::Target' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawTextFromPoint, A) == 0x000008, "Member 'TngDebugDrawComponent_DrawTextFromPoint::A' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawTextFromPoint, Text) == 0x000018, "Member 'TngDebugDrawComponent_DrawTextFromPoint::Text' has a wrong offset!");
static_assert(offsetof(TngDebugDrawComponent_DrawTextFromPoint, Color) == 0x000028, "Member 'TngDebugDrawComponent_DrawTextFromPoint::Color' has a wrong offset!");

// Function TangoLib.TngDebugDrawComponent.ResetLine
// 0x0008 (0x0008 - 0x0000)
struct TngDebugDrawComponent_ResetLine final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngDebugDrawComponent_ResetLine) == 0x000008, "Wrong alignment on TngDebugDrawComponent_ResetLine");
static_assert(sizeof(TngDebugDrawComponent_ResetLine) == 0x000008, "Wrong size on TngDebugDrawComponent_ResetLine");
static_assert(offsetof(TngDebugDrawComponent_ResetLine, Target) == 0x000000, "Member 'TngDebugDrawComponent_ResetLine::Target' has a wrong offset!");

// Function TangoLib.TngDebugMenu.GetDebugMenu
// 0x0020 (0x0020 - 0x0000)
struct TngDebugMenu_GetDebugMenu final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetName;                                           // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AfterClear;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugMenu_GetDebugMenu) == 0x000008, "Wrong alignment on TngDebugMenu_GetDebugMenu");
static_assert(sizeof(TngDebugMenu_GetDebugMenu) == 0x000020, "Wrong size on TngDebugMenu_GetDebugMenu");
static_assert(offsetof(TngDebugMenu_GetDebugMenu, WorldContextObject) == 0x000000, "Member 'TngDebugMenu_GetDebugMenu::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugMenu_GetDebugMenu, GetName) == 0x000008, "Member 'TngDebugMenu_GetDebugMenu::GetName' has a wrong offset!");
static_assert(offsetof(TngDebugMenu_GetDebugMenu, AfterClear) == 0x000018, "Member 'TngDebugMenu_GetDebugMenu::AfterClear' has a wrong offset!");
static_assert(offsetof(TngDebugMenu_GetDebugMenu, ReturnValue) == 0x000019, "Member 'TngDebugMenu_GetDebugMenu::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDebugMenu.GetDebugMenuWithEntry
// 0x0020 (0x0020 - 0x0000)
struct TngDebugMenu_GetDebugMenuWithEntry final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GetName;                                           // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AfterClear;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugMenu_GetDebugMenuWithEntry) == 0x000008, "Wrong alignment on TngDebugMenu_GetDebugMenuWithEntry");
static_assert(sizeof(TngDebugMenu_GetDebugMenuWithEntry) == 0x000020, "Wrong size on TngDebugMenu_GetDebugMenuWithEntry");
static_assert(offsetof(TngDebugMenu_GetDebugMenuWithEntry, WorldContextObject) == 0x000000, "Member 'TngDebugMenu_GetDebugMenuWithEntry::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugMenu_GetDebugMenuWithEntry, GetName) == 0x000008, "Member 'TngDebugMenu_GetDebugMenuWithEntry::GetName' has a wrong offset!");
static_assert(offsetof(TngDebugMenu_GetDebugMenuWithEntry, AfterClear) == 0x000018, "Member 'TngDebugMenu_GetDebugMenuWithEntry::AfterClear' has a wrong offset!");
static_assert(offsetof(TngDebugMenu_GetDebugMenuWithEntry, ReturnValue) == 0x000019, "Member 'TngDebugMenu_GetDebugMenuWithEntry::ReturnValue' has a wrong offset!");

// Function TangoLib.TngDebugMenu.SetDebugMenu
// 0x0030 (0x0030 - 0x0000)
struct TngDebugMenu_SetDebugMenu final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetName;                                           // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SetCommand;                                        // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngDebugMenu_SetDebugMenu) == 0x000008, "Wrong alignment on TngDebugMenu_SetDebugMenu");
static_assert(sizeof(TngDebugMenu_SetDebugMenu) == 0x000030, "Wrong size on TngDebugMenu_SetDebugMenu");
static_assert(offsetof(TngDebugMenu_SetDebugMenu, WorldContextObject) == 0x000000, "Member 'TngDebugMenu_SetDebugMenu::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngDebugMenu_SetDebugMenu, SetName) == 0x000008, "Member 'TngDebugMenu_SetDebugMenu::SetName' has a wrong offset!");
static_assert(offsetof(TngDebugMenu_SetDebugMenu, SetCommand) == 0x000018, "Member 'TngDebugMenu_SetDebugMenu::SetCommand' has a wrong offset!");
static_assert(offsetof(TngDebugMenu_SetDebugMenu, ReturnValue) == 0x000028, "Member 'TngDebugMenu_SetDebugMenu::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEffectComponent.GenerateParticleEvent
// 0x0008 (0x0008 - 0x0000)
struct TngEffectComponent_GenerateParticleEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEffectComponent_GenerateParticleEvent) == 0x000004, "Wrong alignment on TngEffectComponent_GenerateParticleEvent");
static_assert(sizeof(TngEffectComponent_GenerateParticleEvent) == 0x000008, "Wrong size on TngEffectComponent_GenerateParticleEvent");
static_assert(offsetof(TngEffectComponent_GenerateParticleEvent, EventName) == 0x000000, "Member 'TngEffectComponent_GenerateParticleEvent::EventName' has a wrong offset!");

// Function TangoLib.TngEffectComponent.GetEffect
// 0x0008 (0x0008 - 0x0000)
struct TngEffectComponent_GetEffect final
{
public:
	class UTngEffectAsset*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEffectComponent_GetEffect) == 0x000008, "Wrong alignment on TngEffectComponent_GetEffect");
static_assert(sizeof(TngEffectComponent_GetEffect) == 0x000008, "Wrong size on TngEffectComponent_GetEffect");
static_assert(offsetof(TngEffectComponent_GetEffect, ReturnValue) == 0x000000, "Member 'TngEffectComponent_GetEffect::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEffectComponent.HasCompleted
// 0x0001 (0x0001 - 0x0000)
struct TngEffectComponent_HasCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEffectComponent_HasCompleted) == 0x000001, "Wrong alignment on TngEffectComponent_HasCompleted");
static_assert(sizeof(TngEffectComponent_HasCompleted) == 0x000001, "Wrong size on TngEffectComponent_HasCompleted");
static_assert(offsetof(TngEffectComponent_HasCompleted, ReturnValue) == 0x000000, "Member 'TngEffectComponent_HasCompleted::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEffectComponent.SetEffect
// 0x0008 (0x0008 - 0x0000)
struct TngEffectComponent_SetEffect final
{
public:
	class UTngEffectAsset*                        InEffect;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEffectComponent_SetEffect) == 0x000008, "Wrong alignment on TngEffectComponent_SetEffect");
static_assert(sizeof(TngEffectComponent_SetEffect) == 0x000008, "Wrong size on TngEffectComponent_SetEffect");
static_assert(offsetof(TngEffectComponent_SetEffect, InEffect) == 0x000000, "Member 'TngEffectComponent_SetEffect::InEffect' has a wrong offset!");

// Function TangoLib.TngEffectComponent.SetParticleFloatParameter
// 0x000C (0x000C - 0x0000)
struct TngEffectComponent_SetParticleFloatParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEffectComponent_SetParticleFloatParameter) == 0x000004, "Wrong alignment on TngEffectComponent_SetParticleFloatParameter");
static_assert(sizeof(TngEffectComponent_SetParticleFloatParameter) == 0x00000C, "Wrong size on TngEffectComponent_SetParticleFloatParameter");
static_assert(offsetof(TngEffectComponent_SetParticleFloatParameter, ParameterName) == 0x000000, "Member 'TngEffectComponent_SetParticleFloatParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(TngEffectComponent_SetParticleFloatParameter, Param) == 0x000008, "Member 'TngEffectComponent_SetParticleFloatParameter::Param' has a wrong offset!");

// Function TangoLib.TngEffectComponent.SetParticleLocation
// 0x000C (0x000C - 0x0000)
struct TngEffectComponent_SetParticleLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEffectComponent_SetParticleLocation) == 0x000004, "Wrong alignment on TngEffectComponent_SetParticleLocation");
static_assert(sizeof(TngEffectComponent_SetParticleLocation) == 0x00000C, "Wrong size on TngEffectComponent_SetParticleLocation");
static_assert(offsetof(TngEffectComponent_SetParticleLocation, Location) == 0x000000, "Member 'TngEffectComponent_SetParticleLocation::Location' has a wrong offset!");

// Function TangoLib.TngEffectComponent.SetParticleVectorParameter
// 0x0014 (0x0014 - 0x0000)
struct TngEffectComponent_SetParticleVectorParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Param;                                             // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEffectComponent_SetParticleVectorParameter) == 0x000004, "Wrong alignment on TngEffectComponent_SetParticleVectorParameter");
static_assert(sizeof(TngEffectComponent_SetParticleVectorParameter) == 0x000014, "Wrong size on TngEffectComponent_SetParticleVectorParameter");
static_assert(offsetof(TngEffectComponent_SetParticleVectorParameter, ParameterName) == 0x000000, "Member 'TngEffectComponent_SetParticleVectorParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(TngEffectComponent_SetParticleVectorParameter, Param) == 0x000008, "Member 'TngEffectComponent_SetParticleVectorParameter::Param' has a wrong offset!");

// Function TangoLib.TngEffectComponent.StartEffect
// 0x0004 (0x0004 - 0x0000)
struct TngEffectComponent_StartEffect final
{
public:
	int32                                         ParticleSortPriority;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEffectComponent_StartEffect) == 0x000004, "Wrong alignment on TngEffectComponent_StartEffect");
static_assert(sizeof(TngEffectComponent_StartEffect) == 0x000004, "Wrong size on TngEffectComponent_StartEffect");
static_assert(offsetof(TngEffectComponent_StartEffect, ParticleSortPriority) == 0x000000, "Member 'TngEffectComponent_StartEffect::ParticleSortPriority' has a wrong offset!");

// Function TangoLib.TngEffectComponent.StartEffectAtTransform
// 0x0050 (0x0050 - 0x0000)
struct TngEffectComponent_StartEffectAtTransform final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ParticleSortPriority;                              // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngEffectComponent_StartEffectAtTransform) == 0x000010, "Wrong alignment on TngEffectComponent_StartEffectAtTransform");
static_assert(sizeof(TngEffectComponent_StartEffectAtTransform) == 0x000050, "Wrong size on TngEffectComponent_StartEffectAtTransform");
static_assert(offsetof(TngEffectComponent_StartEffectAtTransform, WorldContextObject) == 0x000000, "Member 'TngEffectComponent_StartEffectAtTransform::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngEffectComponent_StartEffectAtTransform, Transform) == 0x000010, "Member 'TngEffectComponent_StartEffectAtTransform::Transform' has a wrong offset!");
static_assert(offsetof(TngEffectComponent_StartEffectAtTransform, ParticleSortPriority) == 0x000040, "Member 'TngEffectComponent_StartEffectAtTransform::ParticleSortPriority' has a wrong offset!");

// Function TangoLib.TngEffectComponent.StartEffectToAttach
// 0x0050 (0x0050 - 0x0000)
struct TngEffectComponent_StartEffectToAttach final
{
public:
	class USceneComponent*                        AttachComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachName;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             OffsetTransform;                                   // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ParticleSortPriority;                              // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngEffectComponent_StartEffectToAttach) == 0x000010, "Wrong alignment on TngEffectComponent_StartEffectToAttach");
static_assert(sizeof(TngEffectComponent_StartEffectToAttach) == 0x000050, "Wrong size on TngEffectComponent_StartEffectToAttach");
static_assert(offsetof(TngEffectComponent_StartEffectToAttach, AttachComponent) == 0x000000, "Member 'TngEffectComponent_StartEffectToAttach::AttachComponent' has a wrong offset!");
static_assert(offsetof(TngEffectComponent_StartEffectToAttach, AttachName) == 0x000008, "Member 'TngEffectComponent_StartEffectToAttach::AttachName' has a wrong offset!");
static_assert(offsetof(TngEffectComponent_StartEffectToAttach, OffsetTransform) == 0x000010, "Member 'TngEffectComponent_StartEffectToAttach::OffsetTransform' has a wrong offset!");
static_assert(offsetof(TngEffectComponent_StartEffectToAttach, ParticleSortPriority) == 0x000040, "Member 'TngEffectComponent_StartEffectToAttach::ParticleSortPriority' has a wrong offset!");

// Function TangoLib.TngEquipComponent.AddSlot
// 0x000C (0x000C - 0x0000)
struct TngEquipComponent_AddSlot final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipComponent_AddSlot) == 0x000004, "Wrong alignment on TngEquipComponent_AddSlot");
static_assert(sizeof(TngEquipComponent_AddSlot) == 0x00000C, "Wrong size on TngEquipComponent_AddSlot");
static_assert(offsetof(TngEquipComponent_AddSlot, SlotName) == 0x000000, "Member 'TngEquipComponent_AddSlot::SlotName' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_AddSlot, ReturnValue) == 0x000008, "Member 'TngEquipComponent_AddSlot::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipComponent.Blueprint_BeginEquip
// 0x0020 (0x0020 - 0x0000)
struct TngEquipComponent_Blueprint_BeginEquip final
{
public:
	struct FTngEquipSlot                          SetSlot;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipComponent_Blueprint_BeginEquip) == 0x000008, "Wrong alignment on TngEquipComponent_Blueprint_BeginEquip");
static_assert(sizeof(TngEquipComponent_Blueprint_BeginEquip) == 0x000020, "Wrong size on TngEquipComponent_Blueprint_BeginEquip");
static_assert(offsetof(TngEquipComponent_Blueprint_BeginEquip, SetSlot) == 0x000000, "Member 'TngEquipComponent_Blueprint_BeginEquip::SetSlot' has a wrong offset!");

// Function TangoLib.TngEquipComponent.Blueprint_EndEquip
// 0x0020 (0x0020 - 0x0000)
struct TngEquipComponent_Blueprint_EndEquip final
{
public:
	struct FTngEquipSlot                          SetSlot;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipComponent_Blueprint_EndEquip) == 0x000008, "Wrong alignment on TngEquipComponent_Blueprint_EndEquip");
static_assert(sizeof(TngEquipComponent_Blueprint_EndEquip) == 0x000020, "Wrong size on TngEquipComponent_Blueprint_EndEquip");
static_assert(offsetof(TngEquipComponent_Blueprint_EndEquip, SetSlot) == 0x000000, "Member 'TngEquipComponent_Blueprint_EndEquip::SetSlot' has a wrong offset!");

// Function TangoLib.TngEquipComponent.Blueprint_PostChangeSlot
// 0x0040 (0x0040 - 0x0000)
struct TngEquipComponent_Blueprint_PostChangeSlot final
{
public:
	struct FTngEquipSlot                          SetSlot1;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTngEquipSlot                          SetSlot2;                                          // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipComponent_Blueprint_PostChangeSlot) == 0x000008, "Wrong alignment on TngEquipComponent_Blueprint_PostChangeSlot");
static_assert(sizeof(TngEquipComponent_Blueprint_PostChangeSlot) == 0x000040, "Wrong size on TngEquipComponent_Blueprint_PostChangeSlot");
static_assert(offsetof(TngEquipComponent_Blueprint_PostChangeSlot, SetSlot1) == 0x000000, "Member 'TngEquipComponent_Blueprint_PostChangeSlot::SetSlot1' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_Blueprint_PostChangeSlot, SetSlot2) == 0x000020, "Member 'TngEquipComponent_Blueprint_PostChangeSlot::SetSlot2' has a wrong offset!");

// Function TangoLib.TngEquipComponent.Blueprint_PostSendTags
// 0x0048 (0x0048 - 0x0000)
struct TngEquipComponent_Blueprint_PostSendTags final
{
public:
	struct FTngEquipSlot                          SetSlot;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0020(0x0020)(Parm, NativeAccessSpecifierPublic)
	class UObject*                                AdvanceParam;                                      // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipComponent_Blueprint_PostSendTags) == 0x000008, "Wrong alignment on TngEquipComponent_Blueprint_PostSendTags");
static_assert(sizeof(TngEquipComponent_Blueprint_PostSendTags) == 0x000048, "Wrong size on TngEquipComponent_Blueprint_PostSendTags");
static_assert(offsetof(TngEquipComponent_Blueprint_PostSendTags, SetSlot) == 0x000000, "Member 'TngEquipComponent_Blueprint_PostSendTags::SetSlot' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_Blueprint_PostSendTags, Tags) == 0x000020, "Member 'TngEquipComponent_Blueprint_PostSendTags::Tags' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_Blueprint_PostSendTags, AdvanceParam) == 0x000040, "Member 'TngEquipComponent_Blueprint_PostSendTags::AdvanceParam' has a wrong offset!");

// Function TangoLib.TngEquipComponent.Blueprint_ShouldEquip
// 0x0030 (0x0030 - 0x0000)
struct TngEquipComponent_Blueprint_ShouldEquip final
{
public:
	struct FTngEquipSlot                          SetSlot;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     EquipClass;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngEquipComponent_Blueprint_ShouldEquip) == 0x000008, "Wrong alignment on TngEquipComponent_Blueprint_ShouldEquip");
static_assert(sizeof(TngEquipComponent_Blueprint_ShouldEquip) == 0x000030, "Wrong size on TngEquipComponent_Blueprint_ShouldEquip");
static_assert(offsetof(TngEquipComponent_Blueprint_ShouldEquip, SetSlot) == 0x000000, "Member 'TngEquipComponent_Blueprint_ShouldEquip::SetSlot' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_Blueprint_ShouldEquip, EquipClass) == 0x000020, "Member 'TngEquipComponent_Blueprint_ShouldEquip::EquipClass' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_Blueprint_ShouldEquip, ReturnValue) == 0x000028, "Member 'TngEquipComponent_Blueprint_ShouldEquip::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipComponent.ChangeSlotActor
// 0x0014 (0x0014 - 0x0000)
struct TngEquipComponent_ChangeSlotActor final
{
public:
	class FName                                   SlotName1;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotName2;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngEquipComponent_ChangeSlotActor) == 0x000004, "Wrong alignment on TngEquipComponent_ChangeSlotActor");
static_assert(sizeof(TngEquipComponent_ChangeSlotActor) == 0x000014, "Wrong size on TngEquipComponent_ChangeSlotActor");
static_assert(offsetof(TngEquipComponent_ChangeSlotActor, SlotName1) == 0x000000, "Member 'TngEquipComponent_ChangeSlotActor::SlotName1' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_ChangeSlotActor, SlotName2) == 0x000008, "Member 'TngEquipComponent_ChangeSlotActor::SlotName2' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_ChangeSlotActor, ReturnValue) == 0x000010, "Member 'TngEquipComponent_ChangeSlotActor::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipComponent.EquipFromActor
// 0x0018 (0x0018 - 0x0000)
struct TngEquipComponent_EquipFromActor final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EquipActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngEquipComponent_EquipFromActor) == 0x000008, "Wrong alignment on TngEquipComponent_EquipFromActor");
static_assert(sizeof(TngEquipComponent_EquipFromActor) == 0x000018, "Wrong size on TngEquipComponent_EquipFromActor");
static_assert(offsetof(TngEquipComponent_EquipFromActor, SlotName) == 0x000000, "Member 'TngEquipComponent_EquipFromActor::SlotName' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_EquipFromActor, EquipActor) == 0x000008, "Member 'TngEquipComponent_EquipFromActor::EquipActor' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_EquipFromActor, ReturnValue) == 0x000010, "Member 'TngEquipComponent_EquipFromActor::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipComponent.EquipFromClass
// 0x0018 (0x0018 - 0x0000)
struct TngEquipComponent_EquipFromClass final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     EquipClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngEquipComponent_EquipFromClass) == 0x000008, "Wrong alignment on TngEquipComponent_EquipFromClass");
static_assert(sizeof(TngEquipComponent_EquipFromClass) == 0x000018, "Wrong size on TngEquipComponent_EquipFromClass");
static_assert(offsetof(TngEquipComponent_EquipFromClass, SlotName) == 0x000000, "Member 'TngEquipComponent_EquipFromClass::SlotName' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_EquipFromClass, EquipClass) == 0x000008, "Member 'TngEquipComponent_EquipFromClass::EquipClass' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_EquipFromClass, ReturnValue) == 0x000010, "Member 'TngEquipComponent_EquipFromClass::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipComponent.EquipFromProperty
// 0x000C (0x000C - 0x0000)
struct TngEquipComponent_EquipFromProperty final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngEquipComponent_EquipFromProperty) == 0x000004, "Wrong alignment on TngEquipComponent_EquipFromProperty");
static_assert(sizeof(TngEquipComponent_EquipFromProperty) == 0x00000C, "Wrong size on TngEquipComponent_EquipFromProperty");
static_assert(offsetof(TngEquipComponent_EquipFromProperty, SlotName) == 0x000000, "Member 'TngEquipComponent_EquipFromProperty::SlotName' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_EquipFromProperty, ReturnValue) == 0x000008, "Member 'TngEquipComponent_EquipFromProperty::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipComponent.EquipFromPropertyAll
// 0x0001 (0x0001 - 0x0000)
struct TngEquipComponent_EquipFromPropertyAll final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipComponent_EquipFromPropertyAll) == 0x000001, "Wrong alignment on TngEquipComponent_EquipFromPropertyAll");
static_assert(sizeof(TngEquipComponent_EquipFromPropertyAll) == 0x000001, "Wrong size on TngEquipComponent_EquipFromPropertyAll");
static_assert(offsetof(TngEquipComponent_EquipFromPropertyAll, ReturnValue) == 0x000000, "Member 'TngEquipComponent_EquipFromPropertyAll::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipComponent.GetEquipActor
// 0x0010 (0x0010 - 0x0000)
struct TngEquipComponent_GetEquipActor final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipComponent_GetEquipActor) == 0x000008, "Wrong alignment on TngEquipComponent_GetEquipActor");
static_assert(sizeof(TngEquipComponent_GetEquipActor) == 0x000010, "Wrong size on TngEquipComponent_GetEquipActor");
static_assert(offsetof(TngEquipComponent_GetEquipActor, SlotName) == 0x000000, "Member 'TngEquipComponent_GetEquipActor::SlotName' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_GetEquipActor, ReturnValue) == 0x000008, "Member 'TngEquipComponent_GetEquipActor::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipComponent.GetIndexFromName
// 0x000C (0x000C - 0x0000)
struct TngEquipComponent_GetIndexFromName final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipComponent_GetIndexFromName) == 0x000004, "Wrong alignment on TngEquipComponent_GetIndexFromName");
static_assert(sizeof(TngEquipComponent_GetIndexFromName) == 0x00000C, "Wrong size on TngEquipComponent_GetIndexFromName");
static_assert(offsetof(TngEquipComponent_GetIndexFromName, SlotName) == 0x000000, "Member 'TngEquipComponent_GetIndexFromName::SlotName' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_GetIndexFromName, ReturnValue) == 0x000008, "Member 'TngEquipComponent_GetIndexFromName::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipComponent.GetSlot
// 0x0030 (0x0030 - 0x0000)
struct TngEquipComponent_GetSlot final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTngEquipSlot                          OutSlot;                                           // 0x0008(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngEquipComponent_GetSlot) == 0x000008, "Wrong alignment on TngEquipComponent_GetSlot");
static_assert(sizeof(TngEquipComponent_GetSlot) == 0x000030, "Wrong size on TngEquipComponent_GetSlot");
static_assert(offsetof(TngEquipComponent_GetSlot, SlotName) == 0x000000, "Member 'TngEquipComponent_GetSlot::SlotName' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_GetSlot, OutSlot) == 0x000008, "Member 'TngEquipComponent_GetSlot::OutSlot' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_GetSlot, ReturnValue) == 0x000028, "Member 'TngEquipComponent_GetSlot::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipComponent.GetTagsFromSlot
// 0x0028 (0x0028 - 0x0000)
struct TngEquipComponent_GetTagsFromSlot final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipComponent_GetTagsFromSlot) == 0x000008, "Wrong alignment on TngEquipComponent_GetTagsFromSlot");
static_assert(sizeof(TngEquipComponent_GetTagsFromSlot) == 0x000028, "Wrong size on TngEquipComponent_GetTagsFromSlot");
static_assert(offsetof(TngEquipComponent_GetTagsFromSlot, SlotName) == 0x000000, "Member 'TngEquipComponent_GetTagsFromSlot::SlotName' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_GetTagsFromSlot, ReturnValue) == 0x000008, "Member 'TngEquipComponent_GetTagsFromSlot::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipComponent.NotifyTags
// 0x0030 (0x0030 - 0x0000)
struct TngEquipComponent_NotifyTags final
{
public:
	class FName                                   SendSlot;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SendTags;                                          // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	class UObject*                                AdvanceObject;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipComponent_NotifyTags) == 0x000008, "Wrong alignment on TngEquipComponent_NotifyTags");
static_assert(sizeof(TngEquipComponent_NotifyTags) == 0x000030, "Wrong size on TngEquipComponent_NotifyTags");
static_assert(offsetof(TngEquipComponent_NotifyTags, SendSlot) == 0x000000, "Member 'TngEquipComponent_NotifyTags::SendSlot' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_NotifyTags, SendTags) == 0x000008, "Member 'TngEquipComponent_NotifyTags::SendTags' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_NotifyTags, AdvanceObject) == 0x000028, "Member 'TngEquipComponent_NotifyTags::AdvanceObject' has a wrong offset!");

// Function TangoLib.TngEquipComponent.RemoveSlot
// 0x0008 (0x0008 - 0x0000)
struct TngEquipComponent_RemoveSlot final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipComponent_RemoveSlot) == 0x000004, "Wrong alignment on TngEquipComponent_RemoveSlot");
static_assert(sizeof(TngEquipComponent_RemoveSlot) == 0x000008, "Wrong size on TngEquipComponent_RemoveSlot");
static_assert(offsetof(TngEquipComponent_RemoveSlot, SlotName) == 0x000000, "Member 'TngEquipComponent_RemoveSlot::SlotName' has a wrong offset!");

// Function TangoLib.TngEquipComponent.SendTagsToAll
// 0x0030 (0x0030 - 0x0000)
struct TngEquipComponent_SendTagsToAll final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	class UObject*                                AdvanceParam;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngEquipComponent_SendTagsToAll) == 0x000008, "Wrong alignment on TngEquipComponent_SendTagsToAll");
static_assert(sizeof(TngEquipComponent_SendTagsToAll) == 0x000030, "Wrong size on TngEquipComponent_SendTagsToAll");
static_assert(offsetof(TngEquipComponent_SendTagsToAll, Tags) == 0x000000, "Member 'TngEquipComponent_SendTagsToAll::Tags' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_SendTagsToAll, AdvanceParam) == 0x000020, "Member 'TngEquipComponent_SendTagsToAll::AdvanceParam' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_SendTagsToAll, ReturnValue) == 0x000028, "Member 'TngEquipComponent_SendTagsToAll::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipComponent.SendTagsToSlot
// 0x0038 (0x0038 - 0x0000)
struct TngEquipComponent_SendTagsToSlot final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	class UObject*                                AdvanceParam;                                      // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngEquipComponent_SendTagsToSlot) == 0x000008, "Wrong alignment on TngEquipComponent_SendTagsToSlot");
static_assert(sizeof(TngEquipComponent_SendTagsToSlot) == 0x000038, "Wrong size on TngEquipComponent_SendTagsToSlot");
static_assert(offsetof(TngEquipComponent_SendTagsToSlot, SlotName) == 0x000000, "Member 'TngEquipComponent_SendTagsToSlot::SlotName' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_SendTagsToSlot, Tags) == 0x000008, "Member 'TngEquipComponent_SendTagsToSlot::Tags' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_SendTagsToSlot, AdvanceParam) == 0x000028, "Member 'TngEquipComponent_SendTagsToSlot::AdvanceParam' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_SendTagsToSlot, ReturnValue) == 0x000030, "Member 'TngEquipComponent_SendTagsToSlot::ReturnValue' has a wrong offset!");

// Function TangoLib.TngEquipComponent.SetEquipReturnFlag
// 0x0001 (0x0001 - 0x0000)
struct TngEquipComponent_SetEquipReturnFlag final
{
public:
	bool                                          ReturnBool;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngEquipComponent_SetEquipReturnFlag) == 0x000001, "Wrong alignment on TngEquipComponent_SetEquipReturnFlag");
static_assert(sizeof(TngEquipComponent_SetEquipReturnFlag) == 0x000001, "Wrong size on TngEquipComponent_SetEquipReturnFlag");
static_assert(offsetof(TngEquipComponent_SetEquipReturnFlag, ReturnBool) == 0x000000, "Member 'TngEquipComponent_SetEquipReturnFlag::ReturnBool' has a wrong offset!");

// Function TangoLib.TngEquipComponent.UnEquip
// 0x000C (0x000C - 0x0000)
struct TngEquipComponent_UnEquip final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngEquipComponent_UnEquip) == 0x000004, "Wrong alignment on TngEquipComponent_UnEquip");
static_assert(sizeof(TngEquipComponent_UnEquip) == 0x00000C, "Wrong size on TngEquipComponent_UnEquip");
static_assert(offsetof(TngEquipComponent_UnEquip, SlotName) == 0x000000, "Member 'TngEquipComponent_UnEquip::SlotName' has a wrong offset!");
static_assert(offsetof(TngEquipComponent_UnEquip, ReturnValue) == 0x000008, "Member 'TngEquipComponent_UnEquip::ReturnValue' has a wrong offset!");

// Function TangoLib.TngGetInstanceFunction.GetTngGameInstance
// 0x0010 (0x0010 - 0x0000)
struct TngGetInstanceFunction_GetTngGameInstance final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTngGameInstance*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGetInstanceFunction_GetTngGameInstance) == 0x000008, "Wrong alignment on TngGetInstanceFunction_GetTngGameInstance");
static_assert(sizeof(TngGetInstanceFunction_GetTngGameInstance) == 0x000010, "Wrong size on TngGetInstanceFunction_GetTngGameInstance");
static_assert(offsetof(TngGetInstanceFunction_GetTngGameInstance, WorldContextObject) == 0x000000, "Member 'TngGetInstanceFunction_GetTngGameInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_GetTngGameInstance, ReturnValue) == 0x000008, "Member 'TngGetInstanceFunction_GetTngGameInstance::ReturnValue' has a wrong offset!");

// Function TangoLib.TngGetInstanceFunction.GetTngPlayerCameraManager
// 0x0018 (0x0018 - 0x0000)
struct TngGetInstanceFunction_GetTngPlayerCameraManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATngPlayerCameraManager*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGetInstanceFunction_GetTngPlayerCameraManager) == 0x000008, "Wrong alignment on TngGetInstanceFunction_GetTngPlayerCameraManager");
static_assert(sizeof(TngGetInstanceFunction_GetTngPlayerCameraManager) == 0x000018, "Wrong size on TngGetInstanceFunction_GetTngPlayerCameraManager");
static_assert(offsetof(TngGetInstanceFunction_GetTngPlayerCameraManager, WorldContextObject) == 0x000000, "Member 'TngGetInstanceFunction_GetTngPlayerCameraManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_GetTngPlayerCameraManager, PlayerIndex) == 0x000008, "Member 'TngGetInstanceFunction_GetTngPlayerCameraManager::PlayerIndex' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_GetTngPlayerCameraManager, ReturnValue) == 0x000010, "Member 'TngGetInstanceFunction_GetTngPlayerCameraManager::ReturnValue' has a wrong offset!");

// Function TangoLib.TngGetInstanceFunction.GetTngPlayerCharacter
// 0x0018 (0x0018 - 0x0000)
struct TngGetInstanceFunction_GetTngPlayerCharacter final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATngCharacter*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGetInstanceFunction_GetTngPlayerCharacter) == 0x000008, "Wrong alignment on TngGetInstanceFunction_GetTngPlayerCharacter");
static_assert(sizeof(TngGetInstanceFunction_GetTngPlayerCharacter) == 0x000018, "Wrong size on TngGetInstanceFunction_GetTngPlayerCharacter");
static_assert(offsetof(TngGetInstanceFunction_GetTngPlayerCharacter, WorldContextObject) == 0x000000, "Member 'TngGetInstanceFunction_GetTngPlayerCharacter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_GetTngPlayerCharacter, PlayerIndex) == 0x000008, "Member 'TngGetInstanceFunction_GetTngPlayerCharacter::PlayerIndex' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_GetTngPlayerCharacter, ReturnValue) == 0x000010, "Member 'TngGetInstanceFunction_GetTngPlayerCharacter::ReturnValue' has a wrong offset!");

// Function TangoLib.TngGetInstanceFunction.GetTngPlayerController
// 0x0018 (0x0018 - 0x0000)
struct TngGetInstanceFunction_GetTngPlayerController final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATngPlayerController*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGetInstanceFunction_GetTngPlayerController) == 0x000008, "Wrong alignment on TngGetInstanceFunction_GetTngPlayerController");
static_assert(sizeof(TngGetInstanceFunction_GetTngPlayerController) == 0x000018, "Wrong size on TngGetInstanceFunction_GetTngPlayerController");
static_assert(offsetof(TngGetInstanceFunction_GetTngPlayerController, WorldContextObject) == 0x000000, "Member 'TngGetInstanceFunction_GetTngPlayerController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_GetTngPlayerController, PlayerIndex) == 0x000008, "Member 'TngGetInstanceFunction_GetTngPlayerController::PlayerIndex' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_GetTngPlayerController, ReturnValue) == 0x000010, "Member 'TngGetInstanceFunction_GetTngPlayerController::ReturnValue' has a wrong offset!");

// Function TangoLib.TngGetInstanceFunction.GetTngPlayerHud
// 0x0018 (0x0018 - 0x0000)
struct TngGetInstanceFunction_GetTngPlayerHud final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATngHUD*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGetInstanceFunction_GetTngPlayerHud) == 0x000008, "Wrong alignment on TngGetInstanceFunction_GetTngPlayerHud");
static_assert(sizeof(TngGetInstanceFunction_GetTngPlayerHud) == 0x000018, "Wrong size on TngGetInstanceFunction_GetTngPlayerHud");
static_assert(offsetof(TngGetInstanceFunction_GetTngPlayerHud, WorldContextObject) == 0x000000, "Member 'TngGetInstanceFunction_GetTngPlayerHud::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_GetTngPlayerHud, PlayerIndex) == 0x000008, "Member 'TngGetInstanceFunction_GetTngPlayerHud::PlayerIndex' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_GetTngPlayerHud, ReturnValue) == 0x000010, "Member 'TngGetInstanceFunction_GetTngPlayerHud::ReturnValue' has a wrong offset!");

// Function TangoLib.TngGetInstanceFunction.GetTngPlayerState
// 0x0018 (0x0018 - 0x0000)
struct TngGetInstanceFunction_GetTngPlayerState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATngPlayerState*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGetInstanceFunction_GetTngPlayerState) == 0x000008, "Wrong alignment on TngGetInstanceFunction_GetTngPlayerState");
static_assert(sizeof(TngGetInstanceFunction_GetTngPlayerState) == 0x000018, "Wrong size on TngGetInstanceFunction_GetTngPlayerState");
static_assert(offsetof(TngGetInstanceFunction_GetTngPlayerState, WorldContextObject) == 0x000000, "Member 'TngGetInstanceFunction_GetTngPlayerState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_GetTngPlayerState, PlayerIndex) == 0x000008, "Member 'TngGetInstanceFunction_GetTngPlayerState::PlayerIndex' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_GetTngPlayerState, ReturnValue) == 0x000010, "Member 'TngGetInstanceFunction_GetTngPlayerState::ReturnValue' has a wrong offset!");

// Function TangoLib.TngGetInstanceFunction.K2_GetTngAnimClass
// 0x0018 (0x0018 - 0x0000)
struct TngGetInstanceFunction_K2_GetTngAnimClass final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>              ClassType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimInstance*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGetInstanceFunction_K2_GetTngAnimClass) == 0x000008, "Wrong alignment on TngGetInstanceFunction_K2_GetTngAnimClass");
static_assert(sizeof(TngGetInstanceFunction_K2_GetTngAnimClass) == 0x000018, "Wrong size on TngGetInstanceFunction_K2_GetTngAnimClass");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngAnimClass, Owner) == 0x000000, "Member 'TngGetInstanceFunction_K2_GetTngAnimClass::Owner' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngAnimClass, ClassType) == 0x000008, "Member 'TngGetInstanceFunction_K2_GetTngAnimClass::ClassType' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngAnimClass, ReturnValue) == 0x000010, "Member 'TngGetInstanceFunction_K2_GetTngAnimClass::ReturnValue' has a wrong offset!");

// Function TangoLib.TngGetInstanceFunction.K2_GetTngComponentClassFromAllChild
// 0x0018 (0x0018 - 0x0000)
struct TngGetInstanceFunction_K2_GetTngComponentClassFromAllChild final
{
public:
	class USceneComponent*                        Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USceneComponent>            ClassType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGetInstanceFunction_K2_GetTngComponentClassFromAllChild) == 0x000008, "Wrong alignment on TngGetInstanceFunction_K2_GetTngComponentClassFromAllChild");
static_assert(sizeof(TngGetInstanceFunction_K2_GetTngComponentClassFromAllChild) == 0x000018, "Wrong size on TngGetInstanceFunction_K2_GetTngComponentClassFromAllChild");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngComponentClassFromAllChild, Owner) == 0x000000, "Member 'TngGetInstanceFunction_K2_GetTngComponentClassFromAllChild::Owner' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngComponentClassFromAllChild, ClassType) == 0x000008, "Member 'TngGetInstanceFunction_K2_GetTngComponentClassFromAllChild::ClassType' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngComponentClassFromAllChild, ReturnValue) == 0x000010, "Member 'TngGetInstanceFunction_K2_GetTngComponentClassFromAllChild::ReturnValue' has a wrong offset!");

// Function TangoLib.TngGetInstanceFunction.K2_GetTngComponentClassFromAllParent
// 0x0018 (0x0018 - 0x0000)
struct TngGetInstanceFunction_K2_GetTngComponentClassFromAllParent final
{
public:
	class USceneComponent*                        Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USceneComponent>            ClassType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGetInstanceFunction_K2_GetTngComponentClassFromAllParent) == 0x000008, "Wrong alignment on TngGetInstanceFunction_K2_GetTngComponentClassFromAllParent");
static_assert(sizeof(TngGetInstanceFunction_K2_GetTngComponentClassFromAllParent) == 0x000018, "Wrong size on TngGetInstanceFunction_K2_GetTngComponentClassFromAllParent");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngComponentClassFromAllParent, Owner) == 0x000000, "Member 'TngGetInstanceFunction_K2_GetTngComponentClassFromAllParent::Owner' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngComponentClassFromAllParent, ClassType) == 0x000008, "Member 'TngGetInstanceFunction_K2_GetTngComponentClassFromAllParent::ClassType' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngComponentClassFromAllParent, ReturnValue) == 0x000010, "Member 'TngGetInstanceFunction_K2_GetTngComponentClassFromAllParent::ReturnValue' has a wrong offset!");

// Function TangoLib.TngGetInstanceFunction.K2_GetTngGameSystemClass
// 0x0018 (0x0018 - 0x0000)
struct TngGetInstanceFunction_K2_GetTngGameSystemClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTngGameSystem>             ClassType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTngGameSystem*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGetInstanceFunction_K2_GetTngGameSystemClass) == 0x000008, "Wrong alignment on TngGetInstanceFunction_K2_GetTngGameSystemClass");
static_assert(sizeof(TngGetInstanceFunction_K2_GetTngGameSystemClass) == 0x000018, "Wrong size on TngGetInstanceFunction_K2_GetTngGameSystemClass");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngGameSystemClass, WorldContextObject) == 0x000000, "Member 'TngGetInstanceFunction_K2_GetTngGameSystemClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngGameSystemClass, ClassType) == 0x000008, "Member 'TngGetInstanceFunction_K2_GetTngGameSystemClass::ClassType' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngGameSystemClass, ReturnValue) == 0x000010, "Member 'TngGetInstanceFunction_K2_GetTngGameSystemClass::ReturnValue' has a wrong offset!");

// Function TangoLib.TngGetInstanceFunction.K2_GetTngObjectDetailInstance
// 0x0010 (0x0010 - 0x0000)
struct TngGetInstanceFunction_K2_GetTngObjectDetailInstance final
{
public:
	TSubclassOf<class UObject>                    ClassType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGetInstanceFunction_K2_GetTngObjectDetailInstance) == 0x000008, "Wrong alignment on TngGetInstanceFunction_K2_GetTngObjectDetailInstance");
static_assert(sizeof(TngGetInstanceFunction_K2_GetTngObjectDetailInstance) == 0x000010, "Wrong size on TngGetInstanceFunction_K2_GetTngObjectDetailInstance");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngObjectDetailInstance, ClassType) == 0x000000, "Member 'TngGetInstanceFunction_K2_GetTngObjectDetailInstance::ClassType' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngObjectDetailInstance, ReturnValue) == 0x000008, "Member 'TngGetInstanceFunction_K2_GetTngObjectDetailInstance::ReturnValue' has a wrong offset!");

// Function TangoLib.TngGetInstanceFunction.K2_GetTngObjectNewInstance
// 0x0018 (0x0018 - 0x0000)
struct TngGetInstanceFunction_K2_GetTngObjectNewInstance final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    ClassType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGetInstanceFunction_K2_GetTngObjectNewInstance) == 0x000008, "Wrong alignment on TngGetInstanceFunction_K2_GetTngObjectNewInstance");
static_assert(sizeof(TngGetInstanceFunction_K2_GetTngObjectNewInstance) == 0x000018, "Wrong size on TngGetInstanceFunction_K2_GetTngObjectNewInstance");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngObjectNewInstance, Owner) == 0x000000, "Member 'TngGetInstanceFunction_K2_GetTngObjectNewInstance::Owner' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngObjectNewInstance, ClassType) == 0x000008, "Member 'TngGetInstanceFunction_K2_GetTngObjectNewInstance::ClassType' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngObjectNewInstance, ReturnValue) == 0x000010, "Member 'TngGetInstanceFunction_K2_GetTngObjectNewInstance::ReturnValue' has a wrong offset!");

// Function TangoLib.TngGetInstanceFunction.K2_GetTngPlayerCharacterClass
// 0x0020 (0x0020 - 0x0000)
struct TngGetInstanceFunction_K2_GetTngPlayerCharacterClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATngCharacter>              ClassType;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATngCharacter*                          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGetInstanceFunction_K2_GetTngPlayerCharacterClass) == 0x000008, "Wrong alignment on TngGetInstanceFunction_K2_GetTngPlayerCharacterClass");
static_assert(sizeof(TngGetInstanceFunction_K2_GetTngPlayerCharacterClass) == 0x000020, "Wrong size on TngGetInstanceFunction_K2_GetTngPlayerCharacterClass");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngPlayerCharacterClass, WorldContextObject) == 0x000000, "Member 'TngGetInstanceFunction_K2_GetTngPlayerCharacterClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngPlayerCharacterClass, PlayerIndex) == 0x000008, "Member 'TngGetInstanceFunction_K2_GetTngPlayerCharacterClass::PlayerIndex' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngPlayerCharacterClass, ClassType) == 0x000010, "Member 'TngGetInstanceFunction_K2_GetTngPlayerCharacterClass::ClassType' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngPlayerCharacterClass, ReturnValue) == 0x000018, "Member 'TngGetInstanceFunction_K2_GetTngPlayerCharacterClass::ReturnValue' has a wrong offset!");

// Function TangoLib.TngGetInstanceFunction.K2_GetTngPlayerControllerClass
// 0x0020 (0x0020 - 0x0000)
struct TngGetInstanceFunction_K2_GetTngPlayerControllerClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATngPlayerController>       ClassType;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATngPlayerController*                   ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGetInstanceFunction_K2_GetTngPlayerControllerClass) == 0x000008, "Wrong alignment on TngGetInstanceFunction_K2_GetTngPlayerControllerClass");
static_assert(sizeof(TngGetInstanceFunction_K2_GetTngPlayerControllerClass) == 0x000020, "Wrong size on TngGetInstanceFunction_K2_GetTngPlayerControllerClass");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngPlayerControllerClass, WorldContextObject) == 0x000000, "Member 'TngGetInstanceFunction_K2_GetTngPlayerControllerClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngPlayerControllerClass, PlayerIndex) == 0x000008, "Member 'TngGetInstanceFunction_K2_GetTngPlayerControllerClass::PlayerIndex' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngPlayerControllerClass, ClassType) == 0x000010, "Member 'TngGetInstanceFunction_K2_GetTngPlayerControllerClass::ClassType' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngPlayerControllerClass, ReturnValue) == 0x000018, "Member 'TngGetInstanceFunction_K2_GetTngPlayerControllerClass::ReturnValue' has a wrong offset!");

// Function TangoLib.TngGetInstanceFunction.K2_GetTngPlayerHudClass
// 0x0020 (0x0020 - 0x0000)
struct TngGetInstanceFunction_K2_GetTngPlayerHudClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATngHUD>                    ClassType;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATngHUD*                                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGetInstanceFunction_K2_GetTngPlayerHudClass) == 0x000008, "Wrong alignment on TngGetInstanceFunction_K2_GetTngPlayerHudClass");
static_assert(sizeof(TngGetInstanceFunction_K2_GetTngPlayerHudClass) == 0x000020, "Wrong size on TngGetInstanceFunction_K2_GetTngPlayerHudClass");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngPlayerHudClass, WorldContextObject) == 0x000000, "Member 'TngGetInstanceFunction_K2_GetTngPlayerHudClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngPlayerHudClass, PlayerIndex) == 0x000008, "Member 'TngGetInstanceFunction_K2_GetTngPlayerHudClass::PlayerIndex' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngPlayerHudClass, ClassType) == 0x000010, "Member 'TngGetInstanceFunction_K2_GetTngPlayerHudClass::ClassType' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngPlayerHudClass, ReturnValue) == 0x000018, "Member 'TngGetInstanceFunction_K2_GetTngPlayerHudClass::ReturnValue' has a wrong offset!");

// Function TangoLib.TngGetInstanceFunction.K2_GetTngPlayerServiceClass
// 0x0020 (0x0020 - 0x0000)
struct TngGetInstanceFunction_K2_GetTngPlayerServiceClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTngPlayerService>          ClassType;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTngPlayerService*                      ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGetInstanceFunction_K2_GetTngPlayerServiceClass) == 0x000008, "Wrong alignment on TngGetInstanceFunction_K2_GetTngPlayerServiceClass");
static_assert(sizeof(TngGetInstanceFunction_K2_GetTngPlayerServiceClass) == 0x000020, "Wrong size on TngGetInstanceFunction_K2_GetTngPlayerServiceClass");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngPlayerServiceClass, WorldContextObject) == 0x000000, "Member 'TngGetInstanceFunction_K2_GetTngPlayerServiceClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngPlayerServiceClass, PlayerIndex) == 0x000008, "Member 'TngGetInstanceFunction_K2_GetTngPlayerServiceClass::PlayerIndex' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngPlayerServiceClass, ClassType) == 0x000010, "Member 'TngGetInstanceFunction_K2_GetTngPlayerServiceClass::ClassType' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngPlayerServiceClass, ReturnValue) == 0x000018, "Member 'TngGetInstanceFunction_K2_GetTngPlayerServiceClass::ReturnValue' has a wrong offset!");

// Function TangoLib.TngGetInstanceFunction.K2_GetTngPlayerStateClass
// 0x0020 (0x0020 - 0x0000)
struct TngGetInstanceFunction_K2_GetTngPlayerStateClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATngPlayerState>            ClassType;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATngPlayerState*                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngGetInstanceFunction_K2_GetTngPlayerStateClass) == 0x000008, "Wrong alignment on TngGetInstanceFunction_K2_GetTngPlayerStateClass");
static_assert(sizeof(TngGetInstanceFunction_K2_GetTngPlayerStateClass) == 0x000020, "Wrong size on TngGetInstanceFunction_K2_GetTngPlayerStateClass");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngPlayerStateClass, WorldContextObject) == 0x000000, "Member 'TngGetInstanceFunction_K2_GetTngPlayerStateClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngPlayerStateClass, PlayerIndex) == 0x000008, "Member 'TngGetInstanceFunction_K2_GetTngPlayerStateClass::PlayerIndex' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngPlayerStateClass, ClassType) == 0x000010, "Member 'TngGetInstanceFunction_K2_GetTngPlayerStateClass::ClassType' has a wrong offset!");
static_assert(offsetof(TngGetInstanceFunction_K2_GetTngPlayerStateClass, ReturnValue) == 0x000018, "Member 'TngGetInstanceFunction_K2_GetTngPlayerStateClass::ReturnValue' has a wrong offset!");

// Function TangoLib.TngItemObject.ItemHasTag
// 0x000C (0x000C - 0x0000)
struct TngItemObject_ItemHasTag final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngItemObject_ItemHasTag) == 0x000004, "Wrong alignment on TngItemObject_ItemHasTag");
static_assert(sizeof(TngItemObject_ItemHasTag) == 0x00000C, "Wrong size on TngItemObject_ItemHasTag");
static_assert(offsetof(TngItemObject_ItemHasTag, Tag) == 0x000000, "Member 'TngItemObject_ItemHasTag::Tag' has a wrong offset!");
static_assert(offsetof(TngItemObject_ItemHasTag, ReturnValue) == 0x000008, "Member 'TngItemObject_ItemHasTag::ReturnValue' has a wrong offset!");

// Function TangoLib.TngLocalPlayer.CanCommunicateOnline
// 0x0001 (0x0001 - 0x0000)
struct TngLocalPlayer_CanCommunicateOnline final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngLocalPlayer_CanCommunicateOnline) == 0x000001, "Wrong alignment on TngLocalPlayer_CanCommunicateOnline");
static_assert(sizeof(TngLocalPlayer_CanCommunicateOnline) == 0x000001, "Wrong size on TngLocalPlayer_CanCommunicateOnline");
static_assert(offsetof(TngLocalPlayer_CanCommunicateOnline, ReturnValue) == 0x000000, "Member 'TngLocalPlayer_CanCommunicateOnline::ReturnValue' has a wrong offset!");

// Function TangoLib.TngLocalPlayer.CanPlayMultiplay
// 0x0001 (0x0001 - 0x0000)
struct TngLocalPlayer_CanPlayMultiplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngLocalPlayer_CanPlayMultiplay) == 0x000001, "Wrong alignment on TngLocalPlayer_CanPlayMultiplay");
static_assert(sizeof(TngLocalPlayer_CanPlayMultiplay) == 0x000001, "Wrong size on TngLocalPlayer_CanPlayMultiplay");
static_assert(offsetof(TngLocalPlayer_CanPlayMultiplay, ReturnValue) == 0x000000, "Member 'TngLocalPlayer_CanPlayMultiplay::ReturnValue' has a wrong offset!");

// Function TangoLib.TngLocalPlayer.IsAgeRestricted
// 0x0001 (0x0001 - 0x0000)
struct TngLocalPlayer_IsAgeRestricted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngLocalPlayer_IsAgeRestricted) == 0x000001, "Wrong alignment on TngLocalPlayer_IsAgeRestricted");
static_assert(sizeof(TngLocalPlayer_IsAgeRestricted) == 0x000001, "Wrong size on TngLocalPlayer_IsAgeRestricted");
static_assert(offsetof(TngLocalPlayer_IsAgeRestricted, ReturnValue) == 0x000000, "Member 'TngLocalPlayer_IsAgeRestricted::ReturnValue' has a wrong offset!");

// Function TangoLib.TngMathFunction.Blueprint_DoCountdownFloat
// 0x0014 (0x0014 - 0x0000)
struct TngMathFunction_Blueprint_DoCountdownFloat final
{
public:
	float                                         NowValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResetValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAccurately;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngMathFuncCountdownState                    State;                                             // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngMathFunction_Blueprint_DoCountdownFloat) == 0x000004, "Wrong alignment on TngMathFunction_Blueprint_DoCountdownFloat");
static_assert(sizeof(TngMathFunction_Blueprint_DoCountdownFloat) == 0x000014, "Wrong size on TngMathFunction_Blueprint_DoCountdownFloat");
static_assert(offsetof(TngMathFunction_Blueprint_DoCountdownFloat, NowValue) == 0x000000, "Member 'TngMathFunction_Blueprint_DoCountdownFloat::NowValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_Blueprint_DoCountdownFloat, DeltaValue) == 0x000004, "Member 'TngMathFunction_Blueprint_DoCountdownFloat::DeltaValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_Blueprint_DoCountdownFloat, ResetValue) == 0x000008, "Member 'TngMathFunction_Blueprint_DoCountdownFloat::ResetValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_Blueprint_DoCountdownFloat, IsAccurately) == 0x00000C, "Member 'TngMathFunction_Blueprint_DoCountdownFloat::IsAccurately' has a wrong offset!");
static_assert(offsetof(TngMathFunction_Blueprint_DoCountdownFloat, State) == 0x00000D, "Member 'TngMathFunction_Blueprint_DoCountdownFloat::State' has a wrong offset!");
static_assert(offsetof(TngMathFunction_Blueprint_DoCountdownFloat, ReturnValue) == 0x000010, "Member 'TngMathFunction_Blueprint_DoCountdownFloat::ReturnValue' has a wrong offset!");

// Function TangoLib.TngMathFunction.Blueprint_DoCountFloat
// 0x0028 (0x0028 - 0x0000)
struct TngMathFunction_Blueprint_DoCountFloat final
{
public:
	float                                         NowTime;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTime;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NowValue;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinValue;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   EasingFunc;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCountUp;                                         // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Exp;                                               // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Steps;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngMathFuncCountState                        State;                                             // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngMathFunction_Blueprint_DoCountFloat) == 0x000004, "Wrong alignment on TngMathFunction_Blueprint_DoCountFloat");
static_assert(sizeof(TngMathFunction_Blueprint_DoCountFloat) == 0x000028, "Wrong size on TngMathFunction_Blueprint_DoCountFloat");
static_assert(offsetof(TngMathFunction_Blueprint_DoCountFloat, NowTime) == 0x000000, "Member 'TngMathFunction_Blueprint_DoCountFloat::NowTime' has a wrong offset!");
static_assert(offsetof(TngMathFunction_Blueprint_DoCountFloat, DeltaTime) == 0x000004, "Member 'TngMathFunction_Blueprint_DoCountFloat::DeltaTime' has a wrong offset!");
static_assert(offsetof(TngMathFunction_Blueprint_DoCountFloat, MaxTime) == 0x000008, "Member 'TngMathFunction_Blueprint_DoCountFloat::MaxTime' has a wrong offset!");
static_assert(offsetof(TngMathFunction_Blueprint_DoCountFloat, NowValue) == 0x00000C, "Member 'TngMathFunction_Blueprint_DoCountFloat::NowValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_Blueprint_DoCountFloat, MinValue) == 0x000010, "Member 'TngMathFunction_Blueprint_DoCountFloat::MinValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_Blueprint_DoCountFloat, MaxValue) == 0x000014, "Member 'TngMathFunction_Blueprint_DoCountFloat::MaxValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_Blueprint_DoCountFloat, EasingFunc) == 0x000018, "Member 'TngMathFunction_Blueprint_DoCountFloat::EasingFunc' has a wrong offset!");
static_assert(offsetof(TngMathFunction_Blueprint_DoCountFloat, IsCountUp) == 0x000019, "Member 'TngMathFunction_Blueprint_DoCountFloat::IsCountUp' has a wrong offset!");
static_assert(offsetof(TngMathFunction_Blueprint_DoCountFloat, Exp) == 0x00001C, "Member 'TngMathFunction_Blueprint_DoCountFloat::Exp' has a wrong offset!");
static_assert(offsetof(TngMathFunction_Blueprint_DoCountFloat, Steps) == 0x000020, "Member 'TngMathFunction_Blueprint_DoCountFloat::Steps' has a wrong offset!");
static_assert(offsetof(TngMathFunction_Blueprint_DoCountFloat, State) == 0x000024, "Member 'TngMathFunction_Blueprint_DoCountFloat::State' has a wrong offset!");

// Function TangoLib.TngMathFunction.CalcLoopLength
// 0x0014 (0x0014 - 0x0000)
struct TngMathFunction_CalcLoopLength final
{
public:
	float                                         NowValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetValue;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngMathFunction_CalcLoopLength) == 0x000004, "Wrong alignment on TngMathFunction_CalcLoopLength");
static_assert(sizeof(TngMathFunction_CalcLoopLength) == 0x000014, "Wrong size on TngMathFunction_CalcLoopLength");
static_assert(offsetof(TngMathFunction_CalcLoopLength, NowValue) == 0x000000, "Member 'TngMathFunction_CalcLoopLength::NowValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcLoopLength, TargetValue) == 0x000004, "Member 'TngMathFunction_CalcLoopLength::TargetValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcLoopLength, MinValue) == 0x000008, "Member 'TngMathFunction_CalcLoopLength::MinValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcLoopLength, MaxValue) == 0x00000C, "Member 'TngMathFunction_CalcLoopLength::MaxValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcLoopLength, ReturnValue) == 0x000010, "Member 'TngMathFunction_CalcLoopLength::ReturnValue' has a wrong offset!");

// Function TangoLib.TngMathFunction.CalcTngAnalogToRingAngle
// 0x0014 (0x0014 - 0x0000)
struct TngMathFunction_CalcTngAnalogToRingAngle final
{
public:
	float                                         AnalogX;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnalogY;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NowAngle;                                          // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewAngle;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngMathFunction_CalcTngAnalogToRingAngle) == 0x000004, "Wrong alignment on TngMathFunction_CalcTngAnalogToRingAngle");
static_assert(sizeof(TngMathFunction_CalcTngAnalogToRingAngle) == 0x000014, "Wrong size on TngMathFunction_CalcTngAnalogToRingAngle");
static_assert(offsetof(TngMathFunction_CalcTngAnalogToRingAngle, AnalogX) == 0x000000, "Member 'TngMathFunction_CalcTngAnalogToRingAngle::AnalogX' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcTngAnalogToRingAngle, AnalogY) == 0x000004, "Member 'TngMathFunction_CalcTngAnalogToRingAngle::AnalogY' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcTngAnalogToRingAngle, NowAngle) == 0x000008, "Member 'TngMathFunction_CalcTngAnalogToRingAngle::NowAngle' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcTngAnalogToRingAngle, NewAngle) == 0x00000C, "Member 'TngMathFunction_CalcTngAnalogToRingAngle::NewAngle' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcTngAnalogToRingAngle, Length) == 0x000010, "Member 'TngMathFunction_CalcTngAnalogToRingAngle::Length' has a wrong offset!");

// Function TangoLib.TngMathFunction.CalcTngClampRingAngle
// 0x0014 (0x0014 - 0x0000)
struct TngMathFunction_CalcTngClampRingAngle final
{
public:
	float                                         NowAngle;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MAX;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngMathFunction_CalcTngClampRingAngle) == 0x000004, "Wrong alignment on TngMathFunction_CalcTngClampRingAngle");
static_assert(sizeof(TngMathFunction_CalcTngClampRingAngle) == 0x000014, "Wrong size on TngMathFunction_CalcTngClampRingAngle");
static_assert(offsetof(TngMathFunction_CalcTngClampRingAngle, NowAngle) == 0x000000, "Member 'TngMathFunction_CalcTngClampRingAngle::NowAngle' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcTngClampRingAngle, Min) == 0x000004, "Member 'TngMathFunction_CalcTngClampRingAngle::Min' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcTngClampRingAngle, MAX) == 0x000008, "Member 'TngMathFunction_CalcTngClampRingAngle::MAX' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcTngClampRingAngle, IsLoop) == 0x00000C, "Member 'TngMathFunction_CalcTngClampRingAngle::IsLoop' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcTngClampRingAngle, ReturnValue) == 0x000010, "Member 'TngMathFunction_CalcTngClampRingAngle::ReturnValue' has a wrong offset!");

// Function TangoLib.TngMathFunction.CalcToValueFromSpeed
// 0x0014 (0x0014 - 0x0000)
struct TngMathFunction_CalcToValueFromSpeed final
{
public:
	float                                         NowValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetValue;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngMathFunction_CalcToValueFromSpeed) == 0x000004, "Wrong alignment on TngMathFunction_CalcToValueFromSpeed");
static_assert(sizeof(TngMathFunction_CalcToValueFromSpeed) == 0x000014, "Wrong size on TngMathFunction_CalcToValueFromSpeed");
static_assert(offsetof(TngMathFunction_CalcToValueFromSpeed, NowValue) == 0x000000, "Member 'TngMathFunction_CalcToValueFromSpeed::NowValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcToValueFromSpeed, TargetValue) == 0x000004, "Member 'TngMathFunction_CalcToValueFromSpeed::TargetValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcToValueFromSpeed, SpeedValue) == 0x000008, "Member 'TngMathFunction_CalcToValueFromSpeed::SpeedValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcToValueFromSpeed, DeltaTime) == 0x00000C, "Member 'TngMathFunction_CalcToValueFromSpeed::DeltaTime' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcToValueFromSpeed, ReturnValue) == 0x000010, "Member 'TngMathFunction_CalcToValueFromSpeed::ReturnValue' has a wrong offset!");

// Function TangoLib.TngMathFunction.CalcToValueFromSpring
// 0x001C (0x001C - 0x0000)
struct TngMathFunction_CalcToValueFromSpring final
{
public:
	float                                         NowValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetValue;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringValue;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DumpValue;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngMathFunction_CalcToValueFromSpring) == 0x000004, "Wrong alignment on TngMathFunction_CalcToValueFromSpring");
static_assert(sizeof(TngMathFunction_CalcToValueFromSpring) == 0x00001C, "Wrong size on TngMathFunction_CalcToValueFromSpring");
static_assert(offsetof(TngMathFunction_CalcToValueFromSpring, NowValue) == 0x000000, "Member 'TngMathFunction_CalcToValueFromSpring::NowValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcToValueFromSpring, TargetValue) == 0x000004, "Member 'TngMathFunction_CalcToValueFromSpring::TargetValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcToValueFromSpring, SpeedValue) == 0x000008, "Member 'TngMathFunction_CalcToValueFromSpring::SpeedValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcToValueFromSpring, SpringValue) == 0x00000C, "Member 'TngMathFunction_CalcToValueFromSpring::SpringValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcToValueFromSpring, DumpValue) == 0x000010, "Member 'TngMathFunction_CalcToValueFromSpring::DumpValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcToValueFromSpring, DeltaTime) == 0x000014, "Member 'TngMathFunction_CalcToValueFromSpring::DeltaTime' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CalcToValueFromSpring, ReturnValue) == 0x000018, "Member 'TngMathFunction_CalcToValueFromSpring::ReturnValue' has a wrong offset!");

// Function TangoLib.TngMathFunction.CheckScreenLocation
// 0x0020 (0x0020 - 0x0000)
struct TngMathFunction_CheckScreenLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngMathFunction_CheckScreenLocation) == 0x000008, "Wrong alignment on TngMathFunction_CheckScreenLocation");
static_assert(sizeof(TngMathFunction_CheckScreenLocation) == 0x000020, "Wrong size on TngMathFunction_CheckScreenLocation");
static_assert(offsetof(TngMathFunction_CheckScreenLocation, WorldContextObject) == 0x000000, "Member 'TngMathFunction_CheckScreenLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CheckScreenLocation, Location) == 0x000008, "Member 'TngMathFunction_CheckScreenLocation::Location' has a wrong offset!");
static_assert(offsetof(TngMathFunction_CheckScreenLocation, ReturnValue) == 0x000014, "Member 'TngMathFunction_CheckScreenLocation::ReturnValue' has a wrong offset!");

// Function TangoLib.TngMathFunction.ClampBox
// 0x0040 (0x0040 - 0x0000)
struct TngMathFunction_ClampBox final
{
public:
	struct FVector                                NowValue;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MinValue;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MaxValue;                                          // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SizeValue;                                         // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsClamp;                                           // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0034(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngMathFunction_ClampBox) == 0x000004, "Wrong alignment on TngMathFunction_ClampBox");
static_assert(sizeof(TngMathFunction_ClampBox) == 0x000040, "Wrong size on TngMathFunction_ClampBox");
static_assert(offsetof(TngMathFunction_ClampBox, NowValue) == 0x000000, "Member 'TngMathFunction_ClampBox::NowValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampBox, MinValue) == 0x00000C, "Member 'TngMathFunction_ClampBox::MinValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampBox, MaxValue) == 0x000018, "Member 'TngMathFunction_ClampBox::MaxValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampBox, SizeValue) == 0x000024, "Member 'TngMathFunction_ClampBox::SizeValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampBox, IsClamp) == 0x000030, "Member 'TngMathFunction_ClampBox::IsClamp' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampBox, ReturnValue) == 0x000034, "Member 'TngMathFunction_ClampBox::ReturnValue' has a wrong offset!");

// Function TangoLib.TngMathFunction.ClampCircle
// 0x0030 (0x0030 - 0x0000)
struct TngMathFunction_ClampCircle final
{
public:
	struct FVector2D                              NowValue;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MinValue;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MaxValue;                                          // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SizeValue;                                         // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClampFace;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsClamp;                                           // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutRotate;                                         // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngMathFunction_ClampCircle) == 0x000004, "Wrong alignment on TngMathFunction_ClampCircle");
static_assert(sizeof(TngMathFunction_ClampCircle) == 0x000030, "Wrong size on TngMathFunction_ClampCircle");
static_assert(offsetof(TngMathFunction_ClampCircle, NowValue) == 0x000000, "Member 'TngMathFunction_ClampCircle::NowValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampCircle, MinValue) == 0x000008, "Member 'TngMathFunction_ClampCircle::MinValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampCircle, MaxValue) == 0x000010, "Member 'TngMathFunction_ClampCircle::MaxValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampCircle, SizeValue) == 0x000018, "Member 'TngMathFunction_ClampCircle::SizeValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampCircle, ClampFace) == 0x000020, "Member 'TngMathFunction_ClampCircle::ClampFace' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampCircle, IsClamp) == 0x000021, "Member 'TngMathFunction_ClampCircle::IsClamp' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampCircle, OutRotate) == 0x000024, "Member 'TngMathFunction_ClampCircle::OutRotate' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampCircle, ReturnValue) == 0x000028, "Member 'TngMathFunction_ClampCircle::ReturnValue' has a wrong offset!");

// Function TangoLib.TngMathFunction.ClampFloat
// 0x0018 (0x0018 - 0x0000)
struct TngMathFunction_ClampFloat final
{
public:
	float                                         NowValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizeValue;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsClamp;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngMathFunction_ClampFloat) == 0x000004, "Wrong alignment on TngMathFunction_ClampFloat");
static_assert(sizeof(TngMathFunction_ClampFloat) == 0x000018, "Wrong size on TngMathFunction_ClampFloat");
static_assert(offsetof(TngMathFunction_ClampFloat, NowValue) == 0x000000, "Member 'TngMathFunction_ClampFloat::NowValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampFloat, MinValue) == 0x000004, "Member 'TngMathFunction_ClampFloat::MinValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampFloat, MaxValue) == 0x000008, "Member 'TngMathFunction_ClampFloat::MaxValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampFloat, SizeValue) == 0x00000C, "Member 'TngMathFunction_ClampFloat::SizeValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampFloat, IsClamp) == 0x000010, "Member 'TngMathFunction_ClampFloat::IsClamp' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampFloat, ReturnValue) == 0x000014, "Member 'TngMathFunction_ClampFloat::ReturnValue' has a wrong offset!");

// Function TangoLib.TngMathFunction.ClampSphere
// 0x0040 (0x0040 - 0x0000)
struct TngMathFunction_ClampSphere final
{
public:
	struct FVector                                NowValue;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MinValue;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MaxValue;                                          // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SizeValue;                                         // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClampFace;                                         // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsClamp;                                           // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0034(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngMathFunction_ClampSphere) == 0x000004, "Wrong alignment on TngMathFunction_ClampSphere");
static_assert(sizeof(TngMathFunction_ClampSphere) == 0x000040, "Wrong size on TngMathFunction_ClampSphere");
static_assert(offsetof(TngMathFunction_ClampSphere, NowValue) == 0x000000, "Member 'TngMathFunction_ClampSphere::NowValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampSphere, MinValue) == 0x00000C, "Member 'TngMathFunction_ClampSphere::MinValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampSphere, MaxValue) == 0x000018, "Member 'TngMathFunction_ClampSphere::MaxValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampSphere, SizeValue) == 0x000024, "Member 'TngMathFunction_ClampSphere::SizeValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampSphere, ClampFace) == 0x000030, "Member 'TngMathFunction_ClampSphere::ClampFace' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampSphere, IsClamp) == 0x000031, "Member 'TngMathFunction_ClampSphere::IsClamp' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampSphere, ReturnValue) == 0x000034, "Member 'TngMathFunction_ClampSphere::ReturnValue' has a wrong offset!");

// Function TangoLib.TngMathFunction.ClampSquare
// 0x002C (0x002C - 0x0000)
struct TngMathFunction_ClampSquare final
{
public:
	struct FVector2D                              NowValue;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MinValue;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MaxValue;                                          // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SizeValue;                                         // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsClamp;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0024(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngMathFunction_ClampSquare) == 0x000004, "Wrong alignment on TngMathFunction_ClampSquare");
static_assert(sizeof(TngMathFunction_ClampSquare) == 0x00002C, "Wrong size on TngMathFunction_ClampSquare");
static_assert(offsetof(TngMathFunction_ClampSquare, NowValue) == 0x000000, "Member 'TngMathFunction_ClampSquare::NowValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampSquare, MinValue) == 0x000008, "Member 'TngMathFunction_ClampSquare::MinValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampSquare, MaxValue) == 0x000010, "Member 'TngMathFunction_ClampSquare::MaxValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampSquare, SizeValue) == 0x000018, "Member 'TngMathFunction_ClampSquare::SizeValue' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampSquare, IsClamp) == 0x000020, "Member 'TngMathFunction_ClampSquare::IsClamp' has a wrong offset!");
static_assert(offsetof(TngMathFunction_ClampSquare, ReturnValue) == 0x000024, "Member 'TngMathFunction_ClampSquare::ReturnValue' has a wrong offset!");

// Function TangoLib.TngMathFunction.FilterGameplayTag
// 0x0068 (0x0068 - 0x0000)
struct TngMathFunction_FilterGameplayTag final
{
public:
	struct FGameplayTagContainer                  NowList;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  MaskTags;                                          // 0x0020(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          IsExact;                                           // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0048(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngMathFunction_FilterGameplayTag) == 0x000008, "Wrong alignment on TngMathFunction_FilterGameplayTag");
static_assert(sizeof(TngMathFunction_FilterGameplayTag) == 0x000068, "Wrong size on TngMathFunction_FilterGameplayTag");
static_assert(offsetof(TngMathFunction_FilterGameplayTag, NowList) == 0x000000, "Member 'TngMathFunction_FilterGameplayTag::NowList' has a wrong offset!");
static_assert(offsetof(TngMathFunction_FilterGameplayTag, MaskTags) == 0x000020, "Member 'TngMathFunction_FilterGameplayTag::MaskTags' has a wrong offset!");
static_assert(offsetof(TngMathFunction_FilterGameplayTag, IsExact) == 0x000040, "Member 'TngMathFunction_FilterGameplayTag::IsExact' has a wrong offset!");
static_assert(offsetof(TngMathFunction_FilterGameplayTag, ReturnValue) == 0x000048, "Member 'TngMathFunction_FilterGameplayTag::ReturnValue' has a wrong offset!");

// Function TangoLib.TngMathFunction.GetCameraLocationAndRotation
// 0x0028 (0x0028 - 0x0000)
struct TngMathFunction_GetCameraLocationAndRotation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngMathFunction_GetCameraLocationAndRotation) == 0x000008, "Wrong alignment on TngMathFunction_GetCameraLocationAndRotation");
static_assert(sizeof(TngMathFunction_GetCameraLocationAndRotation) == 0x000028, "Wrong size on TngMathFunction_GetCameraLocationAndRotation");
static_assert(offsetof(TngMathFunction_GetCameraLocationAndRotation, WorldContextObject) == 0x000000, "Member 'TngMathFunction_GetCameraLocationAndRotation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngMathFunction_GetCameraLocationAndRotation, Location) == 0x000008, "Member 'TngMathFunction_GetCameraLocationAndRotation::Location' has a wrong offset!");
static_assert(offsetof(TngMathFunction_GetCameraLocationAndRotation, Rotation) == 0x000014, "Member 'TngMathFunction_GetCameraLocationAndRotation::Rotation' has a wrong offset!");
static_assert(offsetof(TngMathFunction_GetCameraLocationAndRotation, ReturnValue) == 0x000020, "Member 'TngMathFunction_GetCameraLocationAndRotation::ReturnValue' has a wrong offset!");

// Function TangoLib.TngMathFunction.GetGameplayTagFromIndex
// 0x0030 (0x0030 - 0x0000)
struct TngMathFunction_GetGameplayTagFromIndex final
{
public:
	struct FGameplayTagContainer                  NowList;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0024(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngMathFunction_GetGameplayTagFromIndex) == 0x000008, "Wrong alignment on TngMathFunction_GetGameplayTagFromIndex");
static_assert(sizeof(TngMathFunction_GetGameplayTagFromIndex) == 0x000030, "Wrong size on TngMathFunction_GetGameplayTagFromIndex");
static_assert(offsetof(TngMathFunction_GetGameplayTagFromIndex, NowList) == 0x000000, "Member 'TngMathFunction_GetGameplayTagFromIndex::NowList' has a wrong offset!");
static_assert(offsetof(TngMathFunction_GetGameplayTagFromIndex, Index_0) == 0x000020, "Member 'TngMathFunction_GetGameplayTagFromIndex::Index_0' has a wrong offset!");
static_assert(offsetof(TngMathFunction_GetGameplayTagFromIndex, ReturnValue) == 0x000024, "Member 'TngMathFunction_GetGameplayTagFromIndex::ReturnValue' has a wrong offset!");

// Function TangoLib.TngMathFunction.IsGameplayTagsValid
// 0x0028 (0x0028 - 0x0000)
struct TngMathFunction_IsGameplayTagsValid final
{
public:
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngMathFunction_IsGameplayTagsValid) == 0x000008, "Wrong alignment on TngMathFunction_IsGameplayTagsValid");
static_assert(sizeof(TngMathFunction_IsGameplayTagsValid) == 0x000028, "Wrong size on TngMathFunction_IsGameplayTagsValid");
static_assert(offsetof(TngMathFunction_IsGameplayTagsValid, GameplayTags) == 0x000000, "Member 'TngMathFunction_IsGameplayTagsValid::GameplayTags' has a wrong offset!");
static_assert(offsetof(TngMathFunction_IsGameplayTagsValid, ReturnValue) == 0x000020, "Member 'TngMathFunction_IsGameplayTagsValid::ReturnValue' has a wrong offset!");

// Function TangoLib.TngPathFollowingComponent.SetPathFindFilter
// 0x0008 (0x0008 - 0x0000)
struct TngPathFollowingComponent_SetPathFindFilter final
{
public:
	TSubclassOf<class UNavigationQueryFilter>     NewFilter;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngPathFollowingComponent_SetPathFindFilter) == 0x000008, "Wrong alignment on TngPathFollowingComponent_SetPathFindFilter");
static_assert(sizeof(TngPathFollowingComponent_SetPathFindFilter) == 0x000008, "Wrong size on TngPathFollowingComponent_SetPathFindFilter");
static_assert(offsetof(TngPathFollowingComponent_SetPathFindFilter, NewFilter) == 0x000000, "Member 'TngPathFollowingComponent_SetPathFindFilter::NewFilter' has a wrong offset!");

// Function TangoLib.TngPlayerController.GetPlayerServiceClass
// 0x0010 (0x0010 - 0x0000)
struct TngPlayerController_GetPlayerServiceClass final
{
public:
	TSubclassOf<class UTngPlayerService>          ClassType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTngPlayerService*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngPlayerController_GetPlayerServiceClass) == 0x000008, "Wrong alignment on TngPlayerController_GetPlayerServiceClass");
static_assert(sizeof(TngPlayerController_GetPlayerServiceClass) == 0x000010, "Wrong size on TngPlayerController_GetPlayerServiceClass");
static_assert(offsetof(TngPlayerController_GetPlayerServiceClass, ClassType) == 0x000000, "Member 'TngPlayerController_GetPlayerServiceClass::ClassType' has a wrong offset!");
static_assert(offsetof(TngPlayerController_GetPlayerServiceClass, ReturnValue) == 0x000008, "Member 'TngPlayerController_GetPlayerServiceClass::ReturnValue' has a wrong offset!");

// Function TangoLib.TngPlayerController.PlayTngControllerShake
// 0x0010 (0x0010 - 0x0000)
struct TngPlayerController_PlayTngControllerShake final
{
public:
	class UForceFeedbackEffect*                   ForceFeedbackEffect;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngPlayerController_PlayTngControllerShake) == 0x000008, "Wrong alignment on TngPlayerController_PlayTngControllerShake");
static_assert(sizeof(TngPlayerController_PlayTngControllerShake) == 0x000010, "Wrong size on TngPlayerController_PlayTngControllerShake");
static_assert(offsetof(TngPlayerController_PlayTngControllerShake, ForceFeedbackEffect) == 0x000000, "Member 'TngPlayerController_PlayTngControllerShake::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(TngPlayerController_PlayTngControllerShake, Tag) == 0x000008, "Member 'TngPlayerController_PlayTngControllerShake::Tag' has a wrong offset!");

// Function TangoLib.TngPlayerController.TeleportPlayer
// 0x0018 (0x0018 - 0x0000)
struct TngPlayerController_TeleportPlayer final
{
public:
	struct FVector                                PlayerLocaltion;                                   // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CameraRotation;                                    // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngPlayerController_TeleportPlayer) == 0x000004, "Wrong alignment on TngPlayerController_TeleportPlayer");
static_assert(sizeof(TngPlayerController_TeleportPlayer) == 0x000018, "Wrong size on TngPlayerController_TeleportPlayer");
static_assert(offsetof(TngPlayerController_TeleportPlayer, PlayerLocaltion) == 0x000000, "Member 'TngPlayerController_TeleportPlayer::PlayerLocaltion' has a wrong offset!");
static_assert(offsetof(TngPlayerController_TeleportPlayer, CameraRotation) == 0x00000C, "Member 'TngPlayerController_TeleportPlayer::CameraRotation' has a wrong offset!");

// Function TangoLib.TngPlayerController.CheckGamePadMode
// 0x0001 (0x0001 - 0x0000)
struct TngPlayerController_CheckGamePadMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngPlayerController_CheckGamePadMode) == 0x000001, "Wrong alignment on TngPlayerController_CheckGamePadMode");
static_assert(sizeof(TngPlayerController_CheckGamePadMode) == 0x000001, "Wrong size on TngPlayerController_CheckGamePadMode");
static_assert(offsetof(TngPlayerController_CheckGamePadMode, ReturnValue) == 0x000000, "Member 'TngPlayerController_CheckGamePadMode::ReturnValue' has a wrong offset!");

// Function TangoLib.TngPlayerMetrics.ModifyStat
// 0x0010 (0x0010 - 0x0000)
struct TngPlayerMetrics_ModifyStat final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngPlayerMetricsStatModifier                 Modifier;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngPlayerMetrics_ModifyStat) == 0x000004, "Wrong alignment on TngPlayerMetrics_ModifyStat");
static_assert(sizeof(TngPlayerMetrics_ModifyStat) == 0x000010, "Wrong size on TngPlayerMetrics_ModifyStat");
static_assert(offsetof(TngPlayerMetrics_ModifyStat, StatName) == 0x000000, "Member 'TngPlayerMetrics_ModifyStat::StatName' has a wrong offset!");
static_assert(offsetof(TngPlayerMetrics_ModifyStat, Value) == 0x000008, "Member 'TngPlayerMetrics_ModifyStat::Value' has a wrong offset!");
static_assert(offsetof(TngPlayerMetrics_ModifyStat, Modifier) == 0x00000C, "Member 'TngPlayerMetrics_ModifyStat::Modifier' has a wrong offset!");
static_assert(offsetof(TngPlayerMetrics_ModifyStat, ReturnValue) == 0x00000D, "Member 'TngPlayerMetrics_ModifyStat::ReturnValue' has a wrong offset!");

// Function TangoLib.TngPlayerMetrics.ModifyStat_Decrement
// 0x000C (0x000C - 0x0000)
struct TngPlayerMetrics_ModifyStat_Decrement final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngPlayerMetrics_ModifyStat_Decrement) == 0x000004, "Wrong alignment on TngPlayerMetrics_ModifyStat_Decrement");
static_assert(sizeof(TngPlayerMetrics_ModifyStat_Decrement) == 0x00000C, "Wrong size on TngPlayerMetrics_ModifyStat_Decrement");
static_assert(offsetof(TngPlayerMetrics_ModifyStat_Decrement, StatName) == 0x000000, "Member 'TngPlayerMetrics_ModifyStat_Decrement::StatName' has a wrong offset!");
static_assert(offsetof(TngPlayerMetrics_ModifyStat_Decrement, ReturnValue) == 0x000008, "Member 'TngPlayerMetrics_ModifyStat_Decrement::ReturnValue' has a wrong offset!");

// Function TangoLib.TngPlayerMetrics.ModifyStat_Increment
// 0x000C (0x000C - 0x0000)
struct TngPlayerMetrics_ModifyStat_Increment final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngPlayerMetrics_ModifyStat_Increment) == 0x000004, "Wrong alignment on TngPlayerMetrics_ModifyStat_Increment");
static_assert(sizeof(TngPlayerMetrics_ModifyStat_Increment) == 0x00000C, "Wrong size on TngPlayerMetrics_ModifyStat_Increment");
static_assert(offsetof(TngPlayerMetrics_ModifyStat_Increment, StatName) == 0x000000, "Member 'TngPlayerMetrics_ModifyStat_Increment::StatName' has a wrong offset!");
static_assert(offsetof(TngPlayerMetrics_ModifyStat_Increment, ReturnValue) == 0x000008, "Member 'TngPlayerMetrics_ModifyStat_Increment::ReturnValue' has a wrong offset!");

// Function TangoLib.TngPlayerMetrics.GetStatValueOnGame
// 0x000C (0x000C - 0x0000)
struct TngPlayerMetrics_GetStatValueOnGame final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngPlayerMetrics_GetStatValueOnGame) == 0x000004, "Wrong alignment on TngPlayerMetrics_GetStatValueOnGame");
static_assert(sizeof(TngPlayerMetrics_GetStatValueOnGame) == 0x00000C, "Wrong size on TngPlayerMetrics_GetStatValueOnGame");
static_assert(offsetof(TngPlayerMetrics_GetStatValueOnGame, StatName) == 0x000000, "Member 'TngPlayerMetrics_GetStatValueOnGame::StatName' has a wrong offset!");
static_assert(offsetof(TngPlayerMetrics_GetStatValueOnGame, ReturnValue) == 0x000008, "Member 'TngPlayerMetrics_GetStatValueOnGame::ReturnValue' has a wrong offset!");

// Function TangoLib.TngPlayerMetrics.GetStatValueOnProfile
// 0x000C (0x000C - 0x0000)
struct TngPlayerMetrics_GetStatValueOnProfile final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngPlayerMetrics_GetStatValueOnProfile) == 0x000004, "Wrong alignment on TngPlayerMetrics_GetStatValueOnProfile");
static_assert(sizeof(TngPlayerMetrics_GetStatValueOnProfile) == 0x00000C, "Wrong size on TngPlayerMetrics_GetStatValueOnProfile");
static_assert(offsetof(TngPlayerMetrics_GetStatValueOnProfile, StatName) == 0x000000, "Member 'TngPlayerMetrics_GetStatValueOnProfile::StatName' has a wrong offset!");
static_assert(offsetof(TngPlayerMetrics_GetStatValueOnProfile, ReturnValue) == 0x000008, "Member 'TngPlayerMetrics_GetStatValueOnProfile::ReturnValue' has a wrong offset!");

// Function TangoLib.TngPlayerState.ModifyStat
// 0x0010 (0x0010 - 0x0000)
struct TngPlayerState_ModifyStat final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ammo;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngPlayerMetricsStatModifier                 Modifier;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngPlayerState_ModifyStat) == 0x000004, "Wrong alignment on TngPlayerState_ModifyStat");
static_assert(sizeof(TngPlayerState_ModifyStat) == 0x000010, "Wrong size on TngPlayerState_ModifyStat");
static_assert(offsetof(TngPlayerState_ModifyStat, Key) == 0x000000, "Member 'TngPlayerState_ModifyStat::Key' has a wrong offset!");
static_assert(offsetof(TngPlayerState_ModifyStat, Ammo) == 0x000008, "Member 'TngPlayerState_ModifyStat::Ammo' has a wrong offset!");
static_assert(offsetof(TngPlayerState_ModifyStat, Modifier) == 0x00000C, "Member 'TngPlayerState_ModifyStat::Modifier' has a wrong offset!");

// Function TangoLib.TngPlayerState.GetStatValueOnGame
// 0x000C (0x000C - 0x0000)
struct TngPlayerState_GetStatValueOnGame final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngPlayerState_GetStatValueOnGame) == 0x000004, "Wrong alignment on TngPlayerState_GetStatValueOnGame");
static_assert(sizeof(TngPlayerState_GetStatValueOnGame) == 0x00000C, "Wrong size on TngPlayerState_GetStatValueOnGame");
static_assert(offsetof(TngPlayerState_GetStatValueOnGame, Key) == 0x000000, "Member 'TngPlayerState_GetStatValueOnGame::Key' has a wrong offset!");
static_assert(offsetof(TngPlayerState_GetStatValueOnGame, ReturnValue) == 0x000008, "Member 'TngPlayerState_GetStatValueOnGame::ReturnValue' has a wrong offset!");

// Function TangoLib.TngPlayerState.GetStatValueOnProfile
// 0x000C (0x000C - 0x0000)
struct TngPlayerState_GetStatValueOnProfile final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngPlayerState_GetStatValueOnProfile) == 0x000004, "Wrong alignment on TngPlayerState_GetStatValueOnProfile");
static_assert(sizeof(TngPlayerState_GetStatValueOnProfile) == 0x00000C, "Wrong size on TngPlayerState_GetStatValueOnProfile");
static_assert(offsetof(TngPlayerState_GetStatValueOnProfile, Key) == 0x000000, "Member 'TngPlayerState_GetStatValueOnProfile::Key' has a wrong offset!");
static_assert(offsetof(TngPlayerState_GetStatValueOnProfile, ReturnValue) == 0x000008, "Member 'TngPlayerState_GetStatValueOnProfile::ReturnValue' has a wrong offset!");

// Function TangoLib.TngProfileSaveGame.GetUserSettings
// 0x0008 (0x0008 - 0x0000)
struct TngProfileSaveGame_GetUserSettings final
{
public:
	class UGameUserSettings*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngProfileSaveGame_GetUserSettings) == 0x000008, "Wrong alignment on TngProfileSaveGame_GetUserSettings");
static_assert(sizeof(TngProfileSaveGame_GetUserSettings) == 0x000008, "Wrong size on TngProfileSaveGame_GetUserSettings");
static_assert(offsetof(TngProfileSaveGame_GetUserSettings, ReturnValue) == 0x000000, "Member 'TngProfileSaveGame_GetUserSettings::ReturnValue' has a wrong offset!");

// Function TangoLib.TngRandomPick.RandomPick
// 0x0018 (0x0018 - 0x0000)
struct TngRandomPick_RandomPick final
{
public:
	TArray<struct FTngRandomPickWeight>           ItemArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngRandomPick_RandomPick) == 0x000008, "Wrong alignment on TngRandomPick_RandomPick");
static_assert(sizeof(TngRandomPick_RandomPick) == 0x000018, "Wrong size on TngRandomPick_RandomPick");
static_assert(offsetof(TngRandomPick_RandomPick, ItemArray) == 0x000000, "Member 'TngRandomPick_RandomPick::ItemArray' has a wrong offset!");
static_assert(offsetof(TngRandomPick_RandomPick, ReturnValue) == 0x000010, "Member 'TngRandomPick_RandomPick::ReturnValue' has a wrong offset!");

// Function TangoLib.TngRandomPick.RandomPickActor
// 0x0020 (0x0020 - 0x0000)
struct TngRandomPick_RandomPickActor final
{
public:
	TArray<struct FTngRandomPickWeightWithActor>  ItemArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 PickedData;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngRandomPick_RandomPickActor) == 0x000008, "Wrong alignment on TngRandomPick_RandomPickActor");
static_assert(sizeof(TngRandomPick_RandomPickActor) == 0x000020, "Wrong size on TngRandomPick_RandomPickActor");
static_assert(offsetof(TngRandomPick_RandomPickActor, ItemArray) == 0x000000, "Member 'TngRandomPick_RandomPickActor::ItemArray' has a wrong offset!");
static_assert(offsetof(TngRandomPick_RandomPickActor, PickedData) == 0x000010, "Member 'TngRandomPick_RandomPickActor::PickedData' has a wrong offset!");
static_assert(offsetof(TngRandomPick_RandomPickActor, ReturnValue) == 0x000018, "Member 'TngRandomPick_RandomPickActor::ReturnValue' has a wrong offset!");

// Function TangoLib.TngRandomPick.RandomPickFloat
// 0x0018 (0x0018 - 0x0000)
struct TngRandomPick_RandomPickFloat final
{
public:
	TArray<struct FTngRandomPickWeightWithFloat>  ItemArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         PickedData;                                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngRandomPick_RandomPickFloat) == 0x000008, "Wrong alignment on TngRandomPick_RandomPickFloat");
static_assert(sizeof(TngRandomPick_RandomPickFloat) == 0x000018, "Wrong size on TngRandomPick_RandomPickFloat");
static_assert(offsetof(TngRandomPick_RandomPickFloat, ItemArray) == 0x000000, "Member 'TngRandomPick_RandomPickFloat::ItemArray' has a wrong offset!");
static_assert(offsetof(TngRandomPick_RandomPickFloat, PickedData) == 0x000010, "Member 'TngRandomPick_RandomPickFloat::PickedData' has a wrong offset!");
static_assert(offsetof(TngRandomPick_RandomPickFloat, ReturnValue) == 0x000014, "Member 'TngRandomPick_RandomPickFloat::ReturnValue' has a wrong offset!");

// Function TangoLib.TngRandomPick.RandomPickInteger
// 0x0018 (0x0018 - 0x0000)
struct TngRandomPick_RandomPickInteger final
{
public:
	TArray<struct FTngRandomPickWeightWithInteger> ItemArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         PickedData;                                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngRandomPick_RandomPickInteger) == 0x000008, "Wrong alignment on TngRandomPick_RandomPickInteger");
static_assert(sizeof(TngRandomPick_RandomPickInteger) == 0x000018, "Wrong size on TngRandomPick_RandomPickInteger");
static_assert(offsetof(TngRandomPick_RandomPickInteger, ItemArray) == 0x000000, "Member 'TngRandomPick_RandomPickInteger::ItemArray' has a wrong offset!");
static_assert(offsetof(TngRandomPick_RandomPickInteger, PickedData) == 0x000010, "Member 'TngRandomPick_RandomPickInteger::PickedData' has a wrong offset!");
static_assert(offsetof(TngRandomPick_RandomPickInteger, ReturnValue) == 0x000014, "Member 'TngRandomPick_RandomPickInteger::ReturnValue' has a wrong offset!");

// Function TangoLib.TngRandomPick.RandomPickVector
// 0x0020 (0x0020 - 0x0000)
struct TngRandomPick_RandomPickVector final
{
public:
	TArray<struct FTngRandomPickWeightWithVector> ItemArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                PickedData;                                        // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngRandomPick_RandomPickVector) == 0x000008, "Wrong alignment on TngRandomPick_RandomPickVector");
static_assert(sizeof(TngRandomPick_RandomPickVector) == 0x000020, "Wrong size on TngRandomPick_RandomPickVector");
static_assert(offsetof(TngRandomPick_RandomPickVector, ItemArray) == 0x000000, "Member 'TngRandomPick_RandomPickVector::ItemArray' has a wrong offset!");
static_assert(offsetof(TngRandomPick_RandomPickVector, PickedData) == 0x000010, "Member 'TngRandomPick_RandomPickVector::PickedData' has a wrong offset!");
static_assert(offsetof(TngRandomPick_RandomPickVector, ReturnValue) == 0x00001C, "Member 'TngRandomPick_RandomPickVector::ReturnValue' has a wrong offset!");

// Function TangoLib.TngSplineComponent.GetDistanceAlongSplineAtInputKey
// 0x0008 (0x0008 - 0x0000)
struct TngSplineComponent_GetDistanceAlongSplineAtInputKey final
{
public:
	float                                         InputKey;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngSplineComponent_GetDistanceAlongSplineAtInputKey) == 0x000004, "Wrong alignment on TngSplineComponent_GetDistanceAlongSplineAtInputKey");
static_assert(sizeof(TngSplineComponent_GetDistanceAlongSplineAtInputKey) == 0x000008, "Wrong size on TngSplineComponent_GetDistanceAlongSplineAtInputKey");
static_assert(offsetof(TngSplineComponent_GetDistanceAlongSplineAtInputKey, InputKey) == 0x000000, "Member 'TngSplineComponent_GetDistanceAlongSplineAtInputKey::InputKey' has a wrong offset!");
static_assert(offsetof(TngSplineComponent_GetDistanceAlongSplineAtInputKey, ReturnValue) == 0x000004, "Member 'TngSplineComponent_GetDistanceAlongSplineAtInputKey::ReturnValue' has a wrong offset!");

// Function TangoLib.TngSplineFollowingInterface.BlueprintNative_AbortToMoveOnSplineByThrottle
// 0x0001 (0x0001 - 0x0000)
struct TngSplineFollowingInterface_BlueprintNative_AbortToMoveOnSplineByThrottle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngSplineFollowingInterface_BlueprintNative_AbortToMoveOnSplineByThrottle) == 0x000001, "Wrong alignment on TngSplineFollowingInterface_BlueprintNative_AbortToMoveOnSplineByThrottle");
static_assert(sizeof(TngSplineFollowingInterface_BlueprintNative_AbortToMoveOnSplineByThrottle) == 0x000001, "Wrong size on TngSplineFollowingInterface_BlueprintNative_AbortToMoveOnSplineByThrottle");
static_assert(offsetof(TngSplineFollowingInterface_BlueprintNative_AbortToMoveOnSplineByThrottle, ReturnValue) == 0x000000, "Member 'TngSplineFollowingInterface_BlueprintNative_AbortToMoveOnSplineByThrottle::ReturnValue' has a wrong offset!");

// Function TangoLib.TngSplineFollowingInterface.BlueprintNative_ChangeThrottleOfSplineFollowing
// 0x0008 (0x0008 - 0x0000)
struct TngSplineFollowingInterface_BlueprintNative_ChangeThrottleOfSplineFollowing final
{
public:
	float                                         Throttle;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDelta;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngSplineFollowingInterface_BlueprintNative_ChangeThrottleOfSplineFollowing) == 0x000004, "Wrong alignment on TngSplineFollowingInterface_BlueprintNative_ChangeThrottleOfSplineFollowing");
static_assert(sizeof(TngSplineFollowingInterface_BlueprintNative_ChangeThrottleOfSplineFollowing) == 0x000008, "Wrong size on TngSplineFollowingInterface_BlueprintNative_ChangeThrottleOfSplineFollowing");
static_assert(offsetof(TngSplineFollowingInterface_BlueprintNative_ChangeThrottleOfSplineFollowing, Throttle) == 0x000000, "Member 'TngSplineFollowingInterface_BlueprintNative_ChangeThrottleOfSplineFollowing::Throttle' has a wrong offset!");
static_assert(offsetof(TngSplineFollowingInterface_BlueprintNative_ChangeThrottleOfSplineFollowing, IsDelta) == 0x000004, "Member 'TngSplineFollowingInterface_BlueprintNative_ChangeThrottleOfSplineFollowing::IsDelta' has a wrong offset!");
static_assert(offsetof(TngSplineFollowingInterface_BlueprintNative_ChangeThrottleOfSplineFollowing, ReturnValue) == 0x000005, "Member 'TngSplineFollowingInterface_BlueprintNative_ChangeThrottleOfSplineFollowing::ReturnValue' has a wrong offset!");

// Function TangoLib.TngSplineFollowingInterface.BlueprintNative_MoveOnSplineBySpeed
// 0x0018 (0x0018 - 0x0000)
struct TngSplineFollowingInterface_BlueprintNative_MoveOnSplineBySpeed final
{
public:
	class USplineComponent*                       Spline;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Accel;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngSplineFollowingBehavior                   BehaviorType;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngSplineFollowingInterface_BlueprintNative_MoveOnSplineBySpeed) == 0x000008, "Wrong alignment on TngSplineFollowingInterface_BlueprintNative_MoveOnSplineBySpeed");
static_assert(sizeof(TngSplineFollowingInterface_BlueprintNative_MoveOnSplineBySpeed) == 0x000018, "Wrong size on TngSplineFollowingInterface_BlueprintNative_MoveOnSplineBySpeed");
static_assert(offsetof(TngSplineFollowingInterface_BlueprintNative_MoveOnSplineBySpeed, Spline) == 0x000000, "Member 'TngSplineFollowingInterface_BlueprintNative_MoveOnSplineBySpeed::Spline' has a wrong offset!");
static_assert(offsetof(TngSplineFollowingInterface_BlueprintNative_MoveOnSplineBySpeed, MaxSpeed) == 0x000008, "Member 'TngSplineFollowingInterface_BlueprintNative_MoveOnSplineBySpeed::MaxSpeed' has a wrong offset!");
static_assert(offsetof(TngSplineFollowingInterface_BlueprintNative_MoveOnSplineBySpeed, Accel) == 0x00000C, "Member 'TngSplineFollowingInterface_BlueprintNative_MoveOnSplineBySpeed::Accel' has a wrong offset!");
static_assert(offsetof(TngSplineFollowingInterface_BlueprintNative_MoveOnSplineBySpeed, BehaviorType) == 0x000010, "Member 'TngSplineFollowingInterface_BlueprintNative_MoveOnSplineBySpeed::BehaviorType' has a wrong offset!");
static_assert(offsetof(TngSplineFollowingInterface_BlueprintNative_MoveOnSplineBySpeed, ReturnValue) == 0x000011, "Member 'TngSplineFollowingInterface_BlueprintNative_MoveOnSplineBySpeed::ReturnValue' has a wrong offset!");

// Function TangoLib.TngSplineFollowingInterface.BlueprintNative_MoveOnSplineByThrottle
// 0x0010 (0x0010 - 0x0000)
struct TngSplineFollowingInterface_BlueprintNative_MoveOnSplineByThrottle final
{
public:
	class USplineComponent*                       Spline;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Throttle;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngSplineFollowingBehavior                   BehaviorType;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngSplineFollowingInterface_BlueprintNative_MoveOnSplineByThrottle) == 0x000008, "Wrong alignment on TngSplineFollowingInterface_BlueprintNative_MoveOnSplineByThrottle");
static_assert(sizeof(TngSplineFollowingInterface_BlueprintNative_MoveOnSplineByThrottle) == 0x000010, "Wrong size on TngSplineFollowingInterface_BlueprintNative_MoveOnSplineByThrottle");
static_assert(offsetof(TngSplineFollowingInterface_BlueprintNative_MoveOnSplineByThrottle, Spline) == 0x000000, "Member 'TngSplineFollowingInterface_BlueprintNative_MoveOnSplineByThrottle::Spline' has a wrong offset!");
static_assert(offsetof(TngSplineFollowingInterface_BlueprintNative_MoveOnSplineByThrottle, Throttle) == 0x000008, "Member 'TngSplineFollowingInterface_BlueprintNative_MoveOnSplineByThrottle::Throttle' has a wrong offset!");
static_assert(offsetof(TngSplineFollowingInterface_BlueprintNative_MoveOnSplineByThrottle, BehaviorType) == 0x00000C, "Member 'TngSplineFollowingInterface_BlueprintNative_MoveOnSplineByThrottle::BehaviorType' has a wrong offset!");
static_assert(offsetof(TngSplineFollowingInterface_BlueprintNative_MoveOnSplineByThrottle, ReturnValue) == 0x00000D, "Member 'TngSplineFollowingInterface_BlueprintNative_MoveOnSplineByThrottle::ReturnValue' has a wrong offset!");

// Function TangoLib.TngSplineMovementComponent.Receive_OnChangeStateExtraAnim
// 0x0001 (0x0001 - 0x0000)
struct TngSplineMovementComponent_Receive_OnChangeStateExtraAnim final
{
public:
	ETngExtraPlayState                            NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngSplineMovementComponent_Receive_OnChangeStateExtraAnim) == 0x000001, "Wrong alignment on TngSplineMovementComponent_Receive_OnChangeStateExtraAnim");
static_assert(sizeof(TngSplineMovementComponent_Receive_OnChangeStateExtraAnim) == 0x000001, "Wrong size on TngSplineMovementComponent_Receive_OnChangeStateExtraAnim");
static_assert(offsetof(TngSplineMovementComponent_Receive_OnChangeStateExtraAnim, NewState) == 0x000000, "Member 'TngSplineMovementComponent_Receive_OnChangeStateExtraAnim::NewState' has a wrong offset!");

// Function TangoLib.TngSplineMovementComponent.StartMovement
// 0x0018 (0x0018 - 0x0000)
struct TngSplineMovementComponent_StartMovement final
{
public:
	class USplineComponent*                       TargetSpline;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialSpeed;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngSplineMovementComponent_StartMovement) == 0x000008, "Wrong alignment on TngSplineMovementComponent_StartMovement");
static_assert(sizeof(TngSplineMovementComponent_StartMovement) == 0x000018, "Wrong size on TngSplineMovementComponent_StartMovement");
static_assert(offsetof(TngSplineMovementComponent_StartMovement, TargetSpline) == 0x000000, "Member 'TngSplineMovementComponent_StartMovement::TargetSpline' has a wrong offset!");
static_assert(offsetof(TngSplineMovementComponent_StartMovement, MaxSpeed) == 0x000008, "Member 'TngSplineMovementComponent_StartMovement::MaxSpeed' has a wrong offset!");
static_assert(offsetof(TngSplineMovementComponent_StartMovement, Acceleration) == 0x00000C, "Member 'TngSplineMovementComponent_StartMovement::Acceleration' has a wrong offset!");
static_assert(offsetof(TngSplineMovementComponent_StartMovement, InitialSpeed) == 0x000010, "Member 'TngSplineMovementComponent_StartMovement::InitialSpeed' has a wrong offset!");
static_assert(offsetof(TngSplineMovementComponent_StartMovement, ReturnValue) == 0x000014, "Member 'TngSplineMovementComponent_StartMovement::ReturnValue' has a wrong offset!");

// Function TangoLib.TngSplineMovementComponent.StartMovementByThrottle
// 0x0010 (0x0010 - 0x0000)
struct TngSplineMovementComponent_StartMovementByThrottle final
{
public:
	class USplineComponent*                       TargetSpline;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Throttle;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngSplineFollowingBehavior                   BehaviorType;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngSplineMovementComponent_StartMovementByThrottle) == 0x000008, "Wrong alignment on TngSplineMovementComponent_StartMovementByThrottle");
static_assert(sizeof(TngSplineMovementComponent_StartMovementByThrottle) == 0x000010, "Wrong size on TngSplineMovementComponent_StartMovementByThrottle");
static_assert(offsetof(TngSplineMovementComponent_StartMovementByThrottle, TargetSpline) == 0x000000, "Member 'TngSplineMovementComponent_StartMovementByThrottle::TargetSpline' has a wrong offset!");
static_assert(offsetof(TngSplineMovementComponent_StartMovementByThrottle, Throttle) == 0x000008, "Member 'TngSplineMovementComponent_StartMovementByThrottle::Throttle' has a wrong offset!");
static_assert(offsetof(TngSplineMovementComponent_StartMovementByThrottle, BehaviorType) == 0x00000C, "Member 'TngSplineMovementComponent_StartMovementByThrottle::BehaviorType' has a wrong offset!");
static_assert(offsetof(TngSplineMovementComponent_StartMovementByThrottle, ReturnValue) == 0x00000D, "Member 'TngSplineMovementComponent_StartMovementByThrottle::ReturnValue' has a wrong offset!");

// Function TangoLib.TngStateCoordinateComponent.Blueprint_AddState
// 0x0018 (0x0018 - 0x0000)
struct TngStateCoordinateComponent_Blueprint_AddState final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTngStateItem>              ClassType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTngStateItem*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngStateCoordinateComponent_Blueprint_AddState) == 0x000008, "Wrong alignment on TngStateCoordinateComponent_Blueprint_AddState");
static_assert(sizeof(TngStateCoordinateComponent_Blueprint_AddState) == 0x000018, "Wrong size on TngStateCoordinateComponent_Blueprint_AddState");
static_assert(offsetof(TngStateCoordinateComponent_Blueprint_AddState, SlotName) == 0x000000, "Member 'TngStateCoordinateComponent_Blueprint_AddState::SlotName' has a wrong offset!");
static_assert(offsetof(TngStateCoordinateComponent_Blueprint_AddState, ClassType) == 0x000008, "Member 'TngStateCoordinateComponent_Blueprint_AddState::ClassType' has a wrong offset!");
static_assert(offsetof(TngStateCoordinateComponent_Blueprint_AddState, ReturnValue) == 0x000010, "Member 'TngStateCoordinateComponent_Blueprint_AddState::ReturnValue' has a wrong offset!");

// Function TangoLib.TngStateCoordinateComponent.Blueprint_GetState
// 0x0018 (0x0018 - 0x0000)
struct TngStateCoordinateComponent_Blueprint_GetState final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTngStateItem>              ClassType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTngStateItem*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngStateCoordinateComponent_Blueprint_GetState) == 0x000008, "Wrong alignment on TngStateCoordinateComponent_Blueprint_GetState");
static_assert(sizeof(TngStateCoordinateComponent_Blueprint_GetState) == 0x000018, "Wrong size on TngStateCoordinateComponent_Blueprint_GetState");
static_assert(offsetof(TngStateCoordinateComponent_Blueprint_GetState, SlotName) == 0x000000, "Member 'TngStateCoordinateComponent_Blueprint_GetState::SlotName' has a wrong offset!");
static_assert(offsetof(TngStateCoordinateComponent_Blueprint_GetState, ClassType) == 0x000008, "Member 'TngStateCoordinateComponent_Blueprint_GetState::ClassType' has a wrong offset!");
static_assert(offsetof(TngStateCoordinateComponent_Blueprint_GetState, ReturnValue) == 0x000010, "Member 'TngStateCoordinateComponent_Blueprint_GetState::ReturnValue' has a wrong offset!");

// Function TangoLib.TngStateCoordinateComponent.Blueprint_GetStateFromAllSlot
// 0x0010 (0x0010 - 0x0000)
struct TngStateCoordinateComponent_Blueprint_GetStateFromAllSlot final
{
public:
	TSubclassOf<class UTngStateItem>              ClassType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTngStateItem*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngStateCoordinateComponent_Blueprint_GetStateFromAllSlot) == 0x000008, "Wrong alignment on TngStateCoordinateComponent_Blueprint_GetStateFromAllSlot");
static_assert(sizeof(TngStateCoordinateComponent_Blueprint_GetStateFromAllSlot) == 0x000010, "Wrong size on TngStateCoordinateComponent_Blueprint_GetStateFromAllSlot");
static_assert(offsetof(TngStateCoordinateComponent_Blueprint_GetStateFromAllSlot, ClassType) == 0x000000, "Member 'TngStateCoordinateComponent_Blueprint_GetStateFromAllSlot::ClassType' has a wrong offset!");
static_assert(offsetof(TngStateCoordinateComponent_Blueprint_GetStateFromAllSlot, ReturnValue) == 0x000008, "Member 'TngStateCoordinateComponent_Blueprint_GetStateFromAllSlot::ReturnValue' has a wrong offset!");

// Function TangoLib.TngStateCoordinateComponent.GetCurrentStateName
// 0x0010 (0x0010 - 0x0000)
struct TngStateCoordinateComponent_GetCurrentStateName final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngStateCoordinateComponent_GetCurrentStateName) == 0x000004, "Wrong alignment on TngStateCoordinateComponent_GetCurrentStateName");
static_assert(sizeof(TngStateCoordinateComponent_GetCurrentStateName) == 0x000010, "Wrong size on TngStateCoordinateComponent_GetCurrentStateName");
static_assert(offsetof(TngStateCoordinateComponent_GetCurrentStateName, SlotName) == 0x000000, "Member 'TngStateCoordinateComponent_GetCurrentStateName::SlotName' has a wrong offset!");
static_assert(offsetof(TngStateCoordinateComponent_GetCurrentStateName, ReturnValue) == 0x000008, "Member 'TngStateCoordinateComponent_GetCurrentStateName::ReturnValue' has a wrong offset!");

// Function TangoLib.TngUserWidget.Blueprint_OnInputAxisResult
// 0x0100 (0x0100 - 0x0000)
struct TngUserWidget_Blueprint_OnInputAxisResult final
{
public:
	ETngKeyAxisMap                                Axis;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngKeyState                                  KeyState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnalogInputEvent                      AnalogEvent;                                       // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x0048(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngUserWidget_Blueprint_OnInputAxisResult) == 0x000008, "Wrong alignment on TngUserWidget_Blueprint_OnInputAxisResult");
static_assert(sizeof(TngUserWidget_Blueprint_OnInputAxisResult) == 0x000100, "Wrong size on TngUserWidget_Blueprint_OnInputAxisResult");
static_assert(offsetof(TngUserWidget_Blueprint_OnInputAxisResult, Axis) == 0x000000, "Member 'TngUserWidget_Blueprint_OnInputAxisResult::Axis' has a wrong offset!");
static_assert(offsetof(TngUserWidget_Blueprint_OnInputAxisResult, KeyState) == 0x000001, "Member 'TngUserWidget_Blueprint_OnInputAxisResult::KeyState' has a wrong offset!");
static_assert(offsetof(TngUserWidget_Blueprint_OnInputAxisResult, Value) == 0x000004, "Member 'TngUserWidget_Blueprint_OnInputAxisResult::Value' has a wrong offset!");
static_assert(offsetof(TngUserWidget_Blueprint_OnInputAxisResult, AnalogEvent) == 0x000008, "Member 'TngUserWidget_Blueprint_OnInputAxisResult::AnalogEvent' has a wrong offset!");
static_assert(offsetof(TngUserWidget_Blueprint_OnInputAxisResult, ReturnValue) == 0x000048, "Member 'TngUserWidget_Blueprint_OnInputAxisResult::ReturnValue' has a wrong offset!");

// Function TangoLib.TngUserWidget.Blueprint_OnInputButtonResult
// 0x00F8 (0x00F8 - 0x0000)
struct TngUserWidget_Blueprint_OnInputButtonResult final
{
public:
	ETngKeyButtonMap                              Button;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngKeyState                                  KeyState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKeyEvent                              KeyEvent;                                          // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x0040(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngUserWidget_Blueprint_OnInputButtonResult) == 0x000008, "Wrong alignment on TngUserWidget_Blueprint_OnInputButtonResult");
static_assert(sizeof(TngUserWidget_Blueprint_OnInputButtonResult) == 0x0000F8, "Wrong size on TngUserWidget_Blueprint_OnInputButtonResult");
static_assert(offsetof(TngUserWidget_Blueprint_OnInputButtonResult, Button) == 0x000000, "Member 'TngUserWidget_Blueprint_OnInputButtonResult::Button' has a wrong offset!");
static_assert(offsetof(TngUserWidget_Blueprint_OnInputButtonResult, KeyState) == 0x000001, "Member 'TngUserWidget_Blueprint_OnInputButtonResult::KeyState' has a wrong offset!");
static_assert(offsetof(TngUserWidget_Blueprint_OnInputButtonResult, KeyEvent) == 0x000008, "Member 'TngUserWidget_Blueprint_OnInputButtonResult::KeyEvent' has a wrong offset!");
static_assert(offsetof(TngUserWidget_Blueprint_OnInputButtonResult, ReturnValue) == 0x000040, "Member 'TngUserWidget_Blueprint_OnInputButtonResult::ReturnValue' has a wrong offset!");

// Function TangoLib.TngUserWidget.DisablePlayerInput
// 0x0010 (0x0010 - 0x0000)
struct TngUserWidget_DisablePlayerInput final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngUserWidget_DisablePlayerInput) == 0x000008, "Wrong alignment on TngUserWidget_DisablePlayerInput");
static_assert(sizeof(TngUserWidget_DisablePlayerInput) == 0x000010, "Wrong size on TngUserWidget_DisablePlayerInput");
static_assert(offsetof(TngUserWidget_DisablePlayerInput, PlayerController) == 0x000000, "Member 'TngUserWidget_DisablePlayerInput::PlayerController' has a wrong offset!");
static_assert(offsetof(TngUserWidget_DisablePlayerInput, ReturnValue) == 0x000008, "Member 'TngUserWidget_DisablePlayerInput::ReturnValue' has a wrong offset!");

// Function TangoLib.TngUserWidget.EnablePlayerInput
// 0x0010 (0x0010 - 0x0000)
struct TngUserWidget_EnablePlayerInput final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngUserWidget_EnablePlayerInput) == 0x000008, "Wrong alignment on TngUserWidget_EnablePlayerInput");
static_assert(sizeof(TngUserWidget_EnablePlayerInput) == 0x000010, "Wrong size on TngUserWidget_EnablePlayerInput");
static_assert(offsetof(TngUserWidget_EnablePlayerInput, PlayerController) == 0x000000, "Member 'TngUserWidget_EnablePlayerInput::PlayerController' has a wrong offset!");
static_assert(offsetof(TngUserWidget_EnablePlayerInput, ReturnValue) == 0x000008, "Member 'TngUserWidget_EnablePlayerInput::ReturnValue' has a wrong offset!");

// Function TangoLib.TngUserWidget.SetAudioPauseWithWidget
// 0x0010 (0x0010 - 0x0000)
struct TngUserWidget_SetAudioPauseWithWidget final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPause;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngUserWidget_SetAudioPauseWithWidget) == 0x000008, "Wrong alignment on TngUserWidget_SetAudioPauseWithWidget");
static_assert(sizeof(TngUserWidget_SetAudioPauseWithWidget) == 0x000010, "Wrong size on TngUserWidget_SetAudioPauseWithWidget");
static_assert(offsetof(TngUserWidget_SetAudioPauseWithWidget, PlayerController) == 0x000000, "Member 'TngUserWidget_SetAudioPauseWithWidget::PlayerController' has a wrong offset!");
static_assert(offsetof(TngUserWidget_SetAudioPauseWithWidget, bPause) == 0x000008, "Member 'TngUserWidget_SetAudioPauseWithWidget::bPause' has a wrong offset!");
static_assert(offsetof(TngUserWidget_SetAudioPauseWithWidget, ReturnValue) == 0x000009, "Member 'TngUserWidget_SetAudioPauseWithWidget::ReturnValue' has a wrong offset!");

// Function TangoLib.TngUserWidget.SetGamePauseWithWidget
// 0x0010 (0x0010 - 0x0000)
struct TngUserWidget_SetGamePauseWithWidget final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPause;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngUserWidget_SetGamePauseWithWidget) == 0x000008, "Wrong alignment on TngUserWidget_SetGamePauseWithWidget");
static_assert(sizeof(TngUserWidget_SetGamePauseWithWidget) == 0x000010, "Wrong size on TngUserWidget_SetGamePauseWithWidget");
static_assert(offsetof(TngUserWidget_SetGamePauseWithWidget, PlayerController) == 0x000000, "Member 'TngUserWidget_SetGamePauseWithWidget::PlayerController' has a wrong offset!");
static_assert(offsetof(TngUserWidget_SetGamePauseWithWidget, bPause) == 0x000008, "Member 'TngUserWidget_SetGamePauseWithWidget::bPause' has a wrong offset!");
static_assert(offsetof(TngUserWidget_SetGamePauseWithWidget, ReturnValue) == 0x000009, "Member 'TngUserWidget_SetGamePauseWithWidget::ReturnValue' has a wrong offset!");

// Function TangoLib.TngUserWidget.IsConsoleMachine
// 0x0001 (0x0001 - 0x0000)
struct TngUserWidget_IsConsoleMachine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngUserWidget_IsConsoleMachine) == 0x000001, "Wrong alignment on TngUserWidget_IsConsoleMachine");
static_assert(sizeof(TngUserWidget_IsConsoleMachine) == 0x000001, "Wrong size on TngUserWidget_IsConsoleMachine");
static_assert(offsetof(TngUserWidget_IsConsoleMachine, ReturnValue) == 0x000000, "Member 'TngUserWidget_IsConsoleMachine::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.AddHealth
// 0x0008 (0x0008 - 0x0000)
struct TngVitalComponent_AddHealth final
{
public:
	float                                         AddValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_AddHealth) == 0x000004, "Wrong alignment on TngVitalComponent_AddHealth");
static_assert(sizeof(TngVitalComponent_AddHealth) == 0x000008, "Wrong size on TngVitalComponent_AddHealth");
static_assert(offsetof(TngVitalComponent_AddHealth, AddValue) == 0x000000, "Member 'TngVitalComponent_AddHealth::AddValue' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_AddHealth, ReturnValue) == 0x000004, "Member 'TngVitalComponent_AddHealth::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.AddVitalValue
// 0x000C (0x000C - 0x0000)
struct TngVitalComponent_AddVitalValue final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_AddVitalValue) == 0x000004, "Wrong alignment on TngVitalComponent_AddVitalValue");
static_assert(sizeof(TngVitalComponent_AddVitalValue) == 0x00000C, "Wrong size on TngVitalComponent_AddVitalValue");
static_assert(offsetof(TngVitalComponent_AddVitalValue, Tag) == 0x000000, "Member 'TngVitalComponent_AddVitalValue::Tag' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_AddVitalValue, AddValue) == 0x000008, "Member 'TngVitalComponent_AddVitalValue::AddValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.AddVitalValueByIndex
// 0x000C (0x000C - 0x0000)
struct TngVitalComponent_AddVitalValueByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_AddVitalValueByIndex) == 0x000004, "Wrong alignment on TngVitalComponent_AddVitalValueByIndex");
static_assert(sizeof(TngVitalComponent_AddVitalValueByIndex) == 0x00000C, "Wrong size on TngVitalComponent_AddVitalValueByIndex");
static_assert(offsetof(TngVitalComponent_AddVitalValueByIndex, Index_0) == 0x000000, "Member 'TngVitalComponent_AddVitalValueByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_AddVitalValueByIndex, AddValue) == 0x000004, "Member 'TngVitalComponent_AddVitalValueByIndex::AddValue' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_AddVitalValueByIndex, ReturnValue) == 0x000008, "Member 'TngVitalComponent_AddVitalValueByIndex::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.EnableVitalAutoRecovery
// 0x000C (0x000C - 0x0000)
struct TngVitalComponent_EnableVitalAutoRecovery final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngVitalComponent_EnableVitalAutoRecovery) == 0x000004, "Wrong alignment on TngVitalComponent_EnableVitalAutoRecovery");
static_assert(sizeof(TngVitalComponent_EnableVitalAutoRecovery) == 0x00000C, "Wrong size on TngVitalComponent_EnableVitalAutoRecovery");
static_assert(offsetof(TngVitalComponent_EnableVitalAutoRecovery, Tag) == 0x000000, "Member 'TngVitalComponent_EnableVitalAutoRecovery::Tag' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_EnableVitalAutoRecovery, Enable) == 0x000008, "Member 'TngVitalComponent_EnableVitalAutoRecovery::Enable' has a wrong offset!");

// Function TangoLib.TngVitalComponent.EnableVitalAutoRecoveryByIndex
// 0x0008 (0x0008 - 0x0000)
struct TngVitalComponent_EnableVitalAutoRecoveryByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngVitalComponent_EnableVitalAutoRecoveryByIndex) == 0x000004, "Wrong alignment on TngVitalComponent_EnableVitalAutoRecoveryByIndex");
static_assert(sizeof(TngVitalComponent_EnableVitalAutoRecoveryByIndex) == 0x000008, "Wrong size on TngVitalComponent_EnableVitalAutoRecoveryByIndex");
static_assert(offsetof(TngVitalComponent_EnableVitalAutoRecoveryByIndex, Index_0) == 0x000000, "Member 'TngVitalComponent_EnableVitalAutoRecoveryByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_EnableVitalAutoRecoveryByIndex, Enable) == 0x000004, "Member 'TngVitalComponent_EnableVitalAutoRecoveryByIndex::Enable' has a wrong offset!");

// Function TangoLib.TngVitalComponent.ModifyActualVitalDamage
// 0x0004 (0x0004 - 0x0000)
struct TngVitalComponent_ModifyActualVitalDamage final
{
public:
	float                                         NewDamageAmount;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_ModifyActualVitalDamage) == 0x000004, "Wrong alignment on TngVitalComponent_ModifyActualVitalDamage");
static_assert(sizeof(TngVitalComponent_ModifyActualVitalDamage) == 0x000004, "Wrong size on TngVitalComponent_ModifyActualVitalDamage");
static_assert(offsetof(TngVitalComponent_ModifyActualVitalDamage, NewDamageAmount) == 0x000000, "Member 'TngVitalComponent_ModifyActualVitalDamage::NewDamageAmount' has a wrong offset!");

// Function TangoLib.TngVitalComponent.NotifyAnyTakeDamage
// 0x0028 (0x0028 - 0x0000)
struct TngVitalComponent_NotifyAnyTakeDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_NotifyAnyTakeDamage) == 0x000008, "Wrong alignment on TngVitalComponent_NotifyAnyTakeDamage");
static_assert(sizeof(TngVitalComponent_NotifyAnyTakeDamage) == 0x000028, "Wrong size on TngVitalComponent_NotifyAnyTakeDamage");
static_assert(offsetof(TngVitalComponent_NotifyAnyTakeDamage, DamagedActor) == 0x000000, "Member 'TngVitalComponent_NotifyAnyTakeDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_NotifyAnyTakeDamage, Damage) == 0x000008, "Member 'TngVitalComponent_NotifyAnyTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_NotifyAnyTakeDamage, DamageType) == 0x000010, "Member 'TngVitalComponent_NotifyAnyTakeDamage::DamageType' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_NotifyAnyTakeDamage, InstigatedBy) == 0x000018, "Member 'TngVitalComponent_NotifyAnyTakeDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_NotifyAnyTakeDamage, DamageCauser) == 0x000020, "Member 'TngVitalComponent_NotifyAnyTakeDamage::DamageCauser' has a wrong offset!");

// Function TangoLib.TngVitalComponent.NotifyVitalValueChanged
// 0x0018 (0x0018 - 0x0000)
struct TngVitalComponent_NotifyVitalValueChanged final
{
public:
	class UTngVitalElementBase*                   VitalElementPtr;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrevValue;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueRate;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngVitalChangedReason                        Reason;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngVitalComponent_NotifyVitalValueChanged) == 0x000008, "Wrong alignment on TngVitalComponent_NotifyVitalValueChanged");
static_assert(sizeof(TngVitalComponent_NotifyVitalValueChanged) == 0x000018, "Wrong size on TngVitalComponent_NotifyVitalValueChanged");
static_assert(offsetof(TngVitalComponent_NotifyVitalValueChanged, VitalElementPtr) == 0x000000, "Member 'TngVitalComponent_NotifyVitalValueChanged::VitalElementPtr' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_NotifyVitalValueChanged, Value) == 0x000008, "Member 'TngVitalComponent_NotifyVitalValueChanged::Value' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_NotifyVitalValueChanged, PrevValue) == 0x00000C, "Member 'TngVitalComponent_NotifyVitalValueChanged::PrevValue' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_NotifyVitalValueChanged, ValueRate) == 0x000010, "Member 'TngVitalComponent_NotifyVitalValueChanged::ValueRate' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_NotifyVitalValueChanged, Reason) == 0x000014, "Member 'TngVitalComponent_NotifyVitalValueChanged::Reason' has a wrong offset!");

// Function TangoLib.TngVitalComponent.ProtectVitalValue
// 0x000C (0x000C - 0x0000)
struct TngVitalComponent_ProtectVitalValue final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngVitalComponent_ProtectVitalValue) == 0x000004, "Wrong alignment on TngVitalComponent_ProtectVitalValue");
static_assert(sizeof(TngVitalComponent_ProtectVitalValue) == 0x00000C, "Wrong size on TngVitalComponent_ProtectVitalValue");
static_assert(offsetof(TngVitalComponent_ProtectVitalValue, Tag) == 0x000000, "Member 'TngVitalComponent_ProtectVitalValue::Tag' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_ProtectVitalValue, Enable) == 0x000008, "Member 'TngVitalComponent_ProtectVitalValue::Enable' has a wrong offset!");

// Function TangoLib.TngVitalComponent.ProtectVitalValueByIndex
// 0x0008 (0x0008 - 0x0000)
struct TngVitalComponent_ProtectVitalValueByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngVitalComponent_ProtectVitalValueByIndex) == 0x000004, "Wrong alignment on TngVitalComponent_ProtectVitalValueByIndex");
static_assert(sizeof(TngVitalComponent_ProtectVitalValueByIndex) == 0x000008, "Wrong size on TngVitalComponent_ProtectVitalValueByIndex");
static_assert(offsetof(TngVitalComponent_ProtectVitalValueByIndex, Index_0) == 0x000000, "Member 'TngVitalComponent_ProtectVitalValueByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_ProtectVitalValueByIndex, Enable) == 0x000004, "Member 'TngVitalComponent_ProtectVitalValueByIndex::Enable' has a wrong offset!");

// Function TangoLib.TngVitalComponent.ResetHealth
// 0x0004 (0x0004 - 0x0000)
struct TngVitalComponent_ResetHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_ResetHealth) == 0x000004, "Wrong alignment on TngVitalComponent_ResetHealth");
static_assert(sizeof(TngVitalComponent_ResetHealth) == 0x000004, "Wrong size on TngVitalComponent_ResetHealth");
static_assert(offsetof(TngVitalComponent_ResetHealth, ReturnValue) == 0x000000, "Member 'TngVitalComponent_ResetHealth::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.ResetVitalValue
// 0x000C (0x000C - 0x0000)
struct TngVitalComponent_ResetVitalValue final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_ResetVitalValue) == 0x000004, "Wrong alignment on TngVitalComponent_ResetVitalValue");
static_assert(sizeof(TngVitalComponent_ResetVitalValue) == 0x00000C, "Wrong size on TngVitalComponent_ResetVitalValue");
static_assert(offsetof(TngVitalComponent_ResetVitalValue, Tag) == 0x000000, "Member 'TngVitalComponent_ResetVitalValue::Tag' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_ResetVitalValue, ReturnValue) == 0x000008, "Member 'TngVitalComponent_ResetVitalValue::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.ResetVitalValueByIndex
// 0x0008 (0x0008 - 0x0000)
struct TngVitalComponent_ResetVitalValueByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_ResetVitalValueByIndex) == 0x000004, "Wrong alignment on TngVitalComponent_ResetVitalValueByIndex");
static_assert(sizeof(TngVitalComponent_ResetVitalValueByIndex) == 0x000008, "Wrong size on TngVitalComponent_ResetVitalValueByIndex");
static_assert(offsetof(TngVitalComponent_ResetVitalValueByIndex, Index_0) == 0x000000, "Member 'TngVitalComponent_ResetVitalValueByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_ResetVitalValueByIndex, ReturnValue) == 0x000004, "Member 'TngVitalComponent_ResetVitalValueByIndex::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.SetHealth
// 0x0008 (0x0008 - 0x0000)
struct TngVitalComponent_SetHealth final
{
public:
	float                                         NewHealth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngVitalComponent_SetHealth) == 0x000004, "Wrong alignment on TngVitalComponent_SetHealth");
static_assert(sizeof(TngVitalComponent_SetHealth) == 0x000008, "Wrong size on TngVitalComponent_SetHealth");
static_assert(offsetof(TngVitalComponent_SetHealth, NewHealth) == 0x000000, "Member 'TngVitalComponent_SetHealth::NewHealth' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_SetHealth, ReturnValue) == 0x000004, "Member 'TngVitalComponent_SetHealth::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.SetMaxHealth
// 0x0008 (0x0008 - 0x0000)
struct TngVitalComponent_SetMaxHealth final
{
public:
	float                                         NewMaxHealth;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngVitalComponent_SetMaxHealth) == 0x000004, "Wrong alignment on TngVitalComponent_SetMaxHealth");
static_assert(sizeof(TngVitalComponent_SetMaxHealth) == 0x000008, "Wrong size on TngVitalComponent_SetMaxHealth");
static_assert(offsetof(TngVitalComponent_SetMaxHealth, NewMaxHealth) == 0x000000, "Member 'TngVitalComponent_SetMaxHealth::NewMaxHealth' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_SetMaxHealth, ReturnValue) == 0x000004, "Member 'TngVitalComponent_SetMaxHealth::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.SetMaxVitalValue
// 0x0010 (0x0010 - 0x0000)
struct TngVitalComponent_SetMaxVitalValue final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewMaxHealth;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngVitalComponent_SetMaxVitalValue) == 0x000004, "Wrong alignment on TngVitalComponent_SetMaxVitalValue");
static_assert(sizeof(TngVitalComponent_SetMaxVitalValue) == 0x000010, "Wrong size on TngVitalComponent_SetMaxVitalValue");
static_assert(offsetof(TngVitalComponent_SetMaxVitalValue, Tag) == 0x000000, "Member 'TngVitalComponent_SetMaxVitalValue::Tag' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_SetMaxVitalValue, NewMaxHealth) == 0x000008, "Member 'TngVitalComponent_SetMaxVitalValue::NewMaxHealth' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_SetMaxVitalValue, ReturnValue) == 0x00000C, "Member 'TngVitalComponent_SetMaxVitalValue::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.SetMaxVitalValueByIndex
// 0x000C (0x000C - 0x0000)
struct TngVitalComponent_SetMaxVitalValueByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewMaxValue;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngVitalComponent_SetMaxVitalValueByIndex) == 0x000004, "Wrong alignment on TngVitalComponent_SetMaxVitalValueByIndex");
static_assert(sizeof(TngVitalComponent_SetMaxVitalValueByIndex) == 0x00000C, "Wrong size on TngVitalComponent_SetMaxVitalValueByIndex");
static_assert(offsetof(TngVitalComponent_SetMaxVitalValueByIndex, Index_0) == 0x000000, "Member 'TngVitalComponent_SetMaxVitalValueByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_SetMaxVitalValueByIndex, NewMaxValue) == 0x000004, "Member 'TngVitalComponent_SetMaxVitalValueByIndex::NewMaxValue' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_SetMaxVitalValueByIndex, ReturnValue) == 0x000008, "Member 'TngVitalComponent_SetMaxVitalValueByIndex::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.SetVitalAutoRecovery
// 0x000C (0x000C - 0x0000)
struct TngVitalComponent_SetVitalAutoRecovery final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewAutoRecoveryPerSec;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_SetVitalAutoRecovery) == 0x000004, "Wrong alignment on TngVitalComponent_SetVitalAutoRecovery");
static_assert(sizeof(TngVitalComponent_SetVitalAutoRecovery) == 0x00000C, "Wrong size on TngVitalComponent_SetVitalAutoRecovery");
static_assert(offsetof(TngVitalComponent_SetVitalAutoRecovery, Tag) == 0x000000, "Member 'TngVitalComponent_SetVitalAutoRecovery::Tag' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_SetVitalAutoRecovery, NewAutoRecoveryPerSec) == 0x000008, "Member 'TngVitalComponent_SetVitalAutoRecovery::NewAutoRecoveryPerSec' has a wrong offset!");

// Function TangoLib.TngVitalComponent.SetVitalAutoRecoveryByIndex
// 0x0008 (0x0008 - 0x0000)
struct TngVitalComponent_SetVitalAutoRecoveryByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewAutoRecoveryPerSec;                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_SetVitalAutoRecoveryByIndex) == 0x000004, "Wrong alignment on TngVitalComponent_SetVitalAutoRecoveryByIndex");
static_assert(sizeof(TngVitalComponent_SetVitalAutoRecoveryByIndex) == 0x000008, "Wrong size on TngVitalComponent_SetVitalAutoRecoveryByIndex");
static_assert(offsetof(TngVitalComponent_SetVitalAutoRecoveryByIndex, Index_0) == 0x000000, "Member 'TngVitalComponent_SetVitalAutoRecoveryByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_SetVitalAutoRecoveryByIndex, NewAutoRecoveryPerSec) == 0x000004, "Member 'TngVitalComponent_SetVitalAutoRecoveryByIndex::NewAutoRecoveryPerSec' has a wrong offset!");

// Function TangoLib.TngVitalComponent.SetVitalValue
// 0x0010 (0x0010 - 0x0000)
struct TngVitalComponent_SetVitalValue final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewHealth;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngVitalComponent_SetVitalValue) == 0x000004, "Wrong alignment on TngVitalComponent_SetVitalValue");
static_assert(sizeof(TngVitalComponent_SetVitalValue) == 0x000010, "Wrong size on TngVitalComponent_SetVitalValue");
static_assert(offsetof(TngVitalComponent_SetVitalValue, Tag) == 0x000000, "Member 'TngVitalComponent_SetVitalValue::Tag' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_SetVitalValue, NewHealth) == 0x000008, "Member 'TngVitalComponent_SetVitalValue::NewHealth' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_SetVitalValue, ReturnValue) == 0x00000C, "Member 'TngVitalComponent_SetVitalValue::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.SetVitalValueByIndex
// 0x000C (0x000C - 0x0000)
struct TngVitalComponent_SetVitalValueByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngVitalComponent_SetVitalValueByIndex) == 0x000004, "Wrong alignment on TngVitalComponent_SetVitalValueByIndex");
static_assert(sizeof(TngVitalComponent_SetVitalValueByIndex) == 0x00000C, "Wrong size on TngVitalComponent_SetVitalValueByIndex");
static_assert(offsetof(TngVitalComponent_SetVitalValueByIndex, Index_0) == 0x000000, "Member 'TngVitalComponent_SetVitalValueByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_SetVitalValueByIndex, NewValue) == 0x000004, "Member 'TngVitalComponent_SetVitalValueByIndex::NewValue' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_SetVitalValueByIndex, ReturnValue) == 0x000008, "Member 'TngVitalComponent_SetVitalValueByIndex::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.GetHealth
// 0x0004 (0x0004 - 0x0000)
struct TngVitalComponent_GetHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_GetHealth) == 0x000004, "Wrong alignment on TngVitalComponent_GetHealth");
static_assert(sizeof(TngVitalComponent_GetHealth) == 0x000004, "Wrong size on TngVitalComponent_GetHealth");
static_assert(offsetof(TngVitalComponent_GetHealth, ReturnValue) == 0x000000, "Member 'TngVitalComponent_GetHealth::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.GetHealthRate
// 0x0004 (0x0004 - 0x0000)
struct TngVitalComponent_GetHealthRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_GetHealthRate) == 0x000004, "Wrong alignment on TngVitalComponent_GetHealthRate");
static_assert(sizeof(TngVitalComponent_GetHealthRate) == 0x000004, "Wrong size on TngVitalComponent_GetHealthRate");
static_assert(offsetof(TngVitalComponent_GetHealthRate, ReturnValue) == 0x000000, "Member 'TngVitalComponent_GetHealthRate::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.GetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct TngVitalComponent_GetMaxHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_GetMaxHealth) == 0x000004, "Wrong alignment on TngVitalComponent_GetMaxHealth");
static_assert(sizeof(TngVitalComponent_GetMaxHealth) == 0x000004, "Wrong size on TngVitalComponent_GetMaxHealth");
static_assert(offsetof(TngVitalComponent_GetMaxHealth, ReturnValue) == 0x000000, "Member 'TngVitalComponent_GetMaxHealth::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.GetMaxVitalValue
// 0x000C (0x000C - 0x0000)
struct TngVitalComponent_GetMaxVitalValue final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_GetMaxVitalValue) == 0x000004, "Wrong alignment on TngVitalComponent_GetMaxVitalValue");
static_assert(sizeof(TngVitalComponent_GetMaxVitalValue) == 0x00000C, "Wrong size on TngVitalComponent_GetMaxVitalValue");
static_assert(offsetof(TngVitalComponent_GetMaxVitalValue, Tag) == 0x000000, "Member 'TngVitalComponent_GetMaxVitalValue::Tag' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_GetMaxVitalValue, ReturnValue) == 0x000008, "Member 'TngVitalComponent_GetMaxVitalValue::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.GetMaxVitalValueByIndex
// 0x0008 (0x0008 - 0x0000)
struct TngVitalComponent_GetMaxVitalValueByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_GetMaxVitalValueByIndex) == 0x000004, "Wrong alignment on TngVitalComponent_GetMaxVitalValueByIndex");
static_assert(sizeof(TngVitalComponent_GetMaxVitalValueByIndex) == 0x000008, "Wrong size on TngVitalComponent_GetMaxVitalValueByIndex");
static_assert(offsetof(TngVitalComponent_GetMaxVitalValueByIndex, Index_0) == 0x000000, "Member 'TngVitalComponent_GetMaxVitalValueByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_GetMaxVitalValueByIndex, ReturnValue) == 0x000004, "Member 'TngVitalComponent_GetMaxVitalValueByIndex::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.GetVitalElement
// 0x0010 (0x0010 - 0x0000)
struct TngVitalComponent_GetVitalElement final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTngVitalElementBase*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_GetVitalElement) == 0x000008, "Wrong alignment on TngVitalComponent_GetVitalElement");
static_assert(sizeof(TngVitalComponent_GetVitalElement) == 0x000010, "Wrong size on TngVitalComponent_GetVitalElement");
static_assert(offsetof(TngVitalComponent_GetVitalElement, Tag) == 0x000000, "Member 'TngVitalComponent_GetVitalElement::Tag' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_GetVitalElement, ReturnValue) == 0x000008, "Member 'TngVitalComponent_GetVitalElement::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.GetVitalElementByIndex
// 0x0010 (0x0010 - 0x0000)
struct TngVitalComponent_GetVitalElementByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTngVitalElementBase*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_GetVitalElementByIndex) == 0x000008, "Wrong alignment on TngVitalComponent_GetVitalElementByIndex");
static_assert(sizeof(TngVitalComponent_GetVitalElementByIndex) == 0x000010, "Wrong size on TngVitalComponent_GetVitalElementByIndex");
static_assert(offsetof(TngVitalComponent_GetVitalElementByIndex, Index_0) == 0x000000, "Member 'TngVitalComponent_GetVitalElementByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_GetVitalElementByIndex, ReturnValue) == 0x000008, "Member 'TngVitalComponent_GetVitalElementByIndex::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.GetVitalIndexByTag
// 0x000C (0x000C - 0x0000)
struct TngVitalComponent_GetVitalIndexByTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_GetVitalIndexByTag) == 0x000004, "Wrong alignment on TngVitalComponent_GetVitalIndexByTag");
static_assert(sizeof(TngVitalComponent_GetVitalIndexByTag) == 0x00000C, "Wrong size on TngVitalComponent_GetVitalIndexByTag");
static_assert(offsetof(TngVitalComponent_GetVitalIndexByTag, Tag) == 0x000000, "Member 'TngVitalComponent_GetVitalIndexByTag::Tag' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_GetVitalIndexByTag, ReturnValue) == 0x000008, "Member 'TngVitalComponent_GetVitalIndexByTag::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.GetVitalRate
// 0x000C (0x000C - 0x0000)
struct TngVitalComponent_GetVitalRate final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_GetVitalRate) == 0x000004, "Wrong alignment on TngVitalComponent_GetVitalRate");
static_assert(sizeof(TngVitalComponent_GetVitalRate) == 0x00000C, "Wrong size on TngVitalComponent_GetVitalRate");
static_assert(offsetof(TngVitalComponent_GetVitalRate, Tag) == 0x000000, "Member 'TngVitalComponent_GetVitalRate::Tag' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_GetVitalRate, ReturnValue) == 0x000008, "Member 'TngVitalComponent_GetVitalRate::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.GetVitalRateByIndex
// 0x0008 (0x0008 - 0x0000)
struct TngVitalComponent_GetVitalRateByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_GetVitalRateByIndex) == 0x000004, "Wrong alignment on TngVitalComponent_GetVitalRateByIndex");
static_assert(sizeof(TngVitalComponent_GetVitalRateByIndex) == 0x000008, "Wrong size on TngVitalComponent_GetVitalRateByIndex");
static_assert(offsetof(TngVitalComponent_GetVitalRateByIndex, Index_0) == 0x000000, "Member 'TngVitalComponent_GetVitalRateByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_GetVitalRateByIndex, ReturnValue) == 0x000004, "Member 'TngVitalComponent_GetVitalRateByIndex::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.GetVitalValue
// 0x000C (0x000C - 0x0000)
struct TngVitalComponent_GetVitalValue final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_GetVitalValue) == 0x000004, "Wrong alignment on TngVitalComponent_GetVitalValue");
static_assert(sizeof(TngVitalComponent_GetVitalValue) == 0x00000C, "Wrong size on TngVitalComponent_GetVitalValue");
static_assert(offsetof(TngVitalComponent_GetVitalValue, Tag) == 0x000000, "Member 'TngVitalComponent_GetVitalValue::Tag' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_GetVitalValue, ReturnValue) == 0x000008, "Member 'TngVitalComponent_GetVitalValue::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.GetVitalValueByIndex
// 0x0008 (0x0008 - 0x0000)
struct TngVitalComponent_GetVitalValueByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_GetVitalValueByIndex) == 0x000004, "Wrong alignment on TngVitalComponent_GetVitalValueByIndex");
static_assert(sizeof(TngVitalComponent_GetVitalValueByIndex) == 0x000008, "Wrong size on TngVitalComponent_GetVitalValueByIndex");
static_assert(offsetof(TngVitalComponent_GetVitalValueByIndex, Index_0) == 0x000000, "Member 'TngVitalComponent_GetVitalValueByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_GetVitalValueByIndex, ReturnValue) == 0x000004, "Member 'TngVitalComponent_GetVitalValueByIndex::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.IsDead
// 0x0001 (0x0001 - 0x0000)
struct TngVitalComponent_IsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalComponent_IsDead) == 0x000001, "Wrong alignment on TngVitalComponent_IsDead");
static_assert(sizeof(TngVitalComponent_IsDead) == 0x000001, "Wrong size on TngVitalComponent_IsDead");
static_assert(offsetof(TngVitalComponent_IsDead, ReturnValue) == 0x000000, "Member 'TngVitalComponent_IsDead::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.IsProtection
// 0x000C (0x000C - 0x0000)
struct TngVitalComponent_IsProtection final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngVitalComponent_IsProtection) == 0x000004, "Wrong alignment on TngVitalComponent_IsProtection");
static_assert(sizeof(TngVitalComponent_IsProtection) == 0x00000C, "Wrong size on TngVitalComponent_IsProtection");
static_assert(offsetof(TngVitalComponent_IsProtection, Tag) == 0x000000, "Member 'TngVitalComponent_IsProtection::Tag' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_IsProtection, ReturnValue) == 0x000008, "Member 'TngVitalComponent_IsProtection::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalComponent.IsProtectionByIndex
// 0x0008 (0x0008 - 0x0000)
struct TngVitalComponent_IsProtectionByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngVitalComponent_IsProtectionByIndex) == 0x000004, "Wrong alignment on TngVitalComponent_IsProtectionByIndex");
static_assert(sizeof(TngVitalComponent_IsProtectionByIndex) == 0x000008, "Wrong size on TngVitalComponent_IsProtectionByIndex");
static_assert(offsetof(TngVitalComponent_IsProtectionByIndex, Index_0) == 0x000000, "Member 'TngVitalComponent_IsProtectionByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(TngVitalComponent_IsProtectionByIndex, ReturnValue) == 0x000004, "Member 'TngVitalComponent_IsProtectionByIndex::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalElementBase.AddVitalValue
// 0x000C (0x000C - 0x0000)
struct TngVitalElementBase_AddVitalValue final
{
public:
	float                                         AddValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngVitalChangedReason                        Reason;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalElementBase_AddVitalValue) == 0x000004, "Wrong alignment on TngVitalElementBase_AddVitalValue");
static_assert(sizeof(TngVitalElementBase_AddVitalValue) == 0x00000C, "Wrong size on TngVitalElementBase_AddVitalValue");
static_assert(offsetof(TngVitalElementBase_AddVitalValue, AddValue) == 0x000000, "Member 'TngVitalElementBase_AddVitalValue::AddValue' has a wrong offset!");
static_assert(offsetof(TngVitalElementBase_AddVitalValue, Reason) == 0x000004, "Member 'TngVitalElementBase_AddVitalValue::Reason' has a wrong offset!");
static_assert(offsetof(TngVitalElementBase_AddVitalValue, ReturnValue) == 0x000008, "Member 'TngVitalElementBase_AddVitalValue::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalElementBase.BlueprintNative_CalcDamageAmount
// 0x000C (0x000C - 0x0000)
struct TngVitalElementBase_BlueprintNative_CalcDamageAmount final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRecovery;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalElementBase_BlueprintNative_CalcDamageAmount) == 0x000004, "Wrong alignment on TngVitalElementBase_BlueprintNative_CalcDamageAmount");
static_assert(sizeof(TngVitalElementBase_BlueprintNative_CalcDamageAmount) == 0x00000C, "Wrong size on TngVitalElementBase_BlueprintNative_CalcDamageAmount");
static_assert(offsetof(TngVitalElementBase_BlueprintNative_CalcDamageAmount, Damage) == 0x000000, "Member 'TngVitalElementBase_BlueprintNative_CalcDamageAmount::Damage' has a wrong offset!");
static_assert(offsetof(TngVitalElementBase_BlueprintNative_CalcDamageAmount, IsRecovery) == 0x000004, "Member 'TngVitalElementBase_BlueprintNative_CalcDamageAmount::IsRecovery' has a wrong offset!");
static_assert(offsetof(TngVitalElementBase_BlueprintNative_CalcDamageAmount, ReturnValue) == 0x000008, "Member 'TngVitalElementBase_BlueprintNative_CalcDamageAmount::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalElementBase.BlueprintNative_CanActivate
// 0x0001 (0x0001 - 0x0000)
struct TngVitalElementBase_BlueprintNative_CanActivate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalElementBase_BlueprintNative_CanActivate) == 0x000001, "Wrong alignment on TngVitalElementBase_BlueprintNative_CanActivate");
static_assert(sizeof(TngVitalElementBase_BlueprintNative_CanActivate) == 0x000001, "Wrong size on TngVitalElementBase_BlueprintNative_CanActivate");
static_assert(offsetof(TngVitalElementBase_BlueprintNative_CanActivate, ReturnValue) == 0x000000, "Member 'TngVitalElementBase_BlueprintNative_CanActivate::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalElementBase.BlueprintNative_GetResetVitalValue
// 0x0004 (0x0004 - 0x0000)
struct TngVitalElementBase_BlueprintNative_GetResetVitalValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalElementBase_BlueprintNative_GetResetVitalValue) == 0x000004, "Wrong alignment on TngVitalElementBase_BlueprintNative_GetResetVitalValue");
static_assert(sizeof(TngVitalElementBase_BlueprintNative_GetResetVitalValue) == 0x000004, "Wrong size on TngVitalElementBase_BlueprintNative_GetResetVitalValue");
static_assert(offsetof(TngVitalElementBase_BlueprintNative_GetResetVitalValue, ReturnValue) == 0x000000, "Member 'TngVitalElementBase_BlueprintNative_GetResetVitalValue::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalElementBase.EnableVitalAutoRecovery
// 0x0001 (0x0001 - 0x0000)
struct TngVitalElementBase_EnableVitalAutoRecovery final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalElementBase_EnableVitalAutoRecovery) == 0x000001, "Wrong alignment on TngVitalElementBase_EnableVitalAutoRecovery");
static_assert(sizeof(TngVitalElementBase_EnableVitalAutoRecovery) == 0x000001, "Wrong size on TngVitalElementBase_EnableVitalAutoRecovery");
static_assert(offsetof(TngVitalElementBase_EnableVitalAutoRecovery, Enable) == 0x000000, "Member 'TngVitalElementBase_EnableVitalAutoRecovery::Enable' has a wrong offset!");

// Function TangoLib.TngVitalElementBase.MatchDamageVitalTag
// 0x0028 (0x0028 - 0x0000)
struct TngVitalElementBase_MatchDamageVitalTag final
{
public:
	struct FGameplayTagContainer                  DestTagContainer;                                  // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngVitalElementBase_MatchDamageVitalTag) == 0x000008, "Wrong alignment on TngVitalElementBase_MatchDamageVitalTag");
static_assert(sizeof(TngVitalElementBase_MatchDamageVitalTag) == 0x000028, "Wrong size on TngVitalElementBase_MatchDamageVitalTag");
static_assert(offsetof(TngVitalElementBase_MatchDamageVitalTag, DestTagContainer) == 0x000000, "Member 'TngVitalElementBase_MatchDamageVitalTag::DestTagContainer' has a wrong offset!");
static_assert(offsetof(TngVitalElementBase_MatchDamageVitalTag, ReturnValue) == 0x000020, "Member 'TngVitalElementBase_MatchDamageVitalTag::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalElementBase.MatchVitalTag
// 0x000C (0x000C - 0x0000)
struct TngVitalElementBase_MatchVitalTag final
{
public:
	struct FGameplayTag                           TestTag;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngVitalElementBase_MatchVitalTag) == 0x000004, "Wrong alignment on TngVitalElementBase_MatchVitalTag");
static_assert(sizeof(TngVitalElementBase_MatchVitalTag) == 0x00000C, "Wrong size on TngVitalElementBase_MatchVitalTag");
static_assert(offsetof(TngVitalElementBase_MatchVitalTag, TestTag) == 0x000000, "Member 'TngVitalElementBase_MatchVitalTag::TestTag' has a wrong offset!");
static_assert(offsetof(TngVitalElementBase_MatchVitalTag, ReturnValue) == 0x000008, "Member 'TngVitalElementBase_MatchVitalTag::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalElementBase.ProtectVitalValue
// 0x0001 (0x0001 - 0x0000)
struct TngVitalElementBase_ProtectVitalValue final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalElementBase_ProtectVitalValue) == 0x000001, "Wrong alignment on TngVitalElementBase_ProtectVitalValue");
static_assert(sizeof(TngVitalElementBase_ProtectVitalValue) == 0x000001, "Wrong size on TngVitalElementBase_ProtectVitalValue");
static_assert(offsetof(TngVitalElementBase_ProtectVitalValue, Enable) == 0x000000, "Member 'TngVitalElementBase_ProtectVitalValue::Enable' has a wrong offset!");

// Function TangoLib.TngVitalElementBase.ResetVitalValue
// 0x0004 (0x0004 - 0x0000)
struct TngVitalElementBase_ResetVitalValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalElementBase_ResetVitalValue) == 0x000004, "Wrong alignment on TngVitalElementBase_ResetVitalValue");
static_assert(sizeof(TngVitalElementBase_ResetVitalValue) == 0x000004, "Wrong size on TngVitalElementBase_ResetVitalValue");
static_assert(offsetof(TngVitalElementBase_ResetVitalValue, ReturnValue) == 0x000000, "Member 'TngVitalElementBase_ResetVitalValue::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalElementBase.SetMaxVitalValue
// 0x0008 (0x0008 - 0x0000)
struct TngVitalElementBase_SetMaxVitalValue final
{
public:
	float                                         NewMaxValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngVitalChangedReason                        Reason;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngVitalElementBase_SetMaxVitalValue) == 0x000004, "Wrong alignment on TngVitalElementBase_SetMaxVitalValue");
static_assert(sizeof(TngVitalElementBase_SetMaxVitalValue) == 0x000008, "Wrong size on TngVitalElementBase_SetMaxVitalValue");
static_assert(offsetof(TngVitalElementBase_SetMaxVitalValue, NewMaxValue) == 0x000000, "Member 'TngVitalElementBase_SetMaxVitalValue::NewMaxValue' has a wrong offset!");
static_assert(offsetof(TngVitalElementBase_SetMaxVitalValue, Reason) == 0x000004, "Member 'TngVitalElementBase_SetMaxVitalValue::Reason' has a wrong offset!");
static_assert(offsetof(TngVitalElementBase_SetMaxVitalValue, ReturnValue) == 0x000005, "Member 'TngVitalElementBase_SetMaxVitalValue::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalElementBase.SetVitalAutoRecovery
// 0x0004 (0x0004 - 0x0000)
struct TngVitalElementBase_SetVitalAutoRecovery final
{
public:
	float                                         NewAutoRecoveryPerSec;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalElementBase_SetVitalAutoRecovery) == 0x000004, "Wrong alignment on TngVitalElementBase_SetVitalAutoRecovery");
static_assert(sizeof(TngVitalElementBase_SetVitalAutoRecovery) == 0x000004, "Wrong size on TngVitalElementBase_SetVitalAutoRecovery");
static_assert(offsetof(TngVitalElementBase_SetVitalAutoRecovery, NewAutoRecoveryPerSec) == 0x000000, "Member 'TngVitalElementBase_SetVitalAutoRecovery::NewAutoRecoveryPerSec' has a wrong offset!");

// Function TangoLib.TngVitalElementBase.SetVitalValue
// 0x0008 (0x0008 - 0x0000)
struct TngVitalElementBase_SetVitalValue final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngVitalChangedReason                        Reason;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngVitalElementBase_SetVitalValue) == 0x000004, "Wrong alignment on TngVitalElementBase_SetVitalValue");
static_assert(sizeof(TngVitalElementBase_SetVitalValue) == 0x000008, "Wrong size on TngVitalElementBase_SetVitalValue");
static_assert(offsetof(TngVitalElementBase_SetVitalValue, NewValue) == 0x000000, "Member 'TngVitalElementBase_SetVitalValue::NewValue' has a wrong offset!");
static_assert(offsetof(TngVitalElementBase_SetVitalValue, Reason) == 0x000004, "Member 'TngVitalElementBase_SetVitalValue::Reason' has a wrong offset!");
static_assert(offsetof(TngVitalElementBase_SetVitalValue, ReturnValue) == 0x000005, "Member 'TngVitalElementBase_SetVitalValue::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalElementBase.ShouldDeathAtZero
// 0x0001 (0x0001 - 0x0000)
struct TngVitalElementBase_ShouldDeathAtZero final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalElementBase_ShouldDeathAtZero) == 0x000001, "Wrong alignment on TngVitalElementBase_ShouldDeathAtZero");
static_assert(sizeof(TngVitalElementBase_ShouldDeathAtZero) == 0x000001, "Wrong size on TngVitalElementBase_ShouldDeathAtZero");
static_assert(offsetof(TngVitalElementBase_ShouldDeathAtZero, ReturnValue) == 0x000000, "Member 'TngVitalElementBase_ShouldDeathAtZero::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalElementBase.GetDamageVitalTag
// 0x0008 (0x0008 - 0x0000)
struct TngVitalElementBase_GetDamageVitalTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalElementBase_GetDamageVitalTag) == 0x000004, "Wrong alignment on TngVitalElementBase_GetDamageVitalTag");
static_assert(sizeof(TngVitalElementBase_GetDamageVitalTag) == 0x000008, "Wrong size on TngVitalElementBase_GetDamageVitalTag");
static_assert(offsetof(TngVitalElementBase_GetDamageVitalTag, ReturnValue) == 0x000000, "Member 'TngVitalElementBase_GetDamageVitalTag::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalElementBase.GetMaxVitalValue
// 0x0004 (0x0004 - 0x0000)
struct TngVitalElementBase_GetMaxVitalValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalElementBase_GetMaxVitalValue) == 0x000004, "Wrong alignment on TngVitalElementBase_GetMaxVitalValue");
static_assert(sizeof(TngVitalElementBase_GetMaxVitalValue) == 0x000004, "Wrong size on TngVitalElementBase_GetMaxVitalValue");
static_assert(offsetof(TngVitalElementBase_GetMaxVitalValue, ReturnValue) == 0x000000, "Member 'TngVitalElementBase_GetMaxVitalValue::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalElementBase.GetVitalRate
// 0x0004 (0x0004 - 0x0000)
struct TngVitalElementBase_GetVitalRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalElementBase_GetVitalRate) == 0x000004, "Wrong alignment on TngVitalElementBase_GetVitalRate");
static_assert(sizeof(TngVitalElementBase_GetVitalRate) == 0x000004, "Wrong size on TngVitalElementBase_GetVitalRate");
static_assert(offsetof(TngVitalElementBase_GetVitalRate, ReturnValue) == 0x000000, "Member 'TngVitalElementBase_GetVitalRate::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalElementBase.GetVitalTag
// 0x0008 (0x0008 - 0x0000)
struct TngVitalElementBase_GetVitalTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalElementBase_GetVitalTag) == 0x000004, "Wrong alignment on TngVitalElementBase_GetVitalTag");
static_assert(sizeof(TngVitalElementBase_GetVitalTag) == 0x000008, "Wrong size on TngVitalElementBase_GetVitalTag");
static_assert(offsetof(TngVitalElementBase_GetVitalTag, ReturnValue) == 0x000000, "Member 'TngVitalElementBase_GetVitalTag::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalElementBase.GetVitalValue
// 0x0004 (0x0004 - 0x0000)
struct TngVitalElementBase_GetVitalValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalElementBase_GetVitalValue) == 0x000004, "Wrong alignment on TngVitalElementBase_GetVitalValue");
static_assert(sizeof(TngVitalElementBase_GetVitalValue) == 0x000004, "Wrong size on TngVitalElementBase_GetVitalValue");
static_assert(offsetof(TngVitalElementBase_GetVitalValue, ReturnValue) == 0x000000, "Member 'TngVitalElementBase_GetVitalValue::ReturnValue' has a wrong offset!");

// Function TangoLib.TngVitalElementBase.IsProtection
// 0x0001 (0x0001 - 0x0000)
struct TngVitalElementBase_IsProtection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngVitalElementBase_IsProtection) == 0x000001, "Wrong alignment on TngVitalElementBase_IsProtection");
static_assert(sizeof(TngVitalElementBase_IsProtection) == 0x000001, "Wrong size on TngVitalElementBase_IsProtection");
static_assert(offsetof(TngVitalElementBase_IsProtection, ReturnValue) == 0x000000, "Member 'TngVitalElementBase_IsProtection::ReturnValue' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.DrawWidgetToRenderTarget
// 0x0028 (0x0028 - 0x0000)
struct TngWidgetFunction_DrawWidgetToRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseGamma;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OffsetPos;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngWidgetFunction_DrawWidgetToRenderTarget) == 0x000008, "Wrong alignment on TngWidgetFunction_DrawWidgetToRenderTarget");
static_assert(sizeof(TngWidgetFunction_DrawWidgetToRenderTarget) == 0x000028, "Wrong size on TngWidgetFunction_DrawWidgetToRenderTarget");
static_assert(offsetof(TngWidgetFunction_DrawWidgetToRenderTarget, Target) == 0x000000, "Member 'TngWidgetFunction_DrawWidgetToRenderTarget::Target' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_DrawWidgetToRenderTarget, Widget) == 0x000008, "Member 'TngWidgetFunction_DrawWidgetToRenderTarget::Widget' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_DrawWidgetToRenderTarget, Size) == 0x000010, "Member 'TngWidgetFunction_DrawWidgetToRenderTarget::Size' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_DrawWidgetToRenderTarget, UseGamma) == 0x000018, "Member 'TngWidgetFunction_DrawWidgetToRenderTarget::UseGamma' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_DrawWidgetToRenderTarget, DeltaTime) == 0x00001C, "Member 'TngWidgetFunction_DrawWidgetToRenderTarget::DeltaTime' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_DrawWidgetToRenderTarget, OffsetPos) == 0x000020, "Member 'TngWidgetFunction_DrawWidgetToRenderTarget::OffsetPos' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.GetAxisPress
// 0x0010 (0x0010 - 0x0000)
struct TngWidgetFunction_GetAxisPress final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngKeyAxisMap                                Key;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngWidgetFunction_GetAxisPress) == 0x000008, "Wrong alignment on TngWidgetFunction_GetAxisPress");
static_assert(sizeof(TngWidgetFunction_GetAxisPress) == 0x000010, "Wrong size on TngWidgetFunction_GetAxisPress");
static_assert(offsetof(TngWidgetFunction_GetAxisPress, WorldContextObject) == 0x000000, "Member 'TngWidgetFunction_GetAxisPress::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetAxisPress, Key) == 0x000008, "Member 'TngWidgetFunction_GetAxisPress::Key' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetAxisPress, ReturnValue) == 0x000009, "Member 'TngWidgetFunction_GetAxisPress::ReturnValue' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.GetAxisPressed
// 0x0010 (0x0010 - 0x0000)
struct TngWidgetFunction_GetAxisPressed final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngKeyAxisMap                                Key;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngWidgetFunction_GetAxisPressed) == 0x000008, "Wrong alignment on TngWidgetFunction_GetAxisPressed");
static_assert(sizeof(TngWidgetFunction_GetAxisPressed) == 0x000010, "Wrong size on TngWidgetFunction_GetAxisPressed");
static_assert(offsetof(TngWidgetFunction_GetAxisPressed, WorldContextObject) == 0x000000, "Member 'TngWidgetFunction_GetAxisPressed::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetAxisPressed, Key) == 0x000008, "Member 'TngWidgetFunction_GetAxisPressed::Key' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetAxisPressed, ReturnValue) == 0x000009, "Member 'TngWidgetFunction_GetAxisPressed::ReturnValue' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.GetAxisRelease
// 0x0010 (0x0010 - 0x0000)
struct TngWidgetFunction_GetAxisRelease final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngKeyAxisMap                                Key;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngWidgetFunction_GetAxisRelease) == 0x000008, "Wrong alignment on TngWidgetFunction_GetAxisRelease");
static_assert(sizeof(TngWidgetFunction_GetAxisRelease) == 0x000010, "Wrong size on TngWidgetFunction_GetAxisRelease");
static_assert(offsetof(TngWidgetFunction_GetAxisRelease, WorldContextObject) == 0x000000, "Member 'TngWidgetFunction_GetAxisRelease::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetAxisRelease, Key) == 0x000008, "Member 'TngWidgetFunction_GetAxisRelease::Key' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetAxisRelease, ReturnValue) == 0x000009, "Member 'TngWidgetFunction_GetAxisRelease::ReturnValue' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.GetAxisValue
// 0x0010 (0x0010 - 0x0000)
struct TngWidgetFunction_GetAxisValue final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngKeyAxisMap                                Key;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngWidgetFunction_GetAxisValue) == 0x000008, "Wrong alignment on TngWidgetFunction_GetAxisValue");
static_assert(sizeof(TngWidgetFunction_GetAxisValue) == 0x000010, "Wrong size on TngWidgetFunction_GetAxisValue");
static_assert(offsetof(TngWidgetFunction_GetAxisValue, WorldContextObject) == 0x000000, "Member 'TngWidgetFunction_GetAxisValue::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetAxisValue, Key) == 0x000008, "Member 'TngWidgetFunction_GetAxisValue::Key' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetAxisValue, ReturnValue) == 0x00000C, "Member 'TngWidgetFunction_GetAxisValue::ReturnValue' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.GetButtonPress
// 0x0010 (0x0010 - 0x0000)
struct TngWidgetFunction_GetButtonPress final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngKeyButtonMap                              Key;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngWidgetFunction_GetButtonPress) == 0x000008, "Wrong alignment on TngWidgetFunction_GetButtonPress");
static_assert(sizeof(TngWidgetFunction_GetButtonPress) == 0x000010, "Wrong size on TngWidgetFunction_GetButtonPress");
static_assert(offsetof(TngWidgetFunction_GetButtonPress, WorldContextObject) == 0x000000, "Member 'TngWidgetFunction_GetButtonPress::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetButtonPress, Key) == 0x000008, "Member 'TngWidgetFunction_GetButtonPress::Key' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetButtonPress, ReturnValue) == 0x000009, "Member 'TngWidgetFunction_GetButtonPress::ReturnValue' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.GetButtonPressed
// 0x0010 (0x0010 - 0x0000)
struct TngWidgetFunction_GetButtonPressed final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngKeyButtonMap                              Key;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngWidgetFunction_GetButtonPressed) == 0x000008, "Wrong alignment on TngWidgetFunction_GetButtonPressed");
static_assert(sizeof(TngWidgetFunction_GetButtonPressed) == 0x000010, "Wrong size on TngWidgetFunction_GetButtonPressed");
static_assert(offsetof(TngWidgetFunction_GetButtonPressed, WorldContextObject) == 0x000000, "Member 'TngWidgetFunction_GetButtonPressed::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetButtonPressed, Key) == 0x000008, "Member 'TngWidgetFunction_GetButtonPressed::Key' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetButtonPressed, ReturnValue) == 0x000009, "Member 'TngWidgetFunction_GetButtonPressed::ReturnValue' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.GetButtonRelease
// 0x0010 (0x0010 - 0x0000)
struct TngWidgetFunction_GetButtonRelease final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngKeyButtonMap                              Key;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngWidgetFunction_GetButtonRelease) == 0x000008, "Wrong alignment on TngWidgetFunction_GetButtonRelease");
static_assert(sizeof(TngWidgetFunction_GetButtonRelease) == 0x000010, "Wrong size on TngWidgetFunction_GetButtonRelease");
static_assert(offsetof(TngWidgetFunction_GetButtonRelease, WorldContextObject) == 0x000000, "Member 'TngWidgetFunction_GetButtonRelease::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetButtonRelease, Key) == 0x000008, "Member 'TngWidgetFunction_GetButtonRelease::Key' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetButtonRelease, ReturnValue) == 0x000009, "Member 'TngWidgetFunction_GetButtonRelease::ReturnValue' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.GetButtonRepeat
// 0x0010 (0x0010 - 0x0000)
struct TngWidgetFunction_GetButtonRepeat final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngKeyButtonMap                              Key;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngWidgetFunction_GetButtonRepeat) == 0x000008, "Wrong alignment on TngWidgetFunction_GetButtonRepeat");
static_assert(sizeof(TngWidgetFunction_GetButtonRepeat) == 0x000010, "Wrong size on TngWidgetFunction_GetButtonRepeat");
static_assert(offsetof(TngWidgetFunction_GetButtonRepeat, WorldContextObject) == 0x000000, "Member 'TngWidgetFunction_GetButtonRepeat::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetButtonRepeat, Key) == 0x000008, "Member 'TngWidgetFunction_GetButtonRepeat::Key' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetButtonRepeat, ReturnValue) == 0x000009, "Member 'TngWidgetFunction_GetButtonRepeat::ReturnValue' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.GetFocusWidgetInAllChildren
// 0x0010 (0x0010 - 0x0000)
struct TngWidgetFunction_GetFocusWidgetInAllChildren final
{
public:
	class UWidget*                                CheckWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngWidgetFunction_GetFocusWidgetInAllChildren) == 0x000008, "Wrong alignment on TngWidgetFunction_GetFocusWidgetInAllChildren");
static_assert(sizeof(TngWidgetFunction_GetFocusWidgetInAllChildren) == 0x000010, "Wrong size on TngWidgetFunction_GetFocusWidgetInAllChildren");
static_assert(offsetof(TngWidgetFunction_GetFocusWidgetInAllChildren, CheckWidget) == 0x000000, "Member 'TngWidgetFunction_GetFocusWidgetInAllChildren::CheckWidget' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetFocusWidgetInAllChildren, ReturnValue) == 0x000008, "Member 'TngWidgetFunction_GetFocusWidgetInAllChildren::ReturnValue' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.GetKeyAxis
// 0x0030 (0x0030 - 0x0000)
struct TngWidgetFunction_GetKeyAxis final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   TargetKey;                                         // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ETngKeyAxisMap>                        ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngWidgetFunction_GetKeyAxis) == 0x000008, "Wrong alignment on TngWidgetFunction_GetKeyAxis");
static_assert(sizeof(TngWidgetFunction_GetKeyAxis) == 0x000030, "Wrong size on TngWidgetFunction_GetKeyAxis");
static_assert(offsetof(TngWidgetFunction_GetKeyAxis, WorldContextObject) == 0x000000, "Member 'TngWidgetFunction_GetKeyAxis::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetKeyAxis, TargetKey) == 0x000008, "Member 'TngWidgetFunction_GetKeyAxis::TargetKey' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetKeyAxis, ReturnValue) == 0x000020, "Member 'TngWidgetFunction_GetKeyAxis::ReturnValue' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.GetKeyButtons
// 0x0030 (0x0030 - 0x0000)
struct TngWidgetFunction_GetKeyButtons final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   TargetKey;                                         // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ETngKeyButtonMap>                      ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngWidgetFunction_GetKeyButtons) == 0x000008, "Wrong alignment on TngWidgetFunction_GetKeyButtons");
static_assert(sizeof(TngWidgetFunction_GetKeyButtons) == 0x000030, "Wrong size on TngWidgetFunction_GetKeyButtons");
static_assert(offsetof(TngWidgetFunction_GetKeyButtons, WorldContextObject) == 0x000000, "Member 'TngWidgetFunction_GetKeyButtons::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetKeyButtons, TargetKey) == 0x000008, "Member 'TngWidgetFunction_GetKeyButtons::TargetKey' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetKeyButtons, ReturnValue) == 0x000020, "Member 'TngWidgetFunction_GetKeyButtons::ReturnValue' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.GetKeyMouseDownButtons
// 0x0088 (0x0088 - 0x0000)
struct TngWidgetFunction_GetKeyMouseDownButtons final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0008(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<ETngKeyButtonMap>                      ReturnValue;                                       // 0x0078(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngWidgetFunction_GetKeyMouseDownButtons) == 0x000008, "Wrong alignment on TngWidgetFunction_GetKeyMouseDownButtons");
static_assert(sizeof(TngWidgetFunction_GetKeyMouseDownButtons) == 0x000088, "Wrong size on TngWidgetFunction_GetKeyMouseDownButtons");
static_assert(offsetof(TngWidgetFunction_GetKeyMouseDownButtons, WorldContextObject) == 0x000000, "Member 'TngWidgetFunction_GetKeyMouseDownButtons::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetKeyMouseDownButtons, InMouseEvent) == 0x000008, "Member 'TngWidgetFunction_GetKeyMouseDownButtons::InMouseEvent' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetKeyMouseDownButtons, ReturnValue) == 0x000078, "Member 'TngWidgetFunction_GetKeyMouseDownButtons::ReturnValue' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.GetKeyMouseUpButtons
// 0x0088 (0x0088 - 0x0000)
struct TngWidgetFunction_GetKeyMouseUpButtons final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0008(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<ETngKeyButtonMap>                      ReturnValue;                                       // 0x0078(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngWidgetFunction_GetKeyMouseUpButtons) == 0x000008, "Wrong alignment on TngWidgetFunction_GetKeyMouseUpButtons");
static_assert(sizeof(TngWidgetFunction_GetKeyMouseUpButtons) == 0x000088, "Wrong size on TngWidgetFunction_GetKeyMouseUpButtons");
static_assert(offsetof(TngWidgetFunction_GetKeyMouseUpButtons, WorldContextObject) == 0x000000, "Member 'TngWidgetFunction_GetKeyMouseUpButtons::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetKeyMouseUpButtons, InMouseEvent) == 0x000008, "Member 'TngWidgetFunction_GetKeyMouseUpButtons::InMouseEvent' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetKeyMouseUpButtons, ReturnValue) == 0x000078, "Member 'TngWidgetFunction_GetKeyMouseUpButtons::ReturnValue' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.GetLastMousePosition
// 0x0010 (0x0010 - 0x0000)
struct TngWidgetFunction_GetLastMousePosition final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngWidgetFunction_GetLastMousePosition) == 0x000008, "Wrong alignment on TngWidgetFunction_GetLastMousePosition");
static_assert(sizeof(TngWidgetFunction_GetLastMousePosition) == 0x000010, "Wrong size on TngWidgetFunction_GetLastMousePosition");
static_assert(offsetof(TngWidgetFunction_GetLastMousePosition, WorldContextObject) == 0x000000, "Member 'TngWidgetFunction_GetLastMousePosition::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetLastMousePosition, ReturnValue) == 0x000008, "Member 'TngWidgetFunction_GetLastMousePosition::ReturnValue' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.GetPlayerInputPress
// 0x0018 (0x0018 - 0x0000)
struct TngWidgetFunction_GetPlayerInputPress final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerInputName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngWidgetFunction_GetPlayerInputPress) == 0x000008, "Wrong alignment on TngWidgetFunction_GetPlayerInputPress");
static_assert(sizeof(TngWidgetFunction_GetPlayerInputPress) == 0x000018, "Wrong size on TngWidgetFunction_GetPlayerInputPress");
static_assert(offsetof(TngWidgetFunction_GetPlayerInputPress, PlayerController) == 0x000000, "Member 'TngWidgetFunction_GetPlayerInputPress::PlayerController' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetPlayerInputPress, PlayerInputName) == 0x000008, "Member 'TngWidgetFunction_GetPlayerInputPress::PlayerInputName' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetPlayerInputPress, ReturnValue) == 0x000010, "Member 'TngWidgetFunction_GetPlayerInputPress::ReturnValue' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.GetWheelDelta
// 0x0010 (0x0010 - 0x0000)
struct TngWidgetFunction_GetWheelDelta final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngWidgetFunction_GetWheelDelta) == 0x000008, "Wrong alignment on TngWidgetFunction_GetWheelDelta");
static_assert(sizeof(TngWidgetFunction_GetWheelDelta) == 0x000010, "Wrong size on TngWidgetFunction_GetWheelDelta");
static_assert(offsetof(TngWidgetFunction_GetWheelDelta, WorldContextObject) == 0x000000, "Member 'TngWidgetFunction_GetWheelDelta::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetWheelDelta, ReturnValue) == 0x000008, "Member 'TngWidgetFunction_GetWheelDelta::ReturnValue' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.HasAnyButtonState
// 0x000C (0x000C - 0x0000)
struct TngWidgetFunction_HasAnyButtonState final
{
public:
	ETngKeyState                                  State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Condition;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngWidgetFunction_HasAnyButtonState) == 0x000004, "Wrong alignment on TngWidgetFunction_HasAnyButtonState");
static_assert(sizeof(TngWidgetFunction_HasAnyButtonState) == 0x00000C, "Wrong size on TngWidgetFunction_HasAnyButtonState");
static_assert(offsetof(TngWidgetFunction_HasAnyButtonState, State) == 0x000000, "Member 'TngWidgetFunction_HasAnyButtonState::State' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_HasAnyButtonState, Condition) == 0x000004, "Member 'TngWidgetFunction_HasAnyButtonState::Condition' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_HasAnyButtonState, ReturnValue) == 0x000008, "Member 'TngWidgetFunction_HasAnyButtonState::ReturnValue' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.IsDownStickButton
// 0x0018 (0x0018 - 0x0000)
struct TngWidgetFunction_IsDownStickButton final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngKeyButtonMap                              Key;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AxisDeadZone;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngWidgetFunction_IsDownStickButton) == 0x000008, "Wrong alignment on TngWidgetFunction_IsDownStickButton");
static_assert(sizeof(TngWidgetFunction_IsDownStickButton) == 0x000018, "Wrong size on TngWidgetFunction_IsDownStickButton");
static_assert(offsetof(TngWidgetFunction_IsDownStickButton, WorldContextObject) == 0x000000, "Member 'TngWidgetFunction_IsDownStickButton::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_IsDownStickButton, Key) == 0x000008, "Member 'TngWidgetFunction_IsDownStickButton::Key' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_IsDownStickButton, AxisDeadZone) == 0x00000C, "Member 'TngWidgetFunction_IsDownStickButton::AxisDeadZone' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_IsDownStickButton, ReturnValue) == 0x000010, "Member 'TngWidgetFunction_IsDownStickButton::ReturnValue' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.IsUseGamepad
// 0x0010 (0x0010 - 0x0000)
struct TngWidgetFunction_IsUseGamepad final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngWidgetFunction_IsUseGamepad) == 0x000008, "Wrong alignment on TngWidgetFunction_IsUseGamepad");
static_assert(sizeof(TngWidgetFunction_IsUseGamepad) == 0x000010, "Wrong size on TngWidgetFunction_IsUseGamepad");
static_assert(offsetof(TngWidgetFunction_IsUseGamepad, WorldContextObject) == 0x000000, "Member 'TngWidgetFunction_IsUseGamepad::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_IsUseGamepad, ReturnValue) == 0x000008, "Member 'TngWidgetFunction_IsUseGamepad::ReturnValue' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.K2_GetGenericReactButtonDirection
// 0x0003 (0x0003 - 0x0000)
struct TngWidgetFunction_K2_GetGenericReactButtonDirection final
{
public:
	ETngKeyButtonMap                              Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngKeyState                                  ButtonState;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngButtonDirection                           Direction;                                         // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TngWidgetFunction_K2_GetGenericReactButtonDirection) == 0x000001, "Wrong alignment on TngWidgetFunction_K2_GetGenericReactButtonDirection");
static_assert(sizeof(TngWidgetFunction_K2_GetGenericReactButtonDirection) == 0x000003, "Wrong size on TngWidgetFunction_K2_GetGenericReactButtonDirection");
static_assert(offsetof(TngWidgetFunction_K2_GetGenericReactButtonDirection, Key) == 0x000000, "Member 'TngWidgetFunction_K2_GetGenericReactButtonDirection::Key' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_K2_GetGenericReactButtonDirection, ButtonState) == 0x000001, "Member 'TngWidgetFunction_K2_GetGenericReactButtonDirection::ButtonState' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_K2_GetGenericReactButtonDirection, Direction) == 0x000002, "Member 'TngWidgetFunction_K2_GetGenericReactButtonDirection::Direction' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.LayoutChildInvalidate
// 0x0010 (0x0010 - 0x0000)
struct TngWidgetFunction_LayoutChildInvalidate final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInChild;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngWidgetFunction_LayoutChildInvalidate) == 0x000008, "Wrong alignment on TngWidgetFunction_LayoutChildInvalidate");
static_assert(sizeof(TngWidgetFunction_LayoutChildInvalidate) == 0x000010, "Wrong size on TngWidgetFunction_LayoutChildInvalidate");
static_assert(offsetof(TngWidgetFunction_LayoutChildInvalidate, Widget) == 0x000000, "Member 'TngWidgetFunction_LayoutChildInvalidate::Widget' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_LayoutChildInvalidate, IsInChild) == 0x000008, "Member 'TngWidgetFunction_LayoutChildInvalidate::IsInChild' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.PlayTngAnimation
// 0x0020 (0x0020 - 0x0000)
struct TngWidgetFunction_PlayTngAnimation final
{
public:
	class UUserWidget*                            Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       InAnimation;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLoopsToPlay;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaybackSpeed;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngWidgetFunction_PlayTngAnimation) == 0x000008, "Wrong alignment on TngWidgetFunction_PlayTngAnimation");
static_assert(sizeof(TngWidgetFunction_PlayTngAnimation) == 0x000020, "Wrong size on TngWidgetFunction_PlayTngAnimation");
static_assert(offsetof(TngWidgetFunction_PlayTngAnimation, Target) == 0x000000, "Member 'TngWidgetFunction_PlayTngAnimation::Target' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_PlayTngAnimation, InAnimation) == 0x000008, "Member 'TngWidgetFunction_PlayTngAnimation::InAnimation' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_PlayTngAnimation, NumLoopsToPlay) == 0x000010, "Member 'TngWidgetFunction_PlayTngAnimation::NumLoopsToPlay' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_PlayTngAnimation, PlayMode) == 0x000014, "Member 'TngWidgetFunction_PlayTngAnimation::PlayMode' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_PlayTngAnimation, PlaybackSpeed) == 0x000018, "Member 'TngWidgetFunction_PlayTngAnimation::PlaybackSpeed' has a wrong offset!");

// Function TangoLib.TngWidgetFunction.GetCurrentViewMode
// 0x0010 (0x0010 - 0x0000)
struct TngWidgetFunction_GetCurrentViewMode final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TngWidgetFunction_GetCurrentViewMode) == 0x000008, "Wrong alignment on TngWidgetFunction_GetCurrentViewMode");
static_assert(sizeof(TngWidgetFunction_GetCurrentViewMode) == 0x000010, "Wrong size on TngWidgetFunction_GetCurrentViewMode");
static_assert(offsetof(TngWidgetFunction_GetCurrentViewMode, PlayerController) == 0x000000, "Member 'TngWidgetFunction_GetCurrentViewMode::PlayerController' has a wrong offset!");
static_assert(offsetof(TngWidgetFunction_GetCurrentViewMode, ReturnValue) == 0x000008, "Member 'TngWidgetFunction_GetCurrentViewMode::ReturnValue' has a wrong offset!");

}

