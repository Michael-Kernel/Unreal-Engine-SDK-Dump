#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TangoSoundUtility

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// Enum TangoSoundUtility.TngSoundCandidatePositionSelectionMode
// NumValues: 0x0009
enum class ETngSoundCandidatePositionSelectionMode : uint8
{
	NearestOnly                              = 0,
	MiddleOnly                               = 1,
	FarestOnly                               = 2,
	NearestOnce                              = 3,
	MiddleOnce                               = 4,
	FarestOnce                               = 5,
	NearerFour                               = 6,
	NearerTwo                                = 7,
	TngSoundCandidatePositionSelectionMode_MAX = 8,
};

// Enum TangoSoundUtility.TngSoundCandidateListSelectionMode
// NumValues: 0x0003
enum class ETngSoundCandidateListSelectionMode : uint8
{
	CoordinateDirection                      = 0,
	ListenerDirection                        = 1,
	TngSoundCandidateListSelectionMode_MAX   = 2,
};

// Enum TangoSoundUtility.AkDynamicSequenceType
// NumValues: 0x0003
enum class EAkDynamicSequenceType : uint8
{
	SampleAccurate                           = 0,
	NormalTransition                         = 1,
	AkDynamicSequenceType_MAX                = 2,
};

// Enum TangoSoundUtility.TngSoundAssignToLayer
// NumValues: 0x000A
enum class ETngSoundAssignToLayer : uint8
{
	Layer_Uncategorized                      = 0,
	Layer_Disable                            = 1,
	Layer_100M                               = 2,
	Layer_200M                               = 3,
	Layer_500M                               = 4,
	Layer_10km                               = 5,
	Layer_50M                                = 6,
	Layer_0M                                 = 7,
	Layer_1000M                              = 8,
	Layer_MAX                                = 9,
};

// Enum TangoSoundUtility.TngSoundGoogleTTSVoiceName
// NumValues: 0x0039
enum class ETngSoundGoogleTTSVoiceName : uint8
{
	Nl_NL_Standard_A                         = 0,
	Nl_NL_Wavenet_A                          = 1,
	En_AU_Standard_A                         = 2,
	En_AU_Standard_B                         = 3,
	En_AU_Standard_C                         = 4,
	En_AU_Standard_D                         = 5,
	En_AU_Wavenet_A                          = 6,
	En_AU_Wavenet_B                          = 7,
	En_AU_Wavenet_C                          = 8,
	En_AU_Wavenet_D                          = 9,
	En_GB_Standard_A                         = 10,
	En_GB_Standard_B                         = 11,
	En_GB_Standard_C                         = 12,
	En_GB_Standard_D                         = 13,
	En_GB_Wavenet_A                          = 14,
	En_GB_Wavenet_B                          = 15,
	En_GB_Wavenet_C                          = 16,
	En_GB_Wavenet_D                          = 17,
	En_US_Standard_B                         = 18,
	En_US_Standard_C                         = 19,
	En_US_Standard_D                         = 20,
	En_US_Standard_E                         = 21,
	En_US_Wavenet_A                          = 22,
	En_US_Wavenet_B                          = 23,
	En_US_Wavenet_C                          = 24,
	En_US_Wavenet_D                          = 25,
	En_US_Wavenet_E                          = 26,
	En_US_Wavenet_F                          = 27,
	Fr_FR_Standard_A                         = 28,
	Fr_FR_Standard_B                         = 29,
	Fr_FR_Standard_C                         = 30,
	Fr_FR_Standard_D                         = 31,
	Fr_FR_Wavenet_A                          = 32,
	Fr_FR_Wavenet_B                          = 33,
	Fr_FR_Wavenet_C                          = 34,
	Fr_FR_Wavenet_D                          = 35,
	Fr_CA_Standard_A                         = 36,
	Fr_CA_Standard_B                         = 37,
	Fr_CA_Standard_C                         = 38,
	Fr_CA_Standard_D                         = 39,
	De_DE_Standard_A                         = 40,
	De_DE_Standard_B                         = 41,
	De_DE_Wavenet_A                          = 42,
	De_DE_Wavenet_B                          = 43,
	De_DE_Wavenet_C                          = 44,
	De_DE_Wavenet_D                          = 45,
	It_IT_Standard_A                         = 46,
	It_IT_Wavenet_A                          = 47,
	Ja_JP_Standard_A                         = 48,
	Ja_JP_Wavenet_A                          = 49,
	Ko_KR_Standard_A                         = 50,
	Ko_KR_Wavenet_A                          = 51,
	Pt_BR_Standard_A                         = 52,
	Es_ES_Standard_A                         = 53,
	Sv_SE_Standard_A                         = 54,
	Tr_TR_Standard_A                         = 55,
	TngSoundGoogleTTSVoiceName_MAX           = 56,
};

// Enum TangoSoundUtility.AkRailCurveType
// NumValues: 0x0008
enum class EAkRailCurveType : uint8
{
	LOG3                                     = 0,
	SINE_IN                                  = 1,
	INVERTED_S                               = 2,
	LINEAR                                   = 3,
	S_CURVE                                  = 4,
	SINE_OUT                                 = 5,
	EXP3                                     = 6,
	AkRailCurveType_MAX                      = 7,
};

// ScriptStruct TangoSoundUtility.ProcCommonSpawnInfo
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x10) FProcCommonSpawnInfo
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProcCommonSpawnInfo) == 0x000010, "Wrong alignment on FProcCommonSpawnInfo");
static_assert(sizeof(FProcCommonSpawnInfo) == 0x000050, "Wrong size on FProcCommonSpawnInfo");

// ScriptStruct TangoSoundUtility.ProcSourceSpawnInfo
// 0x0000 (0x0050 - 0x0050)
struct FProcSourceSpawnInfo : public FProcCommonSpawnInfo
{
};
static_assert(alignof(FProcSourceSpawnInfo) == 0x000010, "Wrong alignment on FProcSourceSpawnInfo");
static_assert(sizeof(FProcSourceSpawnInfo) == 0x000050, "Wrong size on FProcSourceSpawnInfo");

// ScriptStruct TangoSoundUtility.ProcVolumeSpawnInfo
// 0x0010 (0x0060 - 0x0050)
struct FProcVolumeSpawnInfo : public FProcCommonSpawnInfo
{
public:
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProcVolumeSpawnInfo) == 0x000010, "Wrong alignment on FProcVolumeSpawnInfo");
static_assert(sizeof(FProcVolumeSpawnInfo) == 0x000060, "Wrong size on FProcVolumeSpawnInfo");

// ScriptStruct TangoSoundUtility.TngSoundCandidatePointInfo
// 0x0010 (0x0010 - 0x0000)
struct FTngSoundCandidatePointInfo final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Density;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngSoundCandidatePointInfo) == 0x000004, "Wrong alignment on FTngSoundCandidatePointInfo");
static_assert(sizeof(FTngSoundCandidatePointInfo) == 0x000010, "Wrong size on FTngSoundCandidatePointInfo");
static_assert(offsetof(FTngSoundCandidatePointInfo, Pos) == 0x000000, "Member 'FTngSoundCandidatePointInfo::Pos' has a wrong offset!");
static_assert(offsetof(FTngSoundCandidatePointInfo, Density) == 0x00000C, "Member 'FTngSoundCandidatePointInfo::Density' has a wrong offset!");

// ScriptStruct TangoSoundUtility.CandidateGenerationInfo
// 0x0008 (0x0008 - 0x0000)
struct FCandidateGenerationInfo final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCandidateGenerationInfo) == 0x000008, "Wrong alignment on FCandidateGenerationInfo");
static_assert(sizeof(FCandidateGenerationInfo) == 0x000008, "Wrong size on FCandidateGenerationInfo");
static_assert(offsetof(FCandidateGenerationInfo, StaticMesh) == 0x000000, "Member 'FCandidateGenerationInfo::StaticMesh' has a wrong offset!");

// ScriptStruct TangoSoundUtility.CandidateCullingInfo
// 0x0010 (0x0010 - 0x0000)
struct FCandidateCullingInfo final
{
public:
	float                                         CullingRate;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            StaticMesh;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCandidateCullingInfo) == 0x000008, "Wrong alignment on FCandidateCullingInfo");
static_assert(sizeof(FCandidateCullingInfo) == 0x000010, "Wrong size on FCandidateCullingInfo");
static_assert(offsetof(FCandidateCullingInfo, CullingRate) == 0x000000, "Member 'FCandidateCullingInfo::CullingRate' has a wrong offset!");
static_assert(offsetof(FCandidateCullingInfo, StaticMesh) == 0x000008, "Member 'FCandidateCullingInfo::StaticMesh' has a wrong offset!");

// ScriptStruct TangoSoundUtility.MusicSyncComponent_Grid
// 0x0010 (0x0010 - 0x0000)
struct FMusicSyncComponent_Grid final
{
public:
	bool                                          Grid1;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Grid2;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Grid3;                                             // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Grid4;                                             // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Grid5;                                             // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Grid6;                                             // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Grid7;                                             // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Grid8;                                             // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Grid9;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Grid10;                                            // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Grid11;                                            // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Grid12;                                            // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Grid13;                                            // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Grid14;                                            // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Grid15;                                            // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Grid16;                                            // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMusicSyncComponent_Grid) == 0x000001, "Wrong alignment on FMusicSyncComponent_Grid");
static_assert(sizeof(FMusicSyncComponent_Grid) == 0x000010, "Wrong size on FMusicSyncComponent_Grid");
static_assert(offsetof(FMusicSyncComponent_Grid, Grid1) == 0x000000, "Member 'FMusicSyncComponent_Grid::Grid1' has a wrong offset!");
static_assert(offsetof(FMusicSyncComponent_Grid, Grid2) == 0x000001, "Member 'FMusicSyncComponent_Grid::Grid2' has a wrong offset!");
static_assert(offsetof(FMusicSyncComponent_Grid, Grid3) == 0x000002, "Member 'FMusicSyncComponent_Grid::Grid3' has a wrong offset!");
static_assert(offsetof(FMusicSyncComponent_Grid, Grid4) == 0x000003, "Member 'FMusicSyncComponent_Grid::Grid4' has a wrong offset!");
static_assert(offsetof(FMusicSyncComponent_Grid, Grid5) == 0x000004, "Member 'FMusicSyncComponent_Grid::Grid5' has a wrong offset!");
static_assert(offsetof(FMusicSyncComponent_Grid, Grid6) == 0x000005, "Member 'FMusicSyncComponent_Grid::Grid6' has a wrong offset!");
static_assert(offsetof(FMusicSyncComponent_Grid, Grid7) == 0x000006, "Member 'FMusicSyncComponent_Grid::Grid7' has a wrong offset!");
static_assert(offsetof(FMusicSyncComponent_Grid, Grid8) == 0x000007, "Member 'FMusicSyncComponent_Grid::Grid8' has a wrong offset!");
static_assert(offsetof(FMusicSyncComponent_Grid, Grid9) == 0x000008, "Member 'FMusicSyncComponent_Grid::Grid9' has a wrong offset!");
static_assert(offsetof(FMusicSyncComponent_Grid, Grid10) == 0x000009, "Member 'FMusicSyncComponent_Grid::Grid10' has a wrong offset!");
static_assert(offsetof(FMusicSyncComponent_Grid, Grid11) == 0x00000A, "Member 'FMusicSyncComponent_Grid::Grid11' has a wrong offset!");
static_assert(offsetof(FMusicSyncComponent_Grid, Grid12) == 0x00000B, "Member 'FMusicSyncComponent_Grid::Grid12' has a wrong offset!");
static_assert(offsetof(FMusicSyncComponent_Grid, Grid13) == 0x00000C, "Member 'FMusicSyncComponent_Grid::Grid13' has a wrong offset!");
static_assert(offsetof(FMusicSyncComponent_Grid, Grid14) == 0x00000D, "Member 'FMusicSyncComponent_Grid::Grid14' has a wrong offset!");
static_assert(offsetof(FMusicSyncComponent_Grid, Grid15) == 0x00000E, "Member 'FMusicSyncComponent_Grid::Grid15' has a wrong offset!");
static_assert(offsetof(FMusicSyncComponent_Grid, Grid16) == 0x00000F, "Member 'FMusicSyncComponent_Grid::Grid16' has a wrong offset!");

// ScriptStruct TangoSoundUtility.MusicSyncComponent_Beat
// 0x0004 (0x0004 - 0x0000)
struct FMusicSyncComponent_Beat final
{
public:
	bool                                          Beat1;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Beat2;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Beat3;                                             // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Beat4;                                             // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMusicSyncComponent_Beat) == 0x000001, "Wrong alignment on FMusicSyncComponent_Beat");
static_assert(sizeof(FMusicSyncComponent_Beat) == 0x000004, "Wrong size on FMusicSyncComponent_Beat");
static_assert(offsetof(FMusicSyncComponent_Beat, Beat1) == 0x000000, "Member 'FMusicSyncComponent_Beat::Beat1' has a wrong offset!");
static_assert(offsetof(FMusicSyncComponent_Beat, Beat2) == 0x000001, "Member 'FMusicSyncComponent_Beat::Beat2' has a wrong offset!");
static_assert(offsetof(FMusicSyncComponent_Beat, Beat3) == 0x000002, "Member 'FMusicSyncComponent_Beat::Beat3' has a wrong offset!");
static_assert(offsetof(FMusicSyncComponent_Beat, Beat4) == 0x000003, "Member 'FMusicSyncComponent_Beat::Beat4' has a wrong offset!");

// ScriptStruct TangoSoundUtility.ProcCPSpawnInfo
// 0x0050 (0x00A0 - 0x0050)
struct FProcCPSpawnInfo final : public FProcSourceSpawnInfo
{
public:
	uint8                                         Pad_50[0x50];                                      // 0x0050(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProcCPSpawnInfo) == 0x000010, "Wrong alignment on FProcCPSpawnInfo");
static_assert(sizeof(FProcCPSpawnInfo) == 0x0000A0, "Wrong size on FProcCPSpawnInfo");

// ScriptStruct TangoSoundUtility.ProcCSSpawnInfo
// 0x00A0 (0x00F0 - 0x0050)
struct FProcCSSpawnInfo final : public FProcSourceSpawnInfo
{
public:
	uint8                                         Pad_50[0xA0];                                      // 0x0050(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProcCSSpawnInfo) == 0x000010, "Wrong alignment on FProcCSSpawnInfo");
static_assert(sizeof(FProcCSSpawnInfo) == 0x0000F0, "Wrong size on FProcCSSpawnInfo");

// ScriptStruct TangoSoundUtility.TngSoundProceduralCPData
// 0x0040 (0x0048 - 0x0008)
struct FTngSoundProceduralCPData final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SocketName;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetSMA;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetISMC;                                       // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetFISMC;                                      // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetUMSMC;                                      // 0x002B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CSName;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseGenerationVolume;                              // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngSoundProceduralCPData) == 0x000008, "Wrong alignment on FTngSoundProceduralCPData");
static_assert(sizeof(FTngSoundProceduralCPData) == 0x000048, "Wrong size on FTngSoundProceduralCPData");
static_assert(offsetof(FTngSoundProceduralCPData, Name) == 0x000008, "Member 'FTngSoundProceduralCPData::Name' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralCPData, SocketName) == 0x000018, "Member 'FTngSoundProceduralCPData::SocketName' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralCPData, bTargetSMA) == 0x000028, "Member 'FTngSoundProceduralCPData::bTargetSMA' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralCPData, bTargetISMC) == 0x000029, "Member 'FTngSoundProceduralCPData::bTargetISMC' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralCPData, bTargetFISMC) == 0x00002A, "Member 'FTngSoundProceduralCPData::bTargetFISMC' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralCPData, bTargetUMSMC) == 0x00002B, "Member 'FTngSoundProceduralCPData::bTargetUMSMC' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralCPData, CSName) == 0x000030, "Member 'FTngSoundProceduralCPData::CSName' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralCPData, bUseGenerationVolume) == 0x000040, "Member 'FTngSoundProceduralCPData::bUseGenerationVolume' has a wrong offset!");

// ScriptStruct TangoSoundUtility.TngSoundProceduralCSData
// 0x0098 (0x00A0 - 0x0008)
struct FTngSoundProceduralCSData final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngSoundCandidateListSelectionMode           ListSelectMode;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x17];                                      // 0x0019(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	ETngSoundCandidatePositionSelectionMode       PositionSelectMode;                                // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x17];                                      // 0x0031(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AkAudioEvent;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RTPCName;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoPost;                                          // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ListDistance;                                      // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ListUpdateInterval;                                // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickInterval;                                      // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarestOnceProhibitionDistance;                     // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             OcclusionCollisionChannel;                         // 0x0074(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkChangeRoomType                             ChangeRoomType;                                    // 0x0075(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_76[0x22];                                      // 0x0076(0x0022)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseGenerationVolume;                              // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngSoundProceduralCSData) == 0x000008, "Wrong alignment on FTngSoundProceduralCSData");
static_assert(sizeof(FTngSoundProceduralCSData) == 0x0000A0, "Wrong size on FTngSoundProceduralCSData");
static_assert(offsetof(FTngSoundProceduralCSData, Name) == 0x000008, "Member 'FTngSoundProceduralCSData::Name' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralCSData, ListSelectMode) == 0x000018, "Member 'FTngSoundProceduralCSData::ListSelectMode' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralCSData, PositionSelectMode) == 0x000030, "Member 'FTngSoundProceduralCSData::PositionSelectMode' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralCSData, AkAudioEvent) == 0x000048, "Member 'FTngSoundProceduralCSData::AkAudioEvent' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralCSData, RTPCName) == 0x000050, "Member 'FTngSoundProceduralCSData::RTPCName' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralCSData, AutoPost) == 0x000060, "Member 'FTngSoundProceduralCSData::AutoPost' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralCSData, ListDistance) == 0x000064, "Member 'FTngSoundProceduralCSData::ListDistance' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralCSData, ListUpdateInterval) == 0x000068, "Member 'FTngSoundProceduralCSData::ListUpdateInterval' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralCSData, TickInterval) == 0x00006C, "Member 'FTngSoundProceduralCSData::TickInterval' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralCSData, FarestOnceProhibitionDistance) == 0x000070, "Member 'FTngSoundProceduralCSData::FarestOnceProhibitionDistance' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralCSData, OcclusionCollisionChannel) == 0x000074, "Member 'FTngSoundProceduralCSData::OcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralCSData, ChangeRoomType) == 0x000075, "Member 'FTngSoundProceduralCSData::ChangeRoomType' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralCSData, bUseGenerationVolume) == 0x000098, "Member 'FTngSoundProceduralCSData::bUseGenerationVolume' has a wrong offset!");

// ScriptStruct TangoSoundUtility.TngSoundProceduralMPSData
// 0x0028 (0x0030 - 0x0008)
struct FTngSoundProceduralMPSData final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkAudioEvent;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoPost;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TickInterval;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseGenerationVolume;                              // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngSoundProceduralMPSData) == 0x000008, "Wrong alignment on FTngSoundProceduralMPSData");
static_assert(sizeof(FTngSoundProceduralMPSData) == 0x000030, "Wrong size on FTngSoundProceduralMPSData");
static_assert(offsetof(FTngSoundProceduralMPSData, Name) == 0x000008, "Member 'FTngSoundProceduralMPSData::Name' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMPSData, AkAudioEvent) == 0x000018, "Member 'FTngSoundProceduralMPSData::AkAudioEvent' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMPSData, AutoPost) == 0x000020, "Member 'FTngSoundProceduralMPSData::AutoPost' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMPSData, TickInterval) == 0x000024, "Member 'FTngSoundProceduralMPSData::TickInterval' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMPSData, bUseGenerationVolume) == 0x000028, "Member 'FTngSoundProceduralMPSData::bUseGenerationVolume' has a wrong offset!");

// ScriptStruct TangoSoundUtility.TngSoundProceduralMPLData
// 0x0078 (0x0080 - 0x0008)
struct FTngSoundProceduralMPLData final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SocketName;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetSMA;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetISMC;                                       // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetFISMC;                                      // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetUMSMC;                                      // 0x002B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAuxBus*                              AkAuxBus;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SendValue;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             OcclusionCollisionChannel;                         // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionRefreshInterval;                          // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkChangeRoomType                             ChangeRoomType;                                    // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MPSName;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseGenerationVolume;                              // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x27];                                      // 0x0059(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngSoundProceduralMPLData) == 0x000008, "Wrong alignment on FTngSoundProceduralMPLData");
static_assert(sizeof(FTngSoundProceduralMPLData) == 0x000080, "Wrong size on FTngSoundProceduralMPLData");
static_assert(offsetof(FTngSoundProceduralMPLData, Name) == 0x000008, "Member 'FTngSoundProceduralMPLData::Name' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMPLData, SocketName) == 0x000018, "Member 'FTngSoundProceduralMPLData::SocketName' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMPLData, bTargetSMA) == 0x000028, "Member 'FTngSoundProceduralMPLData::bTargetSMA' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMPLData, bTargetISMC) == 0x000029, "Member 'FTngSoundProceduralMPLData::bTargetISMC' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMPLData, bTargetFISMC) == 0x00002A, "Member 'FTngSoundProceduralMPLData::bTargetFISMC' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMPLData, bTargetUMSMC) == 0x00002B, "Member 'FTngSoundProceduralMPLData::bTargetUMSMC' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMPLData, AkAuxBus) == 0x000030, "Member 'FTngSoundProceduralMPLData::AkAuxBus' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMPLData, SendValue) == 0x000038, "Member 'FTngSoundProceduralMPLData::SendValue' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMPLData, OcclusionCollisionChannel) == 0x00003C, "Member 'FTngSoundProceduralMPLData::OcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMPLData, OcclusionRefreshInterval) == 0x000040, "Member 'FTngSoundProceduralMPLData::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMPLData, ChangeRoomType) == 0x000044, "Member 'FTngSoundProceduralMPLData::ChangeRoomType' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMPLData, MPSName) == 0x000048, "Member 'FTngSoundProceduralMPLData::MPSName' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMPLData, bUseGenerationVolume) == 0x000058, "Member 'FTngSoundProceduralMPLData::bUseGenerationVolume' has a wrong offset!");

// ScriptStruct TangoSoundUtility.TngSoundProceduralSPSP2Data
// 0x0050 (0x0058 - 0x0008)
struct FTngSoundProceduralSPSP2Data final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SocketName;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetSMA;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetISMC;                                       // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetFISMC;                                      // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetUMSMC;                                      // 0x002B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickInterval;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkEvent;                                           // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttenuationScalingFactor;                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionRefleshInterval;                          // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             OcclusionCollisionChannel;                         // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseGenerationVolume;                              // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x16];                                      // 0x0042(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngSoundProceduralSPSP2Data) == 0x000008, "Wrong alignment on FTngSoundProceduralSPSP2Data");
static_assert(sizeof(FTngSoundProceduralSPSP2Data) == 0x000058, "Wrong size on FTngSoundProceduralSPSP2Data");
static_assert(offsetof(FTngSoundProceduralSPSP2Data, Name) == 0x000008, "Member 'FTngSoundProceduralSPSP2Data::Name' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSPSP2Data, SocketName) == 0x000018, "Member 'FTngSoundProceduralSPSP2Data::SocketName' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSPSP2Data, bTargetSMA) == 0x000028, "Member 'FTngSoundProceduralSPSP2Data::bTargetSMA' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSPSP2Data, bTargetISMC) == 0x000029, "Member 'FTngSoundProceduralSPSP2Data::bTargetISMC' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSPSP2Data, bTargetFISMC) == 0x00002A, "Member 'FTngSoundProceduralSPSP2Data::bTargetFISMC' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSPSP2Data, bTargetUMSMC) == 0x00002B, "Member 'FTngSoundProceduralSPSP2Data::bTargetUMSMC' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSPSP2Data, TickInterval) == 0x00002C, "Member 'FTngSoundProceduralSPSP2Data::TickInterval' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSPSP2Data, AkEvent) == 0x000030, "Member 'FTngSoundProceduralSPSP2Data::AkEvent' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSPSP2Data, AttenuationScalingFactor) == 0x000038, "Member 'FTngSoundProceduralSPSP2Data::AttenuationScalingFactor' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSPSP2Data, OcclusionRefleshInterval) == 0x00003C, "Member 'FTngSoundProceduralSPSP2Data::OcclusionRefleshInterval' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSPSP2Data, OcclusionCollisionChannel) == 0x000040, "Member 'FTngSoundProceduralSPSP2Data::OcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSPSP2Data, bUseGenerationVolume) == 0x000041, "Member 'FTngSoundProceduralSPSP2Data::bUseGenerationVolume' has a wrong offset!");

// ScriptStruct TangoSoundUtility.TngSoundProceduralMapData
// 0x0058 (0x0060 - 0x0008)
struct FTngSoundProceduralMapData final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PortalYExpand;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAuxBus*                              RoomSize1_AuxBus;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAuxBus*                              RoomSize2_AuxBus;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAuxBus*                              RoomSize3_AuxBus;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAuxBus*                              RoomSize4_AuxBus;                                  // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SAVDatasFileName;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PortalDatasFileName;                               // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngSoundProceduralMapData) == 0x000008, "Wrong alignment on FTngSoundProceduralMapData");
static_assert(sizeof(FTngSoundProceduralMapData) == 0x000060, "Wrong size on FTngSoundProceduralMapData");
static_assert(offsetof(FTngSoundProceduralMapData, Name) == 0x000008, "Member 'FTngSoundProceduralMapData::Name' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMapData, PortalYExpand) == 0x000018, "Member 'FTngSoundProceduralMapData::PortalYExpand' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMapData, RoomSize1_AuxBus) == 0x000020, "Member 'FTngSoundProceduralMapData::RoomSize1_AuxBus' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMapData, RoomSize2_AuxBus) == 0x000028, "Member 'FTngSoundProceduralMapData::RoomSize2_AuxBus' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMapData, RoomSize3_AuxBus) == 0x000030, "Member 'FTngSoundProceduralMapData::RoomSize3_AuxBus' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMapData, RoomSize4_AuxBus) == 0x000038, "Member 'FTngSoundProceduralMapData::RoomSize4_AuxBus' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMapData, SAVDatasFileName) == 0x000040, "Member 'FTngSoundProceduralMapData::SAVDatasFileName' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralMapData, PortalDatasFileName) == 0x000050, "Member 'FTngSoundProceduralMapData::PortalDatasFileName' has a wrong offset!");

// ScriptStruct TangoSoundUtility.TngSoundProceduralPortalData
// 0x0030 (0x0038 - 0x0008)
struct FTngSoundProceduralPortalData final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChildActorName;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitialStateOpened;                               // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ObstructionRefleshInterval;                        // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CullingDistance;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFindFrontRoomWhenBeginPlay;                       // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFindBackRoomWhenBeginPlay;                        // 0x0035(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngSoundProceduralPortalData) == 0x000008, "Wrong alignment on FTngSoundProceduralPortalData");
static_assert(sizeof(FTngSoundProceduralPortalData) == 0x000038, "Wrong size on FTngSoundProceduralPortalData");
static_assert(offsetof(FTngSoundProceduralPortalData, Name) == 0x000008, "Member 'FTngSoundProceduralPortalData::Name' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralPortalData, ChildActorName) == 0x000018, "Member 'FTngSoundProceduralPortalData::ChildActorName' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralPortalData, bInitialStateOpened) == 0x000028, "Member 'FTngSoundProceduralPortalData::bInitialStateOpened' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralPortalData, ObstructionRefleshInterval) == 0x00002C, "Member 'FTngSoundProceduralPortalData::ObstructionRefleshInterval' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralPortalData, CullingDistance) == 0x000030, "Member 'FTngSoundProceduralPortalData::CullingDistance' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralPortalData, bFindFrontRoomWhenBeginPlay) == 0x000034, "Member 'FTngSoundProceduralPortalData::bFindFrontRoomWhenBeginPlay' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralPortalData, bFindBackRoomWhenBeginPlay) == 0x000035, "Member 'FTngSoundProceduralPortalData::bFindBackRoomWhenBeginPlay' has a wrong offset!");

// ScriptStruct TangoSoundUtility.TngSoundProceduralSAVData
// 0x0088 (0x0090 - 0x0008)
struct FTngSoundProceduralSAVData final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChildActorName;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableRoom;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Priority;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallOcclusion;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreEnvEvents;                                   // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnvEventsFadeOutTime;                              // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          EnvEvent_0;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          EnvEvent_1;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          InEvent_0;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          OutEvent_0;                                        // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLateReverb;                                  // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAuxBus*                              AuxBus;                                            // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SendLevel;                                         // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeRate;                                          // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableVolumeSpeaker;                               // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereTickInterval;                                // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SphereEvent_0;                                     // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngSoundProceduralSAVData) == 0x000008, "Wrong alignment on FTngSoundProceduralSAVData");
static_assert(sizeof(FTngSoundProceduralSAVData) == 0x000090, "Wrong size on FTngSoundProceduralSAVData");
static_assert(offsetof(FTngSoundProceduralSAVData, Name) == 0x000008, "Member 'FTngSoundProceduralSAVData::Name' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSAVData, ChildActorName) == 0x000018, "Member 'FTngSoundProceduralSAVData::ChildActorName' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSAVData, EnableRoom) == 0x000028, "Member 'FTngSoundProceduralSAVData::EnableRoom' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSAVData, Priority) == 0x00002C, "Member 'FTngSoundProceduralSAVData::Priority' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSAVData, WallOcclusion) == 0x000030, "Member 'FTngSoundProceduralSAVData::WallOcclusion' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSAVData, IgnoreEnvEvents) == 0x000034, "Member 'FTngSoundProceduralSAVData::IgnoreEnvEvents' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSAVData, EnvEventsFadeOutTime) == 0x000038, "Member 'FTngSoundProceduralSAVData::EnvEventsFadeOutTime' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSAVData, EnvEvent_0) == 0x000040, "Member 'FTngSoundProceduralSAVData::EnvEvent_0' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSAVData, EnvEvent_1) == 0x000048, "Member 'FTngSoundProceduralSAVData::EnvEvent_1' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSAVData, InEvent_0) == 0x000050, "Member 'FTngSoundProceduralSAVData::InEvent_0' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSAVData, OutEvent_0) == 0x000058, "Member 'FTngSoundProceduralSAVData::OutEvent_0' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSAVData, EnableLateReverb) == 0x000060, "Member 'FTngSoundProceduralSAVData::EnableLateReverb' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSAVData, AuxBus) == 0x000068, "Member 'FTngSoundProceduralSAVData::AuxBus' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSAVData, SendLevel) == 0x000070, "Member 'FTngSoundProceduralSAVData::SendLevel' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSAVData, FadeRate) == 0x000074, "Member 'FTngSoundProceduralSAVData::FadeRate' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSAVData, EnableVolumeSpeaker) == 0x000078, "Member 'FTngSoundProceduralSAVData::EnableVolumeSpeaker' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSAVData, SphereTickInterval) == 0x00007C, "Member 'FTngSoundProceduralSAVData::SphereTickInterval' has a wrong offset!");
static_assert(offsetof(FTngSoundProceduralSAVData, SphereEvent_0) == 0x000080, "Member 'FTngSoundProceduralSAVData::SphereEvent_0' has a wrong offset!");

// ScriptStruct TangoSoundUtility.ProcLostChildInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FProcLostChildInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProcLostChildInfo) == 0x000008, "Wrong alignment on FProcLostChildInfo");
static_assert(sizeof(FProcLostChildInfo) == 0x000018, "Wrong size on FProcLostChildInfo");

// ScriptStruct TangoSoundUtility.ProcMPSSpawnInfo
// 0x0030 (0x0080 - 0x0050)
struct FProcMPSSpawnInfo final : public FProcSourceSpawnInfo
{
public:
	uint8                                         Pad_50[0x30];                                      // 0x0050(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProcMPSSpawnInfo) == 0x000010, "Wrong alignment on FProcMPSSpawnInfo");
static_assert(sizeof(FProcMPSSpawnInfo) == 0x000080, "Wrong size on FProcMPSSpawnInfo");

// ScriptStruct TangoSoundUtility.ProcMPLSpawnInfo
// 0x0080 (0x00D0 - 0x0050)
struct FProcMPLSpawnInfo final : public FProcSourceSpawnInfo
{
public:
	uint8                                         Pad_50[0x80];                                      // 0x0050(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProcMPLSpawnInfo) == 0x000010, "Wrong alignment on FProcMPLSpawnInfo");
static_assert(sizeof(FProcMPLSpawnInfo) == 0x0000D0, "Wrong size on FProcMPLSpawnInfo");

// ScriptStruct TangoSoundUtility.ProcPortalSpawnInfo
// 0x0030 (0x0090 - 0x0060)
struct FProcPortalSpawnInfo final : public FProcVolumeSpawnInfo
{
public:
	uint8                                         Pad_60[0x30];                                      // 0x0060(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProcPortalSpawnInfo) == 0x000010, "Wrong alignment on FProcPortalSpawnInfo");
static_assert(sizeof(FProcPortalSpawnInfo) == 0x000090, "Wrong size on FProcPortalSpawnInfo");

// ScriptStruct TangoSoundUtility.ProcSAVSpawnInfo
// 0x0090 (0x00F0 - 0x0060)
struct FProcSAVSpawnInfo final : public FProcVolumeSpawnInfo
{
public:
	uint8                                         Pad_60[0x90];                                      // 0x0060(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProcSAVSpawnInfo) == 0x000010, "Wrong alignment on FProcSAVSpawnInfo");
static_assert(sizeof(FProcSAVSpawnInfo) == 0x0000F0, "Wrong size on FProcSAVSpawnInfo");

// ScriptStruct TangoSoundUtility.ProcSPSP2SpawnInfo
// 0x0050 (0x00A0 - 0x0050)
struct FProcSPSP2SpawnInfo final : public FProcSourceSpawnInfo
{
public:
	uint8                                         Pad_50[0x50];                                      // 0x0050(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProcSPSP2SpawnInfo) == 0x000010, "Wrong alignment on FProcSPSP2SpawnInfo");
static_assert(sizeof(FProcSPSP2SpawnInfo) == 0x0000A0, "Wrong size on FProcSPSP2SpawnInfo");

}

