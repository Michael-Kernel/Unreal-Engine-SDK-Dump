#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: People_Interact_BTT

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass People_Interact_BTT.People_Interact_BTT_C
// 0x0208 (0x02B0 - 0x00A8)
class UPeople_Interact_BTT_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 InteractBK;                                        // 0x00B0(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 InteractReadyBK;                                   // 0x00D8(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 InteractActorBK;                                   // 0x0100(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 InteractLocationBK;                                // 0x0128(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 LookTypeBK;                                        // 0x0150(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 CurrentTalkAnimSequenceBK;                         // 0x0178(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 InteractEndReadyBK;                                // 0x01A0(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 AfterLocationBK;                                   // 0x01C8(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 AfterRotationBK;                                   // 0x01F0(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 DoesTalkAfterRecoveryBK;                           // 0x0218(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 DoesNotBlendInTalkAnimBK;                          // 0x0240(0x0028)(Edit, BlueprintVisible)
	int32                                         ActionIndex;                                       // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActionPhase;                                       // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActionSubPhase;                                    // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ConstSubPhaseNotTurning;                           // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ConstSubPhaseTurning;                              // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ConstSubPhaseTalkBegin;                            // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USnfPeopleAnimInstance*                 AnimInst;                                          // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASnfNpcHumanoidCharacter*               Humanoid;                                          // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InteractLocation;                                  // 0x0290(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      OldTalkAnimSequence;                               // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNeedTurn;                                        // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFirstTurn;                                       // 0x02A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPlaying;                                         // 0x02AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AB[0x1];                                      // 0x02AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayCount;                                        // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_People_Interact_BTT(int32 EntryPoint);
	void ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void SubPhaseTurn(class APawn* ControlledPawn, bool* CanNext);
	void SubPhaseWait(class APawn* ControlledPawn, bool* CanNext);
	void ActTalk(class APawn* ControlledPawn, float DeltaSeconds, bool* CanNext);
	void SubPhaseTalk(class APawn* ControlledPawn, bool* CanNext);
	void SubPhaseEnd(class APawn* ControlledPawn, float DeltaSeconds, bool* CanNext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"People_Interact_BTT_C">();
	}
	static class UPeople_Interact_BTT_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPeople_Interact_BTT_C>();
	}
};
static_assert(alignof(UPeople_Interact_BTT_C) == 0x000008, "Wrong alignment on UPeople_Interact_BTT_C");
static_assert(sizeof(UPeople_Interact_BTT_C) == 0x0002B0, "Wrong size on UPeople_Interact_BTT_C");
static_assert(offsetof(UPeople_Interact_BTT_C, UberGraphFrame) == 0x0000A8, "Member 'UPeople_Interact_BTT_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, InteractBK) == 0x0000B0, "Member 'UPeople_Interact_BTT_C::InteractBK' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, InteractReadyBK) == 0x0000D8, "Member 'UPeople_Interact_BTT_C::InteractReadyBK' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, InteractActorBK) == 0x000100, "Member 'UPeople_Interact_BTT_C::InteractActorBK' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, InteractLocationBK) == 0x000128, "Member 'UPeople_Interact_BTT_C::InteractLocationBK' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, LookTypeBK) == 0x000150, "Member 'UPeople_Interact_BTT_C::LookTypeBK' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, CurrentTalkAnimSequenceBK) == 0x000178, "Member 'UPeople_Interact_BTT_C::CurrentTalkAnimSequenceBK' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, InteractEndReadyBK) == 0x0001A0, "Member 'UPeople_Interact_BTT_C::InteractEndReadyBK' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, AfterLocationBK) == 0x0001C8, "Member 'UPeople_Interact_BTT_C::AfterLocationBK' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, AfterRotationBK) == 0x0001F0, "Member 'UPeople_Interact_BTT_C::AfterRotationBK' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, DoesTalkAfterRecoveryBK) == 0x000218, "Member 'UPeople_Interact_BTT_C::DoesTalkAfterRecoveryBK' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, DoesNotBlendInTalkAnimBK) == 0x000240, "Member 'UPeople_Interact_BTT_C::DoesNotBlendInTalkAnimBK' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, ActionIndex) == 0x000268, "Member 'UPeople_Interact_BTT_C::ActionIndex' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, ActionPhase) == 0x00026C, "Member 'UPeople_Interact_BTT_C::ActionPhase' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, ActionSubPhase) == 0x000270, "Member 'UPeople_Interact_BTT_C::ActionSubPhase' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, ConstSubPhaseNotTurning) == 0x000274, "Member 'UPeople_Interact_BTT_C::ConstSubPhaseNotTurning' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, ConstSubPhaseTurning) == 0x000278, "Member 'UPeople_Interact_BTT_C::ConstSubPhaseTurning' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, ConstSubPhaseTalkBegin) == 0x00027C, "Member 'UPeople_Interact_BTT_C::ConstSubPhaseTalkBegin' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, AnimInst) == 0x000280, "Member 'UPeople_Interact_BTT_C::AnimInst' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, Humanoid) == 0x000288, "Member 'UPeople_Interact_BTT_C::Humanoid' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, InteractLocation) == 0x000290, "Member 'UPeople_Interact_BTT_C::InteractLocation' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, OldTalkAnimSequence) == 0x0002A0, "Member 'UPeople_Interact_BTT_C::OldTalkAnimSequence' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, IsNeedTurn) == 0x0002A8, "Member 'UPeople_Interact_BTT_C::IsNeedTurn' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, IsFirstTurn) == 0x0002A9, "Member 'UPeople_Interact_BTT_C::IsFirstTurn' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, IsPlaying) == 0x0002AA, "Member 'UPeople_Interact_BTT_C::IsPlaying' has a wrong offset!");
static_assert(offsetof(UPeople_Interact_BTT_C, DelayCount) == 0x0002AC, "Member 'UPeople_Interact_BTT_C::DelayCount' has a wrong offset!");

}

