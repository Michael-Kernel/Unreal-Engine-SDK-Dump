#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Snowfall

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "TangoLib_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AIModule_structs.hpp"
#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// Enum Snowfall.ESnfFaceType
// NumValues: 0x002A
enum class ESnfFaceType : uint8
{
	Source                                   = 0,
	FT00_Normal                              = 1,
	FT010_Joy                                = 2,
	FT011_Joy                                = 3,
	FT012_Joy                                = 4,
	FT020_Cry                                = 5,
	FT021_Cry                                = 6,
	FT022_Cry                                = 7,
	FT030_Angry                              = 8,
	FT031_Angry                              = 9,
	FT032_Angry                              = 10,
	FT040_Suffer                             = 11,
	FT041_Suffer                             = 12,
	FT042_Suffer                             = 13,
	FT050_Surprise                           = 14,
	FT051_Surprise                           = 15,
	FT060_Nervous                            = 16,
	FT061_Nervous                            = 17,
	FT070_Tired                              = 18,
	FT071_Tired                              = 19,
	FT200_Special                            = 20,
	FT201_Special                            = 21,
	FT202_Special                            = 22,
	FT203_Special                            = 23,
	FT204_Special                            = 24,
	FT205_Special                            = 25,
	FT206_Special                            = 26,
	FT207_Special                            = 27,
	FT208_Special                            = 28,
	FT209_Special                            = 29,
	FT01_Joy                                 = 30,
	FT02_Cry                                 = 31,
	FT03_Angry                               = 32,
	FT03_Angry_B                             = 33,
	FT04_Suffer                              = 34,
	FT04_Suffer_B                            = 35,
	FT05_Surprise                            = 36,
	FT05_Surprise_B                          = 37,
	FT06_Nervous                             = 38,
	FT07_Tired                               = 39,
	None                                     = 255,
	ESnfFaceType_MAX                         = 256,
};

// Enum Snowfall.ESnfGameWeatherType
// NumValues: 0x000B
enum class ESnfGameWeatherType : uint8
{
	Sunny                                    = 0,
	Cloudy                                   = 1,
	Rainy                                    = 2,
	Snowy                                    = 3,
	Stormy                                   = 4,
	Foggy                                    = 5,
	HyakkiRainy                              = 6,
	DaidaraStormy                            = 7,
	InverseRainy                             = 8,
	DaidaraInside                            = 9,
	ESnfGameWeatherType_MAX                  = 10,
};

// Enum Snowfall.ESnfGameCharacterOmenType
// NumValues: 0x0005
enum class ESnfGameCharacterOmenType : uint8
{
	OmenType_None                            = 0,
	OmenType_Approach                        = 1,
	OmenType_Search                          = 2,
	OmenType_Attack                          = 3,
	OmenType_MAX                             = 4,
};

// Enum Snowfall.EInteractCondition
// NumValues: 0x0021
enum class EInteractCondition : uint8
{
	IC_Normal                                = 0,
	IC_LockEvent                             = 1,
	IC_LockTalk                              = 2,
	IC_LockBattle                            = 3,
	IC_LockTimer                             = 4,
	IC_LockSeparation                        = 5,
	IC_LockPlayer                            = 6,
	IC_LockDensity                           = 7,
	IC_LockArea                              = 8,
	IC_LockItem                              = 9,
	IC_LockKey                               = 10,
	IC_LockFull                              = 11,
	IC_LockMoney                             = 12,
	IC_LockSubstitute                        = 13,
	IC_LockLiberation                        = 14,
	IC_LockSwitch                            = 15,
	IC_LockBreak                             = 16,
	IC_LockAction                            = 17,
	IC_LockTalisman                          = 18,
	IC_LockTalismanParalysis                 = 19,
	IC_LockTalismanCoreDamage                = 20,
	IC_LockTalismanNoise                     = 21,
	IC_LockTalismanBlindfold                 = 22,
	IC_LockTalismanJump                      = 23,
	IC_LockTalismanEther                     = 24,
	IC_LockGoal                              = 25,
	IC_LockGoalWhenBattle                    = 26,
	IC_LockCapsuleToySoldOut                 = 27,
	IC_LockGettingReady                      = 28,
	IC_LockSeparationKK                      = 29,
	IC_LockLimitRandomRosary                 = 30,
	IC_LockMysterious                        = 31,
	IC_MAX                                   = 32,
};

// Enum Snowfall.ESnfPlayerInteractType
// NumValues: 0x0005
enum class ESnfPlayerInteractType : uint8
{
	PlayerInteract_Success                   = 0,
	PlayerInteract_CancelSelf                = 1,
	PlayerInteract_CancelAnother             = 2,
	PlayerInteract_FailedLock                = 3,
	PlayerInteract_MAX                       = 4,
};

// Enum Snowfall.ESnfDefenseAttackRuleType
// NumValues: 0x0002
enum class ESnfDefenseAttackRuleType : uint8
{
	AttackRule_None                          = 0,
	AttackRule_MAX                           = 1,
};

// Enum Snowfall.ESnfDefenseType
// NumValues: 0x0004
enum class ESnfDefenseType : uint8
{
	DefenseType_Prison                       = 0,
	DefenseType_Human                        = 1,
	DefenseType_Shooting                     = 2,
	DefenseType_MAX                          = 3,
};

// Enum Snowfall.ESnfHUDMode
// NumValues: 0x0012
enum class ESnfHUDMode : uint8
{
	HUDMode_Play                             = 0,
	HUDMode_Menu                             = 1,
	HUDMode_Pause                            = 2,
	HUDMode_Camera                           = 3,
	HUDMode_Shorcut                          = 4,
	HUDMode_Shop                             = 5,
	HUDMode_Emote                            = 6,
	HUDMode_Hand                             = 7,
	HUDMode_Item                             = 8,
	HUDMode_Binoculars                       = 9,
	HUDMode_SelectWindow                     = 10,
	HUDMode_Osaisen                          = 11,
	HUDMode_Omikuji                          = 12,
	HUDMode_Elevator                         = 13,
	HUDMode_Observer                         = 14,
	HUDMode_SpiritTransferDevice             = 15,
	HUDMode_Inmusubi                         = 16,
	HUDMode_MAX                              = 17,
};

// Enum Snowfall.ESnfWidgetHiddenGroups
// NumValues: 0x000A
enum class ESnfWidgetHiddenGroups : uint8
{
	None                                     = 0,
	InPauseMenu                              = 1,
	InCutScene                               = 2,
	InGameTalk                               = 4,
	InPhotoMode                              = 8,
	InPopupHUD                               = 16,
	InHUDBlockMode                           = 32,
	InBinoculars                             = 64,
	DebugHudAll                              = 128,
	ESnfWidgetHiddenGroups_MAX               = 129,
};

// Enum Snowfall.ESnfHUDFollowDevice
// NumValues: 0x0003
enum class ESnfHUDFollowDevice : uint8
{
	Gamepad                                  = 0,
	KeyboardMouse                            = 1,
	ESnfHUDFollowDevice_MAX                  = 2,
};

// Enum Snowfall.ESnfEndlessTaskRewardType
// NumValues: 0x0003
enum class ESnfEndlessTaskRewardType : uint8
{
	TaskReward_Normal                        = 0,
	TaskReward_Low                           = 1,
	TaskReward_MAX                           = 2,
};

// Enum Snowfall.ESnfEndlessTaskType
// NumValues: 0x002A
enum class ESnfEndlessTaskType : uint8
{
	Task_None                                = 0,
	Task_Time                                = 1,
	Task_Core                                = 2,
	Task_Sneak                               = 3,
	Task_CoreOrSneak                         = 4,
	Task_SneakAir                            = 5,
	Task_Answer                              = 6,
	Task_NotJump                             = 7,
	Task_NotGlide                            = 8,
	Task_NotHand                             = 9,
	Task_NotBow                              = 10,
	Task_NotDamage                           = 11,
	Task_NotKill                             = 12,
	Task_NotBattle                           = 13,
	Task_NotEatMeal                          = 14,
	Task_NotKegareDamage                     = 15,
	Task_UnderAttack                         = 16,
	Task_UnderScan                           = 17,
	Task_UnderWalkStep                       = 18,
	Task_GetYurei                            = 19,
	Task_GetYokai                            = 20,
	Task_GetCollection                       = 21,
	Task_KillCount                           = 22,
	Task_KillSame                            = 23,
	Task_CoreSame                            = 24,
	Task_CancelBullet                        = 25,
	Task_ReflectBullet                       = 26,
	Task_BreakProp                           = 27,
	Task_HitParalysis                        = 28,
	Task_DefenseDogLife                      = 29,
	Task_DefenseYureiLife                    = 30,
	Task_DefenseKKLife                       = 31,
	Task_EvilGhost                           = 32,
	Task_Chain                               = 33,
	Task_Counter                             = 34,
	Task_KillWind                            = 35,
	Task_KillWater                           = 36,
	Task_KillFire                            = 37,
	Task_KillAmewarashi                      = 38,
	Task_KillChiwarashi                      = 39,
	Task_Kegare                              = 40,
	Task_MAX                                 = 41,
};

// Enum Snowfall.ESnfEndlessObjectiveType
// NumValues: 0x001A
enum class ESnfEndlessObjectiveType : uint8
{
	Objective_None                           = 0,
	Objective_Goal                           = 1,
	Objective_Destroy                        = 2,
	Objective_EvilGhost                      = 3,
	Objective_Kegare                         = 4,
	Objective_BreakGold                      = 5,
	Objective_Fusion                         = 6,
	Objective_DefenseKK                      = 7,
	Objective_DefenseDog                     = 8,
	Objective_DefenseYurei                   = 9,
	Objective_Collect                        = 10,
	Objective_CollectYurei                   = 11,
	Objective_CollectSuika                   = 12,
	Objective_Quiz                           = 13,
	Objective_AbsorbYokai                    = 14,
	Objective_DestroySingle                  = 15,
	Objective_DestroyEnemy                   = 16,
	Objective_DestroyTsuchigumo              = 17,
	Objective_Quiz2                          = 18,
	Objective_Quiz3                          = 19,
	Objective_Quiz4                          = 20,
	Objective_Quiz5                          = 21,
	Objective_Quiz6                          = 22,
	Objective_Event                          = 23,
	Objective_ToriiGate                      = 24,
	Objective_MAX                            = 25,
};

// Enum Snowfall.ESnfEndlessGroupType
// NumValues: 0x000E
enum class ESnfEndlessGroupType : uint8
{
	Group_None                               = 0,
	Group_Safe                               = 1,
	Group_Event                              = 2,
	Group_EventRandom                        = 3,
	Group_Gold                               = 4,
	Group_Meal                               = 5,
	Group_Tatari                             = 6,
	Group_Play                               = 7,
	Group_Tutorial                           = 8,
	Group_Battle                             = 9,
	Group_Stealth                            = 10,
	Group_Boss                               = 11,
	Group_LastBoss                           = 12,
	Group_MAX                                = 13,
};

// Enum Snowfall.ESnfPlayerActionType
// NumValues: 0x0046
enum class ESnfPlayerActionType : uint8
{
	PlayerAction_Fusion                      = 0,
	PlayerAction_Separation                  = 1,
	PlayerAction_Grapple                     = 2,
	PlayerAction_Glider                      = 3,
	PlayerAction_GliderEnd                   = 4,
	PlayerAction_Climb                       = 5,
	PlayerAction_Land                        = 6,
	PlayerAction_Stroke                      = 7,
	PlayerAction_KKPowerMax                  = 8,
	PlayerAction_KKMode                      = 9,
	PlayerAction_KKModeEnd                   = 10,
	PlayerAction_CoreNear                    = 11,
	PlayerAction_CoreFar                     = 12,
	PlayerAction_CoreKK                      = 13,
	PlayerAction_Tired                       = 14,
	PlayerAction_CarClimb                    = 15,
	PlayerAction_KegareDamage                = 16,
	PlayerAction_ShotCancel                  = 17,
	PlayerAction_InmusubiAuto                = 18,
	PlayerAction_GetSkill_1stWater           = 19,
	PlayerAction_GetSkill_1stFire            = 20,
	PlayerAction_GetSkill_HandAction         = 21,
	PlayerAction_GetSkill_Common             = 22,
	PlayerAction_Tutorial_ShotEnd            = 23,
	PlayerAction_Tutorial_GuardEnd           = 24,
	PlayerAction_Tutorial_ChargeEnd          = 25,
	PlayerAction_Tutorial_CoreEnd            = 26,
	PlayerAction_Tutorial_KKEnd              = 27,
	PlayerAction_Tutorial_CoreCancel         = 28,
	PlayerAction_Tutorial_TalismanEnd        = 29,
	PlayerAction_Tutorial_SelectTalismanEnd  = 30,
	PlayerAction_ShotWind                    = 31,
	PlayerAction_ShotWater                   = 32,
	PlayerAction_ShotFire                    = 33,
	PlayerAction_ShotBow                     = 34,
	PlayerAction_ShotTalismanParalysis       = 35,
	PlayerAction_ShotTalismanCoreDamage      = 36,
	PlayerAction_ShotTalismanNoise           = 37,
	PlayerAction_ShotTalismanBlindfold       = 38,
	PlayerAction_ShotTalismanJump            = 39,
	PlayerAction_ShotTalismanEther           = 40,
	PlayerAction_Strike                      = 41,
	PlayerAction_ChargeWind                  = 42,
	PlayerAction_ChargeWater                 = 43,
	PlayerAction_ChargeFire                  = 44,
	PlayerAction_NearWind                    = 45,
	PlayerAction_NearWater                   = 46,
	PlayerAction_NearFire                    = 47,
	PlayerAction_AirBackstab                 = 48,
	PlayerAction_AirBackstabIcon             = 49,
	PlayerAction_FallAttack                  = 50,
	PlayerAction_Counter                     = 51,
	PlayerAction_Dodge                       = 52,
	PlayerAction_DodgeNoDamage               = 53,
	PlayerAction_Jump                        = 54,
	PlayerAction_Scan                        = 55,
	PlayerAction_Guard                       = 56,
	PlayerAction_JustGuard                   = 57,
	PlayerAction_CancelBullet                = 58,
	PlayerAction_ReflectBullet               = 59,
	PlayerAction_BigJump                     = 60,
	PlayerAction_EtherTalisman               = 61,
	PlayerAction_FastCharge                  = 62,
	PlayerAction_VisionDamage                = 63,
	PlayerAction_GuardBreakDamage            = 64,
	PlayerAction_JumpInhibit                 = 65,
	PlayerAction_JumpLowCeiling              = 66,
	PlayerAction_Surprise                    = 67,
	PlayerAction_CounterBlow                 = 68,
	PlayerAction_MAX                         = 69,
};

// Enum Snowfall.ESnfLiberationType
// NumValues: 0x0004
enum class ESnfLiberationType : uint8
{
	Prison                                   = 0,
	Hyakki                                   = 1,
	Num                                      = 2,
	ESnfLiberationType_MAX                   = 3,
};

// Enum Snowfall.ESnfWeaponType
// NumValues: 0x0011
enum class ESnfWeaponType : uint8
{
	None                                     = 0,
	Gun                                      = 1,
	Bow                                      = 2,
	FireShot_1st                             = 3,
	FireShot_2nd                             = 4,
	WindShot_1st                             = 5,
	WindShot_2nd                             = 6,
	WaterShot_1st                            = 7,
	WaterShot_2nd                            = 8,
	Talisman                                 = 9,
	Gimmick_Explode                          = 10,
	FireMeleeLauncher                        = 11,
	FireMelee                                = 12,
	WindMelee                                = 13,
	WaterMelee                               = 14,
	Num                                      = 15,
	ESnfWeaponType_MAX                       = 16,
};

// Enum Snowfall.ESnfTalismanEffectType
// NumValues: 0x0009
enum class ESnfTalismanEffectType : uint8
{
	Invalid                                  = 0,
	Paralysis                                = 1,
	CoreDamage                               = 2,
	Noise                                    = 3,
	Blindfold                                = 4,
	Jump                                     = 5,
	Ether                                    = 6,
	Num                                      = 7,
	ESnfTalismanEffectType_MAX               = 8,
};

// Enum Snowfall.ESnfRosaryType
// NumValues: 0x002A
enum class ESnfRosaryType : uint8
{
	Invalid                                  = 0,
	Fire_Attack_Lv1                          = 1,
	Fire_Attack_Lv2                          = 2,
	Fire_Attack_Lv3                          = 3,
	Wind_Attack_Lv1                          = 4,
	Wind_Attack_Lv2                          = 5,
	Wind_Attack_Lv3                          = 6,
	Water_Attack_Lv1                         = 7,
	Water_Attack_Lv2                         = 8,
	Water_Attack_Lv3                         = 9,
	Bow_Attack_Lv1                           = 10,
	Bow_Attack_Lv2                           = 11,
	Bow_Attack_Lv3                           = 12,
	Talisman_Up_Lv1                          = 13,
	Talisman_Up_Lv2                          = 14,
	Talisman_Up_Lv3                          = 15,
	Money_Up_Lv1                             = 16,
	Money_Up_Lv2                             = 17,
	Money_Up_Lv3                             = 18,
	Ether_Up_Lv1                             = 19,
	Ether_Up_Lv2                             = 20,
	Ether_Up_Lv3                             = 21,
	Meal_Up_Lv1                              = 22,
	Meal_Up_Lv2                              = 23,
	Meal_Up_Lv3                              = 24,
	Stealth_Up_Lv1                           = 25,
	Stealth_Up_Lv2                           = 26,
	Stealth_Up_Lv3                           = 27,
	Defence_Up_Lv1                           = 28,
	Defence_Up_Lv2                           = 29,
	Defence_Up_Lv3                           = 30,
	Yurei_Radar_Lv1                          = 31,
	Yurei_Radar_Lv2                          = 32,
	Yurei_Radar_Lv3                          = 33,
	Book_Radar_Lv1                           = 34,
	Book_Radar_Lv2                           = 35,
	Book_Radar_Lv3                           = 36,
	Special_InfiniteAmmo_Lv1                 = 37,
	Special_CompleteSneak_Lv1                = 38,
	Special_FastTransfer_Lv1                 = 39,
	Num                                      = 40,
	ESnfRosaryType_MAX                       = 41,
};

// Enum Snowfall.ESnfEndlessRosaryType
// NumValues: 0x0029
enum class ESnfEndlessRosaryType : uint8
{
	Invalid                                  = 0,
	Wind                                     = 1,
	Water                                    = 2,
	Fire                                     = 3,
	Bow                                      = 4,
	Talisman                                 = 5,
	Food                                     = 6,
	Search                                   = 7,
	EtherSpawn                               = 8,
	LastOne                                  = 9,
	Arrow                                    = 10,
	MoveSpeed                                = 11,
	Gravity                                  = 12,
	WeakAndPower                             = 13,
	WeakAndMoney                             = 14,
	KKModeWithBurn                           = 15,
	KKModeWithFreeze                         = 16,
	CoreOnly                                 = 17,
	CoreCritical                             = 18,
	CoreAttack                               = 19,
	StealthToPower                           = 20,
	StopToHard                               = 21,
	HealGuardPerfect                         = 22,
	HealKillEnemy                            = 23,
	EnemyOneKill                             = 24,
	AttackForTime                            = 25,
	Random_1                                 = 26,
	Random_2                                 = 27,
	Random_3                                 = 28,
	Random_4                                 = 29,
	Random_5                                 = 30,
	Random_6                                 = 31,
	Random_7                                 = 32,
	Random_8                                 = 33,
	Random_9                                 = 34,
	Random_10                                = 35,
	Random_11                                = 36,
	Random_12                                = 37,
	Random_Over                              = 38,
	EndlessRosaryTypeMax                     = 39,
	ESnfEndlessRosaryType_MAX                = 40,
};

// Enum Snowfall.ESnfCostumeType
// NumValues: 0x000C
enum class ESnfCostumeType : uint8
{
	None                                     = 0,
	Head                                     = 1,
	Tops                                     = 2,
	Bottoms                                  = 3,
	Gloves                                   = 4,
	Shoes                                    = 5,
	Hair                                     = 6,
	Mask                                     = 7,
	Watch                                    = 8,
	Set                                      = 9,
	Num                                      = 10,
	ESnfCostumeType_MAX                      = 11,
};

// Enum Snowfall.ESnfAmmoType
// NumValues: 0x0008
enum class ESnfAmmoType : uint8
{
	Bullet_Normal                            = 0,
	Arrow_Normal                             = 1,
	Ether_Normal                             = 2,
	Ether_Fire                               = 3,
	Ether_Wind                               = 4,
	Ether_Water                              = 5,
	Num                                      = 6,
	ESnfAmmoType_MAX                         = 7,
};

// Enum Snowfall.ESnfPlaySoundSelectType
// NumValues: 0x0006
enum class ESnfPlaySoundSelectType : uint8
{
	One                                      = 0,
	All                                      = 1,
	FavoriteOne                              = 2,
	FavoriteAll                              = 3,
	Num                                      = 4,
	ESnfPlaySoundSelectType_MAX              = 5,
};

// Enum Snowfall.ESnfPlaySoundRepeatType
// NumValues: 0x0004
enum class ESnfPlaySoundRepeatType : uint8
{
	No                                       = 0,
	Repeat                                   = 1,
	Num                                      = 2,
	ESnfPlaySoundRepeatType_MAX              = 3,
};

// Enum Snowfall.ESnfPlaySoundShuffleType
// NumValues: 0x0004
enum class ESnfPlaySoundShuffleType : uint8
{
	No                                       = 0,
	Shuffle                                  = 1,
	Num                                      = 2,
	ESnfPlaySoundShuffleType_MAX             = 3,
};

// Enum Snowfall.ESnfPlayerFlag
// NumValues: 0x002B
enum class ESnfPlayerFlag : uint8
{
	Invalid                                  = 0,
	NotMenu                                  = 1,
	NotMap                                   = 2,
	NotGauge                                 = 3,
	NotTravel                                = 4,
	NotSkill                                 = 5,
	NotSound                                 = 6,
	NotCostume                               = 7,
	NotCostumeChange                         = 8,
	NotHand                                  = 9,
	NotGhostPurge                            = 10,
	NotGhostAbsorb                           = 11,
	NotSeparation                            = 12,
	NotKKMode                                = 13,
	NotGun                                   = 14,
	NotBow                                   = 15,
	NotFire                                  = 16,
	NotWind                                  = 17,
	NotWater                                 = 18,
	NotTalisman                              = 19,
	NotRosary                                = 20,
	NotStone                                 = 21,
	NotEther                                 = 22,
	NotScan                                  = 23,
	NotGraple                                = 24,
	NotGlide                                 = 25,
	NotDash                                  = 26,
	SetSpecialDash                           = 27,
	NotJump                                  = 28,
	NotCrouch                                = 29,
	NotGuard                                 = 30,
	NotJustGuard                             = 31,
	NotCharge                                = 32,
	NotCoreAbsorb                            = 33,
	NotBackstab                              = 34,
	NotSideMission                           = 35,
	NotExchangeMission                       = 36,
	NotDensity                               = 37,
	EventTimer                               = 38,
	EventSeparation                          = 39,
	EventFaceHaze                            = 40,
	Num                                      = 41,
	ESnfPlayerFlag_MAX                       = 42,
};

// Enum Snowfall.ESnfConditionType
// NumValues: 0x000E
enum class ESnfConditionType : uint8
{
	Condition_Power                          = 0,
	Condition_Spirit                         = 1,
	Condition_Curse                          = 2,
	Condition_Freeze                         = 3,
	Condition_FlashLight                     = 4,
	Condition_Crouch                         = 5,
	Condition_Separation                     = 6,
	Condition_AroundEther1                   = 7,
	Condition_AroundEther2                   = 8,
	Condition_AroundMeal1                    = 9,
	Condition_AroundMeal2                    = 10,
	Condition_GuardBreak                     = 11,
	Num                                      = 12,
	ESnfConditionType_MAX                    = 13,
};

// Enum Snowfall.ESnfBuffType
// NumValues: 0x000F
enum class ESnfBuffType : uint8
{
	Invalid                                  = 0,
	Fortune_A_Lv0                            = 1,
	Fortune_A_Lv1                            = 2,
	Fortune_A_Lv2                            = 3,
	Fortune_A_Lv3                            = 4,
	Fortune_A_Lv4                            = 5,
	Fortune_A_Lv5                            = 6,
	Fortune_A_Lv6                            = 7,
	Meal_A_Lv1                               = 8,
	Meal_B_Lv1                               = 9,
	Meal_C_Lv1                               = 10,
	Meal_D_Lv1                               = 11,
	Meal_E_Lv1                               = 12,
	Num                                      = 13,
	ESnfBuffType_MAX                         = 14,
};

// Enum Snowfall.ESnfSkillType
// NumValues: 0x0072
enum class ESnfSkillType : uint8
{
	Invalid                                  = 0,
	Graple_Lv1                               = 1,
	Graple_Lv10                              = 2,
	Glide_Lv1                                = 3,
	Glide_Lv2                                = 4,
	Glide_Lv3                                = 5,
	Wire_Lv1                                 = 6,
	Wire_Lv2                                 = 7,
	Wire_Lv3                                 = 8,
	Scan_Lv1                                 = 9,
	Scan_Lv2                                 = 10,
	Scan_Lv3                                 = 11,
	KKMode_Lv1                               = 12,
	KKMode_Lv2                               = 13,
	KKMode_Lv3                               = 14,
	Stealth_Lv1                              = 15,
	Stealth_Lv3                              = 16,
	Corestun_Lv1                             = 17,
	Corestun_Lv2                             = 18,
	Corenear_Lv1                             = 19,
	Corenear_Lv2                             = 20,
	DownDamage_Lv1                           = 21,
	DownDamage_Lv2                           = 22,
	BlowDrop_Lv1                             = 23,
	BlowDrop_Lv2                             = 24,
	Wiresp_Lv1                               = 25,
	Wiresp_Lv2                               = 26,
	Coredown_Lv1                             = 27,
	Coredown_Lv2                             = 28,
	JustGuard_Lv1                            = 29,
	JustGuard_Lv2                            = 30,
	Ghost_Lv1                                = 31,
	Ghost_Lv2                                = 32,
	Fire_Common                              = 33,
	Fire_Lv1                                 = 34,
	Fire_Lv2                                 = 35,
	Fire_Lv3                                 = 36,
	Fire_Lv4                                 = 37,
	Fire_Lv5                                 = 38,
	Fire2_Lv1                                = 39,
	Fire2_Lv2                                = 40,
	Fire2_Lv3                                = 41,
	Fire2_Lv4                                = 42,
	Fire2_Lv5                                = 43,
	Wind_Common                              = 44,
	Wind_Lv1                                 = 45,
	Wind_Lv2                                 = 46,
	Wind_Lv3                                 = 47,
	Wind_Lv4                                 = 48,
	Wind_Lv5                                 = 49,
	Wind2_Lv1                                = 50,
	Wind2_Lv2                                = 51,
	Wind2_Lv3                                = 52,
	Wind2_Lv4                                = 53,
	Wind2_Lv5                                = 54,
	Water_Common                             = 55,
	Water_Lv1                                = 56,
	Water_Lv2                                = 57,
	Water_Lv3                                = 58,
	Water_Lv4                                = 59,
	Water_Lv5                                = 60,
	Water2_Lv1                               = 61,
	Water2_Lv2                               = 62,
	Water2_Lv3                               = 63,
	Water2_Lv4                               = 64,
	Water2_Lv5                               = 65,
	Charge_Lv1                               = 66,
	Charge_Lv2                               = 67,
	Charge_Lv3                               = 68,
	Bow_Lv1                                  = 69,
	Bow_Lv2                                  = 70,
	Bow_Lv3                                  = 71,
	Bow_Lv4                                  = 72,
	Bow2_Lv2                                 = 73,
	Bow2_Lv3                                 = 74,
	Talisman_Lv1                             = 75,
	Talisman_Lv2                             = 76,
	Talisman_Lv3                             = 77,
	Talisman_Lv4                             = 78,
	Rosary_Lv1                               = 79,
	Rosary_Lv2                               = 80,
	Rosary_Lv3                               = 81,
	Item_Lv1                                 = 82,
	Item_Lv2                                 = 83,
	Item_Lv3                                 = 84,
	BossA_Lv1                                = 85,
	BossB_Lv1                                = 86,
	BossC_Lv1                                = 87,
	Raccoon_Lv1                              = 88,
	Raccoon_Lv2                              = 89,
	Raccoon_Lv3                              = 90,
	Raccoon_Lv4                              = 91,
	Raccoon_Lv5                              = 92,
	ChargeFast_Lv1                           = 93,
	CoreChain_Lv1                            = 94,
	Dodge_Lv1                                = 95,
	Dodge_Lv2                                = 96,
	AttackAir_Lv1                            = 97,
	AttackAir_Lv2                            = 98,
	CoreAir_Lv1                              = 99,
	CoreAir_Lv2                              = 100,
	JustGuardCounter_Lv1                     = 101,
	JustGuardCounter_Lv2                     = 102,
	FireNear_Common                          = 103,
	FireNear1_Lv1                            = 104,
	FireNear2_Lv1                            = 105,
	WindNear_Common                          = 106,
	WindNear1_Lv1                            = 107,
	WindNear2_Lv1                            = 108,
	WaterNear_Common                         = 109,
	WaterNear1_Lv1                           = 110,
	WaterNear2_Lv1                           = 111,
	Num                                      = 112,
	ESnfSkillType_MAX                        = 113,
};

// Enum Snowfall.ESnfEndlessSkillType
// NumValues: 0x0084
enum class ESnfEndlessSkillType : uint8
{
	Invalid                                  = 0,
	Common                                   = 1,
	LifeMax_Lv1                              = 2,
	LifeMax_Lv2                              = 3,
	LifeMax_Lv3                              = 4,
	LifeMax_Lv4                              = 5,
	LifeMax_Lv5                              = 6,
	Scan_Lv1                                 = 7,
	Scan_Lv2                                 = 8,
	ScanLength_Lv1                           = 9,
	ScanLength_Lv2                           = 10,
	CrouchSpeed_Lv1                          = 11,
	CrouchSpeed_Lv2                          = 12,
	Glide_Lv1                                = 13,
	GlideTime_Lv1                            = 14,
	GlideTime_Lv2                            = 15,
	Graple_Lv1                               = 16,
	CoreHeal_Lv1                             = 17,
	CoreHeal_Lv2                             = 18,
	CoreHeal_Lv3                             = 19,
	CoreHeal_Lv4                             = 20,
	CoreHeal_Lv5                             = 21,
	CoreTime_Lv1                             = 22,
	CoreTime_Lv2                             = 23,
	CoreTime_Lv3                             = 24,
	CoreSpeed_Lv1                            = 25,
	CoreSpeed_Lv2                            = 26,
	CoreNear_Lv1                             = 27,
	CoreNearSpeed_Lv1                        = 28,
	AbsorbSpeed_Lv1                          = 29,
	AbsorbSpeed_Lv2                          = 30,
	KKMode_Lv1                               = 31,
	KKModeTime_Lv1                           = 32,
	KKModeTime_Lv2                           = 33,
	JustEther_Lv1                            = 34,
	JustEther_Lv2                            = 35,
	JustCounter_Lv1                          = 36,
	JustCounter_Lv2                          = 37,
	Dodge_Lv1                                = 38,
	Dodge_Lv2                                = 39,
	KillEther_Lv1                            = 40,
	KillEther_Lv2                            = 41,
	AttackEther_Lv1                          = 42,
	AttackEther_Lv2                          = 43,
	AttackDown_Lv1                           = 44,
	AttackDown_Lv2                           = 45,
	AttackFall_Lv1                           = 46,
	AttackFall_Lv2                           = 47,
	PurgeDown_Lv1                            = 48,
	PurgeDownSpeed_Lv1                       = 49,
	PurgeFall_Lv1                            = 50,
	PurgeFallSilent_Lv1                      = 51,
	PurgeFallContinue_Lv1                    = 52,
	BackstabSilent_Lv1                       = 53,
	BackstabSilent_Lv2                       = 54,
	Discount_Lv1                             = 55,
	Discount_Lv2                             = 56,
	Discount_Lv3                             = 57,
	ShotCharge_Lv1                           = 58,
	ShotChargeTime_Lv1                       = 59,
	ShotChargeTime_Lv2                       = 60,
	ShotChargeFast_Lv1                       = 61,
	WindAmmo_Lv1                             = 62,
	WindAmmo_Lv2                             = 63,
	WindAmmo_Lv3                             = 64,
	WindAmmo_Lv4                             = 65,
	WindCritical_Lv1                         = 66,
	WindCritical_Lv2                         = 67,
	Wind1_Lv1                                = 68,
	Wind1Cool_Lv1                            = 69,
	Wind1Cool_Lv2                            = 70,
	Wind1Cool_Lv3                            = 71,
	Wind2_Lv1                                = 72,
	Wind2Combo_Lv1                           = 73,
	Wind2Combo_Lv2                           = 74,
	Wind3_Lv1                                = 75,
	Wind3Critical_Lv1                        = 76,
	Wind3Speed_Lv1                           = 77,
	WaterAmmo_Lv1                            = 78,
	WaterAmmo_Lv2                            = 79,
	WaterAmmo_Lv3                            = 80,
	WaterAmmo_Lv4                            = 81,
	WaterCritical_Lv1                        = 82,
	WaterCritical_Lv2                        = 83,
	Water1_Lv1                               = 84,
	Water1Spread_Lv1                         = 85,
	Water1Spread_Lv2                         = 86,
	Water2_Lv1                               = 87,
	Water2Range_Lv1                          = 88,
	Water2Range_Lv2                          = 89,
	Water2Range_Lv3                          = 90,
	Water3_Lv1                               = 91,
	Water3Time_Lv1                           = 92,
	Water3Length_Lv1                         = 93,
	FireAmmo_Lv1                             = 94,
	FireAmmo_Lv2                             = 95,
	FireAmmo_Lv3                             = 96,
	FireAmmo_Lv4                             = 97,
	FireCritical_Lv1                         = 98,
	FireCritical_Lv2                         = 99,
	Fire1_Lv1                                = 100,
	Fire1Penetration_Lv1                     = 101,
	Fire1Penetration_Lv2                     = 102,
	Fire2_Lv1                                = 103,
	Fire2Range_Lv1                           = 104,
	Fire2Range_Lv2                           = 105,
	Fire2Range_Lv3                           = 106,
	Fire3_Lv1                                = 107,
	Fire3Burn_Lv1                            = 108,
	Fire3Explosion_Lv1                       = 109,
	Fire3Explosion_Lv2                       = 110,
	Fire3Explosion_Lv3                       = 111,
	Bow_Lv1                                  = 112,
	BowAmmo_Lv1                              = 113,
	BowAmmo_Lv2                              = 114,
	BowAmmo_Lv3                              = 115,
	BowAmmo_Lv4                              = 116,
	BowCharge_Lv1                            = 117,
	BowCharge_Lv2                            = 118,
	TalismanCount_Lv1                        = 119,
	TalismanCount_Lv2                        = 120,
	TalismanCount_Lv3                        = 121,
	TalismanCount_Lv4                        = 122,
	TalismanCount_Lv5                        = 123,
	FoodCount_Lv1                            = 124,
	FoodCount_Lv2                            = 125,
	FoodCount_Lv3                            = 126,
	RosaryEquip_Lv1                          = 127,
	RosaryEquip_Lv2                          = 128,
	RosaryEquip_Lv3                          = 129,
	EndlessSkillTypeMax                      = 130,
	ESnfEndlessSkillType_MAX                 = 131,
};

// Enum Snowfall.ESnfDifficulty
// NumValues: 0x0005
enum class ESnfDifficulty : uint8
{
	Easy                                     = 0,
	Normal                                   = 1,
	Hard                                     = 2,
	Extra                                    = 3,
	ESnfDifficulty_MAX                       = 4,
};

// Enum Snowfall.EInteractName
// NumValues: 0x004A
enum class EInteractName : uint8
{
	IN_None                                  = 0,
	IN_Error                                 = 1,
	IN_Activate                              = 2,
	IN_Take                                  = 3,
	IN_TakeOnlyEye                           = 4,
	IN_Give                                  = 5,
	IN_Use                                   = 6,
	IN_Touch                                 = 7,
	IN_Open                                  = 8,
	IN_Close                                 = 9,
	IN_On                                    = 10,
	IN_Off                                   = 11,
	IN_Talk                                  = 12,
	IN_Shop                                  = 13,
	IN_Game                                  = 14,
	IN_Climb                                 = 15,
	IN_Equip                                 = 16,
	IN_Unequip                               = 17,
	IN_Purge                                 = 18,
	IN_Scan                                  = 19,
	IN_Show                                  = 20,
	IN_Look                                  = 21,
	IN_Grab                                  = 22,
	IN_Throw                                 = 23,
	IN_Backstab                              = 24,
	IN_Push                                  = 25,
	IN_Lock                                  = 26,
	IN_Stroke                                = 27,
	IN_Feed                                  = 28,
	IN_Possession                            = 29,
	IN_Torii                                 = 30,
	IN_Pray                                  = 31,
	IN_Fortune                               = 32,
	IN_Goshuin                               = 33,
	IN_Substitute                            = 34,
	IN_In                                    = 35,
	IN_Out                                   = 36,
	IN_Worship                               = 37,
	IN_Search                                = 38,
	IN_Put                                   = 39,
	IN_Move                                  = 40,
	IN_Feel                                  = 41,
	IN_Reload                                = 42,
	IN_Grapple                               = 43,
	IN_Glider                                = 44,
	IN_Absorb                                = 45,
	IN_Fall                                  = 46,
	IN_Climbdown                             = 47,
	IN_KKAttract                             = 48,
	IN_GhostPull                             = 49,
	IN_GhostPurge                            = 50,
	IN_GhostAbsorb                           = 51,
	IN_GhostAbsorbMany                       = 52,
	IN_YokaiAbsorb                           = 53,
	IN_YokaiTake                             = 54,
	IN_EnemyCore                             = 55,
	IN_KegarePurge                           = 56,
	IN_InMusubi                              = 57,
	IN_Telescope                             = 58,
	IN_Telephone                             = 59,
	IN_Boot                                  = 60,
	IN_Twist                                 = 61,
	IN_SendData                              = 62,
	IN_ScanAndTalk                           = 63,
	IN_ListenToFeeling                       = 64,
	IN_SpiritPhoto                           = 65,
	IN_GuardCounter                          = 66,
	IN_BackstabAir                           = 67,
	IN_EndlessGoal                           = 68,
	IN_CapsuleToy                            = 69,
	IN_Graffiti                              = 70,
	IN_Thread                                = 71,
	IN_Protect                               = 72,
	IN_MAX                                   = 73,
};

// Enum Snowfall.ESnfGamePopupType
// NumValues: 0x0008
enum class ESnfGamePopupType : uint8
{
	PopupType_None                           = 0,
	PopupType_Item                           = 1,
	PopupType_Activity                       = 2,
	PopupType_Location                       = 3,
	PopupType_Tutorial                       = 4,
	PopupType_Button                         = 5,
	PopupType_LevelUp                        = 6,
	PopupType_Max                            = 7,
};

// Enum Snowfall.EOsaisenWishType
// NumValues: 0x000C
enum class EOsaisenWishType : uint8
{
	None                                     = 0,
	SearchJizo                               = 1,
	SearchRaccoon                            = 2,
	SearchCollection                         = 3,
	HeelLife                                 = 4,
	HeelEther                                = 5,
	ClearEnemy                               = 6,
	ClearHyakki                              = 7,
	Playful                                  = 8,
	GiveSharedItems                          = 9,
	Unique                                   = 10,
	EOsaisenWishType_MAX                     = 11,
};

// Enum Snowfall.ESnfMarebitoItem
// NumValues: 0x0003
enum class ESnfMarebitoItem : uint8
{
	None                                     = 0,
	Phone                                    = 1,
	ESnfMarebitoItem_MAX                     = 2,
};

// Enum Snowfall.ESnfMrbtAlertLevel
// NumValues: 0x0005
enum class ESnfMrbtAlertLevel : uint8
{
	ALT_Normal                               = 0,
	ALT_Caution                              = 1,
	ALT_Alert                                = 2,
	ALT_Emergency                            = 3,
	ALT_MAX                                  = 4,
};

// Enum Snowfall.ESnfGameMarkerType
// NumValues: 0x0007
enum class ESnfGameMarkerType : uint8
{
	MarkerType_Normal                        = 0,
	MarkerType_Begin                         = 1,
	MarkerType_Play                          = 2,
	MarkerType_End                           = 3,
	MarkerType_None                          = 4,
	MarkerTypeMax                            = 5,
	ESnfGameMarkerType_MAX                   = 6,
};

// Enum Snowfall.EKeyMoveVector
// NumValues: 0x0005
enum class EKeyMoveVector : uint8
{
	DOWN                                     = 0,
	LEFT                                     = 1,
	UP                                       = 2,
	RIGHT                                    = 3,
	EKeyMoveVector_MAX                       = 4,
};

// Enum Snowfall.ESnfActivityTriggerActorShapeType
// NumValues: 0x0003
enum class ESnfActivityTriggerActorShapeType : uint8
{
	Box                                      = 0,
	Sphere                                   = 1,
	ESnfActivityTriggerActorShapeType_MAX    = 2,
};

// Enum Snowfall.ESnfYokaiRokurokubiTalkTiming
// NumValues: 0x0003
enum class ESnfYokaiRokurokubiTalkTiming : uint8
{
	Escape                                   = 0,
	Found                                    = 1,
	ESnfYokaiRokurokubiTalkTiming_MAX        = 2,
};

// Enum Snowfall.ESnfYokaiRokurokubiType
// NumValues: 0x0007
enum class ESnfYokaiRokurokubiType : uint8
{
	Front                                    = 0,
	Right                                    = 1,
	Left                                     = 2,
	Main                                     = 3,
	Front_EscapeBack                         = 4,
	Duct                                     = 5,
	ESnfYokaiRokurokubiType_MAX              = 6,
};

// Enum Snowfall.ESnfYokaiIttanmomenWaitType
// NumValues: 0x0005
enum class ESnfYokaiIttanmomenWaitType : uint8
{
	Duration                                 = 0,
	Approach                                 = 1,
	Stun                                     = 2,
	Giddy                                    = 3,
	ESnfYokaiIttanmomenWaitType_MAX          = 4,
};

// Enum Snowfall.ESnfYokaiKamaitachiWaitType
// NumValues: 0x0005
enum class ESnfYokaiKamaitachiWaitType : uint8
{
	Duration                                 = 0,
	Approach                                 = 1,
	Stun                                     = 2,
	Giddy                                    = 3,
	ESnfYokaiKamaitachiWaitType_MAX          = 4,
};

// Enum Snowfall.ESnfYokaiZashikiwarashiType
// NumValues: 0x0006
enum class ESnfYokaiZashikiwarashiType : uint8
{
	Mob                                      = 0,
	Mission1st                               = 1,
	Mission2nd                               = 2,
	Mission2nd_2                             = 3,
	OutsideTalk                              = 4,
	ESnfYokaiZashikiwarashiType_MAX          = 5,
};

// Enum Snowfall.ESnfOutlineStencil
// NumValues: 0x0005
enum class ESnfOutlineStencil : uint8
{
	SnfOutlineStencil_None                   = 0,
	SnfOutlineStencil_Red                    = 1,
	SnfOutlineStencil_Green                  = 2,
	SnfOutlineStencil_Blue                   = 3,
	SnfOutlineStencil_MAX                    = 4,
};

// Enum Snowfall.ESnfUserStencil
// NumValues: 0x000C
enum class ESnfUserStencil : uint8
{
	SnfUserStencil_None                      = 0,
	SnfUserStencil_Player                    = 1,
	SnfUserStencil_Npc                       = 2,
	SnfUserStencil_AnumalLuminous            = 3,
	SnfUserStencil_TalkAnumal                = 4,
	SnfUserStencil_EnemyCcontact             = 5,
	SnfUserStencil_Yokai                     = 6,
	SnfUserStencil_NpcRinko                  = 7,
	SnfUserStencil_NpcDiffusion              = 8,
	SnfUserStencil_NotEnvironment            = 15,
	SnfUserStencil_NotKegare                 = 31,
	SnfUserStencil_MAX                       = 32,
};

// Enum Snowfall.ESnfAISenseSightShapeType
// NumValues: 0x0004
enum class ESnfAISenseSightShapeType : uint8
{
	Invalid                                  = 0,
	Cylinder                                 = 1,
	Cone                                     = 2,
	ESnfAISenseSightShapeType_MAX            = 3,
};

// Enum Snowfall.ESnfDITurnResult
// NumValues: 0x0003
enum class ESnfDITurnResult : uint8
{
	Success                                  = 0,
	Fail                                     = 1,
	ESnfDITurnResult_MAX                     = 2,
};

// Enum Snowfall.FSnfInterpMode
// NumValues: 0x0005
enum class EFSnfInterpMode : uint8
{
	Linear                                   = 0,
	EaseOut                                  = 1,
	EaseIn                                   = 2,
	EaseInOut                                = 3,
	FSnfInterpMode_MAX                       = 4,
};

// Enum Snowfall.EAm0060IdleType
// NumValues: 0x0007
enum class EAm0060IdleType : uint8
{
	None                                     = 0,
	StandNormal                              = 1,
	StandUp                                  = 2,
	SitNormal                                = 3,
	SitRelax                                 = 4,
	Lie                                      = 5,
	EAm0060IdleType_MAX                      = 6,
};

// Enum Snowfall.EAm0030IdleType
// NumValues: 0x000B
enum class EAm0030IdleType : uint8
{
	None                                     = 0,
	StandNormal                              = 1,
	StandEat                                 = 2,
	SitNormal                                = 3,
	SitGaze                                  = 4,
	LieNormal                                = 5,
	LieGaze                                  = 6,
	SleepTurnOver                            = 7,
	SleepCurledUp                            = 8,
	Death                                    = 9,
	EAm0030IdleType_MAX                      = 10,
};

// Enum Snowfall.EAm0020IdleType
// NumValues: 0x0006
enum class EAm0020IdleType : uint8
{
	None                                     = 0,
	StandNormal                              = 1,
	SitNormal                                = 2,
	LieNormal                                = 3,
	LieFrightened                            = 4,
	EAm0020IdleType_MAX                      = 5,
};

// Enum Snowfall.ESnfNpcAnimalBumpAnimType
// NumValues: 0x0004
enum class ESnfNpcAnimalBumpAnimType : uint8
{
	UpLow                                    = 0,
	UpHigh                                   = 1,
	Down                                     = 2,
	ESnfNpcAnimalBumpAnimType_MAX            = 3,
};

// Enum Snowfall.ESnfNpcAnimalBumpUpType
// NumValues: 0x0003
enum class ESnfNpcAnimalBumpUpType : uint8
{
	UpLow                                    = 0,
	UpHigh                                   = 1,
	ESnfNpcAnimalBumpUpType_MAX              = 2,
};

// Enum Snowfall.ESnfNpcAnimalTurnType
// NumValues: 0x0006
enum class ESnfNpcAnimalTurnType : uint8
{
	TurnNone                                 = 0,
	TurnLeft90                               = 1,
	TurnLeft180                              = 2,
	TurnRight90                              = 3,
	TurnRight180                             = 4,
	ESnfNpcAnimalTurnType_MAX                = 5,
};

// Enum Snowfall.ESnfNpcAnimalAnimState
// NumValues: 0x0008
enum class ESnfNpcAnimalAnimState : uint8
{
	AnimStateIdle                            = 0,
	AnimStateMove                            = 1,
	AnimStateTurn                            = 2,
	AnimStateThreat                          = 3,
	AnimStateBumpUp                          = 4,
	AnimStateBumpDown                        = 5,
	AnimStateDig                             = 6,
	ESnfNpcAnimalAnimState_MAX               = 7,
};

// Enum Snowfall.ESnfNpcAnimalState
// NumValues: 0x0006
enum class ESnfNpcAnimalState : uint8
{
	Idle                                     = 0,
	Move                                     = 1,
	Turn                                     = 2,
	Threat                                   = 3,
	Bump                                     = 4,
	ESnfNpcAnimalState_MAX                   = 5,
};

// Enum Snowfall.ESnfAnimNotifyActivityTagType
// NumValues: 0x0004
enum class ESnfAnimNotifyActivityTagType : uint8
{
	AT_ADD                                   = 0,
	AT_REMOVE                                = 1,
	AT_CLEAR                                 = 2,
	AT_MAX                                   = 3,
};

// Enum Snowfall.ESnfAnimNotifyFootstepType
// NumValues: 0x0006
enum class ESnfAnimNotifyFootstepType : uint8
{
	FOOTSTEP_LEFT                            = 0,
	FOOTSTEP_RIGHT                           = 1,
	FOOTSTEP_LEFT_FRONT                      = 2,
	FOOTSTEP_RIGHT_FRONT                     = 3,
	FOOTSTEP_LAND                            = 4,
	FOOTSTEP_MAX                             = 5,
};

// Enum Snowfall.ESnfMrbtProcType
// NumValues: 0x001E
enum class ESnfMrbtProcType : uint8
{
	GrabCoreSuccess                          = 0,
	CoreBreakPose                            = 1,
	ForceCoreHole                            = 2,
	Suicide                                  = 3,
	Summon                                   = 4,
	PlayCoreFxProp                           = 5,
	EndNotAction                             = 6,
	OpenShell                                = 7,
	BackstabCoreDamage                       = 8,
	CoopAttack                               = 9,
	KillPlayer                               = 10,
	TakeCounter                              = 11,
	CheckSomething                           = 12,
	FloatingState                            = 13,
	DownPhysics                              = 14,
	BlowoffSpeed                             = 15,
	ReceiveNextDamageAnim                    = 16,
	GravityScale                             = 17,
	AttackTwist                              = 18,
	Cancel                                   = 19,
	WallHitCheck                             = 20,
	AttachItem                               = 21,
	HideItem                                 = 22,
	Locomotion                               = 23,
	ActionCore                               = 24,
	PreAttack                                = 25,
	TakeCounterDown                          = 26,
	ComboCheck                               = 27,
	InvalidJustGuard                         = 28,
	Max                                      = 29,
};

// Enum Snowfall.ETutorialEnemyGroup
// NumValues: 0x0006
enum class ETutorialEnemyGroup : uint8
{
	TutorialEnemyGroup_NormalShot            = 0,
	TutorialEnemyGroup_NormalShot2           = 1,
	TutorialEnemyGroup_CorePullOut           = 2,
	StealthBattleEnemyGroup                  = 3,
	TalismanBattleEnemyGroup                 = 4,
	ETutorialEnemyGroup_MAX                  = 5,
};

// Enum Snowfall.ESnfBetoNotifyActionType
// NumValues: 0x0003
enum class ESnfBetoNotifyActionType : uint8
{
	Battle30Sec                              = 0,
	Warp                                     = 1,
	ESnfBetoNotifyActionType_MAX             = 2,
};

// Enum Snowfall.ESnfBNetModalType
// NumValues: 0x000B
enum class ESnfBNetModalType : uint8
{
	Dummy                                    = 0,
	QuickAccount                             = 1,
	Login                                    = 2,
	AccountExists                            = 3,
	Agreements                               = 4,
	UpdatedAgreement                         = 5,
	LinkingSuccessful                        = 6,
	Management                               = 7,
	AccountHelp                              = 8,
	CountMax                                 = 9,
	ESnfBNetModalType_MAX                    = 10,
};

// Enum Snowfall.ESnfCapsuleToyMachineSkeletalMeshType
// NumValues: 0x0005
enum class ESnfCapsuleToyMachineSkeletalMeshType : uint32
{
	None                                     = 0,
	GettingReady                             = 1,
	Sale                                     = 2,
	SoldOut                                  = 3,
	ESnfCapsuleToyMachineSkeletalMeshType_MAX = 4,
};

// Enum Snowfall.ECapsuleToyColorType
// NumValues: 0x0007
enum class ECapsuleToyColorType : uint8
{
	Red                                      = 0,
	Blue                                     = 1,
	Yellow                                   = 2,
	Green                                    = 3,
	Purple                                   = 4,
	Pink                                     = 5,
	Max                                      = 6,
};

// Enum Snowfall.MoveMode
// NumValues: 0x0004
enum class EMoveMode : uint8
{
	Departure                                = 0,
	Drive                                    = 1,
	Arrival                                  = 2,
	MoveMode_MAX                             = 3,
};

// Enum Snowfall.CarryMode
// NumValues: 0x0003
enum class ECarryMode : uint8
{
	Tracking                                 = 0,
	Trace                                    = 1,
	CarryMode_MAX                            = 2,
};

// Enum Snowfall.ESnfPlayerCheckCollisionType
// NumValues: 0x0004
enum class ESnfPlayerCheckCollisionType : uint8
{
	Sphere                                   = 0,
	Box                                      = 1,
	Cylinder                                 = 2,
	ESnfPlayerCheckCollisionType_MAX         = 3,
};

// Enum Snowfall.ESnfCollisionActorCollisionSetting
// NumValues: 0x0009
enum class ESnfCollisionActorCollisionSetting : uint8
{
	InvisibleWall                            = 0,
	InvisibleWallBlockInteract               = 1,
	InvisibleWallOnlyEnemy                   = 2,
	BlockEnemyGaze                           = 3,
	InvisibleWallOnlyPlayer                  = 4,
	InvisibleWallBlockAll                    = 5,
	InvisibleWallBlockShotOnly               = 6,
	InvisibleWallBlockSaraOnly               = 7,
	ESnfCollisionActorCollisionSetting_MAX   = 8,
};

// Enum Snowfall.ESnfCollisionType
// NumValues: 0x0004
enum class ESnfCollisionType : uint8
{
	Sphere                                   = 0,
	Box                                      = 1,
	Capsule                                  = 2,
	ESnfCollisionType_MAX                    = 3,
};

// Enum Snowfall.ESnfCommonNpcSkeletonType
// NumValues: 0x0006
enum class ESnfCommonNpcSkeletonType : uint8
{
	StandardMale                             = 0,
	TallMale                                 = 1,
	FatMale                                  = 2,
	StandardFemale                           = 3,
	Child                                    = 4,
	ESnfCommonNpcSkeletonType_MAX            = 5,
};

// Enum Snowfall.ESnfControlCheckActStepSendCondition
// NumValues: 0x0004
enum class ESnfControlCheckActStepSendCondition : uint8
{
	Begin                                    = 0,
	Finish                                   = 1,
	Just                                     = 2,
	ESnfControlCheckActStepSendCondition_MAX = 3,
};

// Enum Snowfall.EControlButton
// NumValues: 0x0023
enum class EControlButton : uint8
{
	None                                     = 0,
	A                                        = 1,
	B                                        = 2,
	X                                        = 3,
	Y                                        = 4,
	LStickAxis                               = 5,
	LStickAxisUp                             = 6,
	LStickAxisDown                           = 7,
	LStickAxisUpDown                         = 8,
	LStickAxisLeft                           = 9,
	LStickAxisRight                          = 10,
	LStickAxisLeftRight                      = 11,
	LStickPress                              = 12,
	RStickAxis                               = 13,
	RStickAxisUp                             = 14,
	RStickAxisDown                           = 15,
	RStickAxisUpDown                         = 16,
	RStickAxisLeft                           = 17,
	RStickAxisRight                          = 18,
	RStickAxisLeftRight                      = 19,
	RStickPress                              = 20,
	CloseButton                              = 21,
	CloseButtonUp                            = 22,
	CloseButtonDown                          = 23,
	CloseButtonUpDown                        = 24,
	CloseButtonLeft                          = 25,
	CloseButtonRight                         = 26,
	CloseButtonLeftRight                     = 27,
	LB                                       = 28,
	RB                                       = 29,
	LT                                       = 30,
	RT                                       = 31,
	Start                                    = 32,
	Back                                     = 33,
	EControlButton_MAX                       = 34,
};

// Enum Snowfall.EAxisKeyState
// NumValues: 0x0003
enum class EAxisKeyState : uint8
{
	ChangedAxis                              = 0,
	None                                     = 1,
	EAxisKeyState_MAX                        = 2,
};

// Enum Snowfall.EValueKeyState
// NumValues: 0x0005
enum class EValueKeyState : uint8
{
	Pressed                                  = 0,
	Press                                    = 1,
	Release                                  = 2,
	None                                     = 3,
	EValueKeyState_MAX                       = 4,
};

// Enum Snowfall.ESnfCoverLadderDir
// NumValues: 0x0003
enum class ESnfCoverLadderDir : uint8
{
	Top                                      = 0,
	Bottom                                   = 1,
	Max                                      = 2,
};

// Enum Snowfall.ESnfCrwdStrmCollision
// NumValues: 0x0004
enum class ESnfCrwdStrmCollision : uint8
{
	NoChange                                 = 0,
	ChangeToEnable                           = 1,
	ChangeToDisable                          = 2,
	ESnfCrwdStrmCollision_MAX                = 3,
};

// Enum Snowfall.ESnfCrwdStrmReached
// NumValues: 0x0004
enum class ESnfCrwdStrmReached : uint8
{
	Nop                                      = 0,
	TeleportTo                               = 1,
	Reversal                                 = 2,
	ESnfCrwdStrmReached_MAX                  = 3,
};

// Enum Snowfall.ESnfCrwdStrmStep
// NumValues: 0x0004
enum class ESnfCrwdStrmStep : uint8
{
	Neutral                                  = 0,
	Current                                  = 1,
	Reverse                                  = 2,
	ESnfCrwdStrmStep_MAX                     = 3,
};

// Enum Snowfall.ESnfCrowdAgentState
// NumValues: 0x0003
enum class ESnfCrowdAgentState : uint8
{
	Waiting                                  = 0,
	Moving                                   = 1,
	ESnfCrowdAgentState_MAX                  = 2,
};

// Enum Snowfall.ESnfCrowdAgentBehavior
// NumValues: 0x0007
enum class ESnfCrowdAgentBehavior : uint8
{
	Idling                                   = 0,
	Wandering                                = 1,
	Tracing                                  = 2,
	Following                                = 3,
	MoveTo                                   = 4,
	Flying                                   = 5,
	ESnfCrowdAgentBehavior_MAX               = 6,
};

// Enum Snowfall.ESnfCrowdAgentMode
// NumValues: 0x0004
enum class ESnfCrowdAgentMode : uint8
{
	Solo                                     = 0,
	UnitCaptain                              = 1,
	UnitMember                               = 2,
	ESnfCrowdAgentMode_MAX                   = 3,
};

// Enum Snowfall.ESnfCrowdAgentCategory
// NumValues: 0x0004
enum class ESnfCrowdAgentCategory : uint8
{
	Human                                    = 0,
	Bird                                     = 1,
	Fish                                     = 2,
	ESnfCrowdAgentCategory_MAX               = 3,
};

// Enum Snowfall.ESnfDaidaraStatus
// NumValues: 0x0006
enum class ESnfDaidaraStatus : uint8
{
	Stop                                     = 0,
	Move                                     = 1,
	StartHandActR                            = 2,
	LoopHandActR                             = 3,
	EndHandActR                              = 4,
	ESnfDaidaraStatus_MAX                    = 5,
};

// Enum Snowfall.ESnfDaidaraType
// NumValues: 0x0003
enum class ESnfDaidaraType : uint8
{
	Near                                     = 0,
	Far                                      = 1,
	ESnfDaidaraType_MAX                      = 2,
};

// Enum Snowfall.FSnfDaidaraCtrlType
// NumValues: 0x0003
enum class EFSnfDaidaraCtrlType : uint8
{
	Near                                     = 0,
	Far                                      = 1,
	FSnfDaidaraCtrlType_MAX                  = 2,
};

// Enum Snowfall.ESnfDestructiblePropType
// NumValues: 0x0004
enum class ESnfDestructiblePropType : uint8
{
	Nomal                                    = 0,
	Bomb                                     = 1,
	Gold                                     = 2,
	ESnfDestructiblePropType_MAX             = 3,
};

// Enum Snowfall.ESnfDestructiblePropActorState
// NumValues: 0x000A
enum class ESnfDestructiblePropActorState : uint8
{
	None                                     = 0,
	FirstWait                                = 1,
	SpawnWait                                = 2,
	Spawn                                    = 3,
	EndSpawn                                 = 4,
	Existence                                = 5,
	Destructed                               = 6,
	Disappearance                            = 7,
	ActivityWait                             = 8,
	ESnfDestructiblePropActorState_MAX       = 9,
};

// Enum Snowfall.ESnfDestructiblePlayList
// NumValues: 0x0004
enum class ESnfDestructiblePlayList : uint8
{
	Invalid                                  = 0,
	Landing                                  = 1,
	Destruction                              = 2,
	ESnfDestructiblePlayList_MAX             = 3,
};

// Enum Snowfall.ESnfDialogFlags
// NumValues: 0x0006
enum class ESnfDialogFlags : uint8
{
	None                                     = 0,
	Unclearable                              = 1,
	NoPause                                  = 2,
	ExcludeFadeCondition                     = 4,
	PushTail                                 = 8,
	ESnfDialogFlags_MAX                      = 9,
};

// Enum Snowfall.ESnfDialogMessage
// NumValues: 0x0070
enum class ESnfDialogMessage : uint8
{
	None                                     = 0,
	PlayerLoggedOut                          = 1,
	ControllerDisconnected                   = 2,
	GenericErrorLoadGameFailed               = 3,
	ProfileErrorCorrupted                    = 4,
	ProfileErrorNewerVersion                 = 5,
	ProfileErrorSaveUnspecified              = 6,
	ProfileErrorLoadUnspecified              = 7,
	SaveGameErrorCorrupted                   = 8,
	SaveGameErrorNewerVersion                = 9,
	SaveGameErrorUnsupportedOlderVersion     = 10,
	SaveGameErrorDependencyChunkUnavailable  = 11,
	SaveGameErrorSaveUnspecified             = 12,
	SaveGameErrorLoadUnspecified             = 13,
	SaveGameConfirmLoad                      = 14,
	SaveGameConfirmLoadInGame                = 15,
	SaveGameConfirmSaveOverwrite             = 16,
	SaveGameConfirmDelete                    = 17,
	SaveGameConfirmSelectUseSlot             = 18,
	SaveGameConfirmManualSave                = 19,
	OptionsConfirmApplySettings              = 20,
	OptionsConfirmSetToDefaults              = 21,
	OptionsConfirmSetToDefaults2             = 22,
	OptionsConfirmSaveClose                  = 23,
	OptionsConfirmApplyKeyAssignment         = 24,
	OptionsConfirmResetKeyAssignment         = 25,
	OptionsConfirmChangeKeyAssignment        = 26,
	OptionNotificationRebootForRaytracing    = 27,
	InitialSettingConfirmSaveClose           = 28,
	NetworkHostClosed                        = 29,
	NetworkErrorMatchEnded                   = 30,
	NetworkErrorCapacityOver                 = 31,
	NetworkErrorKicked                       = 32,
	NetworkErrorBanned                       = 33,
	NetworkErrorHostConnectionLost           = 34,
	NetworkErrorHostConnectionTimeout        = 35,
	NetworkErrorServiceConnectionLost        = 36,
	NetworkErrorFailureReceived              = 37,
	SystemErrorApplicationUpdateRequired     = 38,
	SystemErrorSystemSoftwareUpdateRequired  = 39,
	SystemErrorVP9VideoCodecInstallRequired  = 40,
	GameReturnTitle                          = 41,
	GameFastConfirmTravel                    = 42,
	GameShopConfirmSellItems                 = 43,
	GameShopUnownedSellItems                 = 44,
	GameShopNotHaveMoney                     = 45,
	GameGetSkillTutorial                     = 46,
	GameEquipRosaryTutorial                  = 47,
	GameCanNotChangeCostume                  = 48,
	GameCanNotPlayMusic                      = 49,
	GameCanNotGoBack                         = 50,
	GameCanNotGoBackInBike                   = 51,
	GameClearBonusInfiniteRosary             = 52,
	GameClearBonusSneakRosary                = 53,
	GameClearBonusImmediateTransferRosary    = 54,
	GameClearBonusUniqueDifficultyCostume    = 55,
	GameClearBonusSoundTracks                = 56,
	GameClearBonusTransferCostumes           = 57,
	GameClearBonusApplyRosary0               = 58,
	GameClearBonusApplyRosary1               = 59,
	GameClearBonusApplyRosary2               = 60,
	GameClearBonusApplySound                 = 61,
	GameClearBonusApplyCostume               = 62,
	GameClearBonusApplyItemSharing           = 63,
	DownloadContentApplyContents             = 64,
	GameConfirmNewGameInExtraDifficulty      = 74,
	GiftPackApplyContents                    = 75,
	PhotoErrorCaptureAndExportStorageNoSpace = 76,
	PhotoErrorCaptureAndExportBusy           = 77,
	PhotoErrorExportUnspecified              = 78,
	DownloadContentAvailable                 = 79,
	DownloadContentUnavailable               = 89,
	DownloadContentAnnotion                  = 90,
	BNetRequiredFirstPartySignin             = 99,
	BNetWaitForInitialize                    = 100,
	BNetBonusLoginBonus                      = 101,
	EOSErrorLoginAccount                     = 102,
	GameIntentErrorNotExistsSaveGame         = 103,
	GameIntentErrorUnableActivateActivity    = 104,
	GameIntentErrorCloseMenuAndTryAgain      = 105,
	GameClearBonusStamps_DC                  = 106,
	GameClearBonusFigures_DC                 = 107,
	GameClearBonusSounds_DC                  = 108,
	GameClearBonusEmotes_DC                  = 109,
	GameClearBonusAnnotation_DC              = 110,
	GameClearBonusApplyItems_DC              = 111,
	GameClearBonusApplyAnnotation1_DC        = 112,
	GameClearBonusApplyAnnotation2_DC        = 113,
	GameClearBonusApplyAnnotation3_DC        = 114,
	GiveSharedItems_DC                       = 115,
	GMCSaveDataLoadNotification_DC           = 116,
	Dialog_Sytem_ChunkNotAvailable_DC        = 117,
	InvalidLicense_DC                        = 118,
	DonwloadContentNotification_DC           = 119,
	GameSpiritPhotoTutorial_DC               = 120,
	GameCanNotGoBackInKaidan1_DC             = 121,
	GameCanNotGoBackInKaidan2_DC             = 122,
	PhotoModeSave_DC                         = 123,
	PhotoModeLoad_DC                         = 124,
	Option_DLSSG_DC                          = 125,
	Dialog_EndlessNewGame_DC                 = 126,
	Dialog_EndlessTransferGame_DC            = 127,
	Dialog_EndlessSaveGame_DC                = 128,
	Dialog_EndlessLoadGame_DC                = 129,
	Dialog_EndlessLoadGameInGame_DC          = 130,
	GameClearBonusEndlessGame_DC             = 131,
	GameEndlessBackToNekomataRoom2_DC        = 132,
	GameEndlessUnlockInfiniteMode_DC         = 133,
	ReturnToMainMenuMessage                  = 134,
	BNetError                                = 135,
	Dynamic                                  = 136,
	Max                                      = 137,
};

// Enum Snowfall.ESnfDialogButtonSet
// NumValues: 0x0007
enum class ESnfDialogButtonSet : uint8
{
	Yes                                      = 0,
	YesNo                                    = 1,
	Accept                                   = 2,
	AcceptCancel                             = 3,
	Continue                                 = 4,
	Dynamic                                  = 5,
	Max                                      = 6,
};

// Enum Snowfall.ESnfDialogButton
// NumValues: 0x0007
enum class ESnfDialogButton : uint8
{
	Yes                                      = 0,
	No                                       = 1,
	Accept                                   = 2,
	Cancel                                   = 3,
	Continue                                 = 4,
	Return                                   = 5,
	Max                                      = 6,
};

// Enum Snowfall.ESnfDialogWidgetType
// NumValues: 0x0005
enum class ESnfDialogWidgetType : uint8
{
	Generic                                  = 0,
	Warning                                  = 1,
	BNetConnectionError                      = 2,
	BNetError                                = 3,
	Max                                      = 4,
};

// Enum Snowfall.FSnfDialogueType
// NumValues: 0x0005
enum class EFSnfDialogueType : uint8
{
	GameCanNotGoBack                         = 0,
	GameCanNotGoBackInBike                   = 1,
	GameCanNotGoBackInKaidan1                = 2,
	GameCanNotGoBackInKaidan2                = 3,
	FSnfDialogueType_MAX                     = 4,
};

// Enum Snowfall.ESnfDisquietState
// NumValues: 0x0008
enum class ESnfDisquietState : uint8
{
	DisquietState_Init                       = 0,
	DisquietState_Hide                       = 1,
	DisquietState_Far                        = 2,
	DisquietState_Stop                       = 3,
	DisquietState_Play                       = 4,
	DisquietState_Clear                      = 5,
	DisquietState_Finish                     = 6,
	DisquietState_MAX                        = 7,
};

// Enum Snowfall.ESnfDivisionBaseSyncActivityType
// NumValues: 0x0004
enum class ESnfDivisionBaseSyncActivityType : uint8
{
	BeginAction                              = 0,
	EndAction                                = 1,
	TypeAction                               = 2,
	ESnfDivisionBaseSyncActivityType_MAX     = 3,
};

// Enum Snowfall.ESnfDivisionBasePartsType
// NumValues: 0x0007
enum class ESnfDivisionBasePartsType : uint8
{
	None                                     = 0,
	Tree                                     = 1,
	Wall                                     = 2,
	Shrine                                   = 3,
	Torii                                    = 4,
	Tourou                                   = 5,
	ESnfDivisionBasePartsType_MAX            = 6,
};

// Enum Snowfall.ESnfDoubleDoorType
// NumValues: 0x0005
enum class ESnfDoubleDoorType : uint8
{
	DoubleOpen                               = 0,
	RightOpen                                = 1,
	LeftOpen                                 = 2,
	OneByOneOpen                             = 3,
	ESnfDoubleDoorType_MAX                   = 4,
};

// Enum Snowfall.ESnfDoubleDoorDir
// NumValues: 0x0003
enum class ESnfDoubleDoorDir : uint8
{
	Right                                    = 0,
	Left                                     = 1,
	ESnfDoubleDoorDir_MAX                    = 2,
};

// Enum Snowfall.ESnfDoorBaseState
// NumValues: 0x0005
enum class ESnfDoorBaseState : uint8
{
	Closed                                   = 0,
	Closing                                  = 1,
	Opening                                  = 2,
	Opened                                   = 3,
	ESnfDoorBaseState_MAX                    = 4,
};

// Enum Snowfall.ESnfDoorBaseType
// NumValues: 0x0004
enum class ESnfDoorBaseType : uint8
{
	Swing                                    = 0,
	Hinged                                   = 1,
	Slider                                   = 2,
	ESnfDoorBaseType_MAX                     = 3,
};

// Enum Snowfall.ESnfDoorBaseMobility
// NumValues: 0x0003
enum class ESnfDoorBaseMobility : uint8
{
	Static                                   = 0,
	Movable                                  = 1,
	ESnfDoorBaseMobility_MAX                 = 2,
};

// Enum Snowfall.ESnfElevatorMovement
// NumValues: 0x0004
enum class ESnfElevatorMovement : uint8
{
	None                                     = 0,
	Rise                                     = 1,
	Drop                                     = 2,
	ESnfElevatorMovement_MAX                 = 3,
};

// Enum Snowfall.EElevatorBaseState
// NumValues: 0x0007
enum class EElevatorBaseState : uint8
{
	StopDoorClosed                           = 0,
	StopDoorClosing                          = 1,
	StopDoorOpend                            = 2,
	StopDoorOpening                          = 3,
	ElevatingWait                            = 4,
	Elevating                                = 5,
	EElevatorBaseState_MAX                   = 6,
};

// Enum Snowfall.EElevatorFloorNameType
// NumValues: 0x0004
enum class EElevatorFloorNameType : uint8
{
	NormalFloor                              = 0,
	MainDeck                                 = 1,
	TopDeck                                  = 2,
	EElevatorFloorNameType_MAX               = 3,
};

// Enum Snowfall.ESnfEm1600BuddyNoticeType
// NumValues: 0x000F
enum class ESnfEm1600BuddyNoticeType : uint8
{
	Invalid                                  = 0,
	FirstAttack                              = 1,
	FirstAbsorbCore                          = 2,
	HitStampAttack                           = 3,
	HitShockWave                             = 4,
	FallRock                                 = 5,
	ApproachShrine                           = 6,
	ReflectAttack                            = 7,
	NoDamageTime                             = 8,
	VisibleCore                              = 9,
	Story00                                  = 10,
	Story01                                  = 11,
	Story02                                  = 12,
	Story03                                  = 13,
	ESnfEm1600BuddyNoticeType_MAX            = 14,
};

// Enum Snowfall.ESnfEndingCreditsSpaceSizeType
// NumValues: 0x0007
enum class ESnfEndingCreditsSpaceSizeType : uint8
{
	Auto                                     = 0,
	XS                                       = 1,
	S                                        = 2,
	M                                        = 3,
	L                                        = 4,
	XL                                       = 5,
	ESnfEndingCreditsSpaceSizeType_MAX       = 6,
};

// Enum Snowfall.ESnfEndingCreditsTextureType
// NumValues: 0x0005
enum class ESnfEndingCreditsTextureType : uint8
{
	None                                     = 0,
	TitleLogo                                = 1,
	MiddlewareLogo                           = 2,
	TokyoTowerLogo                           = 3,
	ESnfEndingCreditsTextureType_MAX         = 4,
};

// Enum Snowfall.ESnfEndingCreditsDataType
// NumValues: 0x0010
enum class ESnfEndingCreditsDataType : uint8
{
	None                                     = 0,
	Space                                    = 1,
	Texture                                  = 2,
	HeaderL                                  = 3,
	HeaderM                                  = 4,
	HeaderS                                  = 5,
	BodyL                                    = 6,
	BodyS                                    = 7,
	Cast                                     = 8,
	Job                                      = 9,
	License                                  = 10,
	Scroll                                   = 11,
	Fade                                     = 12,
	LongFade                                 = 13,
	LastFade                                 = 14,
	ESnfEndingCreditsDataType_MAX            = 15,
};

// Enum Snowfall.ESnfEndlessChallengeValueType
// NumValues: 0x000A
enum class ESnfEndlessChallengeValueType : uint8
{
	TextOnly                                 = 0,
	NumMax                                   = 1,
	NameNumMax                               = 2,
	Value                                    = 3,
	ValueNum                                 = 4,
	ValueNumMax                              = 5,
	Time                                     = 6,
	ValueNumMaxTime                          = 7,
	Quiz                                     = 8,
	ESnfEndlessChallengeValueType_MAX        = 9,
};

// Enum Snowfall.ESnfEndlessCheckTargetType
// NumValues: 0x0008
enum class ESnfEndlessCheckTargetType : uint8
{
	Check_None                               = 0,
	Check_Interact                           = 1,
	Check_Finish                             = 2,
	Check_Enemy                              = 3,
	Check_KeyItem                            = 4,
	Check_Defense                            = 5,
	Check_Activity                           = 6,
	Check_MAX                                = 7,
};

// Enum Snowfall.ESnfEndlessEndingCreditsSpaceSizeType
// NumValues: 0x000A
enum class ESnfEndlessEndingCreditsSpaceSizeType : uint8
{
	None                                     = 0,
	OurS                                     = 1,
	OurM                                     = 2,
	OurL                                     = 3,
	PartnerS                                 = 4,
	PartnerM                                 = 5,
	ParentS                                  = 6,
	ParentM                                  = 7,
	ParentL                                  = 8,
	ESnfEndlessEndingCreditsSpaceSizeType_MAX = 9,
};

// Enum Snowfall.ESnfEndlessEndingCreditsTextureType
// NumValues: 0x0004
enum class ESnfEndlessEndingCreditsTextureType : uint8
{
	None                                     = 0,
	TitleLogo                                = 1,
	MiddlewareLogo                           = 2,
	ESnfEndlessEndingCreditsTextureType_MAX  = 3,
};

// Enum Snowfall.ESnfEndlessEndingCreditsComponentWidgetType
// NumValues: 0x000D
enum class ESnfEndlessEndingCreditsComponentWidgetType : uint8
{
	None                                     = 0,
	Texture                                  = 1,
	HeaderL                                  = 2,
	BodyL                                    = 3,
	BodyS                                    = 4,
	HeaderOur                                = 5,
	JobOur                                   = 6,
	HeaderPartner                            = 7,
	JobPartner                               = 8,
	HeaderParent                             = 9,
	JobParent                                = 10,
	License                                  = 11,
	ESnfEndlessEndingCreditsComponentWidgetType_MAX = 12,
};

// Enum Snowfall.ESnfEndlessEndingCreditsSceneType
// NumValues: 0x0007
enum class ESnfEndlessEndingCreditsSceneType : uint8
{
	None                                     = 0,
	MainPage                                 = 1,
	OurPage                                  = 2,
	PartnerPage                              = 3,
	ParentPage                               = 4,
	LicensePage                              = 5,
	ESnfEndlessEndingCreditsSceneType_MAX    = 6,
};

// Enum Snowfall.ESnfEndlessEndingCreditsDataType
// NumValues: 0x000F
enum class ESnfEndlessEndingCreditsDataType : uint8
{
	None                                     = 0,
	Texture                                  = 1,
	HeaderL                                  = 2,
	BodyL                                    = 3,
	BodyS                                    = 4,
	MainPage                                 = 5,
	Header                                   = 6,
	Job                                      = 7,
	OurPage                                  = 8,
	PartnerPage                              = 9,
	ParentPage                               = 10,
	NextPage                                 = 11,
	License                                  = 12,
	LicensePage                              = 13,
	ESnfEndlessEndingCreditsDataType_MAX     = 14,
};

// Enum Snowfall.EEndlessFloorCollectionType
// NumValues: 0x0007
enum class EEndlessFloorCollectionType : uint8
{
	None                                     = 0,
	EtherGold                                = 1,
	Food                                     = 2,
	SpectralThread                           = 3,
	Ghost                                    = 4,
	Yokai                                    = 5,
	EEndlessFloorCollectionType_MAX          = 6,
};

// Enum Snowfall.ESnfEndlessMarkTargetType
// NumValues: 0x0005
enum class ESnfEndlessMarkTargetType : uint8
{
	None                                     = 0,
	EvilGhost                                = 1,
	Yurei                                    = 2,
	Kegare                                   = 3,
	ESnfEndlessMarkTargetType_MAX            = 4,
};

// Enum Snowfall.EEndlessMissionCollectionType
// NumValues: 0x0007
enum class EEndlessMissionCollectionType : uint8
{
	None                                     = 0,
	EtherGold                                = 1,
	Food                                     = 2,
	SpectralThread                           = 3,
	Ghost                                    = 4,
	Yokai                                    = 5,
	EEndlessMissionCollectionType_MAX        = 6,
};

// Enum Snowfall.FSnfEndlessMenuRosaryStatus
// NumValues: 0x0007
enum class EFSnfEndlessMenuRosaryStatus : uint8
{
	Status_None                              = 0,
	Status_Normal                            = 1,
	Status_NotLevel                          = 2,
	Status_NotToken                          = 3,
	Status_Buy                               = 4,
	Status_Max                               = 5,
	Status_Select                            = 6,
};

// Enum Snowfall.ESnfEndlessSkillPathFlag2
// NumValues: 0x000B
enum class ESnfEndlessSkillPathFlag2 : uint16
{
	None                                     = 0,
	Same                                     = 1,
	Dir000                                   = 2,
	Dir045                                   = 4,
	Dir090                                   = 8,
	Dir135                                   = 16,
	Dir180                                   = 32,
	Dir225                                   = 64,
	Dir270                                   = 128,
	Dir315                                   = 256,
	ESnfEndlessSkillPathFlag2_MAX            = 257,
};

// Enum Snowfall.EEndlessResultItemType
// NumValues: 0x0031
enum class EEndlessResultItemType : uint8
{
	None                                     = 0,
	FloorNumber                              = 1,
	PlayerLevel                              = 2,
	ClearTime                                = 3,
	ClearTaskNumber                          = 4,
	KillEnemy                                = 5,
	DamageCount                              = 6,
	FloorCollectionRate                      = 7,
	ClearRank                                = 8,
	PlayCount                                = 9,
	DeathCount                               = 10,
	DealDamege                               = 11,
	ReceiveDamage                            = 12,
	GuardCount                               = 13,
	MaxChainNum                              = 14,
	GetToken                                 = 15,
	UsedToken                                = 16,
	LostToken                                = 17,
	UsedFood                                 = 18,
	GetSpectralThread                        = 19,
	UsedSpectralThread                       = 20,
	GetKonkouJu                              = 21,
	DecomposedKonkouJu                       = 22,
	RescueGhost                              = 23,
	GetMagatama                              = 24,
	SkillAcquisitionRate                     = 25,
	MostUsedTalisman                         = 26,
	MostUsedRosary                           = 27,
	CapturedStrayCat                         = 28,
	PetCatCount                              = 29,
	RankSCount                               = 30,
	RankACount                               = 31,
	RankBCount                               = 32,
	RankCCount                               = 33,
	GetRosary                                = 34,
	GetRosaryMaterial                        = 35,
	ConvertToken                             = 36,
	TotalToken                               = 37,
	Floor_ClearFloorNumber                   = 38,
	Floor_Collection                         = 39,
	Floor_Challenge                          = 40,
	Floor_Task1                              = 41,
	Floor_Task2                              = 42,
	Floor_Task3                              = 43,
	Floor_ClearReward                        = 44,
	Floor_NekomataKoban                      = 45,
	Floor_PlayerLevel                        = 46,
	Floor_ItemAvailable                      = 47,
	EEndlessResultItemType_MAX               = 48,
};

// Enum Snowfall.EEndlessResultPageType
// NumValues: 0x0009
enum class EEndlessResultPageType : uint8
{
	ThemeNew                                 = 0,
	AllNew                                   = 1,
	AllBest                                  = 2,
	TotalNew                                 = 3,
	TotalOld                                 = 4,
	TotalBest                                = 5,
	Token                                    = 6,
	None                                     = 7,
	EEndlessResultPageType_MAX               = 8,
};

// Enum Snowfall.EEndlessResultWidgetType
// NumValues: 0x0006
enum class EEndlessResultWidgetType : uint8
{
	FloorResult                              = 0,
	ThemeResult                              = 1,
	AllClearResult                           = 2,
	DeadResult                               = 3,
	RecordResult                             = 4,
	EEndlessResultWidgetType_MAX             = 5,
};

// Enum Snowfall.ESnfEndlessTaskStatusType
// NumValues: 0x0004
enum class ESnfEndlessTaskStatusType : uint8
{
	TaskStatus_Try                           = 0,
	TaskStatus_Failure                       = 1,
	TaskStatus_Success                       = 2,
	TaskStatus_MAX                           = 3,
};

// Enum Snowfall.ESnfEndlessStatusType
// NumValues: 0x0012
enum class ESnfEndlessStatusType : uint8
{
	Status_Init                              = 0,
	Status_Play                              = 1,
	Status_Goal                              = 2,
	Status_FloorResult                       = 3,
	Status_ThemeFadeOut                      = 4,
	Status_ThemeResult                       = 5,
	Status_CreditFadeOut                     = 6,
	Status_CreditWait                        = 7,
	Status_DialogWait                        = 8,
	Status_TitleWait                         = 9,
	Status_FadeOut                           = 10,
	Status_FadeWait                          = 11,
	Status_FadeIn                            = 12,
	Status_Dead                              = 13,
	Status_DeadFadeOut                       = 14,
	Status_DeadResult                        = 15,
	Status_DeadWait                          = 16,
	Status_MAX                               = 17,
};

// Enum Snowfall.ESnfEndlessCountStatsType
// NumValues: 0x0082
enum class ESnfEndlessCountStatsType : uint8
{
	CountStats_None                          = 0,
	P_Act_Jump                               = 1,
	P_Act_Grapple                            = 2,
	P_Act_Glider                             = 3,
	P_Act_Climb                              = 4,
	P_Act_Land                               = 5,
	P_Act_Scan                               = 6,
	P_Act_Stroke                             = 7,
	P_Act_KKMode                             = 8,
	P_Act_Separation                         = 9,
	P_Act_Fusion                             = 10,
	P_Act_Guard                              = 11,
	P_Act_JustGuard                          = 12,
	P_Act_Counter                            = 13,
	P_Act_KillEnemy                          = 14,
	P_Act_PurgeCore                          = 15,
	P_Act_PurgeSneak                         = 16,
	P_Act_PurgeCoreOrSneak                   = 17,
	P_Act_PurgeEvil                          = 18,
	P_Act_PurgeKegare                        = 19,
	P_Act_AbsorbYurei                        = 20,
	P_Act_AbsorbYokai                        = 21,
	P_Act_GetToken                           = 22,
	P_Act_GetParts                           = 23,
	P_Act_GetMeal                            = 24,
	P_Act_GetStone                           = 25,
	P_Act_GetYurei                           = 26,
	P_Act_GetYokai                           = 27,
	P_Act_GetRandom                          = 28,
	P_Act_GetTalisman                        = 29,
	P_Act_GetCollection                      = 30,
	P_Act_GetWrongItem                       = 31,
	P_Act_SaveCat                            = 32,
	P_Act_UseToken                           = 33,
	P_Act_UseParts                           = 34,
	P_Act_EatMeal                            = 35,
	P_Act_LostToken                          = 36,
	P_Act_RemoveRandom                       = 37,
	P_Act_ConsumeItem                        = 38,
	P_Act_BreakDestructible                  = 39,
	P_Act_WalkStep                           = 40,
	P_Act_BattleMode                         = 41,
	P_Atk_Hand                               = 42,
	P_Atk_Bow                                = 43,
	P_Atk_Strike                             = 44,
	P_Atk_AirStrike                          = 45,
	P_Atk_Talisman                           = 46,
	P_Atk_TalismanParalysis                  = 47,
	P_Atk_TalismanCoreDamage                 = 48,
	P_Atk_TalismanNoise                      = 49,
	P_Atk_TalismanBlindfold                  = 50,
	P_Atk_TalismanJump                       = 51,
	P_Atk_TalismanEther                      = 52,
	P_Atk_ShotWind                           = 53,
	P_Atk_ShotWater                          = 54,
	P_Atk_ShotFire                           = 55,
	P_Atk_ChargeWind                         = 56,
	P_Atk_ChargeWater                        = 57,
	P_Atk_ChargeFire                         = 58,
	P_Atk_NearWind                           = 59,
	P_Atk_NearWater                          = 60,
	P_Atk_NearFire                           = 61,
	P_Atk_CancelBullet                       = 62,
	P_Atk_ReflectBullet                      = 63,
	P_Atk_CurrentChain                       = 64,
	P_Dmg_All                                = 65,
	P_Dmg_Normal                             = 66,
	P_Dmg_Kegare                             = 67,
	P_Death                                  = 68,
	E_Dmg_Arrow                              = 69,
	E_Dmg_Wind                               = 70,
	E_Dmg_Fire                               = 71,
	E_Dmg_Water                              = 72,
	E_Dmg_Strike                             = 73,
	E_Dmg_AirStrike                          = 74,
	E_Dmg_Explode                            = 75,
	E_Dmg_Paralysis                          = 76,
	E_Dmg_Freeze                             = 77,
	E_Dmg_Burn                               = 78,
	E_Dmg_BurnDOT                            = 79,
	E_Death_Arrow                            = 80,
	E_Death_Wind                             = 81,
	E_Death_Fire                             = 82,
	E_Death_Water                            = 83,
	E_Death_Strike                           = 84,
	E_Death_Explode                          = 85,
	E_Death_PugeFar                          = 86,
	E_Death_PugeNear                         = 87,
	E_Death_PugeSneak                        = 88,
	E_Death_PugeAir                          = 89,
	E_Death_PugeDown                         = 90,
	E_Death_Burn                             = 91,
	E_Death_Freeze                           = 92,
	E_Death_Amewarashi                       = 93,
	E_Death_Chiwarashi                       = 94,
	S_Task_Map                               = 95,
	S_Task_Count                             = 96,
	S_Task_Success                           = 97,
	S_Log_GetFood                            = 98,
	S_Log_MaxFood                            = 99,
	S_Log_GetParts                           = 100,
	S_Log_MaxParts                           = 101,
	S_Log_GetYurei                           = 102,
	S_Log_MaxYurei                           = 103,
	S_Log_GetYokai                           = 104,
	S_Log_MaxYokai                           = 105,
	S_Log_GetBlack                           = 106,
	S_Log_MaxBlack                           = 107,
	S_Log_GetCat                             = 108,
	S_Log_MaxCat                             = 109,
	S_Log_KillEnemy                          = 110,
	S_Log_MaxEnemy                           = 111,
	S_Log_GetEnemyPoint                      = 112,
	S_Log_MaxEnemyPoint                      = 113,
	S_Log_GetThreadRosary                    = 114,
	S_Log_GetRandomRosary1                   = 115,
	S_Log_GetRandomRosary2                   = 116,
	S_Log_GetRandomRosary3                   = 117,
	S_Log_GetRandomRosary4                   = 118,
	S_Log_GetRandomRosary5                   = 119,
	S_Log_GetRandomRosary6                   = 120,
	S_Log_GetRandomRosary7                   = 121,
	S_Log_GetRandomRosary8                   = 122,
	S_Log_GetRankS                           = 123,
	S_Log_GetRankA                           = 124,
	S_Log_GetRankB                           = 125,
	S_Log_GetRankC                           = 126,
	S_Log_GetRankD                           = 127,
	CountStatsTypeMax                        = 128,
	ESnfEndlessCountStatsType_MAX            = 129,
};

// Enum Snowfall.ESnfEndlessMaxStatsType
// NumValues: 0x000D
enum class ESnfEndlessMaxStatsType : uint8
{
	MaxStats_None                            = 0,
	P_Atk_ChainMax                           = 1,
	P_Atk_CoreSame                           = 2,
	P_Atk_KillSame                           = 3,
	Life_DefenseDog                          = 4,
	Life_DefenseYurei                        = 5,
	Life_DefenseKK                           = 6,
	Log_FloorCount                           = 7,
	Log_DataCount                            = 8,
	Log_PlayerLevel                          = 9,
	Log_PlayerSkill                          = 10,
	MaxStatsTypeMax                          = 11,
	ESnfEndlessMaxStatsType_MAX              = 12,
};

// Enum Snowfall.ESnfEndlessAddStatsType
// NumValues: 0x000B
enum class ESnfEndlessAddStatsType : uint8
{
	AddStats_None                            = 0,
	Time_Play                                = 1,
	Time_Battle                              = 2,
	Time_Task                                = 3,
	Distance_WalkOrRun                       = 4,
	Distance_Crouch                          = 5,
	Distance_Glider                          = 6,
	AttackValue                              = 7,
	DamageValue                              = 8,
	AddStatsTypeMax                          = 9,
	ESnfEndlessAddStatsType_MAX              = 10,
};

// Enum Snowfall.ESnfEndlessTaskCheckType
// NumValues: 0x0006
enum class ESnfEndlessTaskCheckType : uint8
{
	TaskCheck_None                           = 0,
	TaskCheck_Zero                           = 1,
	TaskCheck_OverZero                       = 2,
	TaskCheck_Up                             = 3,
	TaskCheck_Under                          = 4,
	TaskCheck_MAX                            = 5,
};

// Enum Snowfall.ESnfEndlessWidgetType
// NumValues: 0x0006
enum class ESnfEndlessWidgetType : uint8
{
	Widget_None                              = 0,
	Widget_Floor                             = 1,
	Widget_Theme                             = 2,
	Widget_Total                             = 3,
	Widget_Dead                              = 4,
	Widget_MAX                               = 5,
};

// Enum Snowfall.ESnfEndlessOpenType
// NumValues: 0x0005
enum class ESnfEndlessOpenType : uint8
{
	Open_None                                = 0,
	Open_Shop                                = 1,
	Open_Skill                               = 2,
	Open_Rosary                              = 3,
	Open_MAX                                 = 4,
};

// Enum Snowfall.ESnfEndlessResultType
// NumValues: 0x0007
enum class ESnfEndlessResultType : uint8
{
	Result_None                              = 0,
	Result_Floor                             = 1,
	Result_Theme                             = 2,
	Result_Total                             = 3,
	Result_Dead                              = 4,
	Result_Menu                              = 5,
	Result_MAX                               = 6,
};

// Enum Snowfall.ESnfEndlessNotifyType
// NumValues: 0x000C
enum class ESnfEndlessNotifyType : uint8
{
	Notify_BeginThemeLoad                    = 0,
	Notify_EndThemeLoad                      = 1,
	Notify_BeginLayoutLoad                   = 2,
	Notify_EndLayoutLoad                     = 3,
	Notify_InitGame                          = 4,
	Notify_GoalFloor                         = 5,
	Notify_DeadPlayer                        = 6,
	Notify_EndResult                         = 7,
	Notify_RestartFloor                      = 8,
	Notify_FinishAll                         = 9,
	Notify_EndShopControlShop                = 10,
	Notify_MAX                               = 11,
};

// Enum Snowfall.ESnfEndlessRoleType
// NumValues: 0x0014
enum class ESnfEndlessRoleType : uint8
{
	Role_ThemeLoader                         = 0,
	Role_LayoutLoader                        = 1,
	Role_StartPoint                          = 2,
	Role_GoalPoint                           = 3,
	Role_TargetList                          = 4,
	Role_Wall                                = 5,
	Role_DefenseActor                        = 6,
	Role_RestartTrigger                      = 7,
	Role_BlackThing                          = 8,
	Role_Cat                                 = 9,
	Role_Yurei                               = 10,
	Role_Yokai                               = 11,
	Role_Enemy                               = 12,
	Role_Meal                                = 13,
	Role_Parts                               = 14,
	Role_CashPot                             = 15,
	Role_LevelSequence                       = 16,
	Role_EM1103Ctrl                          = 17,
	RoleTypeMax                              = 18,
	ESnfEndlessRoleType_MAX                  = 19,
};

// Enum Snowfall.ESnfEndlessClearRankType
// NumValues: 0x0007
enum class ESnfEndlessClearRankType : uint8
{
	ClearRank_S                              = 0,
	ClearRank_A                              = 1,
	ClearRank_B                              = 2,
	ClearRank_C                              = 3,
	ClearRank_D                              = 4,
	ClearRank_None                           = 5,
	ClearRank_MAX                            = 6,
};

// Enum Snowfall.ESnfEndlessTitleListeItemType
// NumValues: 0x0005
enum class ESnfEndlessTitleListeItemType : uint8
{
	NewGame                                  = 0,
	SaveGame                                 = 1,
	LoadGame                                 = 2,
	TransferGame                             = 3,
	ESnfEndlessTitleListeItemType_MAX        = 4,
};

// Enum Snowfall.ESnfEndlessTitleMenuMode
// NumValues: 0x0004
enum class ESnfEndlessTitleMenuMode : uint8
{
	TitleMode                                = 0,
	SaveMode                                 = 2,
	LoadMode                                 = 3,
	ESnfEndlessTitleMenuMode_MAX             = 4,
};

// Enum Snowfall.ESnfEnemyConfigEventType
// NumValues: 0x0005
enum class ESnfEnemyConfigEventType : uint8
{
	None                                     = 0,
	HeadShotEventStagger                     = 1,
	StartPauseAI                             = 100,
	TypeMax                                  = 101,
	ESnfEnemyConfigEventType_MAX             = 102,
};

// Enum Snowfall.ESnfTakeJustGuardCounterType
// NumValues: 0x0007
enum class ESnfTakeJustGuardCounterType : uint8
{
	Down                                     = 0,
	Stagger                                  = 1,
	ExplodeStagger                           = 2,
	FireShotStagger                          = 3,
	Event                                    = 4,
	None                                     = 5,
	ESnfTakeJustGuardCounterType_MAX         = 6,
};

// Enum Snowfall.ESnfMarebitoBreakerStatus
// NumValues: 0x0006
enum class ESnfMarebitoBreakerStatus : uint8
{
	Move                                     = 0,
	Drain                                    = 1,
	Attack                                   = 2,
	Warp                                     = 3,
	MoveWarp                                 = 4,
	ESnfMarebitoBreakerStatus_MAX            = 5,
};

// Enum Snowfall.EEm2100AttackType
// NumValues: 0x0006
enum class EEm2100AttackType : uint8
{
	Invalid                                  = 0,
	Kamikaze                                 = 1,
	CurseBall                                = 2,
	Burst                                    = 3,
	Num                                      = 4,
	EEm2100AttackType_MAX                    = 5,
};

// Enum Snowfall.EEm2100AnimState
// NumValues: 0x0007
enum class EEm2100AnimState : uint8
{
	Invalid                                  = 0,
	Move                                     = 1,
	Turn                                     = 2,
	Attack                                   = 3,
	Damage                                   = 4,
	Found                                    = 5,
	EEm2100AnimState_MAX                     = 6,
};

// Enum Snowfall.EEm2100FoundType
// NumValues: 0x0008
enum class EEm2100FoundType : uint8
{
	Invalid                                  = 0,
	Found0                                   = 1,
	Found1                                   = 2,
	Found2                                   = 3,
	Found3                                   = 4,
	Found4                                   = 5,
	Num                                      = 6,
	EEm2100FoundType_MAX                     = 7,
};

// Enum Snowfall.EEm2100IdleType
// NumValues: 0x0008
enum class EEm2100IdleType : uint8
{
	Invalid                                  = 0,
	Idle0                                    = 1,
	Idle1                                    = 2,
	Idle2                                    = 3,
	Idle3                                    = 4,
	Idle4                                    = 5,
	Num                                      = 6,
	EEm2100IdleType_MAX                      = 7,
};

// Enum Snowfall.EEm1900AnimState
// NumValues: 0x000B
enum class EEm1900AnimState : uint8
{
	Idle                                     = 0,
	Charge                                   = 1,
	Tackle                                   = 2,
	Blow                                     = 3,
	Shot                                     = 4,
	Dive                                     = 5,
	Step                                     = 6,
	Down                                     = 7,
	Dead                                     = 8,
	Num                                      = 9,
	EEm1900AnimState_MAX                     = 10,
};

// Enum Snowfall.EEm1700MoveDirection
// NumValues: 0x000B
enum class EEm1700MoveDirection : uint8
{
	Idle                                     = 0,
	Front                                    = 1,
	Back                                     = 2,
	Left                                     = 3,
	Right                                    = 4,
	FrontLeft                                = 5,
	FrontRight                               = 6,
	BackLeft                                 = 7,
	BackRight                                = 8,
	Num                                      = 9,
	EEm1700MoveDirection_MAX                 = 10,
};

// Enum Snowfall.EEm1700MoveType
// NumValues: 0x0006
enum class EEm1700MoveType : uint8
{
	Idle                                     = 0,
	Walk                                     = 1,
	Run                                      = 2,
	Stop                                     = 3,
	Num                                      = 4,
	EEm1700MoveType_MAX                      = 5,
};

// Enum Snowfall.EEm1700AnimState
// NumValues: 0x000E
enum class EEm1700AnimState : uint8
{
	Idle                                     = 0,
	Guard                                    = 1,
	Attack                                   = 2,
	Turn                                     = 3,
	Step                                     = 4,
	Damage                                   = 5,
	Equip                                    = 6,
	Blow                                     = 7,
	Stun                                     = 8,
	Wire                                     = 9,
	Absorb                                   = 10,
	Dead                                     = 11,
	Num                                      = 12,
	EEm1700AnimState_MAX                     = 13,
};

// Enum Snowfall.EEm1700AttackType
// NumValues: 0x0006
enum class EEm1700AttackType : uint8
{
	Invalid                                  = 0,
	Fire                                     = 1,
	Water                                    = 2,
	Wind                                     = 3,
	Num                                      = 4,
	EEm1700AttackType_MAX                    = 5,
};

// Enum Snowfall.EEm1600BattleBlock
// NumValues: 0x0011
enum class EEm1600BattleBlock : uint8
{
	FrontNear                                = 0,
	FrontInter                               = 1,
	FrontFar                                 = 2,
	LeftNear                                 = 3,
	LeftInter                                = 4,
	LeftFar                                  = 5,
	RightNear                                = 6,
	RightInter                               = 7,
	RightFar                                 = 8,
	LeftEdgeNear                             = 9,
	LeftEdgeInter                            = 10,
	LeftEdgeFar                              = 11,
	RightEdgeNear                            = 12,
	RightEdgeInter                           = 13,
	RightEdgeFar                             = 14,
	Num                                      = 15,
	EEm1600BattleBlock_MAX                   = 16,
};

// Enum Snowfall.EEm1600DamageType
// NumValues: 0x0009
enum class EEm1600DamageType : uint8
{
	Invalid                                  = 0,
	Default                                  = 1,
	InterruptImpactFar                       = 2,
	InterruptImpactNear                      = 3,
	InterruptImpactLeftFar                   = 4,
	InterruptImpactRightFar                  = 5,
	InterruptSweepRight                      = 6,
	InterruptSweepLeft                       = 7,
	EEm1600DamageType_MAX                    = 8,
};

// Enum Snowfall.EEm1600AttackType
// NumValues: 0x0016
enum class EEm1600AttackType : uint8
{
	Invalid                                  = 0,
	SpiderWeb                                = 1,
	Poison                                   = 2,
	ImpactFrontFar                           = 3,
	ImpactLeftFar                            = 4,
	ImpactRightFar                           = 5,
	ImpactFrontNear                          = 6,
	ImpactLeftNear                           = 7,
	ImpactRightNear                          = 8,
	FastImpactLeftFar                        = 9,
	FastImpactRightFar                       = 10,
	FastImpactFrontNear                      = 11,
	FastImpactLeftNear                       = 12,
	FastImpactRightNear                      = 13,
	FastDoubleImpactFrontNear                = 14,
	SweepLeftFar                             = 15,
	SweepLeftNear                            = 16,
	SweepRightFar                            = 17,
	SweepRightNear                           = 18,
	DoubleImpact                             = 19,
	Num                                      = 20,
	EEm1600AttackType_MAX                    = 21,
};

// Enum Snowfall.EEm1600AnimState
// NumValues: 0x0005
enum class EEm1600AnimState : uint8
{
	Invalid                                  = 0,
	Attack                                   = 1,
	Damage                                   = 2,
	Opening                                  = 3,
	EEm1600AnimState_MAX                     = 4,
};

// Enum Snowfall.EEm1300AttackType
// NumValues: 0x0007
enum class EEm1300AttackType : uint8
{
	None                                     = 0,
	Homing                                   = 1,
	FunnelFollow                             = 2,
	FunnelEmmission                          = 3,
	Cannon                                   = 4,
	Kamikaze                                 = 5,
	EEm1300AttackType_MAX                    = 6,
};

// Enum Snowfall.EEm1300AmbushType
// NumValues: 0x0004
enum class EEm1300AmbushType : uint8
{
	Invalid                                  = 0,
	Lie                                      = 1,
	Sit                                      = 2,
	EEm1300AmbushType_MAX                    = 3,
};

// Enum Snowfall.EEm1300AnimState
// NumValues: 0x0006
enum class EEm1300AnimState : uint8
{
	Invalid                                  = 0,
	Move                                     = 1,
	Turn                                     = 2,
	Attack                                   = 3,
	Damage                                   = 4,
	EEm1300AnimState_MAX                     = 5,
};

// Enum Snowfall.EEm1000Mode
// NumValues: 0x0004
enum class EEm1000Mode : uint8
{
	Invalid                                  = 0,
	Normal                                   = 1,
	HairAttack                               = 2,
	EEm1000Mode_MAX                          = 3,
};

// Enum Snowfall.EEm1000DamageType
// NumValues: 0x000A
enum class EEm1000DamageType : uint8
{
	Invalid                                  = 0,
	Normal                                   = 1,
	Knockback                                = 2,
	Down                                     = 3,
	WeightArrowBody                          = 4,
	WeightArrowLeftArm                       = 5,
	WeightArrowRightArm                      = 6,
	Paralysis                                = 7,
	FireDown                                 = 8,
	EEm1000DamageType_MAX                    = 9,
};

// Enum Snowfall.EEm1000AttackType
// NumValues: 0x000C
enum class EEm1000AttackType : uint8
{
	Invalid                                  = 0,
	Shot                                     = 1,
	Needle                                   = 2,
	JumpOff                                  = 3,
	Bite                                     = 4,
	Scream                                   = 5,
	JumpOn                                   = 6,
	Charge                                   = 7,
	Stick                                    = 8,
	GroundHairNeedle                         = 9,
	Grab                                     = 10,
	EEm1000AttackType_MAX                    = 11,
};

// Enum Snowfall.EEm1000FallType
// NumValues: 0x0005
enum class EEm1000FallType : uint8
{
	Normal                                   = 0,
	LeapAttack                               = 1,
	Damage                                   = 2,
	Critical                                 = 3,
	EEm1000FallType_MAX                      = 4,
};

// Enum Snowfall.EEm1000TurnType
// NumValues: 0x0009
enum class EEm1000TurnType : uint8
{
	HangLeft90                               = 0,
	HangLeft180                              = 1,
	HangRight90                              = 2,
	HangRight180                             = 3,
	FloorLeft90                              = 4,
	FloorLeft180                             = 5,
	FloorRight90                             = 6,
	FloorRight180                            = 7,
	EEm1000TurnType_MAX                      = 8,
};

// Enum Snowfall.EEm1000IdleType
// NumValues: 0x0007
enum class EEm1000IdleType : uint8
{
	Invalid                                  = 0,
	HangNormal                               = 1,
	FloorNormal                              = 2,
	FloorWeightBody                          = 3,
	FloorWeightLeftArm                       = 4,
	FloorWeightRightArm                      = 5,
	EEm1000IdleType_MAX                      = 6,
};

// Enum Snowfall.EEm1000AnimState
// NumValues: 0x000B
enum class EEm1000AnimState : uint8
{
	Invalid                                  = 0,
	Move                                     = 1,
	Turn                                     = 2,
	Attack                                   = 3,
	HairAttack                               = 4,
	Damage                                   = 5,
	BackStep                                 = 6,
	Transparent                              = 7,
	Anger                                    = 8,
	Paralysis                                = 9,
	EEm1000AnimState_MAX                     = 10,
};

// Enum Snowfall.ESnfEscalatorState
// NumValues: 0x0005
enum class ESnfEscalatorState : uint8
{
	Stop                                     = 0,
	StartUp                                  = 1,
	Loop                                     = 2,
	ShutDown                                 = 3,
	ESnfEscalatorState_MAX                   = 4,
};

// Enum Snowfall.EFootstepEffectEvaluateMode
// NumValues: 0x0012
enum class EFootstepEffectEvaluateMode : uint8
{
	FOOTSTEPEFFECT_MODE_DEFAULT              = 0,
	FOOTSTEPEFFECT_MODE_PLAYER               = 1,
	FOOTSTEPEFFECT_MODE_EM0000               = 2,
	FOOTSTEPEFFECT_MODE_EM0100               = 3,
	FOOTSTEPEFFECT_MODE_EM0200               = 4,
	FOOTSTEPEFFECT_MODE_EM0300               = 5,
	FOOTSTEPEFFECT_MODE_EM0400               = 6,
	FOOTSTEPEFFECT_MODE_EM1000               = 7,
	FOOTSTEPEFFECT_MODE_EM1100               = 8,
	FOOTSTEPEFFECT_MODE_EM1700               = 9,
	FOOTSTEPEFFECT_MODE_EM1800               = 10,
	FOOTSTEPEFFECT_MODE_EM5000               = 11,
	FOOTSTEPEFFECT_MODE_EM5100               = 12,
	FOOTSTEPEFFECT_MODE_CH0200               = 13,
	FOOTSTEPEFFECT_MODE_AM0020               = 14,
	FOOTSTEPEFFECT_MODE_AM0030               = 15,
	FOOTSTEPEFFECT_MODE_CUSTOM               = 16,
	FOOTSTEPEFFECT_MODE_MAX                  = 17,
};

// Enum Snowfall.EFootstepEffectEvaluateType
// NumValues: 0x0003
enum class EFootstepEffectEvaluateType : uint8
{
	FOOTSTEPEFFECT_TYPE_AUTO                 = 0,
	FOOTSTEPEFFECT_TYPE_NONE                 = 1,
	FOOTSTEPEFFECT_TYPE_MAX                  = 2,
};

// Enum Snowfall.EFootstepLimb
// NumValues: 0x0006
enum class EFootstepLimb : uint8
{
	FOOTSTEP_LIMB_INVALID                    = 0,
	FOOTSTEP_LIMB_FOOT_LEFT                  = 1,
	FOOTSTEP_LIMB_FOOT_RIGHT                 = 2,
	FOOTSTEP_LIMB_FRONT_FOOT_LEFT            = 3,
	FOOTSTEP_LIMB_FRONT_FOOT_RIGHT           = 4,
	FOOTSTEP_LIMB_MAX                        = 5,
};

// Enum Snowfall.EFootstepBodyState
// NumValues: 0x0004
enum class EFootstepBodyState : uint8
{
	BODYSTATE_STAND                          = 0,
	BODYSTATE_CROUCH                         = 1,
	BODYSTATE_NUM                            = 2,
	BODYSTATE_MAX                            = 3,
};

// Enum Snowfall.EFootstepMoveState
// NumValues: 0x0005
enum class EFootstepMoveState : uint8
{
	MOVESTATE_WALK                           = 0,
	MOVESTATE_SPRINT                         = 1,
	MOVESTATE_BACK                           = 2,
	MOVESTATE_NUM                            = 3,
	MOVESTATE_MAX                            = 4,
};

// Enum Snowfall.EFootstepEffectPlayList
// NumValues: 0x0006
enum class EFootstepEffectPlayList : uint8
{
	Invalid                                  = 0,
	WaterWalk                                = 1,
	WaterSprint                              = 2,
	WaterLand                                = 3,
	WaterCrouch                              = 4,
	EFootstepEffectPlayList_MAX              = 5,
};

// Enum Snowfall.EFXBehavior
// NumValues: 0x0006
enum class EFXBehavior : uint8
{
	EFXBehavior_Playback                     = 0,
	EFXBehavior_Stop                         = 1,
	EFXBehavior_Vanish                       = 2,
	EFXBehavior_ForceStop                    = 3,
	Num                                      = 4,
	EFXBehavior_MAX                          = 5,
};

// Enum Snowfall.ESnfNestType
// NumValues: 0x0004
enum class ESnfNestType : uint8
{
	NormalNest                               = 0,
	SmallShrine                              = 1,
	MediumShrine                             = 2,
	ESnfNestType_MAX                         = 3,
};

// Enum Snowfall.ESnfExorcismType
// NumValues: 0x0006
enum class ESnfExorcismType : uint8
{
	NoExorcism                               = 0,
	MaleStand                                = 1,
	MaleSit                                  = 2,
	FemaleStand                              = 3,
	FemaleSit                                = 4,
	ESnfExorcismType_MAX                     = 5,
};

// Enum Snowfall.ESnfActivityPeopleRequestType
// NumValues: 0x0005
enum class ESnfActivityPeopleRequestType : uint8
{
	TalkSelect                               = 0,
	GetItem                                  = 1,
	HaveItem                                 = 2,
	KillEnemy                                = 3,
	Max                                      = 4,
};

// Enum Snowfall.ESnfActivityRequestType
// NumValues: 0x0007
enum class ESnfActivityRequestType : uint8
{
	None                                     = 0,
	HideAndSeek                              = 1,
	WhereIsMama                              = 2,
	NoPaper                                  = 3,
	HumanFaceDog                             = 4,
	CreviceMan                               = 5,
	Max                                      = 6,
};

// Enum Snowfall.ESnfGameActivityTaskState
// NumValues: 0x0008
enum class ESnfGameActivityTaskState : uint8
{
	ActivityTaskState_Init                   = 0,
	ActivityTaskState_Wait                   = 1,
	ActivityTaskState_Pre                    = 2,
	ActivityTaskState_Begin                  = 3,
	ActivityTaskState_Step                   = 4,
	ActivityTaskState_End                    = 5,
	ActivityTaskState_Cancel                 = 6,
	ActivityTaskState_MAX                    = 7,
};

// Enum Snowfall.ESnfGameActivityMarkType
// NumValues: 0x0004
enum class ESnfGameActivityMarkType : uint8
{
	Begin                                    = 0,
	Play                                     = 1,
	End                                      = 2,
	ESnfGameActivityMarkType_MAX             = 3,
};

// Enum Snowfall.ESnfGameActivityAction
// NumValues: 0x001E
enum class ESnfGameActivityAction : uint8
{
	ActivityAction_None                      = 0,
	ActivityAction_On                        = 1,
	ActivityAction_Off                       = 2,
	ActivityAction_Play                      = 3,
	ActivityAction_Stop                      = 4,
	ActivityAction_Hide                      = 5,
	ActivityAction_Show                      = 6,
	ActivityAction_Prepare                   = 7,
	ActivityAction_Destory                   = 8,
	ActivityAction_Anim                      = 9,
	ActivityAction_Talk                      = 10,
	ActivityAction_Job                       = 11,
	ActivityAction_Supply                    = 12,
	ActivityAction_Inventory                 = 13,
	ActivityAction_Sequencer                 = 14,
	ActivityAction_Sound                     = 15,
	ActivityAction_UI                        = 16,
	ActivityAction_Mark                      = 17,
	ActivityAction_Flag                      = 18,
	ActivityAction_Param                     = 19,
	ActivityAction_Reward                    = 20,
	ActivityAction_TypeAction                = 21,
	ActivityAction_ActorAction               = 22,
	ActivityAction_NearAction                = 23,
	ActivityAction_PlayerAction              = 24,
	ActivityAction_GameSequence              = 25,
	ActivityAction_SearchCast                = 26,
	ActivityAction_FastTravel                = 27,
	ActivityAction_SaveGame                  = 28,
	ActivityAction_MAX                       = 29,
};

// Enum Snowfall.ESnfGameActivityCheck
// NumValues: 0x0013
enum class ESnfGameActivityCheck : uint8
{
	ActivityCheck_Free                       = 0,
	ActivityCheck_Goto                       = 1,
	ActivityCheck_Eliminate                  = 2,
	ActivityCheck_Inventory                  = 3,
	ActivityCheck_Talk                       = 4,
	ActivityCheck_Job                        = 5,
	ActivityCheck_Activity                   = 6,
	ActivityCheck_ActivityUnique             = 7,
	ActivityCheck_Flag                       = 8,
	ActivityCheck_Timer                      = 9,
	ActivityCheck_Actor                      = 10,
	ActivityCheck_Player                     = 11,
	ActivityCheck_Prepare                    = 12,
	ActivityCheck_Play                       = 13,
	ActivityCheck_Finish                     = 14,
	ActivityCheck_Interact                   = 15,
	ActivityCheck_NearActivity               = 16,
	ActivityCheck_FastTravel                 = 17,
	ActivityCheck_MAX                        = 18,
};

// Enum Snowfall.ESnfGameActivityState
// NumValues: 0x0006
enum class ESnfGameActivityState : uint8
{
	ActivityState_None                       = 0,
	ActivityState_Wait                       = 1,
	ActivityState_Play                       = 2,
	ActivityState_End                        = 3,
	ActivityState_Finish                     = 4,
	ActivityState_MAX                        = 5,
};

// Enum Snowfall.ESnfGameCastType
// NumValues: 0x0060
enum class ESnfGameCastType : uint8
{
	CastType_None                            = 0,
	CastType_Self                            = 1,
	CastType_Player                          = 2,
	CastType_MyLevel                         = 3,
	CastType_Npc01                           = 4,
	CastType_Npc02                           = 5,
	CastType_Npc03                           = 6,
	CastType_Npc04                           = 7,
	CastType_Npc05                           = 8,
	CastType_Npc06                           = 9,
	CastType_Npc07                           = 10,
	CastType_Npc08                           = 11,
	CastType_Npc09                           = 12,
	CastType_Npc10                           = 13,
	CastType_Enemy01                         = 14,
	CastType_Enemy02                         = 15,
	CastType_Enemy03                         = 16,
	CastType_Enemy04                         = 17,
	CastType_Enemy05                         = 18,
	CastType_Enemy06                         = 19,
	CastType_Enemy07                         = 20,
	CastType_Enemy08                         = 21,
	CastType_Enemy09                         = 22,
	CastType_Enemy10                         = 23,
	CastType_Talk01                          = 24,
	CastType_Talk02                          = 25,
	CastType_Talk03                          = 26,
	CastType_Talk04                          = 27,
	CastType_Talk05                          = 28,
	CastType_Event01                         = 29,
	CastType_Event02                         = 30,
	CastType_Event03                         = 31,
	CastType_Event04                         = 32,
	CastType_Event05                         = 33,
	CastType_Event06                         = 34,
	CastType_Event07                         = 35,
	CastType_Event08                         = 36,
	CastType_Event09                         = 37,
	CastType_Event10                         = 38,
	CastType_Point01                         = 39,
	CastType_Point02                         = 40,
	CastType_Point03                         = 41,
	CastType_Point04                         = 42,
	CastType_Point05                         = 43,
	CastType_Point06                         = 44,
	CastType_Point07                         = 45,
	CastType_Point08                         = 46,
	CastType_Point09                         = 47,
	CastType_Point10                         = 48,
	CastType_Camera01                        = 49,
	CastType_Camera02                        = 50,
	CastType_Camera03                        = 51,
	CastType_Camera04                        = 52,
	CastType_Camera05                        = 53,
	CastType_Job01                           = 54,
	CastType_Job02                           = 55,
	CastType_Job03                           = 56,
	CastType_Job04                           = 57,
	CastType_Job05                           = 58,
	CastType_Job06                           = 59,
	CastType_Job07                           = 60,
	CastType_Job08                           = 61,
	CastType_Job09                           = 62,
	CastType_Job10                           = 63,
	CastType_Flag01                          = 64,
	CastType_Flag02                          = 65,
	CastType_Flag03                          = 66,
	CastType_Flag04                          = 67,
	CastType_Flag05                          = 68,
	CastType_Animal01                        = 69,
	CastType_Animal02                        = 70,
	CastType_Animal03                        = 71,
	CastType_Animal04                        = 72,
	CastType_Animal05                        = 73,
	CastType_Mark01                          = 74,
	CastType_Mark02                          = 75,
	CastType_Mark03                          = 76,
	CastType_Mark04                          = 77,
	CastType_Mark05                          = 78,
	CastType_Mark06                          = 79,
	CastType_Mark07                          = 80,
	CastType_Mark08                          = 81,
	CastType_Mark09                          = 82,
	CastType_Mark10                          = 83,
	CastType_Sound01                         = 84,
	CastType_Sound02                         = 85,
	CastType_Sound03                         = 86,
	CastType_Sound04                         = 87,
	CastType_Sound05                         = 88,
	CastType_Sound06                         = 89,
	CastType_Sound07                         = 90,
	CastType_Sound08                         = 91,
	CastType_Sound09                         = 92,
	CastType_Sound10                         = 93,
	CastType_DummyMark                       = 94,
	CastType_MAX                             = 95,
};

// Enum Snowfall.ESnfExchangeState
// NumValues: 0x0009
enum class ESnfExchangeState : uint8
{
	ExchangeState_None                       = 0,
	ExchangeState_Draw                       = 1,
	ExchangeState_Select                     = 2,
	ExchangeState_Find                       = 3,
	ExchangeState_Have                       = 4,
	ExchangeState_Clear                      = 5,
	ExchangeState_Change                     = 6,
	ExchangeState_Fake                       = 7,
	ExchangeState_MAX                        = 8,
};

// Enum Snowfall.ESnfActivityNotifyType
// NumValues: 0x0007
enum class ESnfActivityNotifyType : uint8
{
	ActivityNotify_Play                      = 0,
	ActivityNotify_Success                   = 1,
	ActivityNotify_Failed                    = 2,
	ActivityNotify_StepBegin                 = 3,
	ActivityNotify_StepEnd                   = 4,
	ActivityNotify_StepUpdate                = 5,
	ActivityNotify_MAX                       = 6,
};

// Enum Snowfall.ESnfBuddyExCheckType
// NumValues: 0x0006
enum class ESnfBuddyExCheckType : uint8
{
	None                                     = 0,
	KoomoteBattleStart                       = 1,
	KoomoteCorePullOut                       = 2,
	OkinaHitWeakPoint                        = 3,
	HannyaHitWeakPoint                       = 4,
	ESnfBuddyExCheckType_MAX                 = 5,
};

// Enum Snowfall.ESnfBuddyEndlessActionType
// NumValues: 0x000C
enum class ESnfBuddyEndlessActionType : uint8
{
	StartFloor                               = 0,
	StartFloor_SeaOfClouds                   = 1,
	RestartFloor_FallSeaOfClouds             = 2,
	ObjectiveClear                           = 3,
	TaskClear                                = 4,
	GetCollect                               = 5,
	Result_S                                 = 6,
	Result_A                                 = 7,
	SkillGuide                               = 8,
	ReturnNekomata                           = 9,
	FloorResult                              = 10,
	ESnfBuddyEndlessActionType_MAX           = 11,
};

// Enum Snowfall.ESnfBuddyActionType
// NumValues: 0x000C
enum class ESnfBuddyActionType : uint8
{
	CloseMainMenu                            = 0,
	EventSeparationKK                        = 1,
	ForceFusionKK                            = 2,
	TakeTraditionalCrafts                    = 3,
	PopupSkillOnLevelUp                      = 4,
	EnemyOmen                                = 5,
	OkinaHitWeakPoint                        = 6,
	HannyaHitWeakPoint                       = 7,
	BetobetoInvisible                        = 8,
	BetobetoWarp                             = 9,
	AkamantoStun                             = 10,
	ESnfBuddyActionType_MAX                  = 11,
};

// Enum Snowfall.EBuddyGimmickActionType
// NumValues: 0x001E
enum class EBuddyGimmickActionType : uint8
{
	Jizo_Scan                                = 0,
	Jizo_Worship                             = 1,
	Saisen_Scan                              = 2,
	Saisen_PraySmallMoney                    = 3,
	Saisen_PrayLargeMoney                    = 4,
	Saisen_PrayUnique1                       = 5,
	Saisen_PrayUnique2                       = 6,
	Saisen_PrayUnique3                       = 7,
	Saisen_PrayUnique4                       = 8,
	Saisen_PrayUnique5                       = 9,
	Saisen_PrayUnique6                       = 10,
	Saisen_PrayUnique7                       = 11,
	Saisen_PrayUnique8                       = 12,
	Saisen_PrayHyakkiyako                    = 13,
	TransferTelephone_AfterTransfer          = 14,
	Prison_Omen                              = 15,
	Prison_Reinforcement                     = 16,
	Prison_EnemyAllKill                      = 17,
	CapsuleToy_Start                         = 18,
	CapsuleToy_Result                        = 19,
	CapsuleToy_SeriesComplete                = 20,
	CapsuleToy_SameThing                     = 21,
	CapsuleToy_AllBuy                        = 22,
	CapsuleToy_AllComplete                   = 23,
	AnatomicalModel_LookBack                 = 24,
	AnatomicalModel_Captured                 = 25,
	AnatomicalModel_Hanako_Encounter         = 26,
	AnatomicalModel_Hanako_Captured          = 27,
	AbsorbEther                              = 28,
	EBuddyGimmickActionType_MAX              = 29,
};

// Enum Snowfall.EBuddyIntegerType
// NumValues: 0x0008
enum class EBuddyIntegerType : uint8
{
	TypeNone                                 = 0,
	GameSequenceMin                          = 1,
	GameSequenceMax                          = 2,
	NotEventBattle                           = 3,
	CanSeparationTalk                        = 4,
	UniqueStartIndex                         = 5,
	KillNum                                  = 6,
	EBuddyIntegerType_MAX                    = 7,
};

// Enum Snowfall.EBuddyFloatType
// NumValues: 0x000D
enum class EBuddyFloatType : uint8
{
	TypeNone                                 = 0,
	ActionPercentage                         = 1,
	IntervalMinuteTime                       = 2,
	DamageValueOrMore                        = 3,
	HealthRatioOrLess                        = 4,
	DamageRatioOrMore                        = 5,
	TimeSecOrMore                            = 6,
	TimeSecOrLess                            = 7,
	DistanceOrLess                           = 8,
	DistanceOrMore                           = 9,
	PercentageOrLess                         = 10,
	PercentageOrMore                         = 11,
	EBuddyFloatType_MAX                      = 12,
};

// Enum Snowfall.EBuddyPlayType
// NumValues: 0x0005
enum class EBuddyPlayType : uint8
{
	Random                                   = 0,
	UniqueRandom                             = 1,
	InOrderRound                             = 2,
	InOrderLoop                              = 3,
	Max                                      = 4,
};

// Enum Snowfall.EBuddyPhase
// NumValues: 0x0005
enum class EBuddyPhase : uint8
{
	Phase01                                  = 0,
	Phase02                                  = 1,
	Phase03                                  = 2,
	PhaseAny                                 = 3,
	Max                                      = 4,
};

// Enum Snowfall.EBuddyTaskType
// NumValues: 0x0012
enum class EBuddyTaskType : uint8
{
	Wait                                     = 0,
	Search                                   = 1,
	FreeTime                                 = 2,
	EnemyKill                                = 3,
	Battle                                   = 4,
	Separation                               = 5,
	Glide                                    = 6,
	LevelUp                                  = 7,
	ChargeRush                               = 8,
	Synchro                                  = 9,
	Location                                 = 10,
	Density                                  = 11,
	Tutorial                                 = 12,
	Defense                                  = 13,
	AfterTalk                                = 14,
	SkillCheck                               = 15,
	Endless                                  = 16,
	Max                                      = 17,
};

// Enum Snowfall.EBuddyEnableType
// NumValues: 0x0005
enum class EBuddyEnableType : uint8
{
	Disable                                  = 0,
	Any                                      = 1,
	Main                                     = 2,
	Endless                                  = 3,
	EBuddyEnableType_MAX                     = 4,
};

// Enum Snowfall.EBuddyTalkType
// NumValues: 0x0070
enum class EBuddyTalkType : uint8
{
	Battle_Begin                             = 0,
	Battle_SmallDamage                       = 1,
	Battle_LargeDamage                       = 2,
	Battle_Dying                             = 3,
	Battle_Death                             = 4,
	Battle_HitHandSpectrum                   = 5,
	Battle_Killstreak                        = 6,
	Battle_Killstreak2                       = 7,
	Battle_SneakKill                         = 8,
	Battle_SneakKill2                        = 9,
	Battle_NormalEnd                         = 10,
	Synchro_RateMax                          = 11,
	Synchro_Activation                       = 12,
	Synchro_CoreExtraction                   = 13,
	Synchro_End                              = 14,
	State_LevelUp                            = 15,
	State_Idle                               = 16,
	State_HealthDown                         = 17,
	GetSkill_1stWater                        = 18,
	GetSkill_1stFire                         = 19,
	GetSkill_HandAction                      = 20,
	GetSkill_Common                          = 21,
	GetSkill_CanOpen                         = 22,
	Separation_Start                         = 23,
	Separation_Help                          = 24,
	Separation_Fusion                        = 25,
	NotInteract_Normal                       = 26,
	Ghost_Absorb                             = 27,
	Yokai_Absorb                             = 28,
	Animal_Pet                               = 29,
	Animal_Feed                              = 30,
	Shop_Conveni                             = 31,
	Shop_Bought                              = 32,
	Prison_Omen                              = 33,
	Prison_Battle1                           = 34,
	Prison_Battle2                           = 35,
	Prison_Battle3                           = 36,
	Prison_Battle4                           = 37,
	Prison_Succeeded                         = 38,
	Prison_Failed                            = 39,
	Omikuji_Good                             = 40,
	Omikuji_Normal                           = 41,
	Omikuji_Bad                              = 42,
	Jizo_Scan                                = 43,
	Jizo_Worship                             = 44,
	Saisen_Scan                              = 45,
	Saisen_PrayN                             = 46,
	Saisen_PrayR                             = 47,
	Saisen_PrayUnique1                       = 48,
	Saisen_PrayUnique2                       = 49,
	Saisen_PrayUnique3                       = 50,
	Saisen_PrayUnique4                       = 51,
	Saisen_PrayUnique5                       = 52,
	Saisen_PrayUnique6                       = 53,
	Saisen_PrayUnique7                       = 54,
	Saisen_PrayUnique8                       = 55,
	Catalog_Eat                              = 56,
	Catalog_Discovery                        = 57,
	Category_Search                          = 58,
	Category_Take                            = 59,
	Category_Action                          = 60,
	Battle_SignDetection                     = 61,
	Battle_Sara_VisionDamage                 = 62,
	Battle_Enemy_Down                        = 63,
	Battle_FastCharge_Get                    = 64,
	Battle_FastCharge_Success                = 65,
	Battle_ChangeNearWind                    = 66,
	Battle_ChangeNearWater                   = 67,
	Battle_ChangeNearFire                    = 68,
	Battle_AirBackstab                       = 69,
	Battle_AirBackstab_Continuous            = 70,
	Battle_AirBackstab_Cursor                = 71,
	Battle_FallAttack                        = 72,
	Battle_JustGuardCounter                  = 73,
	Battle_Dodge                             = 74,
	Battle_Dodge_NoDamage                    = 75,
	Battle_EnemyBurnDown                     = 76,
	Battle_EnemyFreezeDown                   = 77,
	Battle_EnemyDamageRegist                 = 78,
	Battle_Akamanto_Stun                     = 79,
	Saisen_Hyakki                            = 80,
	CapsuleToy_Start                         = 81,
	CapsuleToy_Result                        = 82,
	CapsuleToy_Complete                      = 83,
	CapsuleToy_SameThing                     = 84,
	CityGraffiti_Discover                    = 85,
	CityGraffiti_Hachi_Discover              = 86,
	Model_Captured                           = 87,
	Model_Hanako_Encounter                   = 88,
	Model_Hanako_Captured                    = 89,
	Endless_Area_Start                       = 90,
	Endless_BossArea_Start                   = 91,
	Endless_CoinArea_Start                   = 92,
	Endless_Area_Clear                       = 93,
	Endless_BossArea_Clear                   = 94,
	Endless_Task_AllClear                    = 95,
	Endless_Tsuchigumo_Start                 = 96,
	Endless_Tsuchigumo_Support               = 97,
	Endless_Tsuchigumo_CorePullOut           = 98,
	Endless_Task_Occurs                      = 99,
	Endless_Task_Clear                       = 100,
	Endless_Objective_Clear                  = 101,
	Endless_Result_A                         = 102,
	Endless_Result_S                         = 103,
	Endless_Death                            = 104,
	Endless_Restart_Death                    = 105,
	Endless_Restart_Fall                     = 106,
	Endless_Collection_Get                   = 107,
	Endless_Area_Next                        = 108,
	Endless_HardEnemy_Spawn                  = 109,
	Endless_HardEnemy_Approach               = 110,
	Max                                      = 111,
};

// Enum Snowfall.ESnfFigureAttachType
// NumValues: 0x0004
enum class ESnfFigureAttachType : uint8
{
	FigureAttach_None                        = 0,
	FigureAttach_Player                      = 1,
	FigureAttach_Camera                      = 2,
	FigureAttach_MAX                         = 3,
};

// Enum Snowfall.ESnfEnemyDamageType
// NumValues: 0x000C
enum class ESnfEnemyDamageType : uint8
{
	EnemyDamage_Bullet                       = 0,
	EnemyDamage_Arrow                        = 1,
	EnemyDamage_HWind                        = 2,
	EnemyDamage_HFire                        = 3,
	EnemyDamage_HWater                       = 4,
	EnemyDamage_TankExplode                  = 5,
	EnemyDamage_Strike                       = 6,
	EnemyDamage_Paralysis                    = 7,
	EnemyDamage_Freeze                       = 8,
	EnemyDamage_FullBurn                     = 9,
	EnemyDamage_BurnDOT                      = 10,
	EnemyDamage_MAX                          = 11,
};

// Enum Snowfall.ESnfEnemyDeathType
// NumValues: 0x000E
enum class ESnfEnemyDeathType : uint8
{
	EnemyDeath_Backstub                      = 0,
	EnemyDeath_NearGrab                      = 1,
	EnemyDeath_FarGrab                       = 2,
	EnemyDeath_Bullet                        = 3,
	EnemyDeath_Arrow                         = 4,
	EnemyDeath_HWind                         = 5,
	EnemyDeath_HFire                         = 6,
	EnemyDeath_HWater                        = 7,
	EnemyDeath_TankExplode                   = 8,
	EnemyDeath_Downstub                      = 9,
	EnemyDeath_Strike                        = 10,
	EnemyDeath_BurnDOT                       = 11,
	EnemyDeath_Freeze                        = 12,
	EnemyDeath_MAX                           = 13,
};

// Enum Snowfall.ESnfNpcDeathType
// NumValues: 0x0004
enum class ESnfNpcDeathType : uint8
{
	NpcDeath_Purge                           = 0,
	NpcDeath_Absorb                          = 1,
	NpcDeath_Escape                          = 2,
	NpcDeath_MAX                             = 3,
};

// Enum Snowfall.ESnfNpcActionType
// NumValues: 0x0003
enum class ESnfNpcActionType : uint8
{
	NpcAction_ShopLeave                      = 0,
	NpcAction_ShopBought                     = 1,
	NpcAction_MAX                            = 2,
};

// Enum Snowfall.ESnfEnemyActionType
// NumValues: 0x0009
enum class ESnfEnemyActionType : uint8
{
	EnemyAction_StartAttack                  = 0,
	EnemyAction_Down                         = 1,
	EnemyAction_BurnDamage                   = 2,
	EnemyAction_BurnDown                     = 3,
	EnemyAction_FreezeDamage                 = 4,
	EnemyAction_FreezeDown                   = 5,
	EnemyAction_DamageResist                 = 6,
	EnemyAction_SpawnHardEnemy               = 7,
	EnemyAction_MAX                          = 8,
};

// Enum Snowfall.ESnfPlayerItemType
// NumValues: 0x0005
enum class ESnfPlayerItemType : uint8
{
	PlayerItem_Eat                           = 0,
	PlayerItem_Take                          = 1,
	PlayerItem_UseTalisman                   = 2,
	PlayerItem_Consume                       = 3,
	PlayerItem_MAX                           = 4,
};

// Enum Snowfall.ESnfPlayerDamageType
// NumValues: 0x0003
enum class ESnfPlayerDamageType : uint8
{
	PlayerDamage_Normal                      = 0,
	PlayerDamage_Spirit                      = 1,
	PlayerDamage_MAX                         = 2,
};

// Enum Snowfall.ESnfPlayerDeathType
// NumValues: 0x0006
enum class ESnfPlayerDeathType : uint8
{
	PlayerDeath_Normal                       = 0,
	PlayerDeath_Fall                         = 1,
	PlayerDeath_SlipMist                     = 2,
	PlayerDeath_SlipPoison                   = 3,
	PlayerDeath_SlipKegare                   = 4,
	PlayerDeath_MAX                          = 5,
};

// Enum Snowfall.ESnfGamePointDensityType
// NumValues: 0x0008
enum class ESnfGamePointDensityType : uint8
{
	DensityType_Activity                     = 0,
	DensityType_Step                         = 1,
	DensityType_Span                         = 2,
	DensityType_Sequence                     = 3,
	DensityType_Archive                      = 4,
	DensityType_Dynamic                      = 5,
	DensityType_Force                        = 6,
	DensityType_MAX                          = 7,
};

// Enum Snowfall.ESnfGameEnvDisplayType
// NumValues: 0x0008
enum class ESnfGameEnvDisplayType : uint8
{
	SDRsRGB                                  = 0,
	SDRRec709                                = 1,
	HDRRec709                                = 2,
	HDRRec2020                               = 3,
	HDRRec2020_2000                          = 4,
	HDRDciP3                                 = 5,
	Invalid                                  = 255,
	ESnfGameEnvDisplayType_MAX               = 256,
};

// Enum Snowfall.ESnfGameEnvBlendOption
// NumValues: 0x0006
enum class ESnfGameEnvBlendOption : uint8
{
	Linear                                   = 0,
	EaseInOut                                = 1,
	EaseIn                                   = 2,
	EaseOut                                  = 3,
	CustomCurve                              = 4,
	ESnfGameEnvBlendOption_MAX               = 5,
};

// Enum Snowfall.ESnfGameWeatherRequestType
// NumValues: 0x0003
enum class ESnfGameWeatherRequestType : uint8
{
	Natural                                  = 0,
	ForceEvent                               = 1,
	ESnfGameWeatherRequestType_MAX           = 2,
};

// Enum Snowfall.ESnfGameUiItemStatus
// NumValues: 0x0004
enum class ESnfGameUiItemStatus : uint8
{
	UiItemStatus_None                        = 0,
	UiItemStatus_New                         = 1,
	UiItemStatus_Read                        = 2,
	UiItemStatus_MAX                         = 3,
};

// Enum Snowfall.ESnfGameArchiveStatus
// NumValues: 0x0004
enum class ESnfGameArchiveStatus : uint8
{
	ArchiveStatus_None                       = 0,
	ArchiveStatus_New                        = 1,
	ArchiveStatus_Read                       = 2,
	ArchiveStatus_MAX                        = 3,
};

// Enum Snowfall.ESnfGameFlag
// NumValues: 0x0010
enum class ESnfGameFlag : uint8
{
	None                                     = 0,
	FirstEquipRosary                         = 1,
	SkillGetTutorial                         = 2,
	RosaryEquipTutorial                      = 3,
	NekomataTutorial                         = 4,
	MapMenuOpenSideMissionTutorial           = 5,
	MapMenuOpenFastTravelTutorial            = 6,
	OpenInventoryFoodTab                     = 7,
	FirstYokaiEncounter                      = 8,
	FirstYokaiInteractTalk                   = 9,
	FirstYokaiInteractCollectible            = 10,
	FirstGetRosary                           = 11,
	FirstGetKatashiro                        = 12,
	TalkEnd_MMT_0090_0010                    = 13,
	SpiritPhotoTutorial                      = 14,
	ESnfGameFlag_MAX                         = 15,
};

// Enum Snowfall.SnfLocationType
// NumValues: 0x0004
enum class ESnfLocationType : uint8
{
	Indoor                                   = 0,
	Outdoor                                  = 1,
	UnderAwning                              = 2,
	SnfLocationType_MAX                      = 3,
};

// Enum Snowfall.ESnfGameSceneType
// NumValues: 0x000B
enum class ESnfGameSceneType : uint8
{
	SceneType_None                           = 0,
	SceneType_Common                         = 1,
	SceneType_Scene                          = 2,
	SceneType_World                          = 3,
	SceneType_Area                           = 4,
	SceneType_Location                       = 5,
	SceneType_Situation                      = 6,
	SceneType_Sequence                       = 7,
	SceneType_Space                          = 8,
	SceneType_EndlessSituation               = 9,
	SceneType_MAX                            = 10,
};

// Enum Snowfall.ESnfGameInteractActorActionType
// NumValues: 0x0004
enum class ESnfGameInteractActorActionType : uint8
{
	BegincAction                             = 0,
	EndAction                                = 1,
	TypeAction                               = 2,
	ESnfGameInteractActorActionType_MAX      = 3,
};

// Enum Snowfall.ESnfGameMarkerAction
// NumValues: 0x0007
enum class ESnfGameMarkerAction : uint8
{
	MarkerAction_None                        = 0,
	MarkerAction_Accent                      = 1,
	MarkerAction_Blink                       = 2,
	MarkerAction_Zoom                        = 3,
	MarkerAction_Popup                       = 4,
	MarkerAction_Fade                        = 5,
	MarkerAction_Max                         = 6,
};

// Enum Snowfall.FSnfTalkExTypeActionTiming
// NumValues: 0x0003
enum class EFSnfTalkExTypeActionTiming : uint8
{
	TalkBegin                                = 0,
	StepTalkId                               = 1,
	FSnfTalkExTypeActionTiming_MAX           = 2,
};

// Enum Snowfall.ETalkWindowType
// NumValues: 0x0005
enum class ETalkWindowType : uint8
{
	TW_Normal                                = 0,
	TW_Buddy                                 = 1,
	TW_Yurei                                 = 2,
	TW_Animal                                = 3,
	TW_MAX                                   = 4,
};

// Enum Snowfall.ETalkPriority
// NumValues: 0x0008
enum class ETalkPriority : uint8
{
	P000                                     = 0,
	P100                                     = 1,
	P200                                     = 2,
	P300                                     = 3,
	P400                                     = 4,
	P500                                     = 5,
	None                                     = 6,
	ETalkPriority_MAX                        = 7,
};

// Enum Snowfall.ETalkCategory
// NumValues: 0x0004
enum class ETalkCategory : uint8
{
	TC_None                                  = 0,
	TC_Buddy                                 = 1,
	TC_LevelSequence                         = 2,
	TC_MAX                                   = 3,
};

// Enum Snowfall.ETalkMode
// NumValues: 0x000A
enum class ETalkMode : uint8
{
	TM_None                                  = 0,
	TM_OneShot                               = 1,
	TM_Interact                              = 2,
	TM_Buzz                                  = 3,
	TM_Agitation                             = 4,
	TM_VoiceLog                              = 5,
	TM_ShopMenu                              = 6,
	TM_InventoryMenu                         = 7,
	TM_SkillMenu                             = 8,
	TM_MAX                                   = 9,
};

// Enum Snowfall.ETalkAttachType
// NumValues: 0x0003
enum class ETalkAttachType : uint8
{
	TA_ActorSocket                           = 0,
	TA_TransformOnce                         = 1,
	TA_MAX                                   = 2,
};

// Enum Snowfall.ESnfTalkCameraTag
// NumValues: 0x0003
enum class ESnfTalkCameraTag : uint8
{
	Tag_PlayerCrouch                         = 0,
	Tag_PlayerSlow                           = 1,
	Tag_MAX                                  = 2,
};

// Enum Snowfall.ESnfTalkCameraType
// NumValues: 0x0004
enum class ESnfTalkCameraType : uint8
{
	Type_None                                = 0,
	Type_PlayerCamera                        = 1,
	Type_EventCamera                         = 2,
	Type_MAX                                 = 3,
};

// Enum Snowfall.ETalkTag
// NumValues: 0x001F
enum class ETalkTag : uint8
{
	TAG_None                                 = 0,
	TAG_LowPriority                          = 1,
	TAG_NoSubtitle                           = 2,
	TAG_SkipOn                               = 3,
	TAG_SkipOff                              = 4,
	TAG_TargetWithEveryone                   = 5,
	TAG_NoTarget                             = 6,
	TAG_LastSelect                           = 7,
	TAG_IgnorSelectAlreadyRead               = 8,
	TAG_OpenSelect                           = 9,
	TAG_DogFoodStock                         = 10,
	TAG_PlayerActionRestriction01            = 11,
	TAG_PlayerActionRestriction02            = 12,
	TAG_PlayerActionRestriction03            = 13,
	TAG_PlayerActionRestrictionReturn        = 14,
	TAG_ImportantTalk                        = 15,
	TAG_In2ndLine                            = 16,
	TAG_DeathRestart                         = 17,
	TAG_PhoneNoiseBegin                      = 18,
	TAG_PhoneNoiseEnd                        = 19,
	TAG_VoiceLogBeginSE                      = 20,
	TAG_VoiceLogEndSE                        = 21,
	TAG_AnimalFeeding                        = 22,
	TAG_AnimalGuideResult                    = 23,
	TAG_AnimalGuideStart                     = 24,
	TAG_AnimalGuideEnd                       = 25,
	TAG_AnimalGuideFeedingCheck              = 26,
	TAG_AnimalStartSelect                    = 27,
	TAG_AnimalFeedingStart                   = 28,
	TAG_KibidangoStock                       = 29,
	TAG_MAX                                  = 30,
};

// Enum Snowfall.EVoiceType
// NumValues: 0x000E
enum class EVoiceType : uint8
{
	VT_None                                  = 0,
	VT_Male_A                                = 1,
	VT_Male_B                                = 2,
	VT_Male_C                                = 3,
	VT_Male_D                                = 4,
	VT_Male_E                                = 5,
	VT_Female_A                              = 6,
	VT_Female_B                              = 7,
	VT_Female_C                              = 8,
	VT_Female_D                              = 9,
	VT_Female_E                              = 10,
	VT_Kid_A                                 = 11,
	VT_Kid_B                                 = 12,
	VT_MAX                                   = 13,
};

// Enum Snowfall.ETalkMotion
// NumValues: 0x001F
enum class ETalkMotion : uint8
{
	TM_None                                  = 0,
	TM_Idle                                  = 1,
	TM_Normal0                               = 2,
	TM_Normal1                               = 3,
	TM_Normal2                               = 4,
	TM_Normal3                               = 5,
	TM_Normal4                               = 6,
	TM_Yes                                   = 7,
	TM_No                                    = 8,
	TM_Positive                              = 9,
	TM_Negative                              = 10,
	TM_CallNear                              = 11,
	TM_CallFar                               = 12,
	TM_ThankYou                              = 13,
	TM_Hello                                 = 14,
	TM_Bye                                   = 15,
	TM_Give                                  = 16,
	TM_Take                                  = 17,
	TM_Sad                                   = 18,
	TM_Joy                                   = 19,
	TM_Angry                                 = 20,
	TM_Cry                                   = 21,
	TM_Notice                                = 22,
	TM_Surprise                              = 23,
	TM_Worry                                 = 24,
	TM_Special0                              = 25,
	TM_Special1                              = 26,
	TM_Special2                              = 27,
	TM_Special3                              = 28,
	TM_Special4                              = 29,
	TM_MAX                                   = 30,
};

// Enum Snowfall.ETalkCastType
// NumValues: 0x0021
enum class ETalkCastType : uint8
{
	TCT_None                                 = 0,
	TCT_Self                                 = 1,
	TCT_Player                               = 2,
	TCT_Rinko                                = 3,
	TCT_Ed                                   = 4,
	TCT_Dale                                 = 5,
	TCT_KK                                   = 6,
	TCT_Mari                                 = 7,
	TCT_Erika                                = 8,
	TCT_Hannya                               = 9,
	TCT_Yaseotoko                            = 10,
	TCT_Okina                                = 11,
	TCT_Npc0001                              = 12,
	TCT_Npc0002                              = 13,
	TCT_Npc0003                              = 14,
	TCT_Npc0004                              = 15,
	TCT_Npc0005                              = 16,
	TCT_Enemy0001                            = 17,
	TCT_Enemy0002                            = 18,
	TCT_Enemy0003                            = 19,
	TCT_Enemy0004                            = 20,
	TCT_Enemy0005                            = 21,
	TCT_Animal0001                           = 22,
	TCT_Animal0002                           = 23,
	TCT_Animal0003                           = 24,
	TCT_Animal0004                           = 25,
	TCT_Animal0005                           = 26,
	TCT_Narration                            = 27,
	TCT_Talker                               = 28,
	TCT_Target                               = 29,
	TCT_Anyone                               = 30,
	TCT_Noise                                = 31,
	TCT_MAX                                  = 32,
};

// Enum Snowfall.ETalkAnotherName
// NumValues: 0x0019
enum class ETalkAnotherName : uint8
{
	TAN_None                                 = 0,
	TAN_Hatena                               = 1,
	TAN_MaleDog                              = 2,
	TAN_FemaleDog                            = 3,
	TAN_MaleCat                              = 4,
	TAN_FemaleCat                            = 5,
	TAN_Tanuki1                              = 6,
	TAN_GhostMale                            = 7,
	TAN_GhostFemale                          = 8,
	TAN_GhostBoy                             = 9,
	TAN_GhostGirl                            = 10,
	TAN_WomanMask                            = 11,
	TAN_Ed                                   = 12,
	TAN_Dale                                 = 13,
	TAN_YoungMan                             = 14,
	TAN_PlayerAndKK                          = 15,
	TAN_HannyaMen                            = 16,
	TAN_Man                                  = 17,
	TAN_Woman                                = 18,
	TAN_Boy                                  = 19,
	TAN_Girl                                 = 20,
	TAN_EvilGhost                            = 21,
	TAN_ZashikiWarashi                       = 22,
	TAN_Tatariya                             = 23,
	TAN_MAX                                  = 24,
};

// Enum Snowfall.ETalkEmotionType
// NumValues: 0x0013
enum class ETalkEmotionType : uint8
{
	TET_None                                 = 0,
	TET_Neutral                              = 1,
	TET_Happy                                = 2,
	TET_Joy                                  = 3,
	TET_Sad                                  = 4,
	TET_Angry                                = 5,
	TET_Fury                                 = 6,
	TET_Amazing                              = 7,
	TET_Surprising                           = 8,
	TET_Fear                                 = 9,
	TET_Scare                                = 10,
	TET_Help                                 = 11,
	TET_Want                                 = 12,
	TET_Search                               = 13,
	TET_Thanks                               = 14,
	TET_Scheme                               = 15,
	TET_Mad                                  = 16,
	TET_Absence                              = 17,
	TET_MAX                                  = 18,
};

// Enum Snowfall.ETalkNextType
// NumValues: 0x0005
enum class ETalkNextType : uint8
{
	TNT_Timer                                = 0,
	TNT_VoiceEnd                             = 1,
	TNT_VoiceAndMotionEnd                    = 2,
	TNT_Sequencer                            = 3,
	TNT_MAX                                  = 4,
};

// Enum Snowfall.ETalkSpeakerType
// NumValues: 0x0004
enum class ETalkSpeakerType : uint8
{
	Normal                                   = 0,
	Player                                   = 1,
	KK                                       = 2,
	ETalkSpeakerType_MAX                     = 3,
};

// Enum Snowfall.ESnfGhostCageActorFXPropPlayList
// NumValues: 0x0008
enum class ESnfGhostCageActorFXPropPlayList : uint8
{
	None                                     = 0,
	Spawn                                    = 1,
	StartVanish                              = 2,
	TakeDamage                               = 3,
	Break                                    = 4,
	TimeOut                                  = 5,
	Disappear                                = 6,
	ESnfGhostCageActorFXPropPlayList_MAX     = 7,
};

// Enum Snowfall.ESnfGimmickActorSoundCallType
// NumValues: 0x0007
enum class ESnfGimmickActorSoundCallType : uint8
{
	None                                     = 0,
	OnActivateStart                          = 1,
	OnActivateStop                           = 2,
	OnInActivateStart                        = 3,
	OnInActivateStop                         = 4,
	OnArriveCurveKey                         = 5,
	ESnfGimmickActorSoundCallType_MAX        = 6,
};

// Enum Snowfall.ESnfHBModelPeekType
// NumValues: 0x0004
enum class ESnfHBModelPeekType : uint8
{
	None                                     = 0,
	Left                                     = 1,
	Right                                    = 2,
	ESnfHBModelPeekType_MAX                  = 3,
};

// Enum Snowfall.ESnfPeekPointAnimType
// NumValues: 0x0003
enum class ESnfPeekPointAnimType : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	ESnfPeekPointAnimType_MAX                = 2,
};

// Enum Snowfall.ESnfInteractCollisionType
// NumValues: 0x0004
enum class ESnfInteractCollisionType : uint8
{
	Sphere                                   = 0,
	Box                                      = 1,
	Capsule                                  = 2,
	ESnfInteractCollisionType_MAX            = 3,
};

// Enum Snowfall.ESnfInteractInhibitFlag
// NumValues: 0x0005
enum class ESnfInteractInhibitFlag : uint8
{
	SelfToSenderAngle                        = 0,
	SenderToSelfAngle                        = 1,
	Range                                    = 2,
	SelfToSenderSideAngle                    = 3,
	ESnfInteractInhibitFlag_MAX              = 4,
};

// Enum Snowfall.ESnfInteractShopType
// NumValues: 0x0008
enum class ESnfInteractShopType : uint8
{
	Convini                                  = 0,
	VendingMachine                           = 1,
	Shrine                                   = 2,
	Saisen                                   = 3,
	Omikuji                                  = 4,
	Costume                                  = 5,
	StreetStall                              = 6,
	ESnfInteractShopType_MAX                 = 7,
};

// Enum Snowfall.ESnfItemKeyType
// NumValues: 0x0003
enum class ESnfItemKeyType : uint8
{
	EnJoy                                    = 0,
	Parts                                    = 1,
	ESnfItemKeyType_MAX                      = 2,
};

// Enum Snowfall.ESnfItemPickupBaseFXKeyType
// NumValues: 0x0008
enum class ESnfItemPickupBaseFXKeyType : uint8
{
	Invalid                                  = 0,
	Spawn                                    = 1,
	Loop                                     = 2,
	PickUp                                   = 3,
	Disappear                                = 4,
	Move                                     = 5,
	Stop                                     = 6,
	ESnfItemPickupBaseFXKeyType_MAX          = 7,
};

// Enum Snowfall.ESnfJobCustomAction_Am0030
// NumValues: 0x000B
enum class ESnfJobCustomAction_Am0030 : uint8
{
	EnableInteract                           = 0,
	DisableInteract                          = 1,
	StartGuide                               = 2,
	EndGuide                                 = 3,
	LookAtStart                              = 4,
	LookAtEnd                                = 5,
	Destroy                                  = 6,
	CatHelp                                  = 7,
	PlayerHoming                             = 8,
	NeedsHelpWait                            = 9,
	ESnfJobCustomAction_MAX                  = 10,
};

// Enum Snowfall.ESnfJobCustomAction_Am0020
// NumValues: 0x0002
enum class ESnfJobCustomAction_Am0020 : uint8
{
	ApproachPlayer                           = 0,
	ESnfJobCustomAction_MAX                  = 1,
};

// Enum Snowfall.ESnfJobActionLookAtTarget
// NumValues: 0x0006
enum class ESnfJobActionLookAtTarget : uint8
{
	JALA_None                                = 0,
	JALA_TargetLocation                      = 1,
	JALA_TargetPlayer                        = 2,
	JALA_TargetActor                         = 3,
	JALA_TargetJobActor                      = 4,
	JALA_MAX                                 = 5,
};

// Enum Snowfall.ESnfJobActionActivityTagTagging
// NumValues: 0x0004
enum class ESnfJobActionActivityTagTagging : uint8
{
	JAAT_Tagging_Add                         = 0,
	JAAT_Tagging_Remove                      = 1,
	JAAT_Tagging_Clear                       = 2,
	JAAT_Tagging_MAX                         = 3,
};

// Enum Snowfall.ESnfJobActionWaitType
// NumValues: 0x000B
enum class ESnfJobActionWaitType : uint8
{
	DurationTime                             = 0,
	PileInPlayer                             = 1,
	PileOutPlayer                            = 2,
	AreaInPlayer                             = 3,
	AreaOutPlayer                            = 4,
	Talk                                     = 5,
	TalkCount                                = 6,
	ActivityTag                              = 7,
	EveryoneHasActivityTag                   = 8,
	PileInPlayerFast                         = 9,
	ESnfJobActionWaitType_MAX                = 10,
};

// Enum Snowfall.ESnfJobActionType
// NumValues: 0x000E
enum class ESnfJobActionType : uint8
{
	Invalid                                  = 0,
	Wait                                     = 1,
	Turn                                     = 2,
	AdjustTransform                          = 3,
	Anim                                     = 4,
	Talk                                     = 5,
	FxProp                                   = 6,
	ActivityTag                              = 7,
	Exit                                     = 8,
	LookAt                                   = 9,
	ChangeThrottle                           = 10,
	CustomAction                             = 11,
	Num                                      = 12,
	ESnfJobActionType_MAX                    = 13,
};

// Enum Snowfall.ESnfConfigNpcHumanoidReact
// NumValues: 0x0004
enum class ESnfConfigNpcHumanoidReact : uint8
{
	CNHR_None                                = 0,
	CNHR_MarebitoApproach                    = 1,
	CNHR_PlayerApproach                      = 2,
	CNHR_MAX                                 = 3,
};

// Enum Snowfall.ESnfPartialAnimType
// NumValues: 0x0004
enum class ESnfPartialAnimType : uint8
{
	None                                     = 0,
	LeftHand                                 = 1,
	RightHand                                = 2,
	ESnfPartialAnimType_MAX                  = 3,
};

// Enum Snowfall.ESnfLookAtFrequency
// NumValues: 0x0007
enum class ESnfLookAtFrequency : uint8
{
	Always                                   = 0,
	AlmostAlways                             = 1,
	Normally                                 = 2,
	Somtimes                                 = 3,
	Occasionally                             = 4,
	Rarely                                   = 5,
	ESnfLookAtFrequency_MAX                  = 6,
};

// Enum Snowfall.ESnfLookAtControlType
// NumValues: 0x0005
enum class ESnfLookAtControlType : uint8
{
	Standard                                 = 0,
	NarrowLimit                              = 1,
	WideLimit                                = 2,
	UseLookUpAxis                            = 3,
	ESnfLookAtControlType_MAX                = 4,
};

// Enum Snowfall.ESnfJobLookType
// NumValues: 0x0005
enum class ESnfJobLookType : uint8
{
	None                                     = 0,
	Head                                     = 1,
	Waist                                    = 2,
	Whole                                    = 3,
	ESnfJobLookType_MAX                      = 4,
};

// Enum Snowfall.ESnfJobPathRoundType
// NumValues: 0x0003
enum class ESnfJobPathRoundType : uint8
{
	Loop                                     = 0,
	Oneway                                   = 1,
	ESnfJobPathRoundType_MAX                 = 2,
};

// Enum Snowfall.ESnfJobPathRoundDirection
// NumValues: 0x0004
enum class ESnfJobPathRoundDirection : uint8
{
	Free                                     = 0,
	Forward                                  = 1,
	Backward                                 = 2,
	ESnfJobPathRoundDirection_MAX            = 3,
};

// Enum Snowfall.ESnfAkamantoNotifyType
// NumValues: 0x0002
enum class ESnfAkamantoNotifyType : uint8
{
	Stun                                     = 0,
	ESnfAkamantoNotifyType_MAX               = 1,
};

// Enum Snowfall.ESnfKekkaiFXAction
// NumValues: 0x0007
enum class ESnfKekkaiFXAction : uint8
{
	None                                     = 0,
	Play                                     = 1,
	PlayFast                                 = 2,
	Loop                                     = 3,
	End                                      = 4,
	EndFast                                  = 5,
	ESnfKekkaiFXAction_MAX                   = 6,
};

// Enum Snowfall.ESnfKekkaiShapeType
// NumValues: 0x0005
enum class ESnfKekkaiShapeType : uint8
{
	None                                     = 0,
	Wall                                     = 1,
	Circle                                   = 2,
	Cube                                     = 3,
	ESnfKekkaiShapeType_MAX                  = 4,
};

// Enum Snowfall.ESnfKekkaiType
// NumValues: 0x0005
enum class ESnfKekkaiType : uint8
{
	None                                     = 0,
	NotRelease                               = 1,
	CanRelease                               = 2,
	BoundaryWall                             = 3,
	ESnfKekkaiType_MAX                       = 4,
};

// Enum Snowfall.ESnfKoomoteBattleEventType
// NumValues: 0x0003
enum class ESnfKoomoteBattleEventType : uint8
{
	Rush                                     = 0,
	InBreath                                 = 1,
	ESnfKoomoteBattleEventType_MAX           = 2,
};

// Enum Snowfall.ESnfKoomoteStatus
// NumValues: 0x000F
enum class ESnfKoomoteStatus : uint8
{
	Normal_Idle                              = 0,
	Normal_PointMove                         = 1,
	Normal_LookAround                        = 2,
	Normal_Rush                              = 3,
	Normal_GrabPosBreath                     = 4,
	Normal_End                               = 5,
	Caution                                  = 6,
	Alert                                    = 7,
	Alert_PointMove                          = 8,
	Alert_InnerMove                          = 9,
	Battle                                   = 10,
	Battle_Rush                              = 11,
	Battle_InBreath                          = 12,
	Dead                                     = 13,
	ESnfKoomoteStatus_MAX                    = 14,
};

// Enum Snowfall.ESnfLandformConnectRelation
// NumValues: 0x0004
enum class ESnfLandformConnectRelation : uint8
{
	Flat                                     = 0,
	Down                                     = 1,
	Up                                       = 2,
	ESnfLandformConnectRelation_MAX          = 3,
};

// Enum Snowfall.ESequenceFadeType
// NumValues: 0x0007
enum class ESequenceFadeType : uint8
{
	SFT_NoFade                               = 0,
	SFT_FadeOutIn                            = 1,
	SFT_FadeOutOnly                          = 2,
	SFT_FadeInOnly                           = 3,
	SFT_FacadeFadeInOnly                     = 4,
	SFT_NewGameFadeInOnly                    = 5,
	SFT_MAX                                  = 6,
};

// Enum Snowfall.SnfSequenceCollectType
// NumValues: 0x0006
enum class ESnfSequenceCollectType : uint8
{
	CT_None                                  = 0,
	CT_Character                             = 1,
	CT_Talk                                  = 2,
	CT_MoviePlayer                           = 3,
	CT_Other                                 = 4,
	CT_MAX                                   = 5,
};

// Enum Snowfall.ESnfActorBindingMethod
// NumValues: 0x0004
enum class ESnfActorBindingMethod : uint8
{
	None                                     = 0,
	All                                      = 1,
	LastOnly                                 = 2,
	ESnfActorBindingMethod_MAX               = 3,
};

// Enum Snowfall.ESnfLevelSequenceChangeCVarIntType
// NumValues: 0x0004
enum class ESnfLevelSequenceChangeCVarIntType : uint8
{
	R_ReflectionEnvironment                  = 0,
	R_ForceLOD                               = 1,
	R_AllowOcclusionQueries                  = 2,
	Max                                      = 3,
};

// Enum Snowfall.ESnfLightBaseSoundCallSetting
// NumValues: 0x0003
enum class ESnfLightBaseSoundCallSetting : uint8
{
	ForcePlayTurnOnSound                     = 0,
	ForceSoundOff                            = 1,
	ESnfLightBaseSoundCallSetting_MAX        = 2,
};

// Enum Snowfall.ESnfLightBasePresetType
// NumValues: 0x0081
enum class ESnfLightBasePresetType : uint8
{
	None                                     = 0,
	Type00                                   = 1,
	Type01                                   = 2,
	Type02                                   = 3,
	Type03                                   = 4,
	Type04                                   = 5,
	Type05                                   = 6,
	Type06                                   = 7,
	Type07                                   = 8,
	Type08                                   = 9,
	Type09                                   = 10,
	Type10                                   = 11,
	Type11                                   = 12,
	Type12                                   = 13,
	Type13                                   = 14,
	Type14                                   = 15,
	Type15                                   = 16,
	Type16                                   = 17,
	Type17                                   = 18,
	Type18                                   = 19,
	Type19                                   = 20,
	Type20                                   = 21,
	Type21                                   = 22,
	Type22                                   = 23,
	Type23                                   = 24,
	Type24                                   = 25,
	Type25                                   = 26,
	Type26                                   = 27,
	Type27                                   = 28,
	Type28                                   = 29,
	Type29                                   = 30,
	Type30                                   = 31,
	Type31                                   = 32,
	Type32                                   = 33,
	Type33                                   = 34,
	Type34                                   = 35,
	Type35                                   = 36,
	Type36                                   = 37,
	Type37                                   = 38,
	Type38                                   = 39,
	Type39                                   = 40,
	Type40                                   = 41,
	Type41                                   = 42,
	Type42                                   = 43,
	Type43                                   = 44,
	Type44                                   = 45,
	Type45                                   = 46,
	Type46                                   = 47,
	Type47                                   = 48,
	Type48                                   = 49,
	Type49                                   = 50,
	Type50                                   = 51,
	Type51                                   = 52,
	Type52                                   = 53,
	Type53                                   = 54,
	Type54                                   = 55,
	Type55                                   = 56,
	Type56                                   = 57,
	Type57                                   = 58,
	Type58                                   = 59,
	Type59                                   = 60,
	Type60                                   = 61,
	Type61                                   = 62,
	Type62                                   = 63,
	Type63                                   = 64,
	Type64                                   = 65,
	Type65                                   = 66,
	Type66                                   = 67,
	Type67                                   = 68,
	Type68                                   = 69,
	Type69                                   = 70,
	Type70                                   = 71,
	Type71                                   = 72,
	Type72                                   = 73,
	Type73                                   = 74,
	Type74                                   = 75,
	Type75                                   = 76,
	Type76                                   = 77,
	Type77                                   = 78,
	Type78                                   = 79,
	Type79                                   = 80,
	Type80                                   = 81,
	Type81                                   = 82,
	Type82                                   = 83,
	Type83                                   = 84,
	Type84                                   = 85,
	Type85                                   = 86,
	Type86                                   = 87,
	Type87                                   = 88,
	Type88                                   = 89,
	Type89                                   = 90,
	Type90                                   = 91,
	Type91                                   = 92,
	Type92                                   = 93,
	Type93                                   = 94,
	Type94                                   = 95,
	Type95                                   = 96,
	Type96                                   = 97,
	Type97                                   = 98,
	Type98                                   = 99,
	Type99                                   = 100,
	Type100                                  = 101,
	Type101                                  = 102,
	Type102                                  = 103,
	Type103                                  = 104,
	Type104                                  = 105,
	Type105                                  = 106,
	Type106                                  = 107,
	Type107                                  = 108,
	Type108                                  = 109,
	Type109                                  = 110,
	Type110                                  = 111,
	Type111                                  = 112,
	Type112                                  = 113,
	Type113                                  = 114,
	Type114                                  = 115,
	Type115                                  = 116,
	Type116                                  = 117,
	Type117                                  = 118,
	Type118                                  = 119,
	Type119                                  = 120,
	Type120                                  = 121,
	Type121                                  = 122,
	Type122                                  = 123,
	Type123                                  = 124,
	Type124                                  = 125,
	Type125                                  = 126,
	Type126                                  = 127,
	ESnfLightBasePresetType_MAX              = 128,
};

// Enum Snowfall.ESnfMrbtStateType
// NumValues: 0x0008
enum class ESnfMrbtStateType : uint8
{
	Idle                                     = 0,
	Walk                                     = 1,
	Run                                      = 2,
	Dash                                     = 3,
	Damage                                   = 4,
	Dead                                     = 5,
	Attack                                   = 6,
	ESnfMrbtStateType_MAX                    = 7,
};

// Enum Snowfall.ESnfMarebitoCheckStatusType
// NumValues: 0x0002
enum class ESnfMarebitoCheckStatusType : uint8
{
	TakeCoreDamage                           = 0,
	ESnfMarebitoCheckStatusType_MAX          = 1,
};

// Enum Snowfall.ESnfJKMoveType
// NumValues: 0x0006
enum class ESnfJKMoveType : uint8
{
	Walk                                     = 0,
	Skip                                     = 1,
	Run                                      = 2,
	SpeedRun                                 = 3,
	Slow                                     = 4,
	ESnfJKMoveType_MAX                       = 5,
};

// Enum Snowfall.ESnfMrbtLostAnimType
// NumValues: 0x0007
enum class ESnfMrbtLostAnimType : uint8
{
	Caution                                  = 0,
	Alert                                    = 1,
	CautionSign                              = 2,
	RandomMove                               = 3,
	NoiseMove                                = 4,
	HearingMove                              = 5,
	ESnfMrbtLostAnimType_MAX                 = 6,
};

// Enum Snowfall.ESnfMrbtDeadType
// NumValues: 0x0006
enum class ESnfMrbtDeadType : uint8
{
	Front                                    = 0,
	Back                                     = 1,
	Left                                     = 2,
	Right                                    = 3,
	StealthBack                              = 4,
	ESnfMrbtDeadType_MAX                     = 5,
};

// Enum Snowfall.EClamp2DMarkerType
// NumValues: 0x0003
enum class EClamp2DMarkerType : uint8
{
	QUADRANGLE                               = 0,
	CIRCLE                                   = 1,
	EClamp2DMarkerType_MAX                   = 2,
};

// Enum Snowfall.EClampMarkerType
// NumValues: 0x0003
enum class EClampMarkerType : uint8
{
	QUADRANGLE                               = 0,
	CIRCLE                                   = 1,
	EClampMarkerType_MAX                     = 2,
};

// Enum Snowfall.EMenuActivityType
// NumValues: 0x0006
enum class EMenuActivityType : uint8
{
	Main                                     = 0,
	Side                                     = 1,
	Achievement                              = 2,
	SpiritPhoto                              = 3,
	Nekomata                                 = 4,
	EMenuActivityType_MAX                    = 5,
};

// Enum Snowfall.EMenuArchiveType
// NumValues: 0x000C
enum class EMenuArchiveType : uint8
{
	Keywords                                 = 0,
	Files                                    = 1,
	Characters                               = 2,
	Items                                    = 3,
	Junk                                     = 4,
	CitySpots                                = 5,
	Discovery                                = 6,
	Tutorial                                 = 7,
	VoiceLog                                 = 8,
	Collection                               = 9,
	KKSurveyMaterials                        = 10,
	EMenuArchiveType_MAX                     = 11,
};

// Enum Snowfall.EKeyAssignmentType
// NumValues: 0x002C
enum class EKeyAssignmentType : uint8
{
	None                                     = 0,
	MoveForward                              = 1,
	MoveBackward                             = 2,
	MoveLeft                                 = 3,
	MoveRight                                = 4,
	Run                                      = 5,
	Sneak                                    = 6,
	Jump                                     = 7,
	Fire                                     = 8,
	Blow                                     = 9,
	Aim                                      = 10,
	Absorb                                   = 11,
	GhostAbsorb                              = 12,
	Torii                                    = 13,
	Interact                                 = 14,
	Light                                    = 15,
	ChangeTalisman                           = 16,
	Guard                                    = 17,
	Scan                                     = 18,
	UseItem                                  = 19,
	ChangeWeapon                             = 20,
	KKMode                                   = 21,
	KKMode_L                                 = 22,
	KKMode_R                                 = 23,
	InMusubi_L                               = 24,
	InMusubi_R                               = 25,
	AimAssist                                = 26,
	PrevWeapon                               = 27,
	NextWeapon                               = 28,
	Menu                                     = 29,
	ChangeWeaponMenu                         = 30,
	Pause                                    = 31,
	PhotoMode                                = 32,
	SelectWind                               = 33,
	SelectWater                              = 34,
	SelectFire                               = 35,
	SelectBow                                = 36,
	SelectParalysis                          = 37,
	SelectCoreDamage                         = 38,
	SelectNoise                              = 39,
	SelectBlindfold                          = 40,
	SelectJump                               = 41,
	SelectEther                              = 42,
	Max                                      = 43,
};

// Enum Snowfall.EOptionParamType
// NumValues: 0x005C
enum class EOptionParamType : uint8
{
	Language                                 = 0,
	AudioCulture                             = 1,
	DifficultyLevel                          = 2,
	PlayerWeaponChangeSlow                   = 3,
	DrawMiniMap                              = 4,
	MiniMapNorthFixed                        = 5,
	MiniMapFrameScale                        = 6,
	MiniMapMapScale                          = 7,
	DrawCompass                              = 8,
	DrawPopupUI                              = 9,
	DrawButtonGuideUI                        = 10,
	DrawMissionObjectiveUI                   = 11,
	DrawMissionObjectiveBackgroundUI         = 12,
	DrawItemLogUI                            = 13,
	DrawGameLogAndCollectableUI              = 14,
	DrawPlayerInfoUI                         = 15,
	DrawSubtitleUI                           = 16,
	DrawSubtitleBackgroundUI                 = 17,
	DrawInGameInfoUI                         = 18,
	DrawReticleUI                            = 19,
	ButtonGideIconType                       = 20,
	DeleteTimeLimit                          = 21,
	TimeCycleAutoSaveInterval                = 22,
	GameFilter                               = 23,
	EasingUnnaturalPhenomenon                = 24,
	DrawEndlessBarrierWall                   = 25,
	ForceFeedback                            = 26,
	HapticsEffect                            = 27,
	AdaptiveTrigger                          = 28,
	CameraSmoothSpeed                        = 29,
	CameraBrakeSpeed                         = 30,
	CameraInvertedX                          = 31,
	CameraMaxSpeedX                          = 32,
	CameraInvertedY                          = 33,
	CameraMaxSpeedY                          = 34,
	CameraZoomAimScale                       = 35,
	CameraBowAimScale                        = 36,
	CameraShakeScale                         = 37,
	AutoAim                                  = 38,
	SprintInputMode                          = 39,
	SneakInputMode                           = 40,
	GlideInputMode                           = 41,
	DodgeInputMode                           = 42,
	ButtonAssignment                         = 43,
	KeyAssignment                            = 44,
	MouseSmoothing                           = 45,
	LeftStickDeadZone                        = 46,
	RightStickDeadZone                       = 47,
	WindowMode                               = 48,
	ScreenResolution                         = 49,
	VSync                                    = 50,
	FrameRateLimit                           = 51,
	Gamma                                    = 52,
	HDROutputDevice                          = 53,
	HDRUILevel                               = 54,
	ConsoleGraphicsMode                      = 55,
	GraphicsQuality                          = 56,
	MotionBlurQuality                        = 57,
	SSSQuality                               = 58,
	SSRQuality                               = 59,
	GIQuality                                = 60,
	ShadowQuality                            = 61,
	LevelStreamingQuality                    = 62,
	RayTrating                               = 63,
	RayTracingShadowsQuality                 = 64,
	RayTracingRefrectionsQuality             = 65,
	RayTracingCullingQuality                 = 66,
	UpscalingTechnique                       = 67,
	DLSSQuality                              = 68,
	DLSSG                                    = 69,
	FSRQuality                               = 70,
	FSRSharpness                             = 71,
	FSR2Quality                              = 72,
	FSR2Sharpness                            = 73,
	TSRQuality                               = 74,
	XeSSQuality                              = 75,
	ColorVisionDeficiencyType                = 76,
	ColorVisionDeficiencySeverity            = 77,
	FontScaleRate                            = 78,
	SubtitleFontScaleRate                    = 79,
	TextureStreamingQuality                  = 80,
	PlayLowResolutionMovie                   = 81,
	FilmGrain                                = 82,
	SceneColorFringe                         = 83,
	MasterVolume                             = 84,
	MusicVolume                              = 85,
	SoundEffectVolume                        = 86,
	VoiceVolume                              = 87,
	YokaiSEVolume                            = 88,
	SpeakerOutput                            = 89,
	DevCVar                                  = 90,
	EOptionParamType_MAX                     = 91,
};

// Enum Snowfall.ESnfOptionItemEditUIType
// NumValues: 0x0004
enum class ESnfOptionItemEditUIType : uint8
{
	VALUE_SLIDER                             = 0,
	ITEM_SLIDER                              = 1,
	ITEM_SELECTOR                            = 2,
	ESnfOptionItemEditUIType_MAX             = 3,
};

// Enum Snowfall.ESnfOptionItemCondition
// NumValues: 0x0014
enum class ESnfOptionItemCondition : uint64
{
	None                                     = 0,
	PlatformAll                              = 1,
	PlatformPC                               = 2,
	PlatformPS5                              = 4,
	PlatformXSX                              = 8,
	PlatformXSS                              = 16,
	InMenuLevel                              = 1024,
	InGameLevel                              = 2048,
	ExcludeInGameBattle                      = 4096,
	ChangableDifficultyOnly                  = 8192,
	ExcludePlayingCutscene                   = 16384,
	ExcludeInPlayingEndlessGame              = 32768,
	ExcludeInPlayingMainGame                 = 65536,
	OutputHDR                                = 1048576,
	OutputSDR                                = 2097152,
	RayTracingSupports                       = 4194304,
	RayTracingEnabled                        = 8388608,
	ExcludePlayPIE                           = 1073741824,
	ExcludeShipping                          = 18446744071562067968,
	ESnfOptionItemCondition_MAX              = 1073741825,
};

// Enum Snowfall.ESnfSaveLoadMenuMode
// NumValues: 0x0003
enum class ESnfSaveLoadMenuMode : uint8
{
	Load                                     = 0,
	Save                                     = 1,
	ESnfSaveLoadMenuMode_MAX                 = 2,
};

// Enum Snowfall.EStatusMenuMusicButtonType
// NumValues: 0x0009
enum class EStatusMenuMusicButtonType : uint8
{
	None                                     = 0,
	Play                                     = 1,
	Next                                     = 2,
	Prev                                     = 3,
	Shuffle                                  = 4,
	Repeat                                   = 5,
	Favorite                                 = 6,
	PlayFavoriteList                         = 7,
	EStatusMenuMusicButtonType_MAX           = 8,
};

// Enum Snowfall.EStatusMenuType
// NumValues: 0x0007
enum class EStatusMenuType : uint8
{
	None                                     = 0,
	Food                                     = 1,
	Item                                     = 2,
	Outfit                                   = 3,
	Rosary                                   = 4,
	MusicPlayer                              = 5,
	EStatusMenuType_MAX                      = 6,
};

// Enum Snowfall.ESnfMissionTaskType
// NumValues: 0x0006
enum class ESnfMissionTaskType : uint8
{
	None                                     = 0,
	AddTask                                  = 1,
	ClearTask                                = 2,
	AddStep                                  = 3,
	ClearStep                                = 4,
	ESnfMissionTaskType_MAX                  = 5,
};

// Enum Snowfall.FSnfMorphedRaccoonActorAnimalAnimType
// NumValues: 0x0003
enum class EFSnfMorphedRaccoonActorAnimalAnimType : uint8
{
	None                                     = 0,
	Spawn                                    = 1,
	FSnfMorphedRaccoonActorAnimalAnimType_MAX = 2,
};

// Enum Snowfall.FSnfMorphedRaccoonActorSoundCallType
// NumValues: 0x0005
enum class EFSnfMorphedRaccoonActorSoundCallType : uint8
{
	None                                     = 0,
	OnMorphedAnimStart                       = 1,
	OnMorphedAnimStop                        = 2,
	OnArriveCurveKey                         = 3,
	FSnfMorphedRaccoonActorSoundCallType_MAX = 4,
};

// Enum Snowfall.ESnfMorphedRaccoonState
// NumValues: 0x000C
enum class ESnfMorphedRaccoonState : uint8
{
	WaitShow                                 = 0,
	OnBegin                                  = 1,
	WaitAnimalSetting                        = 2,
	WaitInteract                             = 3,
	WaitScaling                              = 4,
	Appeare                                  = 5,
	WaitAppeare                              = 6,
	Talk                                     = 7,
	WaitTalk                                 = 8,
	WaitDestroy                              = 9,
	Destroyed                                = 10,
	ESnfMorphedRaccoonState_MAX              = 11,
};

// Enum Snowfall.ESnfMultiAttackQueryMobilityType
// NumValues: 0x0004
enum class ESnfMultiAttackQueryMobilityType : uint8
{
	Any                                      = 0,
	Static                                   = 1,
	Dynamic                                  = 2,
	ESnfMultiAttackQueryMobilityType_MAX     = 3,
};

// Enum Snowfall.ESnfAttackCollisionShapeType
// NumValues: 0x0004
enum class ESnfAttackCollisionShapeType : uint8
{
	Box                                      = 0,
	Sphere                                   = 1,
	Capsule                                  = 2,
	ESnfAttackCollisionShapeType_MAX         = 3,
};

// Enum Snowfall.ESnfCCN_SkeletonType
// NumValues: 0x0003
enum class ESnfCCN_SkeletonType : uint8
{
	CCN_SkeletonType_StandardMale            = 0,
	CCN_SkeletonType_StandardFemale          = 1,
	CCN_SkeletonType_Max                     = 2,
};

// Enum Snowfall.ESnfCcNpcSkeletonType
// NumValues: 0x0003
enum class ESnfCcNpcSkeletonType : uint8
{
	StandardMale                             = 0,
	StandardFemale                           = 1,
	Max                                      = 2,
};

// Enum Snowfall.ESnfNpcFlyingRewardType
// NumValues: 0x0003
enum class ESnfNpcFlyingRewardType : uint8
{
	Absorb                                   = 0,
	Take                                     = 1,
	ESnfNpcFlyingRewardType_MAX              = 2,
};

// Enum Snowfall.ESnfGhostCategory
// NumValues: 0x0003
enum class ESnfGhostCategory : uint8
{
	GoodGhost                                = 0,
	EvilGhost                                = 1,
	ESnfGhostCategory_MAX                    = 2,
};

// Enum Snowfall.ESnfOmikujiActorBuffType
// NumValues: 0x0009
enum class ESnfOmikujiActorBuffType : uint8
{
	BT_None                                  = 0,
	BT_Daikichi                              = 1,
	BT_Kichi                                 = 2,
	BT_Chukichi                              = 3,
	BT_Shokichi                              = 4,
	BT_Suekichi                              = 5,
	BT_Kyou                                  = 6,
	BT_Daikyou                               = 7,
	BT_MAX                                   = 8,
};

// Enum Snowfall.EOmikujiResultType
// NumValues: 0x0009
enum class EOmikujiResultType : uint8
{
	Daikichi                                 = 0,
	Kichi                                    = 1,
	Chukichi                                 = 2,
	Shokichi                                 = 3,
	Suekichi                                 = 4,
	Kyou                                     = 5,
	Daikyou                                  = 6,
	None                                     = 7,
	EOmikujiResultType_MAX                   = 8,
};

// Enum Snowfall.EOsaisenPhaseType
// NumValues: 0x0004
enum class EOsaisenPhaseType : uint8
{
	SelectMoney                              = 0,
	SelectWish                               = 1,
	Result                                   = 2,
	EOsaisenPhaseType_MAX                    = 3,
};

// Enum Snowfall.EOsaisenResultType
// NumValues: 0x0004
enum class EOsaisenResultType : uint8
{
	None                                     = 0,
	GoodLuck                                 = 1,
	BadLuck                                  = 2,
	EOsaisenResultType_MAX                   = 3,
};

// Enum Snowfall.EFSnfParanormalTriggerBehavior
// NumValues: 0x0005
enum class EFSnfParanormalTriggerBehavior : uint8
{
	EnterOn                                  = 0,
	LeaveOn                                  = 1,
	EnterOnLeaveOff                          = 2,
	Num                                      = 3,
	EFSnfParanormalTriggerBehavior_MAX       = 4,
};

// Enum Snowfall.ESnfPeopleAnimSyncType
// NumValues: 0x0004
enum class ESnfPeopleAnimSyncType : uint8
{
	PAST_None                                = 0,
	PAST_FootLeft                            = 1,
	PAST_FootRight                           = 2,
	PAST_MAX                                 = 3,
};

// Enum Snowfall.ESnfPeopleAnimBlendType
// NumValues: 0x000E
enum class ESnfPeopleAnimBlendType : uint8
{
	Default                                  = 0,
	Talk                                     = 1,
	Duration00                               = 2,
	Duration01                               = 3,
	Duration02                               = 4,
	Duration03                               = 5,
	Duration04                               = 6,
	Duration05                               = 7,
	Duration10                               = 8,
	Duration15                               = 9,
	Duration20                               = 10,
	Duration25                               = 11,
	Duration30                               = 12,
	ESnfPeopleAnimBlendType_MAX              = 13,
};

// Enum Snowfall.EPhotoModeParamType
// NumValues: 0x0032
enum class EPhotoModeParamType : uint8
{
	None                                     = 0,
	SelfieMode                               = 1,
	FOV                                      = 2,
	DOF_Flag                                 = 3,
	DOF_FocalDistance                        = 4,
	DOF_Aperture                             = 5,
	MotionBlur                               = 6,
	CameraRoll                               = 7,
	Filter                                   = 8,
	WhiteBalance                             = 9,
	HueOffset                                = 10,
	SaturateOffset                           = 11,
	BrightnessOffset                         = 12,
	BlackPoint                               = 13,
	WhitePoint                               = 14,
	AditionalGamma                           = 15,
	GameTime                                 = 16,
	HellWall                                 = 17,
	Emote                                    = 18,
	CharacterPause                           = 19,
	PlayerPause                              = 20,
	GameFrameAdvance                         = 21,
	ModeLightIntensity                       = 22,
	PlayerYaw                                = 23,
	PlayerOffsetX                            = 24,
	PlayerOffsetY                            = 25,
	PlayerOffsetZ                            = 26,
	PlayerFacial                             = 27,
	PlayerCameraEye                          = 28,
	CameraStamp01                            = 29,
	CameraStamp02                            = 30,
	CameraStamp03                            = 31,
	CameraStamp04                            = 32,
	CameraStamp05                            = 33,
	CameraStamp06                            = 34,
	StampMask                                = 35,
	CameraFrame                              = 36,
	Figure01_Select                          = 37,
	Figure02_Select                          = 38,
	Figure03_Select                          = 39,
	Figure04_Select                          = 40,
	SaveLoad_Slot01                          = 41,
	SaveLoad_Slot02                          = 42,
	SaveLoad_Slot03                          = 43,
	SaveLoad_Slot04                          = 44,
	SaveLoad_Slot05                          = 45,
	Max                                      = 46,
	CameraStampMax                           = 6,
	FigureMax                                = 4,
	SaveLoadSlotMax                          = 5,
};

// Enum Snowfall.EPhotoModeHelpButtonType
// NumValues: 0x0009
enum class EPhotoModeHelpButtonType : uint8
{
	Normal                                   = 0,
	Stamp                                    = 1,
	StampNameList                            = 2,
	FigureModel                              = 3,
	FigureCamera                             = 4,
	FigureModelNameList                      = 5,
	FigureCameraNameList                     = 6,
	SaveLoad                                 = 7,
	Max                                      = 8,
};

// Enum Snowfall.EPhotoModeNamePlateListType
// NumValues: 0x0003
enum class EPhotoModeNamePlateListType : uint8
{
	CameraStamp                              = 0,
	Figure                                   = 1,
	Max                                      = 2,
};

// Enum Snowfall.EPhotoModeTabType
// NumValues: 0x0007
enum class EPhotoModeTabType : uint8
{
	Camera                                   = 0,
	Effect                                   = 1,
	Character                                = 2,
	Stamp                                    = 3,
	Figure                                   = 4,
	SaveLoad                                 = 5,
	Max                                      = 6,
};

// Enum Snowfall.ESnfBlinkType
// NumValues: 0x0004
enum class ESnfBlinkType : uint8
{
	Default                                  = 0,
	Blink_BodyMotion                         = 1,
	Blink_Operation                          = 2,
	ESnfBlinkType_MAX                        = 3,
};

// Enum Snowfall.ESnfPlayerEmoteObject
// NumValues: 0x0012
enum class ESnfPlayerEmoteObject : uint8
{
	EMOTEOBJ_MOCHI_KK                        = 0,
	EMOTEOBJ_HINA_KK                         = 1,
	EMOTEOBJ_BOW                             = 2,
	EMOTEOBJ_ARROW                           = 3,
	EMOTEOBJ_UMBRELLA                        = 4,
	EMOTEOBJ_DOG                             = 5,
	EMOTEOBJ_CAT                             = 6,
	EMOTEOBJ_BIKE                            = 7,
	EMOTEOBJ_KK                              = 8,
	EMOTEOBJ_NASU                            = 9,
	EMOTEOBJ_KYUURI_KK                       = 10,
	EMOTEOBJ_CAKE                            = 11,
	EMOTEOBJ_CAKE2                           = 12,
	EMOTEOBJ_SEBASU_KK                       = 13,
	EMOTEOBJ_KOTATSU                         = 14,
	EMOTEOBJ_HOUKI                           = 15,
	EMOTEOBJ_HOUKI_R                         = 16,
	EMOTEOBJ_MAX                             = 17,
};

// Enum Snowfall.ESnfPlayerJumpTalismanType
// NumValues: 0x0006
enum class ESnfPlayerJumpTalismanType : uint8
{
	JUMP_BIG                                 = 0,
	JUMP_MIDDLE                              = 1,
	JUMP_SMALL                               = 2,
	JUMP_INHIBIT                             = 3,
	JUMP_LOW_CEILING                         = 4,
	JUMP_MAX                                 = 5,
};

// Enum Snowfall.ESnfPlayerInMusubiInput
// NumValues: 0x000C
enum class ESnfPlayerInMusubiInput : uint8
{
	IMI_NONE                                 = 0,
	IMI_NEUTRAL                              = 1,
	IMI_UP                                   = 2,
	IMI_DOWN                                 = 3,
	IMI_LEFT                                 = 4,
	IMI_RIGHT                                = 5,
	IMI_UPPER_LEFT                           = 6,
	IMI_UPPER_RIGHT                          = 7,
	IMI_LOWER_LEFT                           = 8,
	IMI_LOWER_RIGHT                          = 9,
	IMI_PUSH                                 = 10,
	IMI_MAX                                  = 11,
};

// Enum Snowfall.ESnfPlayerTriggerEffectType
// NumValues: 0x0005
enum class ESnfPlayerTriggerEffectType : uint8
{
	PTET_None                                = 0,
	PTET_Weapon                              = 1,
	PTET_Vibration                           = 2,
	PTET_Feedback                            = 3,
	PTET_MAX                                 = 4,
};

// Enum Snowfall.ESnfPlayerWeaponWaitTypeKind
// NumValues: 0x0007
enum class ESnfPlayerWeaponWaitTypeKind : uint8
{
	PWTK_None                                = 0,
	PWTK_GunKind                             = 1,
	PWTK_BowKind                             = 2,
	PWTK_FireKind                            = 3,
	PWTK_WindKind                            = 4,
	PWTK_WaterKind                           = 5,
	PWTK_MAX                                 = 6,
};

// Enum Snowfall.ESnfPlayerWeaponWaitType
// NumValues: 0x000B
enum class ESnfPlayerWeaponWaitType : uint8
{
	PWT_None                                 = 0,
	PWT_Gun                                  = 1,
	PWT_Bow                                  = 2,
	PWT_Horizontal                           = 3,
	PWT_FireShot                             = 4,
	PWT_FireShot_2nd                         = 5,
	PWT_WindShot                             = 6,
	PWT_WindShot_2nd                         = 7,
	PWT_WaterShot                            = 8,
	PWT_WaterShot_2nd                        = 9,
	PWT_MAX                                  = 10,
};

// Enum Snowfall.ESnfPlayerGestureType
// NumValues: 0x0019
enum class ESnfPlayerGestureType : uint8
{
	PGT_None                                 = 0,
	PGT_Good                                 = 1,
	PGT_Negative                             = 2,
	PGT_Call1                                = 3,
	PGT_Call2                                = 4,
	PGT_Appease                              = 5,
	PGT_Point                                = 6,
	PGT_Communication                        = 7,
	PGT_CommunicationEnd                     = 8,
	PGT_Take                                 = 9,
	PGT_Get                                  = 10,
	PGT_Give                                 = 11,
	PGT_FirstRosary                          = 12,
	PGT_FirstKatashiro                       = 13,
	PGT_EquipRosary                          = 14,
	PGT_SuckedIn                             = 15,
	PGT_Scan                                 = 16,
	PGT_TakeOutPhoto                         = 17,
	PGT_BurnPhoto                            = 18,
	PGT_ChargeRushWind                       = 19,
	PGT_ChargeRushWater                      = 20,
	PGT_ChargeRushFire                       = 21,
	PGT_CoverFace                            = 22,
	PGT_HelpCat                              = 23,
	PGT_MAX                                  = 24,
};

// Enum Snowfall.ESnfPlayerAnimState
// NumValues: 0x002E
enum class ESnfPlayerAnimState : uint8
{
	PAN_Idle                                 = 0,
	PAN_Shot                                 = 1,
	PAN_Purge                                = 2,
	PAN_Menu                                 = 3,
	PAN_Jump                                 = 4,
	PAN_Interact                             = 5,
	PAN_Gesture                              = 6,
	PAN_Climb                                = 7,
	PAN_Scan                                 = 8,
	PAN_Dead                                 = 9,
	PAN_HookShot                             = 10,
	PAN_Damage                               = 11,
	PAN_Ladder                               = 12,
	PAN_Land                                 = 13,
	PAN_Guard                                = 14,
	PAN_Glider                               = 15,
	PAN_Emote                                = 16,
	PAN_BowShot                              = 17,
	PAN_Photo                                = 18,
	PAN_WeaponMenu                           = 19,
	PAN_Customize                            = 20,
	PAN_Wait                                 = 21,
	PAN_Absorb                               = 22,
	PAN_HandAction                           = 23,
	PAN_HandEmpty                            = 24,
	PAN_HandMenu                             = 25,
	PAN_ItemMenu                             = 26,
	PAN_EmoteMenu                            = 27,
	PAN_TelephoneBox                         = 28,
	PAN_Talk                                 = 29,
	PAN_Coop                                 = 30,
	PAN_Torii                                = 31,
	PAN_Ethel                                = 32,
	PAN_Blow                                 = 33,
	PAN_Fusion                               = 34,
	PAN_Ghost                                = 35,
	PAN_InMusubi                             = 36,
	PAN_Food                                 = 37,
	PAN_Separate                             = 38,
	PAN_Talisman                             = 39,
	PAN_Binoculars                           = 40,
	PAN_Kegare                               = 41,
	PAN_Observe                              = 42,
	PAN_SpiritPhoto                          = 43,
	PAN_Thread                               = 44,
	PAN_MAX                                  = 45,
};

// Enum Snowfall.ESnfPlayerBodyAction
// NumValues: 0x0007
enum class ESnfPlayerBodyAction : uint8
{
	PBA_None                                 = 0,
	PBA_Interact                             = 1,
	PBA_FireWeapon                           = 2,
	PBA_ReloadWeapon                         = 3,
	PBA_ChangeWeapon                         = 4,
	PBA_ChargeWeapon                         = 5,
	PBA_MAX                                  = 6,
};

// Enum Snowfall.ESnfPlayerDamageState
// NumValues: 0x0004
enum class ESnfPlayerDamageState : uint8
{
	PDS_Normal                               = 0,
	PDS_Damage                               = 1,
	PDS_Dead                                 = 2,
	PDS_MAX                                  = 3,
};

// Enum Snowfall.ESnfPlayerActionState
// NumValues: 0x000C
enum class ESnfPlayerActionState : uint8
{
	PAS_None                                 = 0,
	PAS_CallMenu                             = 1,
	PAS_UpHand                               = 2,
	PAS_PokeHand                             = 3,
	PAS_InvokeHand                           = 4,
	PAS_FireWeapon                           = 5,
	PAS_ReloadWeapon                         = 6,
	PAS_ChangeWeapon                         = 7,
	PAS_ChargeWeapon                         = 8,
	PAS_Attack                               = 9,
	PAS_Bom                                  = 10,
	PAS_MAX                                  = 11,
};

// Enum Snowfall.ESnfPlayerAnimRequest
// NumValues: 0x0005
enum class ESnfPlayerAnimRequest : uint8
{
	PAR_Interact                             = 0,
	PAR_FireWeapon                           = 1,
	PAR_ChargeWeapon                         = 2,
	PAR_ReloadWeapon                         = 3,
	PAR_Max                                  = 4,
};

// Enum Snowfall.ESnfPlayerCustomMoveState
// NumValues: 0x0005
enum class ESnfPlayerCustomMoveState : uint8
{
	PCMS_None                                = 0,
	PCMS_AttachMove                          = 1,
	PCMS_TargetMove                          = 2,
	PCMS_LineMove                            = 3,
	PCMS_MAX                                 = 4,
};

// Enum Snowfall.ESnfPlayerMoveState
// NumValues: 0x0008
enum class ESnfPlayerMoveState : uint8
{
	PMS_Stop                                 = 0,
	PMS_Walk                                 = 1,
	PMS_Run                                  = 2,
	PMS_Jump                                 = 3,
	PMS_Land                                 = 4,
	PMS_Grapple                              = 5,
	PMS_Glider                               = 6,
	PMS_MAX                                  = 7,
};

// Enum Snowfall.ESnfPlayerSpeedState
// NumValues: 0x0005
enum class ESnfPlayerSpeedState : uint8
{
	PSS_Stop                                 = 0,
	PSS_Slow                                 = 1,
	PSS_Normal                               = 2,
	PSS_Fast                                 = 3,
	PSS_MAX                                  = 4,
};

// Enum Snowfall.ESnfPlayerAimState
// NumValues: 0x0004
enum class ESnfPlayerAimState : uint8
{
	PTS_Normal                               = 0,
	PTS_Aim                                  = 1,
	PTS_Mode                                 = 2,
	PTS_MAX                                  = 3,
};

// Enum Snowfall.ESnfPlayerOption
// NumValues: 0x000C
enum class ESnfPlayerOption : uint8
{
	POF_BeStealth                            = 0,
	POF_HighSpeed                            = 1,
	POF_MiddleSpeed                          = 2,
	POF_SlowSpeed                            = 3,
	POF_NoDamage                             = 4,
	POF_NoReaction                           = 5,
	POF_NoCollision                          = 6,
	PCF_InfiniteAmmo                         = 7,
	PCF_InfiniteMoney                        = 8,
	PCF_InfiniteKarma                        = 9,
	PCF_OptionMax                            = 10,
	ESnfPlayerOption_MAX                     = 11,
};

// Enum Snowfall.ERightTriggerState
// NumValues: 0x0010
enum class ERightTriggerState : uint8
{
	RT_None                                  = 0,
	RT_GunReady                              = 1,
	RT_GunReload                             = 2,
	RT_GunShot                               = 3,
	RT_BowReady                              = 4,
	RT_BowLoop                               = 5,
	RT_BowShot                               = 6,
	RT_FireReady                             = 7,
	RT_FireLoop                              = 8,
	RT_FireShot                              = 9,
	RT_WaterReady                            = 10,
	RT_WaterShot                             = 11,
	RT_WindReady                             = 12,
	RT_WindShot                              = 13,
	RT_Edit                                  = 14,
	RT_MAX                                   = 15,
};

// Enum Snowfall.ELeftTriggerState
// NumValues: 0x0007
enum class ELeftTriggerState : uint8
{
	LT_None                                  = 0,
	LT_AbsorbReady                           = 1,
	LT_Absorb                                = 2,
	LT_AbsorbEnd                             = 3,
	LT_AbsorbNear                            = 4,
	LT_Edit                                  = 5,
	LT_MAX                                   = 6,
};

// Enum Snowfall.ESnfPlayerKeyInput
// NumValues: 0x0041
enum class ESnfPlayerKeyInput : uint8
{
	PKI_Run                                  = 0,
	PKI_Sneak                                = 1,
	PKI_Jump                                 = 2,
	PKI_Aim                                  = 3,
	PKI_Emote                                = 4,
	PKI_FireMain                             = 5,
	PKI_HandMenu                             = 6,
	PKI_Grapple                              = 7,
	PKI_Guard                                = 8,
	PKI_Scan                                 = 9,
	PKI_Interact                             = 10,
	PKI_Light                                = 11,
	PKI_Menu                                 = 12,
	PKI_Pause                                = 13,
	PKI_LeaveItToKK                          = 14,
	PKI_Absorb                               = 15,
	PKI_UseItem                              = 16,
	PKI_Glide                                = 17,
	PKI_Blow                                 = 18,
	PKI_WeaponChange                         = 19,
	PKI_HandActionChange                     = 20,
	PKI_SelectWind                           = 21,
	PKI_SelectWater                          = 22,
	PKI_SelectFire                           = 23,
	PKI_SelectBow                            = 24,
	PKI_SelectParalysis                      = 25,
	PKI_SelectCoreDamage                     = 26,
	PKI_SelectNoise                          = 27,
	PKI_SelectBlindfold                      = 28,
	PKI_SelectJump                           = 29,
	PKI_SelectEther                          = 30,
	PKI_WeaponNext                           = 31,
	PKI_WeaponPrev                           = 32,
	PKI_InMusubiFinish_L                     = 33,
	PKI_InMusubiFinish_R                     = 34,
	PKI_TalismanChange                       = 35,
	PKI_Selfie                               = 36,
	PKI_CameraReset                          = 37,
	PKI_ZoomIn                               = 38,
	PKI_ZoomOut                              = 39,
	PKI_Roll                                 = 40,
	PKI_Hide                                 = 41,
	PKI_KKMode                               = 42,
	PKI_KKMode_L                             = 43,
	PKI_KKMode_R                             = 44,
	PKI_AimAssist                            = 45,
	PKI_PhotoMode                            = 46,
	PKI_Torii                                = 47,
	PKI_GhostAbsorb                          = 48,
	PKI_Decide                               = 49,
	PKI_Cancel                               = 50,
	PKI_Up                                   = 51,
	PKI_Down                                 = 52,
	PKI_Left                                 = 53,
	PKI_Right                                = 54,
	PKI_MoveFront                            = 55,
	PKI_MoveBack                             = 56,
	PKI_MoveLeft                             = 57,
	PKI_MoveRight                            = 58,
	PKI_Shortcut1                            = 59,
	PKI_Shortcut2                            = 60,
	PKI_Shortcut3                            = 61,
	PKI_Shortcut4                            = 62,
	PKI_KeyInputMax                          = 63,
	PKI_MAX                                  = 64,
};

// Enum Snowfall.ESnfPlayerAxisInput
// NumValues: 0x0011
enum class ESnfPlayerAxisInput : uint8
{
	PAI_MoveForward                          = 0,
	PAI_MoveRight                            = 1,
	PAI_LookPitch                            = 2,
	PAI_LookYaw                              = 3,
	PAI_MouseForward                         = 4,
	PAI_MouseRight                           = 5,
	PAI_DriveHandle                          = 6,
	PAI_DriveAccel                           = 7,
	PAI_DriveBack                            = 8,
	PAI_DriveBrake                           = 9,
	PAI_MenuUp                               = 10,
	PAI_MenuSide                             = 11,
	PAI_MenuScale                            = 12,
	PAI_TriggerAbsorb                        = 13,
	PAI_TriggerFire                          = 14,
	PAI_AxisInputMax                         = 15,
	PAI_MAX                                  = 16,
};

// Enum Snowfall.EMenuRadioPlayType
// NumValues: 0x0005
enum class EMenuRadioPlayType : uint8
{
	NORMAL                                   = 0,
	LOOP                                     = 1,
	REPEAT                                   = 2,
	RANDOM                                   = 3,
	EMenuRadioPlayType_MAX                   = 4,
};

// Enum Snowfall.ESnfPlayerCustomMoveType
// NumValues: 0x0005
enum class ESnfPlayerCustomMoveType : uint8
{
	PCMT_None                                = 0,
	PCMT_TargetMove                          = 1,
	PCMT_AttachMove                          = 2,
	PCMT_LineMove                            = 3,
	PCMT_MAX                                 = 4,
};

// Enum Snowfall.ESnfPopupType
// NumValues: 0x0003
enum class ESnfPopupType : uint8
{
	PopupType_File                           = 0,
	PopupType_Tutorial                       = 1,
	PopupType_MAX                            = 2,
};

// Enum Snowfall.EPopupActivityType
// NumValues: 0x0003
enum class EPopupActivityType : uint8
{
	Start                                    = 0,
	Clear                                    = 1,
	EPopupActivityType_MAX                   = 2,
};

// Enum Snowfall.ESnfPrisonEnemyType
// NumValues: 0x000C
enum class ESnfPrisonEnemyType : uint8
{
	PET_UmbrellaMan                          = 0,
	PET_UM_SlimShirt                         = 1,
	PET_UM_FrontOpen                         = 2,
	PET_JK                                   = 3,
	PET_JK_Winter                            = 4,
	PET_OL                                   = 5,
	PET_Open                                 = 6,
	PET_Gakuran                              = 7,
	PET_Shirt                                = 8,
	PET_RedFat                               = 9,
	PET_Guard                                = 10,
	PET_MAX                                  = 11,
};

// Enum Snowfall.ESnfPrisonGhostType
// NumValues: 0x0002
enum class ESnfPrisonGhostType : uint8
{
	PGT_Man                                  = 0,
	PGT_MAX                                  = 1,
};

// Enum Snowfall.ESnfPrisonEventResult
// NumValues: 0x0007
enum class ESnfPrisonEventResult : uint8
{
	None                                     = 0,
	Omen                                     = 1,
	InProgress                               = 2,
	AreaOver                                 = 3,
	Succeeded                                = 4,
	Failed                                   = 5,
	ESnfPrisonEventResult_MAX                = 6,
};

// Enum Snowfall.ESnfConsoleGraphicsMode
// NumValues: 0x0007
enum class ESnfConsoleGraphicsMode : uint8
{
	Quality                                  = 0,
	Performance                              = 1,
	QualityHFR                               = 2,
	PerformanceHFR                           = 3,
	QualityHFRWithVsync                      = 4,
	PerformanceHFRWithVsync                  = 5,
	Max                                      = 6,
};

// Enum Snowfall.ESnfPlayerSwitchInputMode
// NumValues: 0x0006
enum class ESnfPlayerSwitchInputMode : uint8
{
	Toggle                                   = 0,
	Hold                                     = 1,
	Type1                                    = 2,
	Type2                                    = 3,
	Type3                                    = 4,
	ESnfPlayerSwitchInputMode_MAX            = 5,
};

// Enum Snowfall.ESnfPSNActivitySaveRecordState
// NumValues: 0x0004
enum class ESnfPSNActivitySaveRecordState : uint32
{
	Active                                   = 0,
	Completed                                = 1,
	Suspended                                = 2,
	ESnfPSNActivitySaveRecordState_MAX       = 3,
};

// Enum Snowfall.ESnfPSNActivityProgressCommand
// NumValues: 0x000C
enum class ESnfPSNActivityProgressCommand : uint8
{
	None                                     = 0,
	Available                                = 1,
	Unavailable                              = 2,
	Start                                    = 4,
	Completed                                = 8,
	Failed                                   = 16,
	Abandoned                                = 32,
	Available_Start                          = 5,
	Unavailable_Completed                    = 10,
	Unavailable_Failed                       = 18,
	Unavailable_Abandoned                    = 34,
	ESnfPSNActivityProgressCommand_MAX       = 35,
};

// Enum Snowfall.ESnfPSNActivityAttribute
// NumValues: 0x0004
enum class ESnfPSNActivityAttribute : uint8
{
	None                                     = 0,
	AllowPlayCompletedGame                   = 1,
	Additions                                = 2,
	ESnfPSNActivityAttribute_MAX             = 3,
};

// Enum Snowfall.ESnfPSNActivityType
// NumValues: 0x0004
enum class ESnfPSNActivityType : uint8
{
	Activity                                 = 0,
	Task                                     = 1,
	SubTask                                  = 2,
	ESnfPSNActivityType_MAX                  = 3,
};

// Enum Snowfall.ESnfPurgePostEffectStep
// NumValues: 0x0004
enum class ESnfPurgePostEffectStep : uint8
{
	MainBlend                                = 0,
	EndBlend                                 = 1,
	Finish                                   = 2,
	ESnfPurgePostEffectStep_MAX              = 3,
};

// Enum Snowfall.ESnfBowReticleType
// NumValues: 0x0003
enum class ESnfBowReticleType : uint8
{
	Kunai                                    = 0,
	Kitune                                   = 1,
	ESnfBowReticleType_MAX                   = 2,
};

// Enum Snowfall.ESnfScanStep
// NumValues: 0x0009
enum class ESnfScanStep : uint8
{
	Start                                    = 0,
	WaitBegin                                = 1,
	OnEffect                                 = 2,
	WaitEffect                               = 3,
	OffEffect                                = 4,
	WaitEnd                                  = 5,
	OffEnd                                   = 6,
	Finish                                   = 7,
	ESnfScanStep_MAX                         = 8,
};

// Enum Snowfall.EnScanControlActorOutLineType
// NumValues: 0x0003
enum class EnScanControlActorOutLineType : uint8
{
	Blue                                     = 0,
	Green                                    = 1,
	EnScanControlActorOutLineType_MAX        = 2,
};

// Enum Snowfall.ESnfShrineActorShrineType
// NumValues: 0x0003
enum class ESnfShrineActorShrineType : uint8
{
	SmallShrine                              = 0,
	MediumSurine                             = 1,
	ESnfShrineActorShrineType_MAX            = 2,
};

// Enum Snowfall.ESnfSignalBasePartsType
// NumValues: 0x0006
enum class ESnfSignalBasePartsType : uint8
{
	Pole                                     = 0,
	CarSignal                                = 1,
	PedestrianSignalArm                      = 2,
	PedestrianSignal                         = 3,
	Sign                                     = 4,
	ESnfSignalBasePartsType_MAX              = 5,
};

// Enum Snowfall.ESnfSoundActorCallType
// NumValues: 0x0003
enum class ESnfSoundActorCallType : uint8
{
	PostAkEvent                              = 0,
	PostEventGlobal                          = 1,
	ESnfSoundActorCallType_MAX               = 2,
};

// Enum Snowfall.ESnfSpiderwebePlayList
// NumValues: 0x0004
enum class ESnfSpiderwebePlayList : uint8
{
	Invalid                                  = 0,
	FireSpreadStart                          = 1,
	DestructStart                            = 2,
	ESnfSpiderwebePlayList_MAX               = 3,
};

// Enum Snowfall.ESplineFXType
// NumValues: 0x0006
enum class ESplineFXType : uint8
{
	ESplineFXType_Default                    = 0,
	ESplineFXType_Start                      = 1,
	ESplineFXType_End                        = 2,
	ESplineFXType_Body                       = 3,
	Num                                      = 4,
	ESplineFXType_MAX                        = 5,
};

// Enum Snowfall.ESnfStreetStallState
// NumValues: 0x0007
enum class ESnfStreetStallState : uint8
{
	Loading                                  = 0,
	InteractWait                             = 1,
	Shopping                                 = 2,
	Closed                                   = 3,
	UnloadRequest                            = 4,
	Unloaded                                 = 5,
	ESnfStreetStallState_MAX                 = 6,
};

// Enum Snowfall.ESnfSyncActApply
// NumValues: 0x0005
enum class ESnfSyncActApply : uint8
{
	None                                     = 0,
	ApplyToMasterOnly                        = 1,
	ApplyToSlaveOnly                         = 2,
	ApplyToBoth                              = 3,
	ESnfSyncActApply_MAX                     = 4,
};

// Enum Snowfall.ESnfSyncActMethod
// NumValues: 0x0004
enum class ESnfSyncActMethod : uint8
{
	None                                     = 0,
	SnapToSlaveBone                          = 1,
	SnapToMasterBone                         = 2,
	ESnfSyncActMethod_MAX                    = 3,
};

// Enum Snowfall.ESnfSyncActRole
// NumValues: 0x0004
enum class ESnfSyncActRole : uint8
{
	None                                     = 0,
	AsMaster                                 = 1,
	AsSlave                                  = 2,
	ESnfSyncActRole_MAX                      = 3,
};

// Enum Snowfall.ESnfTakeDamagePropsActorSoundType
// NumValues: 0x0005
enum class ESnfTakeDamagePropsActorSoundType : uint8
{
	None                                     = 0,
	Hit                                      = 1,
	Fall                                     = 2,
	Scrape                                   = 3,
	ESnfTakeDamagePropsActorSoundType_MAX    = 4,
};

// Enum Snowfall.ESnfTalkShopBuffType
// NumValues: 0x0009
enum class ESnfTalkShopBuffType : uint8
{
	BT_Daikichi                              = 0,
	BT_Kichi                                 = 1,
	BT_Chukichi                              = 2,
	BT_Shokichi                              = 3,
	BT_Suekichi                              = 4,
	BT_Kyou                                  = 5,
	BT_Daikyou                               = 6,
	Num                                      = 7,
	ESnfTalkShopBuffType_MAX                 = 8,
};

// Enum Snowfall.ESnfTalkShopType
// NumValues: 0x0005
enum class ESnfTalkShopType : uint8
{
	Saisen                                   = 0,
	Omikuji                                  = 1,
	GoshuinFromMiko                          = 2,
	GoshuinFromStand                         = 3,
	ESnfTalkShopType_MAX                     = 4,
};

// Enum Snowfall.ESnfUITalkType
// NumValues: 0x0006
enum class ESnfUITalkType : uint8
{
	InGame                                   = 0,
	VoiceLog                                 = 1,
	Shop                                     = 2,
	Tutorial                                 = 3,
	VoiceLogAndTutorial                      = 4,
	ESnfUITalkType_MAX                       = 5,
};

// Enum Snowfall.ESnfTatariyaAIState
// NumValues: 0x000A
enum class ESnfTatariyaAIState : uint8
{
	Idle                                     = 0,
	Patrol                                   = 1,
	Return                                   = 2,
	Scout                                    = 3,
	Retreat                                  = 4,
	Search                                   = 5,
	Chase                                    = 6,
	Combat                                   = 7,
	Dead                                     = 8,
	ESnfTatariyaAIState_MAX                  = 9,
};

// Enum Snowfall.ESnfTatariyaWeaponType
// NumValues: 0x0003
enum class ESnfTatariyaWeaponType : uint8
{
	Rod                                      = 0,
	Bow                                      = 1,
	ESnfTatariyaWeaponType_MAX               = 2,
};

// Enum Snowfall.ESnfTransferTelephoneState
// NumValues: 0x0021
enum class ESnfTransferTelephoneState : uint8
{
	None                                     = 0,
	Call                                     = 1,
	Call_Tutorial                            = 2,
	Call_NoTransfer                          = 3,
	Select                                   = 4,
	Transfer                                 = 5,
	TransferOnlyOne                          = 6,
	TransferEnd                              = 7,
	Cancel                                   = 8,
	CancelEnd                                = 9,
	EventMode                                = 10,
	Talking                                  = 11,
	TalkEnd                                  = 12,
	EventModeEnd                             = 13,
	EventTransfer                            = 14,
	EventTransferOnlyOne                     = 15,
	Dizzy                                    = 16,
	RaizeFace                                = 17,
	EndDizzy                                 = 18,
	EndRaizeFace                             = 19,
	AfterTalkEdoRinko                        = 20,
	EndAfterTalkEdoRinko                     = 21,
	TelephoneCardMode                        = 22,
	TelephoneCardStart                       = 23,
	TelephoneCardTalkLoop                    = 24,
	TelephoneCardEnd                         = 25,
	TransferDataMode                         = 26,
	StartTransferData                        = 27,
	EndTransferData                          = 28,
	EndTransferUIData                        = 29,
	FinishTransferUIData                     = 30,
	TalkEnd_Slowly                           = 31,
	ESnfTransferTelephoneState_MAX           = 32,
};

// Enum Snowfall.ESnfTeleportPortalBaseSoundCallTiming
// NumValues: 0x0003
enum class ESnfTeleportPortalBaseSoundCallTiming : uint8
{
	EndFade                                  = 0,
	BeginFade                                = 1,
	ESnfTeleportPortalBaseSoundCallTiming_MAX = 2,
};

// Enum Snowfall.ESnfTeleportPortalBaseMarkerType
// NumValues: 0x0005
enum class ESnfTeleportPortalBaseMarkerType : uint8
{
	Approach                                 = 0,
	Interact                                 = 1,
	Activity                                 = 2,
	Scan                                     = 3,
	ESnfTeleportPortalBaseMarkerType_MAX     = 4,
};

// Enum Snowfall.ESnfTeleportPortalBaseType
// NumValues: 0x0003
enum class ESnfTeleportPortalBaseType : uint8
{
	Entrance                                 = 0,
	Exit                                     = 1,
	ESnfTeleportPortalBaseType_MAX           = 2,
};

// Enum Snowfall.ESnfTeleportPortalBaseStep
// NumValues: 0x0007
enum class ESnfTeleportPortalBaseStep : uint8
{
	TeleportStart                            = 0,
	WaitLoad                                 = 1,
	StartFadeIn                              = 2,
	TeleportEnd                              = 3,
	FadeWait                                 = 4,
	SoundWait                                = 5,
	ESnfTeleportPortalBaseStep_MAX           = 6,
};

// Enum Snowfall.ESnfTimeLineType
// NumValues: 0x0009
enum class ESnfTimeLineType : uint8
{
	TimeLineType_Action                      = 0,
	TimeLineType_CheckAction                 = 1,
	TimeLineType_Talk                        = 2,
	TimeLineType_CheckTalk                   = 3,
	TimeLineType_Anim                        = 4,
	TimeLineType_AnimBase                    = 5,
	TimeLineType_Job                         = 6,
	TimeLineType_Archive                     = 7,
	TimeLineType_MAX                         = 8,
};

// Enum Snowfall.ETitleItemType
// NumValues: 0x000B
enum class ETitleItemType : uint8
{
	None                                     = 0,
	Continue                                 = 1,
	Newgame                                  = 2,
	Load                                     = 3,
	Option                                   = 4,
	Licenses                                 = 5,
	Difficulty                               = 6,
	Exit                                     = 7,
	Endless                                  = 8,
	DebugJump                                = 9,
	ETitleItemType_MAX                       = 10,
};

// Enum Snowfall.ETitleMenuPhase
// NumValues: 0x0008
enum class ETitleMenuPhase : uint8
{
	None                                     = 0,
	NoticeScreen                             = 1,
	PressAnyButtons                          = 2,
	WaitLoginLocalPlayer                     = 3,
	InitialSettings                          = 4,
	MainMenuLoop                             = 5,
	DifficultySelect                         = 6,
	ETitleMenuPhase_MAX                      = 7,
};

// Enum Snowfall.EnEtherCostType
// NumValues: 0x0008
enum class EnEtherCostType : uint8
{
	Edit                                     = 0,
	Tutorial1                                = 1,
	Tutorial2                                = 2,
	TypeN                                    = 3,
	TypeR                                    = 4,
	TypeL                                    = 5,
	Free                                     = 6,
	EnEtherCostType_MAX                      = 7,
};

// Enum Snowfall.EnStartToriiDirtStart
// NumValues: 0x0004
enum class EnStartToriiDirtStart : uint8
{
	Dirt                                     = 0,
	SpawnDirt                                = 2,
	Purification                             = 3,
	EnStartToriiDirtStart_MAX                = 4,
};

// Enum Snowfall.ESnfTrainState
// NumValues: 0x0016
enum class ESnfTrainState : uint8
{
	Hide                                     = 0,
	FirstIn                                  = 1,
	FirstWaitBeginStop                       = 2,
	FirstWaitOpenDoor                        = 3,
	FirstWait                                = 4,
	FirstWaitBell                            = 5,
	FirstWaitCloseDoor                       = 6,
	FirstWaitEndStop                         = 7,
	FirstOut                                 = 8,
	InsideBeginFade                          = 9,
	InsideWait                               = 10,
	InsideEndFade                            = 11,
	Warp                                     = 12,
	WarpAfter                                = 13,
	LastIn                                   = 14,
	LastWaitBeginStop                        = 15,
	LastWaitOpenDoor                         = 16,
	LastWait                                 = 17,
	LastWaitCloseDoor                        = 18,
	LastWaitEndStop                          = 19,
	Vanish                                   = 20,
	ESnfTrainState_MAX                       = 21,
};

// Enum Snowfall.ESnfTriggerCollisionType
// NumValues: 0x0004
enum class ESnfTriggerCollisionType : uint8
{
	Sphere                                   = 0,
	Box                                      = 1,
	Capsule                                  = 2,
	ESnfTriggerCollisionType_MAX             = 3,
};

// Enum Snowfall.ESnfVATControlActorState
// NumValues: 0x0006
enum class ESnfVATControlActorState : uint8
{
	FreeMove                                 = 0,
	Idol                                     = 1,
	Escape                                   = 2,
	EscapeWait                               = 3,
	Return                                   = 4,
	ESnfVATControlActorState_MAX             = 5,
};

// Enum Snowfall.EVehicleDoorState
// NumValues: 0x0005
enum class EVehicleDoorState : uint8
{
	Closed                                   = 0,
	Closing                                  = 1,
	Opend                                    = 2,
	Opening                                  = 3,
	EVehicleDoorState_MAX                    = 4,
};

// Enum Snowfall.ESnfWalkwayFollowType
// NumValues: 0x0004
enum class ESnfWalkwayFollowType : uint8
{
	Neutral                                  = 0,
	Forward                                  = 1,
	Backward                                 = 2,
	ESnfWalkwayFollowType_MAX                = 3,
};

// Enum Snowfall.ESnfWeaponReferenceActor
// NumValues: 0x0004
enum class ESnfWeaponReferenceActor : uint8
{
	None                                     = 0,
	Weapon                                   = 1,
	WeaponOwner                              = 2,
	ESnfWeaponReferenceActor_MAX             = 3,
};

// Enum Snowfall.EHitAction
// NumValues: 0x0006
enum class EHitAction : uint8
{
	None                                     = 0,
	Attach                                   = 1,
	Drop                                     = 2,
	ContinuousMove                           = 3,
	Repeat                                   = 4,
	EHitAction_MAX                           = 5,
};

// Enum Snowfall.ESnfWeaponHomingCalcType
// NumValues: 0x0003
enum class ESnfWeaponHomingCalcType : uint8
{
	Spline                                   = 0,
	Rotate                                   = 1,
	ESnfWeaponHomingCalcType_MAX             = 2,
};

// Enum Snowfall.ESnfWeaponAmmoCollisionFlag
// NumValues: 0x0005
enum class ESnfWeaponAmmoCollisionFlag : uint8
{
	Environment                              = 0,
	Projectile                               = 1,
	Pawn                                     = 2,
	PlayerPawn                               = 3,
	ESnfWeaponAmmoCollisionFlag_MAX          = 4,
};

// Enum Snowfall.ESnfWeaponAmmoAttachParent
// NumValues: 0x0004
enum class ESnfWeaponAmmoAttachParent : uint8
{
	None                                     = 0,
	Weapon                                   = 1,
	WeaponOwner                              = 2,
	ESnfWeaponAmmoAttachParent_MAX           = 3,
};

// Enum Snowfall.EArrowPlayList
// NumValues: 0x0008
enum class EArrowPlayList : uint8
{
	Invalid                                  = 0,
	Spawn                                    = 1,
	End                                      = 2,
	Impact                                   = 3,
	LaunchStart                              = 4,
	LaunchEnd                                = 5,
	Dissolve                                 = 6,
	EArrowPlayList_MAX                       = 7,
};

// Enum Snowfall.ESnfWeaponBubblePlayList
// NumValues: 0x0006
enum class ESnfWeaponBubblePlayList : uint8
{
	Invalid                                  = 0,
	Spawn                                    = 1,
	End                                      = 2,
	Hit                                      = 3,
	Damage                                   = 4,
	ESnfWeaponBubblePlayList_MAX             = 5,
};

// Enum Snowfall.ESnfWeaponCollisionShapePivot
// NumValues: 0x0004
enum class ESnfWeaponCollisionShapePivot : uint8
{
	Center                                   = 0,
	Top                                      = 1,
	Bottom                                   = 2,
	ESnfWeaponCollisionShapePivot_MAX        = 3,
};

// Enum Snowfall.ESnfWeaponExplosivePlayList
// NumValues: 0x0013
enum class ESnfWeaponExplosivePlayList : uint8
{
	Invalid                                  = 0,
	Spawn                                    = 1,
	Explode1                                 = 2,
	Explode2                                 = 3,
	Explode3                                 = 4,
	Explode4                                 = 5,
	Damage1                                  = 6,
	Damage2                                  = 7,
	Damage3                                  = 8,
	Damage4                                  = 9,
	Hit0                                     = 10,
	Hit1                                     = 11,
	Hit2                                     = 12,
	Hit3                                     = 13,
	Disappear0                               = 14,
	Disappear1                               = 15,
	Disappear2                               = 16,
	Disappear3                               = 17,
	ESnfWeaponExplosivePlayList_MAX          = 18,
};

// Enum Snowfall.ESnfWeaponEffectOperateType
// NumValues: 0x0005
enum class ESnfWeaponEffectOperateType : uint8
{
	OperateType_Invalid                      = 0,
	OperateType_CurveData                    = 1,
	OperateType_CurveVectorData              = 2,
	OperateType_GenerateEvent                = 3,
	OperateType_MAX                          = 4,
};

// Enum Snowfall.ESnfWeaponFreezeBallPlayList
// NumValues: 0x0004
enum class ESnfWeaponFreezeBallPlayList : uint8
{
	Invalid                                  = 0,
	Spawn                                    = 1,
	End                                      = 2,
	ESnfWeaponFreezeBallPlayList_MAX         = 3,
};

// Enum Snowfall.EFunnelPlayList
// NumValues: 0x0008
enum class EFunnelPlayList : uint8
{
	Invalid                                  = 0,
	Spawn                                    = 1,
	Cancel                                   = 2,
	Shot                                     = 3,
	Hit                                      = 4,
	RangeOver                                = 5,
	Suction                                  = 6,
	EFunnelPlayList_MAX                      = 7,
};

// Enum Snowfall.ESnfWeaponHandSpectrumCollisionShapeType
// NumValues: 0x0003
enum class ESnfWeaponHandSpectrumCollisionShapeType : uint8
{
	Sphere                                   = 0,
	Box                                      = 1,
	ESnfWeaponHandSpectrumCollisionShapeType_MAX = 2,
};

// Enum Snowfall.ESnfWeaponHandSpectrumHitPlayList
// NumValues: 0x000E
enum class ESnfWeaponHandSpectrumHitPlayList : uint8
{
	None                                     = 0,
	Character                                = 1,
	CharacterLv1                             = 2,
	CharacterLv2                             = 3,
	CharacterLv3                             = 4,
	Bg                                       = 5,
	BgLv1                                    = 6,
	BgLv2                                    = 7,
	BgLv3                                    = 8,
	Invalid                                  = 9,
	LargeInvalid                             = 10,
	LargeGuard                               = 11,
	Critical                                 = 12,
	ESnfWeaponHandSpectrumHitPlayList_MAX    = 13,
};

// Enum Snowfall.ESnfWeaponHandSpectrumPlayList
// NumValues: 0x000C
enum class ESnfWeaponHandSpectrumPlayList : uint8
{
	Invalid                                  = 0,
	Shot                                     = 1,
	Impact                                   = 2,
	RangeOver                                = 3,
	ChargeStart                              = 4,
	ChargeEnd                                = 5,
	ChargeImpact                             = 6,
	InvalidHit                               = 7,
	ImpactLv2                                = 8,
	ImpactLv3                                = 9,
	ImpactLv4                                = 10,
	ESnfWeaponHandSpectrumPlayList_MAX       = 11,
};

// Enum Snowfall.ESnfWeaponHealBubblePlayList
// NumValues: 0x0006
enum class ESnfWeaponHealBubblePlayList : uint8
{
	Invalid                                  = 0,
	Spawn                                    = 1,
	End                                      = 2,
	Hit                                      = 3,
	Damage                                   = 4,
	ESnfWeaponHealBubblePlayList_MAX         = 5,
};

// Enum Snowfall.EHitodamaPlayList
// NumValues: 0x0007
enum class EHitodamaPlayList : uint8
{
	Invalid                                  = 0,
	Spawn                                    = 1,
	Cancel                                   = 2,
	Shot                                     = 3,
	Hit                                      = 4,
	RangeOver                                = 5,
	EHitodamaPlayList_MAX                    = 6,
};

// Enum Snowfall.ESnfWeaponPoisonBallPlayList
// NumValues: 0x0004
enum class ESnfWeaponPoisonBallPlayList : uint8
{
	Invalid                                  = 0,
	Spawn                                    = 1,
	End                                      = 2,
	ESnfWeaponPoisonBallPlayList_MAX         = 3,
};

// Enum Snowfall.ESnfWeaponSpreadDamageApplyType
// NumValues: 0x0004
enum class ESnfWeaponSpreadDamageApplyType : uint8
{
	Once                                     = 0,
	Cycle                                    = 1,
	DoT                                      = 2,
	ESnfWeaponSpreadDamageApplyType_MAX      = 3,
};

// Enum Snowfall.ESnfWeaponSpreadSoundType
// NumValues: 0x0004
enum class ESnfWeaponSpreadSoundType : uint8
{
	Origin                                   = 0,
	Forward                                  = 1,
	Target                                   = 2,
	ESnfWeaponSpreadSoundType_MAX            = 3,
};

// Enum Snowfall.ESnfWeaponSpreadQueryMobilityType
// NumValues: 0x0004
enum class ESnfWeaponSpreadQueryMobilityType : uint8
{
	Any                                      = 0,
	Static                                   = 1,
	Dynamic                                  = 2,
	ESnfWeaponSpreadQueryMobilityType_MAX    = 3,
};

// Enum Snowfall.ESnfWeaponSpreadPlayList
// NumValues: 0x0005
enum class ESnfWeaponSpreadPlayList : uint8
{
	Invalid                                  = 0,
	Spread                                   = 1,
	Hit                                      = 2,
	Stop                                     = 3,
	ESnfWeaponSpreadPlayList_MAX             = 4,
};

// Enum Snowfall.ESnfTalismanLocationType
// NumValues: 0x0003
enum class ESnfTalismanLocationType : uint8
{
	ImpactPoint                              = 0,
	Ground                                   = 1,
	ESnfTalismanLocationType_MAX             = 2,
};

// Enum Snowfall.ESnfWeaponTelekinesisPlayList
// NumValues: 0x0006
enum class ESnfWeaponTelekinesisPlayList : uint8
{
	Invalid                                  = 0,
	Appear                                   = 1,
	Disappear                                = 2,
	LaunchStart                              = 3,
	LaunchEnd                                = 4,
	ESnfWeaponTelekinesisPlayList_MAX        = 5,
};

// Enum Snowfall.FSnfWeaponTelekinesisBehaviorType
// NumValues: 0x0004
enum class EFSnfWeaponTelekinesisBehaviorType : uint8
{
	Normal                                   = 0,
	Aiming                                   = 1,
	Spin                                     = 2,
	FSnfWeaponTelekinesisBehaviorType_MAX    = 3,
};

// Enum Snowfall.ESnfWeaponTornadoPlayList
// NumValues: 0x0007
enum class ESnfWeaponTornadoPlayList : uint8
{
	Invalid                                  = 0,
	Spawn                                    = 1,
	Diappear                                 = 2,
	Damage1                                  = 3,
	Damage2                                  = 4,
	Damage3                                  = 5,
	ESnfWeaponTornadoPlayList_MAX            = 6,
};

// Enum Snowfall.ESnfWeaponOrbitCalcType
// NumValues: 0x0006
enum class ESnfWeaponOrbitCalcType : uint8
{
	Auto                                     = 0,
	Straight                                 = 1,
	ParabolaAuto                             = 2,
	ParabolaShallow                          = 3,
	ParabolaDeep                             = 4,
	ESnfWeaponOrbitCalcType_MAX              = 5,
};

// Enum Snowfall.ESnfWeaponReflectionType
// NumValues: 0x0003
enum class ESnfWeaponReflectionType : uint8
{
	ReflectReal                              = 0,
	ReflectSphere                            = 1,
	ESnfWeaponReflectionType_MAX             = 2,
};

// Enum Snowfall.ESnfWeaponResolveResult
// NumValues: 0x0006
enum class ESnfWeaponResolveResult : uint8
{
	Failed                                   = 0,
	Stop                                     = 1,
	Penetrate                                = 2,
	Reflect                                  = 3,
	NoProcess                                = 4,
	ESnfWeaponResolveResult_MAX              = 5,
};

// Enum Snowfall.ESnfWeaponInvokeAbility
// NumValues: 0x0017
enum class ESnfWeaponInvokeAbility : uint8
{
	Invalid                                  = 0,
	Equip                                    = 1,
	Unequip                                  = 2,
	Release                                  = 3,
	Take                                     = 4,
	FireBegin                                = 5,
	FireEnd                                  = 6,
	FireCancel                               = 7,
	MeleeBegin                               = 8,
	AimBegin                                 = 9,
	AimEnd                                   = 10,
	ReloadStart                              = 11,
	ReloadEnd                                = 12,
	ReloadCancel                             = 13,
	Reload                                   = 14,
	Fumble                                   = 15,
	Visible                                  = 16,
	Hide                                     = 17,
	Sleep                                    = 18,
	Awake                                    = 19,
	ChangeAttach                             = 20,
	Trigger                                  = 21,
	ESnfWeaponInvokeAbility_MAX              = 22,
};

// Enum Snowfall.ESnfDamageTag
// NumValues: 0x001F
enum class ESnfDamageTag : uint8
{
	HandSpectrumType                         = 0,
	EmpType                                  = 1,
	ArrowType                                = 2,
	StrikeType                               = 3,
	ParryType                                = 4,
	RestrictionType                          = 5,
	TalismanType                             = 6,
	GimmickType                              = 7,
	ParalysisAttribute                       = 8,
	AbsorptionAttribute                      = 9,
	SeparationAttribute                      = 10,
	CoreOpenAttribute                        = 11,
	FireAttribute                            = 12,
	GuardBreakAttribute                      = 13,
	SlipDamageAttribute                      = 14,
	UnblockableAttribute                     = 15,
	KnockbackSReaction                       = 16,
	KnockbackMReaction                       = 17,
	KnockbackLReaction                       = 18,
	AttractReaction                          = 19,
	ExplodeReaction                          = 20,
	CounterReaction                          = 21,
	FarRangeAttackReaction                   = 22,
	LaunchAttackReaction                     = 23,
	HealthDamage                             = 24,
	KegareDamage                             = 25,
	CurseDamage                              = 26,
	FreezeDamage                             = 27,
	SpiritDamage                             = 28,
	StunDamage                               = 29,
	ESnfDamageTag_MAX                        = 30,
};

// Enum Snowfall.ESnfWeaponBuddyEvent
// NumValues: 0x0005
enum class ESnfWeaponBuddyEvent : uint8
{
	Invalid                                  = 0,
	Em1600ReflectEvent                       = 1,
	Em1800ReflectEvent                       = 2,
	Em1900ReflectEvent                       = 3,
	ESnfWeaponBuddyEvent_MAX                 = 4,
};

// Enum Snowfall.ESnfWeaponWindBallPlayList
// NumValues: 0x0007
enum class ESnfWeaponWindBallPlayList : uint8
{
	Invalid                                  = 0,
	Spawn                                    = 1,
	End                                      = 2,
	Damage1                                  = 3,
	Damage2                                  = 4,
	Damage3                                  = 5,
	ESnfWeaponWindBallPlayList_MAX           = 6,
};

// Enum Snowfall.ESnfUpscalingTechnique
// NumValues: 0x0007
enum class ESnfUpscalingTechnique : uint8
{
	None                                     = 0,
	DLSS                                     = 1,
	FSR                                      = 2,
	FSR2                                     = 3,
	XeSS                                     = 4,
	TSR                                      = 5,
	Max                                      = 6,
};

// Enum Snowfall.ECanNotFastTravelReason
// NumValues: 0x0006
enum class ECanNotFastTravelReason : uint8
{
	None                                     = 0,
	NotList                                  = 1,
	DangerMode                               = 2,
	SeparationMode                           = 3,
	InDoor                                   = 4,
	ECanNotFastTravelReason_MAX              = 5,
};

// Enum Snowfall.ESnfStringType
// NumValues: 0x000F
enum class ESnfStringType : uint8
{
	UiMenu                                   = 0,
	UiOption                                 = 1,
	UiDialog                                 = 2,
	UiHud                                    = 3,
	UiControl                                = 4,
	UiSystem                                 = 5,
	UiTitle                                  = 6,
	UiCommon                                 = 7,
	BNet                                     = 8,
	UiMenuDC                                 = 9,
	UiHudDC                                  = 10,
	UiSystemDC                               = 11,
	UiDialogDC                               = 12,
	UiCommonDC                               = 13,
	Max                                      = 14,
};

// Enum Snowfall.ESnfSpecialDamageType
// NumValues: 0x0003
enum class ESnfSpecialDamageType : uint8
{
	Normal                                   = 0,
	Backstab                                 = 1,
	ESnfSpecialDamageType_MAX                = 2,
};

// Enum Snowfall.ESnfDirection4
// NumValues: 0x0005
enum class ESnfDirection4 : uint8
{
	Front                                    = 0,
	Back                                     = 1,
	Left                                     = 2,
	Right                                    = 3,
	Max                                      = 4,
};

// Enum Snowfall.ESnfDirection8
// NumValues: 0x0009
enum class ESnfDirection8 : uint8
{
	Front                                    = 0,
	FrontRight                               = 1,
	FrontLeft                                = 2,
	Right                                    = 3,
	Left                                     = 4,
	BackRight                                = 5,
	BackLeft                                 = 6,
	Back                                     = 7,
	Max                                      = 8,
};

// Enum Snowfall.ESnfDamageReactionType
// NumValues: 0x0010
enum class ESnfDamageReactionType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Strike                                   = 2,
	Parry                                    = 3,
	WindShotCombo1                           = 4,
	WindShotCombo2                           = 5,
	WindShotCombo3                           = 6,
	Arrow                                    = 7,
	ArrowWeight                              = 8,
	Explode_FalloffLv0                       = 9,
	Explode_FalloffLv1                       = 10,
	CoreStun                                 = 11,
	Paralysis                                = 12,
	CounterStun                              = 13,
	Gimmick_Explode                          = 14,
	Max                                      = 15,
};

// Enum Snowfall.ESnfDamageEffectType
// NumValues: 0x0003
enum class ESnfDamageEffectType : uint8
{
	EMP                                      = 0,
	HandSpectrum                             = 1,
	ESnfDamageEffectType_MAX                 = 2,
};

// Enum Snowfall.ESnfDamagePartsType
// NumValues: 0x000B
enum class ESnfDamagePartsType : uint8
{
	Body                                     = 0,
	Head                                     = 1,
	LeftArm                                  = 2,
	RightArm                                 = 3,
	LeftLeg                                  = 4,
	RightLeg                                 = 5,
	Core0                                    = 6,
	Core1                                    = 7,
	Core2                                    = 8,
	TypeMax                                  = 9,
	ESnfDamagePartsType_MAX                  = 10,
};

// Enum Snowfall.ESnfEtherDensityLevel
// NumValues: 0x0006
enum class ESnfEtherDensityLevel : uint8
{
	None                                     = 0,
	Weak                                     = 1,
	Normal                                   = 2,
	Strong                                   = 3,
	TypeMax                                  = 4,
	ESnfEtherDensityLevel_MAX                = 5,
};

// Enum Snowfall.ESnfFigureType
// NumValues: 0x0128
enum class ESnfFigureType : uint32
{
	Figure_None                              = 0,
	Figure_Tangochan                         = 1,
	Figure_KK_01                             = 2,
	Figure_KK_02                             = 3,
	Figure_KK_03                             = 4,
	Figure_KK_04                             = 5,
	Figure_Mari_01                           = 6,
	Figure_Mari_02                           = 7,
	Figure_Mari_03                           = 8,
	Figure_Mari_04                           = 9,
	Figure_Mari_05                           = 10,
	Figure_Mari_06                           = 11,
	Figure_Rinko_01                          = 12,
	Figure_Rinko_02                          = 13,
	Figure_Rinko_03                          = 14,
	Figure_Ed_01                             = 15,
	Figure_Ed_02                             = 16,
	Figure_Ed_03                             = 17,
	Figure_Dale_01                           = 18,
	Figure_Dale_02                           = 19,
	Figure_Dale_03                           = 20,
	Figure_Erika_01                          = 21,
	Figure_Erika_02                          = 22,
	Figure_Erika_03                          = 23,
	Figure_Erika_04                          = 24,
	Figure_AkitoDad_01                       = 25,
	Figure_AkitoMom_01                       = 26,
	Figure_Yaseotoko_01                      = 27,
	Figure_Yaseotoko_02                      = 28,
	Figure_Yaseotoko_03                      = 29,
	Figure_Yaseotoko_04                      = 30,
	Figure_Koomote_01                        = 31,
	Figure_Koomote_02                        = 32,
	Figure_Koomote_03                        = 33,
	Figure_Okina_01                          = 34,
	Figure_Okina_02                          = 35,
	Figure_Okina_03                          = 36,
	Figure_Hannya_01                         = 37,
	Figure_Hannya_02                         = 38,
	Figure_Hannya_03                         = 39,
	Figure_Hannya_04                         = 40,
	Figure_Tatariya_01                       = 41,
	Figure_TatariyaA_01                      = 42,
	Figure_TatariyaA_02                      = 43,
	Figure_TatariyaA_03                      = 44,
	Figure_TatariyaA_04                      = 45,
	Figure_TatariyaB_01                      = 46,
	Figure_TatariyaB_02                      = 47,
	Figure_TatariyaB_03                      = 48,
	Figure_TatariyaB_04                      = 49,
	Figure_TatariyaC_01                      = 50,
	Figure_TatariyaC_02                      = 51,
	Figure_TatariyaC_03                      = 52,
	Figure_TatariyaC_04                      = 53,
	Figure_UmbrellaMan01                     = 54,
	Figure_UmbrellaMan02                     = 55,
	Figure_UmbrellaMan03                     = 56,
	Figure_UmbrellaMan_SlimShirt01           = 57,
	Figure_UmbrellaMan_SlimShirt02           = 58,
	Figure_UmbrellaMan_SlimShirt03           = 59,
	Figure_UmbrellaMan_FrontOpen01           = 60,
	Figure_UmbrellaMan_FrontOpen02           = 61,
	Figure_UmbrellaMan_FrontOpen03           = 62,
	Figure_UmbrellaMan_Guard01               = 63,
	Figure_UmbrellaMan_Guard02               = 64,
	Figure_UmbrellaMan_Guard03               = 65,
	Figure_UmbrellaOL_Nata01                 = 66,
	Figure_UmbrellaOL_Nata02                 = 67,
	Figure_UmbrellaOL_Nata03                 = 68,
	Figure_UmbrellaMan_FatShirt01            = 69,
	Figure_UmbrellaMan_FatShirt02            = 70,
	Figure_UmbrellaMan_FatShirt03            = 71,
	Figure_UmbrellaMan_RedFat01              = 72,
	Figure_UmbrellaMan_RedFat02              = 73,
	Figure_UmbrellaMan_RedFat03              = 74,
	Figure_UmbrellaMan_RedRich01             = 75,
	Figure_UmbrellaMan_RedRich02             = 76,
	Figure_UmbrellaMan_RedRich03             = 77,
	Figure_UmbrellaMan_BlueRich01            = 78,
	Figure_UmbrellaMan_BlueRich02            = 79,
	Figure_UmbrellaMan_BlueRich03            = 80,
	Figure_UmbrellaMan_Mud01                 = 81,
	Figure_UmbrellaMan_Mud02                 = 82,
	Figure_UmbrellaMan_Mud03                 = 83,
	Figure_UmbrellaMan_MudFat01              = 84,
	Figure_UmbrellaMan_MudFat02              = 85,
	Figure_UmbrellaMan_MudFat03              = 86,
	Figure_UmbrellaMan_MudNata01             = 87,
	Figure_UmbrellaMan_MudNata02             = 88,
	Figure_UmbrellaMan_MudNata03             = 89,
	Figure_JK01                              = 90,
	Figure_JK02                              = 91,
	Figure_JK03                              = 92,
	Figure_JK_Winter01                       = 93,
	Figure_JK_Winter02                       = 94,
	Figure_JK_Winter03                       = 95,
	Figure_JK_Red01                          = 96,
	Figure_JK_Red02                          = 97,
	Figure_JK_Red03                          = 98,
	Figure_JK_Green01                        = 99,
	Figure_JK_Green02                        = 100,
	Figure_JK_Green03                        = 101,
	Figure_Gakuran01                         = 102,
	Figure_Gakuran02                         = 103,
	Figure_Gakuran03                         = 104,
	Figure_Gakuran_Work01                    = 105,
	Figure_Gakuran_Work02                    = 106,
	Figure_Gakuran_Work03                    = 107,
	Figure_Gakuran_WorkRed01                 = 108,
	Figure_Gakuran_WorkRed02                 = 109,
	Figure_Gakuran_WorkRed03                 = 110,
	Figure_Gakuran_Jersey01                  = 111,
	Figure_Gakuran_Jersey02                  = 112,
	Figure_Gakuran_Jersey03                  = 113,
	Figure_OL01                              = 114,
	Figure_OL02                              = 115,
	Figure_OL03                              = 116,
	Figure_OL_Guide01                        = 117,
	Figure_OL_Guide02                        = 118,
	Figure_OL_Guide03                        = 119,
	Figure_OL_Healer01                       = 120,
	Figure_OL_Healer02                       = 121,
	Figure_OL_Healer03                       = 122,
	Figure_Kuchisake01                       = 123,
	Figure_Kuchisake02                       = 124,
	Figure_Kuchisake03                       = 125,
	Figure_Kuchisake_Red01                   = 126,
	Figure_Kuchisake_Red02                   = 127,
	Figure_Kuchisake_Red03                   = 128,
	Figure_Kuchisake_Other01                 = 129,
	Figure_Kuchisake_Other02                 = 130,
	Figure_Kuchisake_Other03                 = 131,
	Figure_Kuchisake_Mud01                   = 132,
	Figure_Kuchisake_Mud02                   = 133,
	Figure_Kuchisake_Mud03                   = 134,
	Figure_Jibakurei01                       = 135,
	Figure_Jibakurei02                       = 136,
	Figure_Jibakurei03                       = 137,
	Figure_Teruteru01                        = 138,
	Figure_Teruteru02                        = 139,
	Figure_Teruteru03                        = 140,
	Figure_Densen01                          = 141,
	Figure_Densen02                          = 142,
	Figure_Densen03                          = 143,
	Figure_Shiromuku01                       = 144,
	Figure_Shiromuku02                       = 145,
	Figure_Shiromuku03                       = 146,
	Figure_Kid01                             = 147,
	Figure_Kid02                             = 148,
	Figure_Kid03                             = 149,
	Figure_Kid_Red01                         = 150,
	Figure_Kid_Red02                         = 151,
	Figure_Kid_Red03                         = 152,
	Figure_SaraYurei01                       = 153,
	Figure_SaraYurei02                       = 154,
	Figure_SaraYurei03                       = 155,
	Figure_SaraYurei_Other01                 = 156,
	Figure_SaraYurei_Other02                 = 157,
	Figure_SaraYurei_Other03                 = 158,
	Figure_Betobeto01                        = 159,
	Figure_Betobeto02                        = 160,
	Figure_Betobeto03                        = 161,
	Figure_Betobeto_Invisible01              = 162,
	Figure_Betobeto_Invisible02              = 163,
	Figure_Betobeto_Invisible03              = 164,
	Figure_Akamanto01                        = 165,
	Figure_Akamanto02                        = 166,
	Figure_Akamanto03                        = 167,
	Figure_Yaseotoko_Mrbt01                  = 168,
	Figure_Yaseotoko_Mrbt02                  = 169,
	Figure_Yaseotoko_Mrbt03                  = 170,
	Figure_Yaseotoko_Mrbt2nd01               = 171,
	Figure_Yaseotoko_Mrbt2nd02               = 172,
	Figure_Yaseotoko_Mrbt2nd03               = 173,
	Figure_Koomote_Mrbt01                    = 174,
	Figure_Koomote_Mrbt02                    = 175,
	Figure_Koomote_Mrbt03                    = 176,
	Figure_Okina_Mrbt01                      = 177,
	Figure_Okina_Mrbt02                      = 178,
	Figure_Okina_Mrbt03                      = 179,
	Figure_Okina_Mrbt2nd01                   = 180,
	Figure_Okina_Mrbt2nd02                   = 181,
	Figure_Okina_Mrbt2nd03                   = 182,
	Figure_Hannya_Mrbt01                     = 183,
	Figure_Hannya_Mrbt02                     = 184,
	Figure_Hannya_Mrbt03                     = 185,
	Figure_Kappa01                           = 186,
	Figure_Kappa02                           = 187,
	Figure_Kappa03                           = 188,
	Figure_Kamaitachi01                      = 189,
	Figure_Kamaitachi02                      = 190,
	Figure_Kamaitachi03                      = 191,
	Figure_Nurikabe01                        = 192,
	Figure_Nurikabe02                        = 193,
	Figure_Nurikabe03                        = 194,
	Figure_Rokurokubi01                      = 195,
	Figure_Rokurokubi02                      = 196,
	Figure_Rokurokubi03                      = 197,
	Figure_Kodama01                          = 198,
	Figure_Kodama02                          = 199,
	Figure_Kodama03                          = 200,
	Figure_Oni01                             = 201,
	Figure_Oni02                             = 202,
	Figure_Oni03                             = 203,
	Figure_Ittanmomen01                      = 204,
	Figure_Ittanmomen02                      = 205,
	Figure_Ittanmomen03                      = 206,
	Figure_Karakasa01                        = 207,
	Figure_Karakasa02                        = 208,
	Figure_Karakasa03                        = 209,
	Figure_Zashiki01                         = 210,
	Figure_Zashiki02                         = 211,
	Figure_Zashiki03                         = 212,
	Figure_Tengu01                           = 213,
	Figure_Tengu02                           = 214,
	Figure_Tengu03                           = 215,
	Figure_Nekomata01                        = 216,
	Figure_Nekomata02                        = 217,
	Figure_Nekomata03                        = 218,
	Figure_NekomataBig01                     = 219,
	Figure_NekomataBig02                     = 220,
	Figure_NekomataBig03                     = 221,
	Figure_NekomataNamed01                   = 222,
	Figure_NekomataNamed02                   = 223,
	Figure_NekomataNamed03                   = 224,
	Figure_NekomataNamed04                   = 225,
	Figure_NekomataNamed05                   = 226,
	Figure_NekomataNamed06                   = 227,
	Figure_NekomataNamed07                   = 228,
	Figure_NekomataNamed08                   = 229,
	Figure_NekomataNamed09                   = 230,
	Figure_NekomataNamed10                   = 231,
	Figure_NekomataNamed11                   = 232,
	Figure_NekomataNamed12                   = 233,
	Figure_NekomataNamed13                   = 234,
	Figure_Jintaimokei01                     = 235,
	Figure_Jintaimokei02                     = 236,
	Figure_Jintaimokei03                     = 237,
	Figure_HanakoSan01                       = 238,
	Figure_HanakoSan02                       = 239,
	Figure_HanakoSan03                       = 240,
	Figure_EvilGhost01                       = 241,
	Figure_EvilGhost02                       = 242,
	Figure_EvilGhost03                       = 243,
	Figure_Dog01                             = 244,
	Figure_Dog02                             = 245,
	Figure_Dog03                             = 246,
	Figure_Dog04                             = 247,
	Figure_Cat01                             = 248,
	Figure_Cat02                             = 249,
	Figure_Cat03                             = 250,
	Figure_Cat04                             = 251,
	Figure_Cat05                             = 252,
	Figure_Cat06                             = 253,
	Figure_Cat07                             = 254,
	Figure_CatSp01                           = 255,
	Figure_CatSp02                           = 256,
	Figure_CatSp03                           = 257,
	Figure_Crow01                            = 258,
	Figure_Crow02                            = 259,
	Figure_Rat01                             = 260,
	Figure_Rat02                             = 261,
	Figure_Turtle01                          = 262,
	Figure_Turtle02                          = 263,
	Figure_Frog01                            = 264,
	Figure_Carp01                            = 265,
	Figure_Butterfly01                       = 266,
	Figure_Lizard01                          = 267,
	Figure_Crab01                            = 268,
	Figure_Snails01                          = 269,
	Figure_Cockroach01                       = 270,
	Figure_Cockroach02                       = 271,
	Figure_RaccoonDog01                      = 272,
	Figure_RaccoonDog02                      = 273,
	Figure_RaccoonDog03                      = 274,
	Figure_RaccoonDog04                      = 275,
	Figure_RaccoonDog05                      = 276,
	Figure_RaccoonDog06                      = 277,
	Figure_RaccoonDog07                      = 278,
	Figure_RaccoonDog08                      = 279,
	Figure_RaccoonDog09                      = 280,
	Figure_RaccoonDog99                      = 281,
	Figure_RinkoMotorcycle                   = 282,
	Figure_BreakMotorcycle                   = 283,
	Figure_AkitoMotorcycle                   = 284,
	Figure_Torii_Kegare                      = 285,
	Figure_Torii                             = 286,
	Figure_ArcadeMachine                     = 287,
	Figure_JapaneseDoll                      = 288,
	Figure_StrawDoll                         = 289,
	Figure_Manekineko                        = 290,
	Figure_Shigaraki                         = 291,
	Figure_LoveHachi                         = 292,
	Figure_TeradaPoster                      = 293,
	FigureMax                                = 294,
	ESnfFigureType_MAX                       = 295,
};

// Enum Snowfall.ESnfCameraFrameType
// NumValues: 0x000D
enum class ESnfCameraFrameType : uint32
{
	Frame_None                               = 0,
	Frame_Shinema                            = 1,
	Frame_Photo                              = 2,
	Frame_GWT01                              = 3,
	Frame_Crow                               = 4,
	Frame_Clipping                           = 5,
	Frame_Umbrella                           = 6,
	Frame_Animal                             = 7,
	Frame_Japan                              = 8,
	Frame_Arcade                             = 9,
	Frame_2Year                              = 10,
	CameraFrameMax                           = 11,
	ESnfCameraFrameType_MAX                  = 12,
};

// Enum Snowfall.ESnfCameraStampType
// NumValues: 0x0061
enum class ESnfCameraStampType : uint32
{
	Stamp_None                               = 0,
	Stamp_Tangochan01                        = 1,
	Stamp_Tangochan02                        = 2,
	Stamp_GWTLogo01                          = 3,
	Stamp_GWTLogo02                          = 4,
	Stamp_GWTLogo03                          = 5,
	Stamp_GWTLogoJ01                         = 6,
	Stamp_GWTLogoJ02                         = 7,
	Stamp_GWTClearLogo                       = 8,
	Stamp_TngLogo01                          = 9,
	Stamp_TngLogo02                          = 10,
	Stamp_Special01                          = 11,
	Stamp_2Year01                            = 12,
	Stamp_MarkGlass01                        = 13,
	Stamp_MarkArrow01                        = 14,
	Stamp_MarkArrow02                        = 15,
	Stamp_MarkCircle01                       = 16,
	Stamp_MarkLine01                         = 17,
	Stamp_MarkMosaic01                       = 18,
	Stamp_MarkMosaic02                       = 19,
	Stamp_MarkPad01                          = 20,
	Stamp_MarkSchool01                       = 21,
	Stamp_YokaiKappa                         = 22,
	Stamp_YokaiKamaitachi                    = 23,
	Stamp_YokaiTengu                         = 24,
	Stamp_YokaiNurikabe                      = 25,
	Stamp_YokaiRokurokubi                    = 26,
	Stamp_YokaiKodama                        = 27,
	Stamp_YokaiOni                           = 28,
	Stamp_YokaiIttanmomen                    = 29,
	Stamp_YokaiKarakasa                      = 30,
	Stamp_YokaiZashiki                       = 31,
	Stamp_YokaiNekomata                      = 32,
	Stamp_YokaiUfo                           = 33,
	Stamp_LoveHachi01                        = 34,
	Stamp_LoveHachi02                        = 35,
	Stamp_LoveHachi03                        = 36,
	Stamp_LoveHachi04                        = 37,
	Stamp_LoveHachi05                        = 38,
	Stamp_LoveHachi06                        = 39,
	Stamp_LoveHachi07                        = 40,
	Stamp_LoveHachi08                        = 41,
	Stamp_LoveHachi09                        = 42,
	Stamp_LoveHachi10                        = 43,
	Stamp_LoveHachi11                        = 44,
	Stamp_LoveHachi12                        = 45,
	Stamp_LoveHachi13                        = 46,
	Stamp_LoveHachi14                        = 47,
	Stamp_LoveHachi15                        = 48,
	Stamp_LoveHachi16                        = 49,
	Stamp_LoveHachi17                        = 50,
	Stamp_LoveHachi18                        = 51,
	Stamp_LoveHachi19                        = 52,
	Stamp_LoveHachi20                        = 53,
	Stamp_LoveHachi21                        = 54,
	Stamp_LoveHachi22                        = 55,
	Stamp_LoveHachi23                        = 56,
	Stamp_LoveHachi24                        = 57,
	Stamp_LoveHachi25                        = 58,
	Stamp_LoveHachi26                        = 59,
	Stamp_LoveHachi27                        = 60,
	Stamp_LoveHachi28                        = 61,
	Stamp_LoveHachi29                        = 62,
	Stamp_LoveHachi30                        = 63,
	Stamp_LoveHachi31                        = 64,
	Stamp_LoveHachi32                        = 65,
	Stamp_LoveHachi33                        = 66,
	Stamp_LoveHachi34                        = 67,
	Stamp_LoveHachi35                        = 68,
	Stamp_HeroDice01                         = 69,
	Stamp_HeroDice02                         = 70,
	Stamp_HeroDice03                         = 71,
	Stamp_HeroDice04                         = 72,
	Stamp_HeroDice05                         = 73,
	Stamp_HeroDice06                         = 74,
	Stamp_HeroDice07                         = 75,
	Stamp_HeroDice08                         = 76,
	Stamp_HeroDice09                         = 77,
	Stamp_HeroDice10                         = 78,
	Stamp_Fear01                             = 79,
	Stamp_Fear02                             = 80,
	Stamp_Fear03                             = 81,
	Stamp_Fear04                             = 82,
	Stamp_Fear05                             = 83,
	Stamp_Fear06                             = 84,
	Stamp_Fear07                             = 85,
	Stamp_Fear08                             = 86,
	Stamp_Fear09                             = 87,
	Stamp_Fear10                             = 88,
	Stamp_Fear11                             = 89,
	Stamp_Fear12                             = 90,
	Stamp_Fear13                             = 91,
	Stamp_Fear14                             = 92,
	Stamp_Fear98                             = 93,
	Stamp_Fear99                             = 94,
	CameraStampMax                           = 95,
	ESnfCameraStampType_MAX                  = 96,
};

// Enum Snowfall.ESnfSkillPickupType
// NumValues: 0x0004
enum class ESnfSkillPickupType : uint8
{
	Max                                      = 0,
	Min                                      = 1,
	Total                                    = 2,
	Multipl                                  = 3,
};

// Enum Snowfall.ESnfSkillParam
// NumValues: 0x00A3
enum class ESnfSkillParam : uint8
{
	Invalid                                  = 0,
	DummyForDraw                             = 1,
	LifeAutoHeal                             = 2,
	LifeMax                                  = 3,
	NotKuishibari                            = 4,
	MoveSpeedRate                            = 5,
	CrouchSpeedRate                          = 6,
	DiscountShopRate                         = 7,
	GuardDamageRate                          = 8,
	GuardJustRate                            = 9,
	GuardJustDrop                            = 10,
	ScanTime                                 = 11,
	ScanTimeScale                            = 12,
	ScanLength                               = 13,
	ScanMeal                                 = 14,
	CanRadarYurei                            = 15,
	CanRadarYokai                            = 16,
	CanRadarBook                             = 17,
	RadarYureiLength                         = 18,
	RadarYokaiLength                         = 19,
	RadarBookLength                          = 20,
	GrapleLength                             = 21,
	GrapleLevel                              = 22,
	GlideTime                                = 23,
	DashTime                                 = 24,
	DashTimeUseRate                          = 25,
	ExpGetScaleForEnemy                      = 26,
	EtherGetScaleForEnemy                    = 27,
	MoneyGetScale                            = 28,
	MoneyGetScaleForCrystal                  = 29,
	MealHaveMax                              = 30,
	ItemPowerScale                           = 31,
	ItemTimeScale                            = 32,
	ItemRecastScale                          = 33,
	GhostPurgeTime                           = 34,
	GhostPurgeTimeScale                      = 35,
	CanGhostFastTransfer                     = 36,
	CoreLength                               = 37,
	CoreSpeedScale                           = 38,
	CoreHealAdd                              = 39,
	CoreStunTimeScale                        = 40,
	AbsorbTime                               = 41,
	AbsorbLength                             = 42,
	AbsorbDropScale                          = 43,
	DropCoinScale                            = 44,
	CanCoreNear                              = 45,
	CoreNearNoDamage                         = 46,
	CoreNearSpeedScale                       = 47,
	DownDamageScale                          = 48,
	BlowDrop                                 = 49,
	CanCoreDown                              = 50,
	CoreDownNoDamage                         = 51,
	CoreDownSpeedScale                       = 52,
	BuffSlot                                 = 53,
	BuffTimeScale                            = 54,
	GaugeTime                                = 55,
	GaugeScale                               = 56,
	DamageRate                               = 57,
	DamageRateForEnemy                       = 58,
	DamageRateForKegare                      = 59,
	DefenceRate                              = 60,
	EnemyFindSpeedRate                       = 61,
	EnemyFindAngleRate                       = 62,
	EnemyStunRate                            = 63,
	CanInfiniteAmmo                          = 64,
	HandAttackAdd                            = 65,
	HandAttackScale                          = 66,
	HandAmmoUseAdd                           = 67,
	HandAmmo                                 = 68,
	HandChargeScale                          = 69,
	CanFire1st                               = 70,
	CanFire2nd                               = 71,
	FireAmmo                                 = 72,
	FireDamageScale                          = 73,
	FireChargeScale                          = 74,
	Fire1stPenetrate                         = 75,
	Fire2ndRadius                            = 76,
	CanWind1st                               = 77,
	CanWind2nd                               = 78,
	WindAmmo                                 = 79,
	WindDamageScale                          = 80,
	WindChargeScale                          = 81,
	Wind1stRapidScale                        = 82,
	Wind2ndCombo                             = 83,
	CanWater1st                              = 84,
	CanWater2nd                              = 85,
	WaterAmmo                                = 86,
	WaterDamageScale                         = 87,
	WaterChargeScale                         = 88,
	Water1stDiffusion                        = 89,
	Water2ndLength                           = 90,
	CanBow                                   = 91,
	CanBowHard                               = 92,
	BowHardAmmo                              = 93,
	BowHardCraft                             = 94,
	BowHardDamageScale                       = 95,
	BowAmmo                                  = 96,
	BowChargeScale                           = 97,
	TalismanAmmo                             = 98,
	TalismanParalysisTimeScale               = 99,
	TalismanCoreDamageLengthScale            = 100,
	TalismanNoiseLengthScale                 = 101,
	TalismanBlindfoldTimeScale               = 102,
	TalismanJumpTimeScale                    = 103,
	TalismanEtherTimeScale                   = 104,
	CanRosarySlot                            = 105,
	CanStandSneak                            = 106,
	CanCompleteSneak                         = 107,
	CanNotDeath                              = 108,
	CanFastEnemySpawn                        = 109,
	CanHardEnemySpawn                        = 110,
	CanJustGuardCounter                      = 111,
	JustGuardDamageScale                     = 112,
	JustGuardDownLength                      = 113,
	CanUpperBacksTab                         = 114,
	UpperBacksTabLengthScale                 = 115,
	UpperBacksTabSilentFootStepTime          = 116,
	CanComboBacksTab                         = 117,
	CanUpperBacksTabSilentFootStep           = 118,
	CanFallAttack                            = 119,
	FallAttackDownDamageLength               = 120,
	CanDodge                                 = 121,
	CanAirDodge                              = 122,
	CanFastCharge                            = 123,
	CanWindNearShot                          = 124,
	WindNearShotUseEtherScale                = 125,
	CanWindNearShotPowerUp                   = 126,
	CanWindNearShotSpeedUp                   = 127,
	CanWaterNearShot                         = 128,
	WaterNearShotUseEtherScale               = 129,
	CanWaterNearShotPowerUp                  = 130,
	CanWaterNearRadiusUp                     = 131,
	CanFireNearShot                          = 132,
	FireNearShotUseEtherScale                = 133,
	CanFireNearShotPowerUp                   = 134,
	CanFireNearShotExplosion                 = 135,
	HealthRateDamageScale                    = 136,
	PlayTimeDamageAddScale                   = 137,
	AllMoveSpeedScale                        = 138,
	GravityScale                             = 139,
	CanCoreDamageOnly                        = 140,
	StealthKillDamageScale                   = 141,
	StopDamageRate                           = 142,
	HealPerfectGuard                         = 143,
	CanPierceArrow                           = 144,
	AddHierarchyMoveBuff                     = 145,
	CoreDamageScale                          = 146,
	OneShotCoreOpenRate                      = 147,
	InstantDeathRate                         = 148,
	WindNormalCriticalRate                   = 149,
	WaterNormalCriticalRate                  = 150,
	FireNormalCriticalRate                   = 151,
	FireNearShotExplosionScale               = 152,
	HealEnemyDead                            = 153,
	HealEnemyDeadMaxLifeRate                 = 154,
	AutoJustGuardRate                        = 155,
	AddGetArrow                              = 156,
	CanBacksTabSilentFootStep                = 157,
	BacksTabSilentFootStepTime               = 158,
	CanBurnKKMode                            = 159,
	CanFreezeKKMode                          = 160,
	Num                                      = 161,
	ESnfSkillParam_MAX                       = 162,
};

// Enum Snowfall.ESnfEndlessRosaryRandomType
// NumValues: 0x0012
enum class ESnfEndlessRosaryRandomType : uint8
{
	Invalid                                  = 0,
	Attack                                   = 1,
	Core                                     = 2,
	Defence                                  = 3,
	Wind                                     = 4,
	Water                                    = 5,
	Fire                                     = 6,
	Bow                                      = 7,
	Gauge                                    = 8,
	Pierce                                   = 9,
	Arrow                                    = 10,
	Money                                    = 11,
	Heal                                     = 12,
	Dead                                     = 13,
	OnlyCore                                 = 14,
	Infinite                                 = 15,
	Num                                      = 16,
	ESnfEndlessRosaryRandomType_MAX          = 17,
};

// Enum Snowfall.ESnfPurgeType
// NumValues: 0x0004
enum class ESnfPurgeType : uint8
{
	Purge                                    = 0,
	Absorb                                   = 1,
	Num                                      = 2,
	ESnfPurgeType_MAX                        = 3,
};

// Enum Snowfall.ESnfArrowEffecType
// NumValues: 0x0004
enum class ESnfArrowEffecType : uint8
{
	Invalid                                  = 0,
	Normal                                   = 1,
	Num                                      = 2,
	ESnfArrowEffecType_MAX                   = 3,
};

// Enum Snowfall.ESnfHandSpectrumAttribute
// NumValues: 0x0005
enum class ESnfHandSpectrumAttribute : uint8
{
	Invalid                                  = 0,
	Fire                                     = 1,
	Wind                                     = 2,
	Water                                    = 3,
	ESnfHandSpectrumAttribute_MAX            = 4,
};

// Enum Snowfall.ESnfEtherType
// NumValues: 0x000A
enum class ESnfEtherType : uint8
{
	Invalid                                  = 0,
	Fire                                     = 1,
	Wind                                     = 2,
	Water                                    = 3,
	Void                                     = 4,
	Money                                    = 5,
	WindWater                                = 6,
	Coin                                     = 7,
	Num                                      = 8,
	ESnfEtherType_MAX                        = 9,
};

// Enum Snowfall.ESnfArea
// NumValues: 0x000C
enum class ESnfArea : uint8
{
	Tsukinami                                = 0,
	Ginpei                                   = 1,
	Yugenzaka                                = 2,
	Yashin                                   = 3,
	Mitake                                   = 4,
	Miya                                     = 5,
	Kannami                                  = 6,
	Sengoku                                  = 7,
	Utagawa                                  = 8,
	Kirigaoka                                = 9,
	Fuchihashi                               = 10,
	ESnfArea_MAX                             = 11,
};

// Enum Snowfall.ESnfMarebitoAIType
// NumValues: 0x0007
enum class ESnfMarebitoAIType : uint8
{
	Normal                                   = 0,
	ShortRangeAggressive                     = 1,
	RangedAttack                             = 2,
	NotMoveAttack                            = 3,
	Tutorial                                 = 4,
	MoveBehind                               = 5,
	ESnfMarebitoAIType_MAX                   = 6,
};

// Enum Snowfall.ESnfMarebitoJobWalkType
// NumValues: 0x0004
enum class ESnfMarebitoJobWalkType : uint8
{
	Default                                  = 0,
	NormalOnly                               = 1,
	UniqueOnly                               = 2,
	ESnfMarebitoJobWalkType_MAX              = 3,
};

// Enum Snowfall.ESnfMarebitoDownResist
// NumValues: 0x0004
enum class ESnfMarebitoDownResist : uint8
{
	Normal                                   = 0,
	Strong                                   = 1,
	Weak                                     = 2,
	ESnfMarebitoDownResist_MAX               = 3,
};

// Enum Snowfall.ESnfPlayingGameType
// NumValues: 0x0003
enum class ESnfPlayingGameType : uint8
{
	Main                                     = 0,
	Endless                                  = 1,
	ESnfPlayingGameType_MAX                  = 2,
};

// ScriptStruct Snowfall.SnfDoorBaseTriggerInfo
// 0x0028 (0x0028 - 0x0000)
struct FSnfDoorBaseTriggerInfo final
{
public:
	TWeakObjectPtr<class ATriggerBase>            Trigger;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BeginOverlapTypeAction;                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeginOverlapTypeActionDelay;                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempBeginOverlapTypeActionDelay;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndOverlapTypeAction;                              // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOverlapTypeActionDelay;                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempEndOverlapTypeActionDelay;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDoorBaseTriggerInfo) == 0x000004, "Wrong alignment on FSnfDoorBaseTriggerInfo");
static_assert(sizeof(FSnfDoorBaseTriggerInfo) == 0x000028, "Wrong size on FSnfDoorBaseTriggerInfo");
static_assert(offsetof(FSnfDoorBaseTriggerInfo, Trigger) == 0x000000, "Member 'FSnfDoorBaseTriggerInfo::Trigger' has a wrong offset!");
static_assert(offsetof(FSnfDoorBaseTriggerInfo, BeginOverlapTypeAction) == 0x000008, "Member 'FSnfDoorBaseTriggerInfo::BeginOverlapTypeAction' has a wrong offset!");
static_assert(offsetof(FSnfDoorBaseTriggerInfo, BeginOverlapTypeActionDelay) == 0x000010, "Member 'FSnfDoorBaseTriggerInfo::BeginOverlapTypeActionDelay' has a wrong offset!");
static_assert(offsetof(FSnfDoorBaseTriggerInfo, TempBeginOverlapTypeActionDelay) == 0x000014, "Member 'FSnfDoorBaseTriggerInfo::TempBeginOverlapTypeActionDelay' has a wrong offset!");
static_assert(offsetof(FSnfDoorBaseTriggerInfo, EndOverlapTypeAction) == 0x000018, "Member 'FSnfDoorBaseTriggerInfo::EndOverlapTypeAction' has a wrong offset!");
static_assert(offsetof(FSnfDoorBaseTriggerInfo, EndOverlapTypeActionDelay) == 0x000020, "Member 'FSnfDoorBaseTriggerInfo::EndOverlapTypeActionDelay' has a wrong offset!");
static_assert(offsetof(FSnfDoorBaseTriggerInfo, TempEndOverlapTypeActionDelay) == 0x000024, "Member 'FSnfDoorBaseTriggerInfo::TempEndOverlapTypeActionDelay' has a wrong offset!");

// ScriptStruct Snowfall.WeaponHandSpectrumMultipleSphere
// 0x0070 (0x0070 - 0x0000)
struct FWeaponHandSpectrumMultipleSphere final
{
public:
	float                                         SphereRadius;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SphereNum;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTngEffectAsset*                        SphereEffect;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             SphereCircularLocal;                               // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SphereCircularRadius;                              // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereAngularVelForCycle;                          // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugShpereScale;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x24];                                      // 0x004C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponHandSpectrumMultipleSphere) == 0x000010, "Wrong alignment on FWeaponHandSpectrumMultipleSphere");
static_assert(sizeof(FWeaponHandSpectrumMultipleSphere) == 0x000070, "Wrong size on FWeaponHandSpectrumMultipleSphere");
static_assert(offsetof(FWeaponHandSpectrumMultipleSphere, SphereRadius) == 0x000000, "Member 'FWeaponHandSpectrumMultipleSphere::SphereRadius' has a wrong offset!");
static_assert(offsetof(FWeaponHandSpectrumMultipleSphere, SphereNum) == 0x000004, "Member 'FWeaponHandSpectrumMultipleSphere::SphereNum' has a wrong offset!");
static_assert(offsetof(FWeaponHandSpectrumMultipleSphere, SphereEffect) == 0x000008, "Member 'FWeaponHandSpectrumMultipleSphere::SphereEffect' has a wrong offset!");
static_assert(offsetof(FWeaponHandSpectrumMultipleSphere, SphereCircularLocal) == 0x000010, "Member 'FWeaponHandSpectrumMultipleSphere::SphereCircularLocal' has a wrong offset!");
static_assert(offsetof(FWeaponHandSpectrumMultipleSphere, SphereCircularRadius) == 0x000040, "Member 'FWeaponHandSpectrumMultipleSphere::SphereCircularRadius' has a wrong offset!");
static_assert(offsetof(FWeaponHandSpectrumMultipleSphere, SphereAngularVelForCycle) == 0x000044, "Member 'FWeaponHandSpectrumMultipleSphere::SphereAngularVelForCycle' has a wrong offset!");
static_assert(offsetof(FWeaponHandSpectrumMultipleSphere, DebugShpereScale) == 0x000048, "Member 'FWeaponHandSpectrumMultipleSphere::DebugShpereScale' has a wrong offset!");

// ScriptStruct Snowfall.SnfAnimalInteractReactionSetting
// 0x000C (0x000C - 0x0000)
struct FSnfAnimalInteractReactionSetting final
{
public:
	bool                                          bCoopAct;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UTngCoopAnimAsset>       CoopActAsset;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAnimalInteractReactionSetting) == 0x000004, "Wrong alignment on FSnfAnimalInteractReactionSetting");
static_assert(sizeof(FSnfAnimalInteractReactionSetting) == 0x00000C, "Wrong size on FSnfAnimalInteractReactionSetting");
static_assert(offsetof(FSnfAnimalInteractReactionSetting, bCoopAct) == 0x000000, "Member 'FSnfAnimalInteractReactionSetting::bCoopAct' has a wrong offset!");
static_assert(offsetof(FSnfAnimalInteractReactionSetting, CoopActAsset) == 0x000004, "Member 'FSnfAnimalInteractReactionSetting::CoopActAsset' has a wrong offset!");

// ScriptStruct Snowfall.SnfCoopActionMember
// 0x0010 (0x0010 - 0x0000)
struct FSnfCoopActionMember final
{
public:
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USnfCoopActionComponent> CoopComponent;                                     // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCoopActionMember) == 0x000004, "Wrong alignment on FSnfCoopActionMember");
static_assert(sizeof(FSnfCoopActionMember) == 0x000010, "Wrong size on FSnfCoopActionMember");
static_assert(offsetof(FSnfCoopActionMember, Actor) == 0x000000, "Member 'FSnfCoopActionMember::Actor' has a wrong offset!");
static_assert(offsetof(FSnfCoopActionMember, CoopComponent) == 0x000008, "Member 'FSnfCoopActionMember::CoopComponent' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkArchiveInfo
// 0x0020 (0x0028 - 0x0008)
struct FSnfTalkArchiveInfo final : public FTableRowBase
{
public:
	struct FDataTableRowHandle                    ArchiveName;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FDataTableRowHandle>            ArchiveNameGroup;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalkArchiveInfo) == 0x000008, "Wrong alignment on FSnfTalkArchiveInfo");
static_assert(sizeof(FSnfTalkArchiveInfo) == 0x000028, "Wrong size on FSnfTalkArchiveInfo");
static_assert(offsetof(FSnfTalkArchiveInfo, ArchiveName) == 0x000008, "Member 'FSnfTalkArchiveInfo::ArchiveName' has a wrong offset!");
static_assert(offsetof(FSnfTalkArchiveInfo, ArchiveNameGroup) == 0x000018, "Member 'FSnfTalkArchiveInfo::ArchiveNameGroup' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActivityDraw
// 0x0010 (0x0010 - 0x0000)
struct FSnfGameActivityDraw final
{
public:
	class FName                                   ActivityCatalogName;                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSystem;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSelect;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DrawIndex;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameActivityDraw) == 0x000004, "Wrong alignment on FSnfGameActivityDraw");
static_assert(sizeof(FSnfGameActivityDraw) == 0x000010, "Wrong size on FSnfGameActivityDraw");
static_assert(offsetof(FSnfGameActivityDraw, ActivityCatalogName) == 0x000000, "Member 'FSnfGameActivityDraw::ActivityCatalogName' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityDraw, IsSystem) == 0x000008, "Member 'FSnfGameActivityDraw::IsSystem' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityDraw, IsSelect) == 0x000009, "Member 'FSnfGameActivityDraw::IsSelect' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityDraw, DrawIndex) == 0x00000C, "Member 'FSnfGameActivityDraw::DrawIndex' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActivityInvokeItem
// 0x0020 (0x0020 - 0x0000)
struct FSnfGameActivityInvokeItem final
{
public:
	bool                                          IsDone;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayTime;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActionActors;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameActivityInvokeItem) == 0x000008, "Wrong alignment on FSnfGameActivityInvokeItem");
static_assert(sizeof(FSnfGameActivityInvokeItem) == 0x000020, "Wrong size on FSnfGameActivityInvokeItem");
static_assert(offsetof(FSnfGameActivityInvokeItem, IsDone) == 0x000000, "Member 'FSnfGameActivityInvokeItem::IsDone' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityInvokeItem, DelayTime) == 0x000004, "Member 'FSnfGameActivityInvokeItem::DelayTime' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityInvokeItem, ActionName) == 0x000008, "Member 'FSnfGameActivityInvokeItem::ActionName' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityInvokeItem, ActionActors) == 0x000010, "Member 'FSnfGameActivityInvokeItem::ActionActors' has a wrong offset!");

// ScriptStruct Snowfall.SnfCapsuleToyItem
// 0x0008 (0x0008 - 0x0000)
struct FSnfCapsuleToyItem final
{
public:
	ESnfFigureType                                FigureType;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomWeighting;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCapsuleToyItem) == 0x000004, "Wrong alignment on FSnfCapsuleToyItem");
static_assert(sizeof(FSnfCapsuleToyItem) == 0x000008, "Wrong size on FSnfCapsuleToyItem");
static_assert(offsetof(FSnfCapsuleToyItem, FigureType) == 0x000000, "Member 'FSnfCapsuleToyItem::FigureType' has a wrong offset!");
static_assert(offsetof(FSnfCapsuleToyItem, RandomWeighting) == 0x000004, "Member 'FSnfCapsuleToyItem::RandomWeighting' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogDescription
// 0x0028 (0x0028 - 0x0000)
struct FSnfCatalogDescription final
{
public:
	class FName                                   OpenId;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenStep;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCatalogDescription) == 0x000008, "Wrong alignment on FSnfCatalogDescription");
static_assert(sizeof(FSnfCatalogDescription) == 0x000028, "Wrong size on FSnfCatalogDescription");
static_assert(offsetof(FSnfCatalogDescription, OpenId) == 0x000000, "Member 'FSnfCatalogDescription::OpenId' has a wrong offset!");
static_assert(offsetof(FSnfCatalogDescription, OpenStep) == 0x000008, "Member 'FSnfCatalogDescription::OpenStep' has a wrong offset!");
static_assert(offsetof(FSnfCatalogDescription, Description) == 0x000010, "Member 'FSnfCatalogDescription::Description' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogItem
// 0x0118 (0x0120 - 0x0008)
struct FSnfCatalogItem : public FTableRowBase
{
public:
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Caption;                                           // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FSnfCatalogDescription>         SubDescriptions;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                Icon;                                              // 0x0060(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                Texture;                                           // 0x0088(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UTexture>>        SubTexture;                                        // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          NotDraw;                                           // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  GameTags;                                          // 0x00C8(0x0020)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                InsideLocation;                                    // 0x00F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutsideLocation;                                   // 0x0104(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapName;                                           // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BNetTelemetryId;                                   // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCatalogItem) == 0x000008, "Wrong alignment on FSnfCatalogItem");
static_assert(sizeof(FSnfCatalogItem) == 0x000120, "Wrong size on FSnfCatalogItem");
static_assert(offsetof(FSnfCatalogItem, Title) == 0x000008, "Member 'FSnfCatalogItem::Title' has a wrong offset!");
static_assert(offsetof(FSnfCatalogItem, Caption) == 0x000020, "Member 'FSnfCatalogItem::Caption' has a wrong offset!");
static_assert(offsetof(FSnfCatalogItem, Description) == 0x000038, "Member 'FSnfCatalogItem::Description' has a wrong offset!");
static_assert(offsetof(FSnfCatalogItem, SubDescriptions) == 0x000050, "Member 'FSnfCatalogItem::SubDescriptions' has a wrong offset!");
static_assert(offsetof(FSnfCatalogItem, Icon) == 0x000060, "Member 'FSnfCatalogItem::Icon' has a wrong offset!");
static_assert(offsetof(FSnfCatalogItem, Texture) == 0x000088, "Member 'FSnfCatalogItem::Texture' has a wrong offset!");
static_assert(offsetof(FSnfCatalogItem, SubTexture) == 0x0000B0, "Member 'FSnfCatalogItem::SubTexture' has a wrong offset!");
static_assert(offsetof(FSnfCatalogItem, NotDraw) == 0x0000C0, "Member 'FSnfCatalogItem::NotDraw' has a wrong offset!");
static_assert(offsetof(FSnfCatalogItem, GameTags) == 0x0000C8, "Member 'FSnfCatalogItem::GameTags' has a wrong offset!");
static_assert(offsetof(FSnfCatalogItem, Tags) == 0x0000E8, "Member 'FSnfCatalogItem::Tags' has a wrong offset!");
static_assert(offsetof(FSnfCatalogItem, InsideLocation) == 0x0000F8, "Member 'FSnfCatalogItem::InsideLocation' has a wrong offset!");
static_assert(offsetof(FSnfCatalogItem, OutsideLocation) == 0x000104, "Member 'FSnfCatalogItem::OutsideLocation' has a wrong offset!");
static_assert(offsetof(FSnfCatalogItem, MapName) == 0x000110, "Member 'FSnfCatalogItem::MapName' has a wrong offset!");
static_assert(offsetof(FSnfCatalogItem, BNetTelemetryId) == 0x000118, "Member 'FSnfCatalogItem::BNetTelemetryId' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogCapsuleToyMachine
// 0x0038 (0x0158 - 0x0120)
struct FSnfCatalogCapsuleToyMachine final : public FSnfCatalogItem
{
public:
	TArray<struct FSnfCapsuleToyItem>             CapsuleToyList;                                    // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      CoverMaterialSource;                               // 0x0130(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCatalogCapsuleToyMachine) == 0x000008, "Wrong alignment on FSnfCatalogCapsuleToyMachine");
static_assert(sizeof(FSnfCatalogCapsuleToyMachine) == 0x000158, "Wrong size on FSnfCatalogCapsuleToyMachine");
static_assert(offsetof(FSnfCatalogCapsuleToyMachine, CapsuleToyList) == 0x000120, "Member 'FSnfCatalogCapsuleToyMachine::CapsuleToyList' has a wrong offset!");
static_assert(offsetof(FSnfCatalogCapsuleToyMachine, CoverMaterialSource) == 0x000130, "Member 'FSnfCatalogCapsuleToyMachine::CoverMaterialSource' has a wrong offset!");

// ScriptStruct Snowfall.ASnfActivityYokai_OniDummyDogSetting
// 0x0040 (0x0040 - 0x0000)
struct FASnfActivityYokai_OniDummyDogSetting final
{
public:
	class ASnfJobActor*                           DogJobActor;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ASnfJobActor>            SoftDogJobActor;                                   // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PetTalkID;                                         // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FASnfActivityYokai_OniDummyDogSetting) == 0x000008, "Wrong alignment on FASnfActivityYokai_OniDummyDogSetting");
static_assert(sizeof(FASnfActivityYokai_OniDummyDogSetting) == 0x000040, "Wrong size on FASnfActivityYokai_OniDummyDogSetting");
static_assert(offsetof(FASnfActivityYokai_OniDummyDogSetting, DogJobActor) == 0x000000, "Member 'FASnfActivityYokai_OniDummyDogSetting::DogJobActor' has a wrong offset!");
static_assert(offsetof(FASnfActivityYokai_OniDummyDogSetting, SoftDogJobActor) == 0x000008, "Member 'FASnfActivityYokai_OniDummyDogSetting::SoftDogJobActor' has a wrong offset!");
static_assert(offsetof(FASnfActivityYokai_OniDummyDogSetting, PetTalkID) == 0x000030, "Member 'FASnfActivityYokai_OniDummyDogSetting::PetTalkID' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActivityExchangeItem
// 0x0010 (0x0010 - 0x0000)
struct FSnfGameActivityExchangeItem final
{
public:
	class FName                                   CatalogId;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDraw;                                            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSelect;                                          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFind;                                            // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHave;                                            // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsClear;                                           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChange;                                          // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFake;                                            // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGameActivityExchangeItem) == 0x000004, "Wrong alignment on FSnfGameActivityExchangeItem");
static_assert(sizeof(FSnfGameActivityExchangeItem) == 0x000010, "Wrong size on FSnfGameActivityExchangeItem");
static_assert(offsetof(FSnfGameActivityExchangeItem, CatalogId) == 0x000000, "Member 'FSnfGameActivityExchangeItem::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityExchangeItem, IsDraw) == 0x000008, "Member 'FSnfGameActivityExchangeItem::IsDraw' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityExchangeItem, IsSelect) == 0x000009, "Member 'FSnfGameActivityExchangeItem::IsSelect' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityExchangeItem, IsFind) == 0x00000A, "Member 'FSnfGameActivityExchangeItem::IsFind' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityExchangeItem, IsHave) == 0x00000B, "Member 'FSnfGameActivityExchangeItem::IsHave' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityExchangeItem, IsClear) == 0x00000C, "Member 'FSnfGameActivityExchangeItem::IsClear' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityExchangeItem, IsChange) == 0x00000D, "Member 'FSnfGameActivityExchangeItem::IsChange' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityExchangeItem, IsFake) == 0x00000E, "Member 'FSnfGameActivityExchangeItem::IsFake' has a wrong offset!");

// ScriptStruct Snowfall.SnfActivityYokaiCheckActivitySetting
// 0x000C (0x000C - 0x0000)
struct FSnfActivityYokaiCheckActivitySetting final
{
public:
	class FName                                   CheckActiviyId;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfGameActivityState                         CheckActivityState;                                // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfActivityYokaiCheckActivitySetting) == 0x000004, "Wrong alignment on FSnfActivityYokaiCheckActivitySetting");
static_assert(sizeof(FSnfActivityYokaiCheckActivitySetting) == 0x00000C, "Wrong size on FSnfActivityYokaiCheckActivitySetting");
static_assert(offsetof(FSnfActivityYokaiCheckActivitySetting, CheckActiviyId) == 0x000000, "Member 'FSnfActivityYokaiCheckActivitySetting::CheckActiviyId' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokaiCheckActivitySetting, CheckActivityState) == 0x000008, "Member 'FSnfActivityYokaiCheckActivitySetting::CheckActivityState' has a wrong offset!");

// ScriptStruct Snowfall.SnfDivisionBaseActorParts
// 0x0040 (0x0040 - 0x0000)
struct FSnfDivisionBaseActorParts final
{
public:
	TSubclassOf<class AActor>                     Actor;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDivisionBaseActorParts) == 0x000010, "Wrong alignment on FSnfDivisionBaseActorParts");
static_assert(sizeof(FSnfDivisionBaseActorParts) == 0x000040, "Wrong size on FSnfDivisionBaseActorParts");
static_assert(offsetof(FSnfDivisionBaseActorParts, Actor) == 0x000000, "Member 'FSnfDivisionBaseActorParts::Actor' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseActorParts, Transform) == 0x000010, "Member 'FSnfDivisionBaseActorParts::Transform' has a wrong offset!");

// ScriptStruct Snowfall.SnfPrisonSupplyEnemyData
// 0x0058 (0x0058 - 0x0000)
struct FSnfPrisonSupplyEnemyData final
{
public:
	ESnfPrisonEnemyType                           EnemyType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USnfGameSupplyData*                     SupplyData;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   EnemyClass;                                        // 0x0010(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0038(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPrisonSupplyEnemyData) == 0x000008, "Wrong alignment on FSnfPrisonSupplyEnemyData");
static_assert(sizeof(FSnfPrisonSupplyEnemyData) == 0x000058, "Wrong size on FSnfPrisonSupplyEnemyData");
static_assert(offsetof(FSnfPrisonSupplyEnemyData, EnemyType) == 0x000000, "Member 'FSnfPrisonSupplyEnemyData::EnemyType' has a wrong offset!");
static_assert(offsetof(FSnfPrisonSupplyEnemyData, SupplyData) == 0x000008, "Member 'FSnfPrisonSupplyEnemyData::SupplyData' has a wrong offset!");
static_assert(offsetof(FSnfPrisonSupplyEnemyData, EnemyClass) == 0x000010, "Member 'FSnfPrisonSupplyEnemyData::EnemyClass' has a wrong offset!");
static_assert(offsetof(FSnfPrisonSupplyEnemyData, Tags) == 0x000038, "Member 'FSnfPrisonSupplyEnemyData::Tags' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkCameraFade
// 0x0014 (0x0014 - 0x0000)
struct FSnfTalkCameraFade final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 FadeColor;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutWaitTime;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalkCameraFade) == 0x000004, "Wrong alignment on FSnfTalkCameraFade");
static_assert(sizeof(FSnfTalkCameraFade) == 0x000014, "Wrong size on FSnfTalkCameraFade");
static_assert(offsetof(FSnfTalkCameraFade, IsEnable) == 0x000000, "Member 'FSnfTalkCameraFade::IsEnable' has a wrong offset!");
static_assert(offsetof(FSnfTalkCameraFade, FadeColor) == 0x000004, "Member 'FSnfTalkCameraFade::FadeColor' has a wrong offset!");
static_assert(offsetof(FSnfTalkCameraFade, FadeOutTime) == 0x000008, "Member 'FSnfTalkCameraFade::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FSnfTalkCameraFade, FadeOutWaitTime) == 0x00000C, "Member 'FSnfTalkCameraFade::FadeOutWaitTime' has a wrong offset!");
static_assert(offsetof(FSnfTalkCameraFade, FadeInTime) == 0x000010, "Member 'FSnfTalkCameraFade::FadeInTime' has a wrong offset!");

// ScriptStruct Snowfall.SnfActivitySplineItem
// 0x0050 (0x0050 - 0x0000)
struct FSnfActivitySplineItem final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KeyLength;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KeySize;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActivityActorList;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          CanSkip;                                           // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EnterActivityTypeName;                             // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataAsset*                             EnterActivityObject;                               // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeaveActivityTypeName;                             // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataAsset*                             LeaveActivityObject;                               // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfActivitySplineItem) == 0x000008, "Wrong alignment on FSnfActivitySplineItem");
static_assert(sizeof(FSnfActivitySplineItem) == 0x000050, "Wrong size on FSnfActivitySplineItem");
static_assert(offsetof(FSnfActivitySplineItem, KeyName) == 0x000000, "Member 'FSnfActivitySplineItem::KeyName' has a wrong offset!");
static_assert(offsetof(FSnfActivitySplineItem, KeyLength) == 0x000008, "Member 'FSnfActivitySplineItem::KeyLength' has a wrong offset!");
static_assert(offsetof(FSnfActivitySplineItem, KeySize) == 0x00000C, "Member 'FSnfActivitySplineItem::KeySize' has a wrong offset!");
static_assert(offsetof(FSnfActivitySplineItem, ActivityActorList) == 0x000010, "Member 'FSnfActivitySplineItem::ActivityActorList' has a wrong offset!");
static_assert(offsetof(FSnfActivitySplineItem, CanSkip) == 0x000020, "Member 'FSnfActivitySplineItem::CanSkip' has a wrong offset!");
static_assert(offsetof(FSnfActivitySplineItem, EnterActivityTypeName) == 0x000024, "Member 'FSnfActivitySplineItem::EnterActivityTypeName' has a wrong offset!");
static_assert(offsetof(FSnfActivitySplineItem, EnterActivityObject) == 0x000030, "Member 'FSnfActivitySplineItem::EnterActivityObject' has a wrong offset!");
static_assert(offsetof(FSnfActivitySplineItem, LeaveActivityTypeName) == 0x000038, "Member 'FSnfActivitySplineItem::LeaveActivityTypeName' has a wrong offset!");
static_assert(offsetof(FSnfActivitySplineItem, LeaveActivityObject) == 0x000040, "Member 'FSnfActivitySplineItem::LeaveActivityObject' has a wrong offset!");

// ScriptStruct Snowfall.SnfFXPropsSoundBehavior
// 0x0010 (0x0010 - 0x0000)
struct FSnfFXPropsSoundBehavior final
{
public:
	EFXBehavior                                   Behavior;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          OverrideEvent;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfFXPropsSoundBehavior) == 0x000008, "Wrong alignment on FSnfFXPropsSoundBehavior");
static_assert(sizeof(FSnfFXPropsSoundBehavior) == 0x000010, "Wrong size on FSnfFXPropsSoundBehavior");
static_assert(offsetof(FSnfFXPropsSoundBehavior, Behavior) == 0x000000, "Member 'FSnfFXPropsSoundBehavior::Behavior' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsSoundBehavior, OverrideEvent) == 0x000008, "Member 'FSnfFXPropsSoundBehavior::OverrideEvent' has a wrong offset!");

// ScriptStruct Snowfall.SnfPrisonSpawnGhostInfo
// 0x0001 (0x0001 - 0x0000)
struct FSnfPrisonSpawnGhostInfo final
{
public:
	ESnfPrisonGhostType                           GhostType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPrisonSpawnGhostInfo) == 0x000001, "Wrong alignment on FSnfPrisonSpawnGhostInfo");
static_assert(sizeof(FSnfPrisonSpawnGhostInfo) == 0x000001, "Wrong size on FSnfPrisonSpawnGhostInfo");
static_assert(offsetof(FSnfPrisonSpawnGhostInfo, GhostType) == 0x000000, "Member 'FSnfPrisonSpawnGhostInfo::GhostType' has a wrong offset!");

// ScriptStruct Snowfall.SnfPrisonSpawnGhostGroupInfo
// 0x0018 (0x0018 - 0x0000)
struct FSnfPrisonSpawnGhostGroupInfo final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSnfPrisonSpawnGhostInfo>       GhostTbl;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPrisonSpawnGhostGroupInfo) == 0x000008, "Wrong alignment on FSnfPrisonSpawnGhostGroupInfo");
static_assert(sizeof(FSnfPrisonSpawnGhostGroupInfo) == 0x000018, "Wrong size on FSnfPrisonSpawnGhostGroupInfo");
static_assert(offsetof(FSnfPrisonSpawnGhostGroupInfo, Rate) == 0x000000, "Member 'FSnfPrisonSpawnGhostGroupInfo::Rate' has a wrong offset!");
static_assert(offsetof(FSnfPrisonSpawnGhostGroupInfo, GhostTbl) == 0x000008, "Member 'FSnfPrisonSpawnGhostGroupInfo::GhostTbl' has a wrong offset!");

// ScriptStruct Snowfall.SnfDefenseRuleInfo
// 0x0118 (0x0118 - 0x0000)
struct FSnfDefenseRuleInfo final
{
public:
	ESnfDefenseType                               DefenseType;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfDefenseAttackRuleType                     AttackRule;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetLife;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetLifeMin;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAttackEnemy;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BattleLength;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HateDamageTimeMin;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HateDamageTimeMax;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HateSubLengthMin;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HateSubLengthMax;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearTargetLength;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForceTargetLength;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackTargetTimeMin;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackTargetTimeMax;                               // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockTargetTime;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockTargetRot;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeCallBackTime;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeDamageValue;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 CountDamageTable;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, float>              EnemyDamageTable;                                  // 0x0058(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<float>                                 TakeDamageCallRateList;                            // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      EscapeCheckList;                                   // 0x00B8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TakeDamageCallEver;                                // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawEnemyDirection;                                // 0x0109(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LockTargetLifeRate;                                // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LockTargetMaxAttack;                               // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNearestAttackTarget;                             // 0x0114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDrawEnemyDirection;                              // 0x0115(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116[0x2];                                      // 0x0116(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfDefenseRuleInfo) == 0x000008, "Wrong alignment on FSnfDefenseRuleInfo");
static_assert(sizeof(FSnfDefenseRuleInfo) == 0x000118, "Wrong size on FSnfDefenseRuleInfo");
static_assert(offsetof(FSnfDefenseRuleInfo, DefenseType) == 0x000000, "Member 'FSnfDefenseRuleInfo::DefenseType' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, AttackRule) == 0x000001, "Member 'FSnfDefenseRuleInfo::AttackRule' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, TargetLife) == 0x000004, "Member 'FSnfDefenseRuleInfo::TargetLife' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, TargetLifeMin) == 0x000008, "Member 'FSnfDefenseRuleInfo::TargetLifeMin' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, MaxAttackEnemy) == 0x00000C, "Member 'FSnfDefenseRuleInfo::MaxAttackEnemy' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, BattleLength) == 0x000010, "Member 'FSnfDefenseRuleInfo::BattleLength' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, HateDamageTimeMin) == 0x000014, "Member 'FSnfDefenseRuleInfo::HateDamageTimeMin' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, HateDamageTimeMax) == 0x000018, "Member 'FSnfDefenseRuleInfo::HateDamageTimeMax' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, HateSubLengthMin) == 0x00001C, "Member 'FSnfDefenseRuleInfo::HateSubLengthMin' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, HateSubLengthMax) == 0x000020, "Member 'FSnfDefenseRuleInfo::HateSubLengthMax' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, NearTargetLength) == 0x000024, "Member 'FSnfDefenseRuleInfo::NearTargetLength' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, ForceTargetLength) == 0x000028, "Member 'FSnfDefenseRuleInfo::ForceTargetLength' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, AttackTargetTimeMin) == 0x00002C, "Member 'FSnfDefenseRuleInfo::AttackTargetTimeMin' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, AttackTargetTimeMax) == 0x000030, "Member 'FSnfDefenseRuleInfo::AttackTargetTimeMax' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, BlockTargetTime) == 0x000034, "Member 'FSnfDefenseRuleInfo::BlockTargetTime' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, BlockTargetRot) == 0x000038, "Member 'FSnfDefenseRuleInfo::BlockTargetRot' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, LifeCallBackTime) == 0x00003C, "Member 'FSnfDefenseRuleInfo::LifeCallBackTime' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, TimeDamageValue) == 0x000040, "Member 'FSnfDefenseRuleInfo::TimeDamageValue' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, CountDamageTable) == 0x000048, "Member 'FSnfDefenseRuleInfo::CountDamageTable' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, EnemyDamageTable) == 0x000058, "Member 'FSnfDefenseRuleInfo::EnemyDamageTable' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, TakeDamageCallRateList) == 0x0000A8, "Member 'FSnfDefenseRuleInfo::TakeDamageCallRateList' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, EscapeCheckList) == 0x0000B8, "Member 'FSnfDefenseRuleInfo::EscapeCheckList' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, TakeDamageCallEver) == 0x000108, "Member 'FSnfDefenseRuleInfo::TakeDamageCallEver' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, DrawEnemyDirection) == 0x000109, "Member 'FSnfDefenseRuleInfo::DrawEnemyDirection' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, LockTargetLifeRate) == 0x00010C, "Member 'FSnfDefenseRuleInfo::LockTargetLifeRate' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, LockTargetMaxAttack) == 0x000110, "Member 'FSnfDefenseRuleInfo::LockTargetMaxAttack' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, IsNearestAttackTarget) == 0x000114, "Member 'FSnfDefenseRuleInfo::IsNearestAttackTarget' has a wrong offset!");
static_assert(offsetof(FSnfDefenseRuleInfo, IsDrawEnemyDirection) == 0x000115, "Member 'FSnfDefenseRuleInfo::IsDrawEnemyDirection' has a wrong offset!");

// ScriptStruct Snowfall.SnfDamageBodyParam
// 0x000C (0x000C - 0x0000)
struct FSnfDamageBodyParam final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageAmountScale;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDamageBodyParam) == 0x000004, "Wrong alignment on FSnfDamageBodyParam");
static_assert(sizeof(FSnfDamageBodyParam) == 0x00000C, "Wrong size on FSnfDamageBodyParam");
static_assert(offsetof(FSnfDamageBodyParam, BoneName) == 0x000000, "Member 'FSnfDamageBodyParam::BoneName' has a wrong offset!");
static_assert(offsetof(FSnfDamageBodyParam, DamageAmountScale) == 0x000008, "Member 'FSnfDamageBodyParam::DamageAmountScale' has a wrong offset!");

// ScriptStruct Snowfall.PenetrateSetting
// 0x0018 (0x0018 - 0x0000)
struct FPenetrateSetting final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpecifyActor;                                     // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           SpecifyActors;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPenetrateSetting) == 0x000008, "Wrong alignment on FPenetrateSetting");
static_assert(sizeof(FPenetrateSetting) == 0x000018, "Wrong size on FPenetrateSetting");
static_assert(offsetof(FPenetrateSetting, bEnable) == 0x000000, "Member 'FPenetrateSetting::bEnable' has a wrong offset!");
static_assert(offsetof(FPenetrateSetting, bSpecifyActor) == 0x000001, "Member 'FPenetrateSetting::bSpecifyActor' has a wrong offset!");
static_assert(offsetof(FPenetrateSetting, SpecifyActors) == 0x000008, "Member 'FPenetrateSetting::SpecifyActors' has a wrong offset!");

// ScriptStruct Snowfall.SnfActivityYokai_ZashikiwarashiInfo
// 0x0040 (0x0040 - 0x0000)
struct FSnfActivityYokai_ZashikiwarashiInfo final
{
public:
	TSoftObjectPtr<class UAnimSequenceBase>       RequestBaseAnim;                                   // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USnfJobConfig*>                  JobConfigs;                                        // 0x0028(0x0010)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ESnfJobLookType                               OneShotLookType;                                   // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfJobLookType                               MainLookType;                                      // 0x0039(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfActivityYokai_ZashikiwarashiInfo) == 0x000008, "Wrong alignment on FSnfActivityYokai_ZashikiwarashiInfo");
static_assert(sizeof(FSnfActivityYokai_ZashikiwarashiInfo) == 0x000040, "Wrong size on FSnfActivityYokai_ZashikiwarashiInfo");
static_assert(offsetof(FSnfActivityYokai_ZashikiwarashiInfo, RequestBaseAnim) == 0x000000, "Member 'FSnfActivityYokai_ZashikiwarashiInfo::RequestBaseAnim' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_ZashikiwarashiInfo, JobConfigs) == 0x000028, "Member 'FSnfActivityYokai_ZashikiwarashiInfo::JobConfigs' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_ZashikiwarashiInfo, OneShotLookType) == 0x000038, "Member 'FSnfActivityYokai_ZashikiwarashiInfo::OneShotLookType' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_ZashikiwarashiInfo, MainLookType) == 0x000039, "Member 'FSnfActivityYokai_ZashikiwarashiInfo::MainLookType' has a wrong offset!");

// ScriptStruct Snowfall.SnfGimmickActorAkSphereParameterSetting
// 0x0060 (0x0060 - 0x0000)
struct FSnfGimmickActorAkSphereParameterSetting final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SphereTickInterval;                                // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAkAudioEvent*>                  SphereEvents;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AttenuationScalingFactor;                          // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bManualSettingOcclusionRefreshInterval;            // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionRefreshInterval;                          // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             OcclusionCollisionChannel;                         // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableChangeRoom;                                  // 0x0055(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkChangeRoomType                             ChangeRoomType;                                    // 0x0056(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDraw;                                        // 0x0057(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGimmickActorAkSphereParameterSetting) == 0x000010, "Wrong alignment on FSnfGimmickActorAkSphereParameterSetting");
static_assert(sizeof(FSnfGimmickActorAkSphereParameterSetting) == 0x000060, "Wrong size on FSnfGimmickActorAkSphereParameterSetting");
static_assert(offsetof(FSnfGimmickActorAkSphereParameterSetting, Transform) == 0x000000, "Member 'FSnfGimmickActorAkSphereParameterSetting::Transform' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorAkSphereParameterSetting, SphereTickInterval) == 0x000030, "Member 'FSnfGimmickActorAkSphereParameterSetting::SphereTickInterval' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorAkSphereParameterSetting, SphereEvents) == 0x000038, "Member 'FSnfGimmickActorAkSphereParameterSetting::SphereEvents' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorAkSphereParameterSetting, AttenuationScalingFactor) == 0x000048, "Member 'FSnfGimmickActorAkSphereParameterSetting::AttenuationScalingFactor' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorAkSphereParameterSetting, bManualSettingOcclusionRefreshInterval) == 0x00004C, "Member 'FSnfGimmickActorAkSphereParameterSetting::bManualSettingOcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorAkSphereParameterSetting, OcclusionRefreshInterval) == 0x000050, "Member 'FSnfGimmickActorAkSphereParameterSetting::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorAkSphereParameterSetting, OcclusionCollisionChannel) == 0x000054, "Member 'FSnfGimmickActorAkSphereParameterSetting::OcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorAkSphereParameterSetting, EnableChangeRoom) == 0x000055, "Member 'FSnfGimmickActorAkSphereParameterSetting::EnableChangeRoom' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorAkSphereParameterSetting, ChangeRoomType) == 0x000056, "Member 'FSnfGimmickActorAkSphereParameterSetting::ChangeRoomType' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorAkSphereParameterSetting, bDebugDraw) == 0x000057, "Member 'FSnfGimmickActorAkSphereParameterSetting::bDebugDraw' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameSupplyRequest
// 0x00C0 (0x00C0 - 0x0000)
struct FSnfGameSupplyRequest final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     Class;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   LoadClass;                                         // 0x0020(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Owner;                                             // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0060(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASnfGameSupplyActor>     Supply;                                            // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USceneComponent>         SaveComponent;                                     // 0x0098(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>         LoadList;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        LoadAssets;                                        // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameSupplyRequest) == 0x000010, "Wrong alignment on FSnfGameSupplyRequest");
static_assert(sizeof(FSnfGameSupplyRequest) == 0x0000C0, "Wrong size on FSnfGameSupplyRequest");
static_assert(offsetof(FSnfGameSupplyRequest, ID) == 0x000000, "Member 'FSnfGameSupplyRequest::ID' has a wrong offset!");
static_assert(offsetof(FSnfGameSupplyRequest, Name) == 0x000008, "Member 'FSnfGameSupplyRequest::Name' has a wrong offset!");
static_assert(offsetof(FSnfGameSupplyRequest, Priority) == 0x000010, "Member 'FSnfGameSupplyRequest::Priority' has a wrong offset!");
static_assert(offsetof(FSnfGameSupplyRequest, Class) == 0x000018, "Member 'FSnfGameSupplyRequest::Class' has a wrong offset!");
static_assert(offsetof(FSnfGameSupplyRequest, LoadClass) == 0x000020, "Member 'FSnfGameSupplyRequest::LoadClass' has a wrong offset!");
static_assert(offsetof(FSnfGameSupplyRequest, Actor) == 0x000048, "Member 'FSnfGameSupplyRequest::Actor' has a wrong offset!");
static_assert(offsetof(FSnfGameSupplyRequest, Owner) == 0x000050, "Member 'FSnfGameSupplyRequest::Owner' has a wrong offset!");
static_assert(offsetof(FSnfGameSupplyRequest, Transform) == 0x000060, "Member 'FSnfGameSupplyRequest::Transform' has a wrong offset!");
static_assert(offsetof(FSnfGameSupplyRequest, Supply) == 0x000090, "Member 'FSnfGameSupplyRequest::Supply' has a wrong offset!");
static_assert(offsetof(FSnfGameSupplyRequest, SaveComponent) == 0x000098, "Member 'FSnfGameSupplyRequest::SaveComponent' has a wrong offset!");
static_assert(offsetof(FSnfGameSupplyRequest, LoadList) == 0x0000A0, "Member 'FSnfGameSupplyRequest::LoadList' has a wrong offset!");
static_assert(offsetof(FSnfGameSupplyRequest, LoadAssets) == 0x0000B0, "Member 'FSnfGameSupplyRequest::LoadAssets' has a wrong offset!");

// ScriptStruct Snowfall.SnfInteractInhibitSetting
// 0x0014 (0x0014 - 0x0000)
struct FSnfInteractInhibitSetting final
{
public:
	uint8                                         InhibitFlag;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelfToSenderAngle;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelfToSenderSideAngle;                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SenderToSelfAngle;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfInteractInhibitSetting) == 0x000004, "Wrong alignment on FSnfInteractInhibitSetting");
static_assert(sizeof(FSnfInteractInhibitSetting) == 0x000014, "Wrong size on FSnfInteractInhibitSetting");
static_assert(offsetof(FSnfInteractInhibitSetting, InhibitFlag) == 0x000000, "Member 'FSnfInteractInhibitSetting::InhibitFlag' has a wrong offset!");
static_assert(offsetof(FSnfInteractInhibitSetting, SelfToSenderAngle) == 0x000004, "Member 'FSnfInteractInhibitSetting::SelfToSenderAngle' has a wrong offset!");
static_assert(offsetof(FSnfInteractInhibitSetting, SelfToSenderSideAngle) == 0x000008, "Member 'FSnfInteractInhibitSetting::SelfToSenderSideAngle' has a wrong offset!");
static_assert(offsetof(FSnfInteractInhibitSetting, SenderToSelfAngle) == 0x00000C, "Member 'FSnfInteractInhibitSetting::SenderToSelfAngle' has a wrong offset!");
static_assert(offsetof(FSnfInteractInhibitSetting, Range) == 0x000010, "Member 'FSnfInteractInhibitSetting::Range' has a wrong offset!");

// ScriptStruct Snowfall.SnfDefenseTargetInfo
// 0x0068 (0x0068 - 0x0000)
struct FSnfDefenseTargetInfo final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnDamageCallBack;                                  // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDefenseTargetInfo) == 0x000008, "Wrong alignment on FSnfDefenseTargetInfo");
static_assert(sizeof(FSnfDefenseTargetInfo) == 0x000068, "Wrong size on FSnfDefenseTargetInfo");
static_assert(offsetof(FSnfDefenseTargetInfo, OnDamageCallBack) == 0x000058, "Member 'FSnfDefenseTargetInfo::OnDamageCallBack' has a wrong offset!");

// ScriptStruct Snowfall.SnfAgitationSpeakerInfo
// 0x0070 (0x0070 - 0x0000)
struct FSnfAgitationSpeakerInfo final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x3C];                                      // 0x0034(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfAgitationSpeakerInfo) == 0x000010, "Wrong alignment on FSnfAgitationSpeakerInfo");
static_assert(sizeof(FSnfAgitationSpeakerInfo) == 0x000070, "Wrong size on FSnfAgitationSpeakerInfo");
static_assert(offsetof(FSnfAgitationSpeakerInfo, Transform) == 0x000000, "Member 'FSnfAgitationSpeakerInfo::Transform' has a wrong offset!");
static_assert(offsetof(FSnfAgitationSpeakerInfo, Radius) == 0x000030, "Member 'FSnfAgitationSpeakerInfo::Radius' has a wrong offset!");

// ScriptStruct Snowfall.SnfDefenseAction
// 0x0038 (0x0038 - 0x0000)
struct FSnfDefenseAction final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetDirect;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  TargetSoft;                                        // 0x0010(0x0028)(Edit, BlueprintVisible, DisableEditOnTemplate, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDefenseAction) == 0x000008, "Wrong alignment on FSnfDefenseAction");
static_assert(sizeof(FSnfDefenseAction) == 0x000038, "Wrong size on FSnfDefenseAction");
static_assert(offsetof(FSnfDefenseAction, ActionName) == 0x000000, "Member 'FSnfDefenseAction::ActionName' has a wrong offset!");
static_assert(offsetof(FSnfDefenseAction, TargetDirect) == 0x000008, "Member 'FSnfDefenseAction::TargetDirect' has a wrong offset!");
static_assert(offsetof(FSnfDefenseAction, TargetSoft) == 0x000010, "Member 'FSnfDefenseAction::TargetSoft' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessSearchParam
// 0x0070 (0x0070 - 0x0000)
struct FSnfEndlessSearchParam final
{
public:
	TSoftObjectPtr<class AActor>                  Actor;                                             // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CatalogId;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemId;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameId;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0044(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameTags;                                          // 0x0050(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessSearchParam) == 0x000008, "Wrong alignment on FSnfEndlessSearchParam");
static_assert(sizeof(FSnfEndlessSearchParam) == 0x000070, "Wrong size on FSnfEndlessSearchParam");
static_assert(offsetof(FSnfEndlessSearchParam, Actor) == 0x000000, "Member 'FSnfEndlessSearchParam::Actor' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearchParam, CatalogId) == 0x000028, "Member 'FSnfEndlessSearchParam::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearchParam, ItemId) == 0x000030, "Member 'FSnfEndlessSearchParam::ItemId' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearchParam, NameId) == 0x000038, "Member 'FSnfEndlessSearchParam::NameId' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearchParam, Count) == 0x000040, "Member 'FSnfEndlessSearchParam::Count' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearchParam, Location) == 0x000044, "Member 'FSnfEndlessSearchParam::Location' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearchParam, GameTags) == 0x000050, "Member 'FSnfEndlessSearchParam::GameTags' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessSearch
// 0x0128 (0x0130 - 0x0008)
struct FSnfEndlessSearch final : public FTableRowBase
{
public:
	class FName                                   PresetId;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapId;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThemeId;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfEndlessGroupType                          Group;                                             // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SetTime;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinMax;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinMin;                                           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PotNum;                                            // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FoodNum;                                           // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartsNum;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         YureiNum;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         YokaiNum;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CatNum;                                            // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReaperNum;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UWorld>                  GameMap;                                           // 0x0058(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessSearchParam>         FoodList;                                          // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessSearchParam>         CashList;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessSearchParam>         PartsList;                                         // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessSearchParam>         EnemyList;                                         // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessSearchParam>         YureiList;                                         // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessSearchParam>         YokaiList;                                         // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessSearchParam>         Blacklist;                                         // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessSearchParam>         CoinPotList;                                       // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessSearchParam>         CatList;                                           // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessSearchParam>         ReaperList;                                        // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdateTime;                                        // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInit;                                            // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfEndlessSearch) == 0x000008, "Wrong alignment on FSnfEndlessSearch");
static_assert(sizeof(FSnfEndlessSearch) == 0x000130, "Wrong size on FSnfEndlessSearch");
static_assert(offsetof(FSnfEndlessSearch, PresetId) == 0x000008, "Member 'FSnfEndlessSearch::PresetId' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, MapId) == 0x000010, "Member 'FSnfEndlessSearch::MapId' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, ThemeId) == 0x000018, "Member 'FSnfEndlessSearch::ThemeId' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, Group) == 0x00001C, "Member 'FSnfEndlessSearch::Group' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, SetTime) == 0x000020, "Member 'FSnfEndlessSearch::SetTime' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, CoinMax) == 0x000030, "Member 'FSnfEndlessSearch::CoinMax' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, CoinMin) == 0x000034, "Member 'FSnfEndlessSearch::CoinMin' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, PotNum) == 0x000038, "Member 'FSnfEndlessSearch::PotNum' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, FoodNum) == 0x00003C, "Member 'FSnfEndlessSearch::FoodNum' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, PartsNum) == 0x000040, "Member 'FSnfEndlessSearch::PartsNum' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, YureiNum) == 0x000044, "Member 'FSnfEndlessSearch::YureiNum' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, YokaiNum) == 0x000048, "Member 'FSnfEndlessSearch::YokaiNum' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, CatNum) == 0x00004C, "Member 'FSnfEndlessSearch::CatNum' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, ReaperNum) == 0x000050, "Member 'FSnfEndlessSearch::ReaperNum' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, GameMap) == 0x000058, "Member 'FSnfEndlessSearch::GameMap' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, FoodList) == 0x000080, "Member 'FSnfEndlessSearch::FoodList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, CashList) == 0x000090, "Member 'FSnfEndlessSearch::CashList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, PartsList) == 0x0000A0, "Member 'FSnfEndlessSearch::PartsList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, EnemyList) == 0x0000B0, "Member 'FSnfEndlessSearch::EnemyList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, YureiList) == 0x0000C0, "Member 'FSnfEndlessSearch::YureiList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, YokaiList) == 0x0000D0, "Member 'FSnfEndlessSearch::YokaiList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, Blacklist) == 0x0000E0, "Member 'FSnfEndlessSearch::Blacklist' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, CoinPotList) == 0x0000F0, "Member 'FSnfEndlessSearch::CoinPotList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, CatList) == 0x000100, "Member 'FSnfEndlessSearch::CatList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, ReaperList) == 0x000110, "Member 'FSnfEndlessSearch::ReaperList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, UpdateTime) == 0x000120, "Member 'FSnfEndlessSearch::UpdateTime' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearch, IsInit) == 0x000128, "Member 'FSnfEndlessSearch::IsInit' has a wrong offset!");

// ScriptStruct Snowfall.SnfDefenseEnemyInfo
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FSnfDefenseEnemyInfo final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfDefenseEnemyInfo) == 0x000008, "Wrong alignment on FSnfDefenseEnemyInfo");
static_assert(sizeof(FSnfDefenseEnemyInfo) == 0x000060, "Wrong size on FSnfDefenseEnemyInfo");

// ScriptStruct Snowfall.SnfAreaInfo
// 0x0030 (0x0038 - 0x0008)
struct FSnfAreaInfo final : public FTableRowBase
{
public:
	class FName                                   Name;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        PointArray;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                BBMin;                                             // 0x0020(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BBMax;                                             // 0x002C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAreaInfo) == 0x000008, "Wrong alignment on FSnfAreaInfo");
static_assert(sizeof(FSnfAreaInfo) == 0x000038, "Wrong size on FSnfAreaInfo");
static_assert(offsetof(FSnfAreaInfo, Name) == 0x000008, "Member 'FSnfAreaInfo::Name' has a wrong offset!");
static_assert(offsetof(FSnfAreaInfo, PointArray) == 0x000010, "Member 'FSnfAreaInfo::PointArray' has a wrong offset!");
static_assert(offsetof(FSnfAreaInfo, BBMin) == 0x000020, "Member 'FSnfAreaInfo::BBMin' has a wrong offset!");
static_assert(offsetof(FSnfAreaInfo, BBMax) == 0x00002C, "Member 'FSnfAreaInfo::BBMax' has a wrong offset!");

// ScriptStruct Snowfall.SnfPropsGimmickAnimationInfo
// 0x00B8 (0x00B8 - 0x0000)
struct FSnfPropsGimmickAnimationInfo final
{
public:
	EEasingFunc                                   MoveType;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BasePos;                                           // 0x0004(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetPos;                                         // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CurrentPos;                                        // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BaseRot;                                           // 0x0028(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRot;                                         // 0x0034(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               CurrentRot;                                        // 0x0040(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BaseScale;                                         // 0x004C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetScale;                                       // 0x0058(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CurrentScale;                                      // 0x0064(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseFroat;                                         // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetFroat;                                       // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentFroat;                                      // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurveFroat;                                        // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationBaseRate;                                 // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationRate;                                     // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timer;                                             // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeMax;                                           // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCountUp;                                         // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ToggleCountUpDown;                                 // 0x00A1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Exp;                                               // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ControlIndex;                                      // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreArrivalKeyIndex;                                // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArrivalKeyIndex;                                   // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfPropsGimmickAnimationInfo) == 0x000008, "Wrong alignment on FSnfPropsGimmickAnimationInfo");
static_assert(sizeof(FSnfPropsGimmickAnimationInfo) == 0x0000B8, "Wrong size on FSnfPropsGimmickAnimationInfo");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, MoveType) == 0x000000, "Member 'FSnfPropsGimmickAnimationInfo::MoveType' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, BasePos) == 0x000004, "Member 'FSnfPropsGimmickAnimationInfo::BasePos' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, OffsetPos) == 0x000010, "Member 'FSnfPropsGimmickAnimationInfo::OffsetPos' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, CurrentPos) == 0x00001C, "Member 'FSnfPropsGimmickAnimationInfo::CurrentPos' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, BaseRot) == 0x000028, "Member 'FSnfPropsGimmickAnimationInfo::BaseRot' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, OffsetRot) == 0x000034, "Member 'FSnfPropsGimmickAnimationInfo::OffsetRot' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, CurrentRot) == 0x000040, "Member 'FSnfPropsGimmickAnimationInfo::CurrentRot' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, BaseScale) == 0x00004C, "Member 'FSnfPropsGimmickAnimationInfo::BaseScale' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, OffsetScale) == 0x000058, "Member 'FSnfPropsGimmickAnimationInfo::OffsetScale' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, CurrentScale) == 0x000064, "Member 'FSnfPropsGimmickAnimationInfo::CurrentScale' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, BaseFroat) == 0x000070, "Member 'FSnfPropsGimmickAnimationInfo::BaseFroat' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, OffsetFroat) == 0x000074, "Member 'FSnfPropsGimmickAnimationInfo::OffsetFroat' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, CurrentFroat) == 0x000078, "Member 'FSnfPropsGimmickAnimationInfo::CurrentFroat' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, CurveFroat) == 0x000080, "Member 'FSnfPropsGimmickAnimationInfo::CurveFroat' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, AnimationBaseRate) == 0x000088, "Member 'FSnfPropsGimmickAnimationInfo::AnimationBaseRate' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, AnimationRate) == 0x00008C, "Member 'FSnfPropsGimmickAnimationInfo::AnimationRate' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, Timer) == 0x000090, "Member 'FSnfPropsGimmickAnimationInfo::Timer' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, TimeMax) == 0x000094, "Member 'FSnfPropsGimmickAnimationInfo::TimeMax' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, Speed) == 0x000098, "Member 'FSnfPropsGimmickAnimationInfo::Speed' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, Delay) == 0x00009C, "Member 'FSnfPropsGimmickAnimationInfo::Delay' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, IsCountUp) == 0x0000A0, "Member 'FSnfPropsGimmickAnimationInfo::IsCountUp' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, ToggleCountUpDown) == 0x0000A1, "Member 'FSnfPropsGimmickAnimationInfo::ToggleCountUpDown' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, Exp) == 0x0000A4, "Member 'FSnfPropsGimmickAnimationInfo::Exp' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, ControlIndex) == 0x0000A8, "Member 'FSnfPropsGimmickAnimationInfo::ControlIndex' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, PreArrivalKeyIndex) == 0x0000AC, "Member 'FSnfPropsGimmickAnimationInfo::PreArrivalKeyIndex' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickAnimationInfo, ArrivalKeyIndex) == 0x0000B0, "Member 'FSnfPropsGimmickAnimationInfo::ArrivalKeyIndex' has a wrong offset!");

// ScriptStruct Snowfall.DoorParts
// 0x0100 (0x0100 - 0x0000)
struct FDoorParts final
{
public:
	class USceneComponent*                        DoorRoot;                                          // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        MovementRoot;                                      // 0x0008(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnfStaticMeshComponent*                Mesh;                                              // 0x0010(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnfInteractComponent*                  DoorInteract;                                      // 0x0018(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          InteractableCollision;                             // 0x0020(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          NavModifier;                                       // 0x0028(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfDoubleDoorDir                             Direction;                                         // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfDoorBaseState                             CurrentDoorState;                                  // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfDoorBaseState                             PreDoorState;                                      // 0x0032(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSnfPropsGimmickAnimationInfo          AnimationInfo;                                     // 0x0038(0x00B8)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         CallSoundRotation;                                 // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallSoundSlide;                                    // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCalledEndSound;                                   // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocking;                                          // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDoorParts) == 0x000008, "Wrong alignment on FDoorParts");
static_assert(sizeof(FDoorParts) == 0x000100, "Wrong size on FDoorParts");
static_assert(offsetof(FDoorParts, DoorRoot) == 0x000000, "Member 'FDoorParts::DoorRoot' has a wrong offset!");
static_assert(offsetof(FDoorParts, MovementRoot) == 0x000008, "Member 'FDoorParts::MovementRoot' has a wrong offset!");
static_assert(offsetof(FDoorParts, Mesh) == 0x000010, "Member 'FDoorParts::Mesh' has a wrong offset!");
static_assert(offsetof(FDoorParts, DoorInteract) == 0x000018, "Member 'FDoorParts::DoorInteract' has a wrong offset!");
static_assert(offsetof(FDoorParts, InteractableCollision) == 0x000020, "Member 'FDoorParts::InteractableCollision' has a wrong offset!");
static_assert(offsetof(FDoorParts, NavModifier) == 0x000028, "Member 'FDoorParts::NavModifier' has a wrong offset!");
static_assert(offsetof(FDoorParts, Direction) == 0x000030, "Member 'FDoorParts::Direction' has a wrong offset!");
static_assert(offsetof(FDoorParts, CurrentDoorState) == 0x000031, "Member 'FDoorParts::CurrentDoorState' has a wrong offset!");
static_assert(offsetof(FDoorParts, PreDoorState) == 0x000032, "Member 'FDoorParts::PreDoorState' has a wrong offset!");
static_assert(offsetof(FDoorParts, AnimationInfo) == 0x000038, "Member 'FDoorParts::AnimationInfo' has a wrong offset!");
static_assert(offsetof(FDoorParts, CallSoundRotation) == 0x0000F0, "Member 'FDoorParts::CallSoundRotation' has a wrong offset!");
static_assert(offsetof(FDoorParts, CallSoundSlide) == 0x0000F4, "Member 'FDoorParts::CallSoundSlide' has a wrong offset!");
static_assert(offsetof(FDoorParts, bCalledEndSound) == 0x0000F8, "Member 'FDoorParts::bCalledEndSound' has a wrong offset!");
static_assert(offsetof(FDoorParts, bLocking) == 0x0000F9, "Member 'FDoorParts::bLocking' has a wrong offset!");

// ScriptStruct Snowfall.SnfBTTaskAnimalAnimStateName
// 0x0010 (0x0010 - 0x0000)
struct FSnfBTTaskAnimalAnimStateName final
{
public:
	class FName                                   MachineName;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfBTTaskAnimalAnimStateName) == 0x000004, "Wrong alignment on FSnfBTTaskAnimalAnimStateName");
static_assert(sizeof(FSnfBTTaskAnimalAnimStateName) == 0x000010, "Wrong size on FSnfBTTaskAnimalAnimStateName");
static_assert(offsetof(FSnfBTTaskAnimalAnimStateName, MachineName) == 0x000000, "Member 'FSnfBTTaskAnimalAnimStateName::MachineName' has a wrong offset!");
static_assert(offsetof(FSnfBTTaskAnimalAnimStateName, StateName) == 0x000008, "Member 'FSnfBTTaskAnimalAnimStateName::StateName' has a wrong offset!");

// ScriptStruct Snowfall.SnfCompassMarkerWidgetId
// 0x0018 (0x0018 - 0x0000)
struct FSnfCompassMarkerWidgetId final
{
public:
	TWeakObjectPtr<class USnfCompassMarkerWidget> MarkerWidget;                                      // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCompassMarkerWidgetId) == 0x000004, "Wrong alignment on FSnfCompassMarkerWidgetId");
static_assert(sizeof(FSnfCompassMarkerWidgetId) == 0x000018, "Wrong size on FSnfCompassMarkerWidgetId");
static_assert(offsetof(FSnfCompassMarkerWidgetId, MarkerWidget) == 0x000000, "Member 'FSnfCompassMarkerWidgetId::MarkerWidget' has a wrong offset!");

// ScriptStruct Snowfall.SnfQualityPresetFSR
// 0x000C (0x000C - 0x0000)
struct FSnfQualityPresetFSR final
{
public:
	uint8                                         Index;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0001(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScreenPercentage;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MipMapLODBias;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfQualityPresetFSR) == 0x000004, "Wrong alignment on FSnfQualityPresetFSR");
static_assert(sizeof(FSnfQualityPresetFSR) == 0x00000C, "Wrong size on FSnfQualityPresetFSR");
static_assert(offsetof(FSnfQualityPresetFSR, Index) == 0x000000, "Member 'FSnfQualityPresetFSR::Index' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetFSR, bEnabled) == 0x000001, "Member 'FSnfQualityPresetFSR::bEnabled' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetFSR, ScreenPercentage) == 0x000004, "Member 'FSnfQualityPresetFSR::ScreenPercentage' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetFSR, MipMapLODBias) == 0x000008, "Member 'FSnfQualityPresetFSR::MipMapLODBias' has a wrong offset!");

// ScriptStruct Snowfall.SnfHUDActionItem
// 0x0014 (0x0014 - 0x0000)
struct FSnfHUDActionItem final
{
public:
	TWeakObjectPtr<class UTngUserWidget>          Agent;                                             // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0xC];                                        // 0x0008(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfHUDActionItem) == 0x000004, "Wrong alignment on FSnfHUDActionItem");
static_assert(sizeof(FSnfHUDActionItem) == 0x000014, "Wrong size on FSnfHUDActionItem");
static_assert(offsetof(FSnfHUDActionItem, Agent) == 0x000000, "Member 'FSnfHUDActionItem::Agent' has a wrong offset!");

// ScriptStruct Snowfall.TalismanTutorial
// 0x0014 (0x0014 - 0x0000)
struct FTalismanTutorial final
{
public:
	class FName                                   StartTalkID;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParalysisTalkID;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x4];                                       // 0x0010(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTalismanTutorial) == 0x000004, "Wrong alignment on FTalismanTutorial");
static_assert(sizeof(FTalismanTutorial) == 0x000014, "Wrong size on FTalismanTutorial");
static_assert(offsetof(FTalismanTutorial, StartTalkID) == 0x000000, "Member 'FTalismanTutorial::StartTalkID' has a wrong offset!");
static_assert(offsetof(FTalismanTutorial, ParalysisTalkID) == 0x000008, "Member 'FTalismanTutorial::ParalysisTalkID' has a wrong offset!");

// ScriptStruct Snowfall.SnfAISightEvent
// 0x0028 (0x0028 - 0x0000)
struct FSnfAISightEvent final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SeenActor;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Observer;                                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIPerceptionComponent*                 Listener;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SightIndex;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfAISightEvent) == 0x000008, "Wrong alignment on FSnfAISightEvent");
static_assert(sizeof(FSnfAISightEvent) == 0x000028, "Wrong size on FSnfAISightEvent");
static_assert(offsetof(FSnfAISightEvent, SeenActor) == 0x000008, "Member 'FSnfAISightEvent::SeenActor' has a wrong offset!");
static_assert(offsetof(FSnfAISightEvent, Observer) == 0x000010, "Member 'FSnfAISightEvent::Observer' has a wrong offset!");
static_assert(offsetof(FSnfAISightEvent, Listener) == 0x000018, "Member 'FSnfAISightEvent::Listener' has a wrong offset!");
static_assert(offsetof(FSnfAISightEvent, SightIndex) == 0x000020, "Member 'FSnfAISightEvent::SightIndex' has a wrong offset!");
static_assert(offsetof(FSnfAISightEvent, bActive) == 0x000024, "Member 'FSnfAISightEvent::bActive' has a wrong offset!");

// ScriptStruct Snowfall.SnfClothActorMeshInfo
// 0x0030 (0x0030 - 0x0000)
struct FSnfClothActorMeshInfo final
{
public:
	TSoftObjectPtr<class USkeletalMesh>           ClothMesh;                                         // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnfSkeletalMeshComponent*              ClothMeshComp;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfClothActorMeshInfo) == 0x000008, "Wrong alignment on FSnfClothActorMeshInfo");
static_assert(sizeof(FSnfClothActorMeshInfo) == 0x000030, "Wrong size on FSnfClothActorMeshInfo");
static_assert(offsetof(FSnfClothActorMeshInfo, ClothMesh) == 0x000000, "Member 'FSnfClothActorMeshInfo::ClothMesh' has a wrong offset!");
static_assert(offsetof(FSnfClothActorMeshInfo, ClothMeshComp) == 0x000028, "Member 'FSnfClothActorMeshInfo::ClothMeshComp' has a wrong offset!");

// ScriptStruct Snowfall.SnfSignalBasePedestrianSignalMaterialInfo
// 0x0030 (0x0030 - 0x0000)
struct FSnfSignalBasePedestrianSignalMaterialInfo final
{
public:
	class UMaterialInstanceDynamic*               DynamicMaterialInstance;                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmissiveIntensity;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SignalSwitch;                                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           StopColor;                                         // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CanGoColor;                                        // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfSignalBasePedestrianSignalMaterialInfo) == 0x000008, "Wrong alignment on FSnfSignalBasePedestrianSignalMaterialInfo");
static_assert(sizeof(FSnfSignalBasePedestrianSignalMaterialInfo) == 0x000030, "Wrong size on FSnfSignalBasePedestrianSignalMaterialInfo");
static_assert(offsetof(FSnfSignalBasePedestrianSignalMaterialInfo, DynamicMaterialInstance) == 0x000000, "Member 'FSnfSignalBasePedestrianSignalMaterialInfo::DynamicMaterialInstance' has a wrong offset!");
static_assert(offsetof(FSnfSignalBasePedestrianSignalMaterialInfo, EmissiveIntensity) == 0x000008, "Member 'FSnfSignalBasePedestrianSignalMaterialInfo::EmissiveIntensity' has a wrong offset!");
static_assert(offsetof(FSnfSignalBasePedestrianSignalMaterialInfo, SignalSwitch) == 0x00000C, "Member 'FSnfSignalBasePedestrianSignalMaterialInfo::SignalSwitch' has a wrong offset!");
static_assert(offsetof(FSnfSignalBasePedestrianSignalMaterialInfo, StopColor) == 0x000010, "Member 'FSnfSignalBasePedestrianSignalMaterialInfo::StopColor' has a wrong offset!");
static_assert(offsetof(FSnfSignalBasePedestrianSignalMaterialInfo, CanGoColor) == 0x000020, "Member 'FSnfSignalBasePedestrianSignalMaterialInfo::CanGoColor' has a wrong offset!");

// ScriptStruct Snowfall.SnfJobPointList
// 0x0038 (0x0038 - 0x0000)
struct FSnfJobPointList final
{
public:
	TSoftObjectPtr<class AActor>                  PointActor;                                        // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USnfJobAction*>                  PointActions;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfJobPointList) == 0x000008, "Wrong alignment on FSnfJobPointList");
static_assert(sizeof(FSnfJobPointList) == 0x000038, "Wrong size on FSnfJobPointList");
static_assert(offsetof(FSnfJobPointList, PointActor) == 0x000000, "Member 'FSnfJobPointList::PointActor' has a wrong offset!");
static_assert(offsetof(FSnfJobPointList, PointActions) == 0x000028, "Member 'FSnfJobPointList::PointActions' has a wrong offset!");

// ScriptStruct Snowfall.SnfQualityPresetRayTracingReflections
// 0x000C (0x000C - 0x0000)
struct FSnfQualityPresetRayTracingReflections final
{
public:
	uint8                                         Index;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0001(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScreenPercentage;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExperimentalDeferredHorizontalResolutionScale;     // 0x0008(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfQualityPresetRayTracingReflections) == 0x000004, "Wrong alignment on FSnfQualityPresetRayTracingReflections");
static_assert(sizeof(FSnfQualityPresetRayTracingReflections) == 0x00000C, "Wrong size on FSnfQualityPresetRayTracingReflections");
static_assert(offsetof(FSnfQualityPresetRayTracingReflections, Index) == 0x000000, "Member 'FSnfQualityPresetRayTracingReflections::Index' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetRayTracingReflections, bEnabled) == 0x000001, "Member 'FSnfQualityPresetRayTracingReflections::bEnabled' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetRayTracingReflections, ScreenPercentage) == 0x000004, "Member 'FSnfQualityPresetRayTracingReflections::ScreenPercentage' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetRayTracingReflections, ExperimentalDeferredHorizontalResolutionScale) == 0x000008, "Member 'FSnfQualityPresetRayTracingReflections::ExperimentalDeferredHorizontalResolutionScale' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessTask
// 0x0010 (0x0010 - 0x0000)
struct FSnfEndlessTask final
{
public:
	ESnfEndlessTaskType                           Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Random;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysPickup;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfEndlessTaskRewardType                     Reward;                                            // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfEndlessTask) == 0x000004, "Wrong alignment on FSnfEndlessTask");
static_assert(sizeof(FSnfEndlessTask) == 0x000010, "Wrong size on FSnfEndlessTask");
static_assert(offsetof(FSnfEndlessTask, Type) == 0x000000, "Member 'FSnfEndlessTask::Type' has a wrong offset!");
static_assert(offsetof(FSnfEndlessTask, Param) == 0x000004, "Member 'FSnfEndlessTask::Param' has a wrong offset!");
static_assert(offsetof(FSnfEndlessTask, Random) == 0x000008, "Member 'FSnfEndlessTask::Random' has a wrong offset!");
static_assert(offsetof(FSnfEndlessTask, bAlwaysPickup) == 0x00000C, "Member 'FSnfEndlessTask::bAlwaysPickup' has a wrong offset!");
static_assert(offsetof(FSnfEndlessTask, Reward) == 0x00000D, "Member 'FSnfEndlessTask::Reward' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessInfo
// 0x0050 (0x0050 - 0x0000)
struct FSnfEndlessInfo final
{
public:
	int32                                         DataIndex;                                         // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FloorNumber;                                       // 0x0004(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThemeId;                                           // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfEndlessGroupType                          Group;                                             // 0x000C(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LayoutId;                                          // 0x0010(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PresetId;                                          // 0x0014(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfEndlessObjectiveType                      Objective;                                         // 0x001C(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RewardExp;                                         // 0x0020(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawResult;                                        // 0x0024(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSnfEndlessTask>                TaskList;                                          // 0x0028(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	class FName                                   MapName;                                           // 0x0038(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           FloorTags;                                         // 0x0040(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessInfo) == 0x000008, "Wrong alignment on FSnfEndlessInfo");
static_assert(sizeof(FSnfEndlessInfo) == 0x000050, "Wrong size on FSnfEndlessInfo");
static_assert(offsetof(FSnfEndlessInfo, DataIndex) == 0x000000, "Member 'FSnfEndlessInfo::DataIndex' has a wrong offset!");
static_assert(offsetof(FSnfEndlessInfo, FloorNumber) == 0x000004, "Member 'FSnfEndlessInfo::FloorNumber' has a wrong offset!");
static_assert(offsetof(FSnfEndlessInfo, ThemeId) == 0x000008, "Member 'FSnfEndlessInfo::ThemeId' has a wrong offset!");
static_assert(offsetof(FSnfEndlessInfo, Group) == 0x00000C, "Member 'FSnfEndlessInfo::Group' has a wrong offset!");
static_assert(offsetof(FSnfEndlessInfo, LayoutId) == 0x000010, "Member 'FSnfEndlessInfo::LayoutId' has a wrong offset!");
static_assert(offsetof(FSnfEndlessInfo, PresetId) == 0x000014, "Member 'FSnfEndlessInfo::PresetId' has a wrong offset!");
static_assert(offsetof(FSnfEndlessInfo, Objective) == 0x00001C, "Member 'FSnfEndlessInfo::Objective' has a wrong offset!");
static_assert(offsetof(FSnfEndlessInfo, RewardExp) == 0x000020, "Member 'FSnfEndlessInfo::RewardExp' has a wrong offset!");
static_assert(offsetof(FSnfEndlessInfo, DrawResult) == 0x000024, "Member 'FSnfEndlessInfo::DrawResult' has a wrong offset!");
static_assert(offsetof(FSnfEndlessInfo, TaskList) == 0x000028, "Member 'FSnfEndlessInfo::TaskList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessInfo, MapName) == 0x000038, "Member 'FSnfEndlessInfo::MapName' has a wrong offset!");
static_assert(offsetof(FSnfEndlessInfo, FloorTags) == 0x000040, "Member 'FSnfEndlessInfo::FloorTags' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessTaskItem
// 0x0020 (0x0028 - 0x0008)
struct FSnfEndlessTaskItem final : public FTableRowBase
{
public:
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ESnfEndlessTaskType                           Task;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfEndlessTaskCheckType                      Check;                                             // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfEndlessAddStatsType                       AddStats;                                          // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfEndlessCountStatsType                     CountStats;                                        // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfEndlessMaxStatsType                       MaxStats;                                          // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckSuccessAfterGoal;                            // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotImmediatelyFailure;                            // 0x0026(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseStatsFromCheckTargetTask;                      // 0x0027(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessTaskItem) == 0x000008, "Wrong alignment on FSnfEndlessTaskItem");
static_assert(sizeof(FSnfEndlessTaskItem) == 0x000028, "Wrong size on FSnfEndlessTaskItem");
static_assert(offsetof(FSnfEndlessTaskItem, Title) == 0x000008, "Member 'FSnfEndlessTaskItem::Title' has a wrong offset!");
static_assert(offsetof(FSnfEndlessTaskItem, Task) == 0x000020, "Member 'FSnfEndlessTaskItem::Task' has a wrong offset!");
static_assert(offsetof(FSnfEndlessTaskItem, Check) == 0x000021, "Member 'FSnfEndlessTaskItem::Check' has a wrong offset!");
static_assert(offsetof(FSnfEndlessTaskItem, AddStats) == 0x000022, "Member 'FSnfEndlessTaskItem::AddStats' has a wrong offset!");
static_assert(offsetof(FSnfEndlessTaskItem, CountStats) == 0x000023, "Member 'FSnfEndlessTaskItem::CountStats' has a wrong offset!");
static_assert(offsetof(FSnfEndlessTaskItem, MaxStats) == 0x000024, "Member 'FSnfEndlessTaskItem::MaxStats' has a wrong offset!");
static_assert(offsetof(FSnfEndlessTaskItem, bCheckSuccessAfterGoal) == 0x000025, "Member 'FSnfEndlessTaskItem::bCheckSuccessAfterGoal' has a wrong offset!");
static_assert(offsetof(FSnfEndlessTaskItem, bNotImmediatelyFailure) == 0x000026, "Member 'FSnfEndlessTaskItem::bNotImmediatelyFailure' has a wrong offset!");
static_assert(offsetof(FSnfEndlessTaskItem, bUseStatsFromCheckTargetTask) == 0x000027, "Member 'FSnfEndlessTaskItem::bUseStatsFromCheckTargetTask' has a wrong offset!");

// ScriptStruct Snowfall.SnfEventNotifyInfo
// 0x0004 (0x0004 - 0x0000)
struct FSnfEventNotifyInfo final
{
public:
	int32                                         Reserve;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEventNotifyInfo) == 0x000004, "Wrong alignment on FSnfEventNotifyInfo");
static_assert(sizeof(FSnfEventNotifyInfo) == 0x000004, "Wrong size on FSnfEventNotifyInfo");
static_assert(offsetof(FSnfEventNotifyInfo, Reserve) == 0x000000, "Member 'FSnfEventNotifyInfo::Reserve' has a wrong offset!");

// ScriptStruct Snowfall.SnfAINoiseEvent
// 0x0000 (0x0030 - 0x0030)
struct FSnfAINoiseEvent final : public FAINoiseEvent
{
};
static_assert(alignof(FSnfAINoiseEvent) == 0x000008, "Wrong alignment on FSnfAINoiseEvent");
static_assert(sizeof(FSnfAINoiseEvent) == 0x000030, "Wrong size on FSnfAINoiseEvent");

// ScriptStruct Snowfall.SnfCoopActionInfo
// 0x0018 (0x0018 - 0x0000)
struct FSnfCoopActionInfo final
{
public:
	TArray<struct FSnfCoopActionMember>           Members;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIsDamageCancel;                                   // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCoopActionInfo) == 0x000008, "Wrong alignment on FSnfCoopActionInfo");
static_assert(sizeof(FSnfCoopActionInfo) == 0x000018, "Wrong size on FSnfCoopActionInfo");
static_assert(offsetof(FSnfCoopActionInfo, Members) == 0x000000, "Member 'FSnfCoopActionInfo::Members' has a wrong offset!");
static_assert(offsetof(FSnfCoopActionInfo, bIsDamageCancel) == 0x000010, "Member 'FSnfCoopActionInfo::bIsDamageCancel' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActivityAction
// 0x00F0 (0x00F0 - 0x0000)
struct FSnfGameActivityAction final
{
public:
	ESnfGameActivityAction                        Action;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfGameCastType                              Target;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfGameCastType                              SubTarget;                                         // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0018(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Class;                                             // 0x0038(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              Table;                                             // 0x0060(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataAsset>              DataAsset;                                         // 0x0088(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequenceBase>       Anim;                                              // 0x00B0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkEvent;                                           // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NameList;                                          // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameActivityAction) == 0x000008, "Wrong alignment on FSnfGameActivityAction");
static_assert(sizeof(FSnfGameActivityAction) == 0x0000F0, "Wrong size on FSnfGameActivityAction");
static_assert(offsetof(FSnfGameActivityAction, Action) == 0x000000, "Member 'FSnfGameActivityAction::Action' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityAction, Target) == 0x000001, "Member 'FSnfGameActivityAction::Target' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityAction, SubTarget) == 0x000002, "Member 'FSnfGameActivityAction::SubTarget' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityAction, Flag) == 0x000003, "Member 'FSnfGameActivityAction::Flag' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityAction, Count) == 0x000004, "Member 'FSnfGameActivityAction::Count' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityAction, Index) == 0x000008, "Member 'FSnfGameActivityAction::Index' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityAction, Length) == 0x00000C, "Member 'FSnfGameActivityAction::Length' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityAction, Name) == 0x000010, "Member 'FSnfGameActivityAction::Name' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityAction, Tags) == 0x000018, "Member 'FSnfGameActivityAction::Tags' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityAction, Class) == 0x000038, "Member 'FSnfGameActivityAction::Class' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityAction, Table) == 0x000060, "Member 'FSnfGameActivityAction::Table' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityAction, DataAsset) == 0x000088, "Member 'FSnfGameActivityAction::DataAsset' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityAction, Anim) == 0x0000B0, "Member 'FSnfGameActivityAction::Anim' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityAction, AkEvent) == 0x0000D8, "Member 'FSnfGameActivityAction::AkEvent' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityAction, NameList) == 0x0000E0, "Member 'FSnfGameActivityAction::NameList' has a wrong offset!");

// ScriptStruct Snowfall.SnfFocusInfo
// 0x0058 (0x0058 - 0x0000)
struct FSnfFocusInfo final
{
public:
	TWeakObjectPtr<class AActor>                  FocusActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USceneComponent>         FocusComponent;                                    // 0x0008(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InteractNum;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteractTime;                                      // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InteractType;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractName                                 InteractNameType;                                  // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractCondition                            InteractCondition;                                 // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Tags;                                              // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         RateLength;                                        // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinLength;                                         // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDot;                                            // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfFocusInfo) == 0x000008, "Wrong alignment on FSnfFocusInfo");
static_assert(sizeof(FSnfFocusInfo) == 0x000058, "Wrong size on FSnfFocusInfo");
static_assert(offsetof(FSnfFocusInfo, FocusActor) == 0x000000, "Member 'FSnfFocusInfo::FocusActor' has a wrong offset!");
static_assert(offsetof(FSnfFocusInfo, FocusComponent) == 0x000008, "Member 'FSnfFocusInfo::FocusComponent' has a wrong offset!");
static_assert(offsetof(FSnfFocusInfo, InteractNum) == 0x000010, "Member 'FSnfFocusInfo::InteractNum' has a wrong offset!");
static_assert(offsetof(FSnfFocusInfo, InteractTime) == 0x000014, "Member 'FSnfFocusInfo::InteractTime' has a wrong offset!");
static_assert(offsetof(FSnfFocusInfo, InteractType) == 0x000018, "Member 'FSnfFocusInfo::InteractType' has a wrong offset!");
static_assert(offsetof(FSnfFocusInfo, InteractNameType) == 0x000020, "Member 'FSnfFocusInfo::InteractNameType' has a wrong offset!");
static_assert(offsetof(FSnfFocusInfo, InteractCondition) == 0x000021, "Member 'FSnfFocusInfo::InteractCondition' has a wrong offset!");
static_assert(offsetof(FSnfFocusInfo, Tags) == 0x000028, "Member 'FSnfFocusInfo::Tags' has a wrong offset!");
static_assert(offsetof(FSnfFocusInfo, RateLength) == 0x000048, "Member 'FSnfFocusInfo::RateLength' has a wrong offset!");
static_assert(offsetof(FSnfFocusInfo, MinLength) == 0x00004C, "Member 'FSnfFocusInfo::MinLength' has a wrong offset!");
static_assert(offsetof(FSnfFocusInfo, MaxDot) == 0x000050, "Member 'FSnfFocusInfo::MaxDot' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameBuddyPointItem
// 0x0050 (0x0058 - 0x0008)
struct FSnfGameBuddyPointItem final : public FTableRowBase
{
public:
	class FName                                   UniqueId;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CategoryId;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SequenceIdMin;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SequenceIdMax;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x002C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0034(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PointTags;                                         // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameBuddyPointItem) == 0x000008, "Wrong alignment on FSnfGameBuddyPointItem");
static_assert(sizeof(FSnfGameBuddyPointItem) == 0x000058, "Wrong size on FSnfGameBuddyPointItem");
static_assert(offsetof(FSnfGameBuddyPointItem, UniqueId) == 0x000008, "Member 'FSnfGameBuddyPointItem::UniqueId' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyPointItem, CategoryId) == 0x000010, "Member 'FSnfGameBuddyPointItem::CategoryId' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyPointItem, SequenceIdMin) == 0x000018, "Member 'FSnfGameBuddyPointItem::SequenceIdMin' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyPointItem, SequenceIdMax) == 0x00001C, "Member 'FSnfGameBuddyPointItem::SequenceIdMax' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyPointItem, Location) == 0x000020, "Member 'FSnfGameBuddyPointItem::Location' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyPointItem, Yaw) == 0x00002C, "Member 'FSnfGameBuddyPointItem::Yaw' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyPointItem, Radius) == 0x000030, "Member 'FSnfGameBuddyPointItem::Radius' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyPointItem, BoxExtent) == 0x000034, "Member 'FSnfGameBuddyPointItem::BoxExtent' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyPointItem, InTime) == 0x000040, "Member 'FSnfGameBuddyPointItem::InTime' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyPointItem, PointTags) == 0x000048, "Member 'FSnfGameBuddyPointItem::PointTags' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameBuddySearchPointInfo
// 0x0028 (0x0028 - 0x0000)
struct FSnfGameBuddySearchPointInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSnfGameBuddyPointItem>         Items;                                             // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameBuddySearchPointInfo) == 0x000008, "Wrong alignment on FSnfGameBuddySearchPointInfo");
static_assert(sizeof(FSnfGameBuddySearchPointInfo) == 0x000028, "Wrong size on FSnfGameBuddySearchPointInfo");
static_assert(offsetof(FSnfGameBuddySearchPointInfo, Items) == 0x000018, "Member 'FSnfGameBuddySearchPointInfo::Items' has a wrong offset!");

// ScriptStruct Snowfall.SnfLevelSequenceBindingInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FSnfLevelSequenceBindingInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfLevelSequenceBindingInfo) == 0x000004, "Wrong alignment on FSnfLevelSequenceBindingInfo");
static_assert(sizeof(FSnfLevelSequenceBindingInfo) == 0x000020, "Wrong size on FSnfLevelSequenceBindingInfo");

// ScriptStruct Snowfall.SnfGamePopupInfo
// 0x0028 (0x0028 - 0x0000)
struct FSnfGamePopupInfo final
{
public:
	ESnfGamePopupType                             Type;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                Class;                                             // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DrawName;                                          // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawMinimumTime;                                   // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMenu;                                            // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOnlyPopup;                                       // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayTime;                                         // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGamePopupInfo) == 0x000008, "Wrong alignment on FSnfGamePopupInfo");
static_assert(sizeof(FSnfGamePopupInfo) == 0x000028, "Wrong size on FSnfGamePopupInfo");
static_assert(offsetof(FSnfGamePopupInfo, Type) == 0x000000, "Member 'FSnfGamePopupInfo::Type' has a wrong offset!");
static_assert(offsetof(FSnfGamePopupInfo, Class) == 0x000008, "Member 'FSnfGamePopupInfo::Class' has a wrong offset!");
static_assert(offsetof(FSnfGamePopupInfo, DrawName) == 0x000010, "Member 'FSnfGamePopupInfo::DrawName' has a wrong offset!");
static_assert(offsetof(FSnfGamePopupInfo, DrawTime) == 0x000018, "Member 'FSnfGamePopupInfo::DrawTime' has a wrong offset!");
static_assert(offsetof(FSnfGamePopupInfo, DrawMinimumTime) == 0x00001C, "Member 'FSnfGamePopupInfo::DrawMinimumTime' has a wrong offset!");
static_assert(offsetof(FSnfGamePopupInfo, IsMenu) == 0x000020, "Member 'FSnfGamePopupInfo::IsMenu' has a wrong offset!");
static_assert(offsetof(FSnfGamePopupInfo, IsOnlyPopup) == 0x000021, "Member 'FSnfGamePopupInfo::IsOnlyPopup' has a wrong offset!");
static_assert(offsetof(FSnfGamePopupInfo, DelayTime) == 0x000024, "Member 'FSnfGamePopupInfo::DelayTime' has a wrong offset!");

// ScriptStruct Snowfall.PropsGimmickMeshSetting
// 0x0090 (0x0090 - 0x0000)
struct FPropsGimmickMeshSetting final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  Materials;                                         // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0060(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPropsGimmickMeshSetting) == 0x000010, "Wrong alignment on FPropsGimmickMeshSetting");
static_assert(sizeof(FPropsGimmickMeshSetting) == 0x000090, "Wrong size on FPropsGimmickMeshSetting");
static_assert(offsetof(FPropsGimmickMeshSetting, Mesh) == 0x000000, "Member 'FPropsGimmickMeshSetting::Mesh' has a wrong offset!");
static_assert(offsetof(FPropsGimmickMeshSetting, Materials) == 0x000008, "Member 'FPropsGimmickMeshSetting::Materials' has a wrong offset!");
static_assert(offsetof(FPropsGimmickMeshSetting, Transform) == 0x000060, "Member 'FPropsGimmickMeshSetting::Transform' has a wrong offset!");

// ScriptStruct Snowfall.SnfVehicleDoorAppearanceSetting
// 0x00D0 (0x00D0 - 0x0000)
struct FSnfVehicleDoorAppearanceSetting final
{
public:
	struct FTransform                             RootTransform;                                     // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             MovedTransform;                                    // 0x0030(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFlipHorizon;                                      // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            OverrideMesh;                                      // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  OverrideMaterial;                                  // 0x0070(0x0050)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FPropsGimmickMeshSetting>       AddProps;                                          // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfVehicleDoorAppearanceSetting) == 0x000010, "Wrong alignment on FSnfVehicleDoorAppearanceSetting");
static_assert(sizeof(FSnfVehicleDoorAppearanceSetting) == 0x0000D0, "Wrong size on FSnfVehicleDoorAppearanceSetting");
static_assert(offsetof(FSnfVehicleDoorAppearanceSetting, RootTransform) == 0x000000, "Member 'FSnfVehicleDoorAppearanceSetting::RootTransform' has a wrong offset!");
static_assert(offsetof(FSnfVehicleDoorAppearanceSetting, MovedTransform) == 0x000030, "Member 'FSnfVehicleDoorAppearanceSetting::MovedTransform' has a wrong offset!");
static_assert(offsetof(FSnfVehicleDoorAppearanceSetting, bFlipHorizon) == 0x000060, "Member 'FSnfVehicleDoorAppearanceSetting::bFlipHorizon' has a wrong offset!");
static_assert(offsetof(FSnfVehicleDoorAppearanceSetting, OverrideMesh) == 0x000068, "Member 'FSnfVehicleDoorAppearanceSetting::OverrideMesh' has a wrong offset!");
static_assert(offsetof(FSnfVehicleDoorAppearanceSetting, OverrideMaterial) == 0x000070, "Member 'FSnfVehicleDoorAppearanceSetting::OverrideMaterial' has a wrong offset!");
static_assert(offsetof(FSnfVehicleDoorAppearanceSetting, AddProps) == 0x0000C0, "Member 'FSnfVehicleDoorAppearanceSetting::AddProps' has a wrong offset!");

// ScriptStruct Snowfall.SnfIKSupportBoneSetting
// 0x0030 (0x0030 - 0x0000)
struct FSnfIKSupportBoneSetting final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceStartOffset;                                  // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceDirection;                                    // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EffectorOffset;                                    // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSweep;                                            // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfIKSupportBoneSetting) == 0x000004, "Wrong alignment on FSnfIKSupportBoneSetting");
static_assert(sizeof(FSnfIKSupportBoneSetting) == 0x000030, "Wrong size on FSnfIKSupportBoneSetting");
static_assert(offsetof(FSnfIKSupportBoneSetting, BoneName) == 0x000000, "Member 'FSnfIKSupportBoneSetting::BoneName' has a wrong offset!");
static_assert(offsetof(FSnfIKSupportBoneSetting, TraceStartOffset) == 0x000008, "Member 'FSnfIKSupportBoneSetting::TraceStartOffset' has a wrong offset!");
static_assert(offsetof(FSnfIKSupportBoneSetting, TraceDirection) == 0x000014, "Member 'FSnfIKSupportBoneSetting::TraceDirection' has a wrong offset!");
static_assert(offsetof(FSnfIKSupportBoneSetting, EffectorOffset) == 0x000020, "Member 'FSnfIKSupportBoneSetting::EffectorOffset' has a wrong offset!");
static_assert(offsetof(FSnfIKSupportBoneSetting, bSweep) == 0x00002C, "Member 'FSnfIKSupportBoneSetting::bSweep' has a wrong offset!");

// ScriptStruct Snowfall.SnfYureiPile
// 0x0010 (0x0010 - 0x0000)
struct FSnfYureiPile final
{
public:
	TArray<TSoftObjectPtr<class UStaticMesh>>     Meshes;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfYureiPile) == 0x000008, "Wrong alignment on FSnfYureiPile");
static_assert(sizeof(FSnfYureiPile) == 0x000010, "Wrong size on FSnfYureiPile");
static_assert(offsetof(FSnfYureiPile, Meshes) == 0x000000, "Member 'FSnfYureiPile::Meshes' has a wrong offset!");

// ScriptStruct Snowfall.SnfYureiRequestBaseAnim
// 0x0010 (0x0010 - 0x0000)
struct FSnfYureiRequestBaseAnim final
{
public:
	TArray<class FName>                           UniqueTalk;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfYureiRequestBaseAnim) == 0x000008, "Wrong alignment on FSnfYureiRequestBaseAnim");
static_assert(sizeof(FSnfYureiRequestBaseAnim) == 0x000010, "Wrong size on FSnfYureiRequestBaseAnim");
static_assert(offsetof(FSnfYureiRequestBaseAnim, UniqueTalk) == 0x000000, "Member 'FSnfYureiRequestBaseAnim::UniqueTalk' has a wrong offset!");

// ScriptStruct Snowfall.SnfYureiPileSet
// 0x00C0 (0x00C0 - 0x0000)
struct FSnfYureiPileSet final
{
public:
	TArray<class FName>                           InMusubiTypes;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSnfYureiPile>       Piles;                                             // 0x0010(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           BaseTalk;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<TSoftObjectPtr<class UAnimSequenceBase>, struct FSnfYureiRequestBaseAnim> RequestBaseAnims;                                  // 0x0070(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfYureiPileSet) == 0x000008, "Wrong alignment on FSnfYureiPileSet");
static_assert(sizeof(FSnfYureiPileSet) == 0x0000C0, "Wrong size on FSnfYureiPileSet");
static_assert(offsetof(FSnfYureiPileSet, InMusubiTypes) == 0x000000, "Member 'FSnfYureiPileSet::InMusubiTypes' has a wrong offset!");
static_assert(offsetof(FSnfYureiPileSet, Piles) == 0x000010, "Member 'FSnfYureiPileSet::Piles' has a wrong offset!");
static_assert(offsetof(FSnfYureiPileSet, BaseTalk) == 0x000060, "Member 'FSnfYureiPileSet::BaseTalk' has a wrong offset!");
static_assert(offsetof(FSnfYureiPileSet, RequestBaseAnims) == 0x000070, "Member 'FSnfYureiPileSet::RequestBaseAnims' has a wrong offset!");

// ScriptStruct Snowfall.SnfAIPerceptionNoiseData
// 0x0010 (0x0018 - 0x0008)
struct FSnfAIPerceptionNoiseData final : public FTableRowBase
{
public:
	float                                         MaxRange;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfAIPerceptionNoiseData) == 0x000008, "Wrong alignment on FSnfAIPerceptionNoiseData");
static_assert(sizeof(FSnfAIPerceptionNoiseData) == 0x000018, "Wrong size on FSnfAIPerceptionNoiseData");
static_assert(offsetof(FSnfAIPerceptionNoiseData, MaxRange) == 0x000008, "Member 'FSnfAIPerceptionNoiseData::MaxRange' has a wrong offset!");
static_assert(offsetof(FSnfAIPerceptionNoiseData, Tag) == 0x00000C, "Member 'FSnfAIPerceptionNoiseData::Tag' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameShopResult
// 0x0008 (0x0008 - 0x0000)
struct FSnfGameShopResult final
{
public:
	int32                                         TotalItem;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPoint;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameShopResult) == 0x000004, "Wrong alignment on FSnfGameShopResult");
static_assert(sizeof(FSnfGameShopResult) == 0x000008, "Wrong size on FSnfGameShopResult");
static_assert(offsetof(FSnfGameShopResult, TotalItem) == 0x000000, "Member 'FSnfGameShopResult::TotalItem' has a wrong offset!");
static_assert(offsetof(FSnfGameShopResult, TotalPoint) == 0x000004, "Member 'FSnfGameShopResult::TotalPoint' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameMapInfoItem
// 0x0160 (0x0168 - 0x0008)
struct FSnfGameMapInfoItem final : public FTableRowBase
{
public:
	class FName                                   FlagId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CatalogId;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Step;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfGameMarkerType                            Type;                                              // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NameTags;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameTags;                                          // 0x0058(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   ClassName;                                         // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PathName;                                          // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapName;                                           // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AreaName;                                          // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  Map;                                               // 0x0098(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  Actor;                                             // 0x00C0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           DynamicTags;                                       // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           TextList;                                          // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          CheckHideMarker;                                   // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsJobMarker;                                       // 0x0109(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHideMarker;                                      // 0x010A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDynamicMarker;                                   // 0x010B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInsideMarker;                                    // 0x010C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InsideLocation;                                    // 0x0110(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutsideLocation;                                   // 0x011C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  OwnerActor;                                        // 0x0128(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USceneComponent>         OwnerComponent;                                    // 0x0130(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x30];                                     // 0x0138(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGameMapInfoItem) == 0x000008, "Wrong alignment on FSnfGameMapInfoItem");
static_assert(sizeof(FSnfGameMapInfoItem) == 0x000168, "Wrong size on FSnfGameMapInfoItem");
static_assert(offsetof(FSnfGameMapInfoItem, FlagId) == 0x000008, "Member 'FSnfGameMapInfoItem::FlagId' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, CatalogId) == 0x000010, "Member 'FSnfGameMapInfoItem::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, Index) == 0x000018, "Member 'FSnfGameMapInfoItem::Index' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, Count) == 0x00001C, "Member 'FSnfGameMapInfoItem::Count' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, Step) == 0x000020, "Member 'FSnfGameMapInfoItem::Step' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, Type) == 0x000024, "Member 'FSnfGameMapInfoItem::Type' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, Location) == 0x000028, "Member 'FSnfGameMapInfoItem::Location' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, Rotation) == 0x000034, "Member 'FSnfGameMapInfoItem::Rotation' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, Yaw) == 0x000040, "Member 'FSnfGameMapInfoItem::Yaw' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, Size) == 0x000044, "Member 'FSnfGameMapInfoItem::Size' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, NameTags) == 0x000048, "Member 'FSnfGameMapInfoItem::NameTags' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, GameTags) == 0x000058, "Member 'FSnfGameMapInfoItem::GameTags' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, ClassName) == 0x000078, "Member 'FSnfGameMapInfoItem::ClassName' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, PathName) == 0x000080, "Member 'FSnfGameMapInfoItem::PathName' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, MapName) == 0x000088, "Member 'FSnfGameMapInfoItem::MapName' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, AreaName) == 0x000090, "Member 'FSnfGameMapInfoItem::AreaName' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, Map) == 0x000098, "Member 'FSnfGameMapInfoItem::Map' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, Actor) == 0x0000C0, "Member 'FSnfGameMapInfoItem::Actor' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, DynamicTags) == 0x0000E8, "Member 'FSnfGameMapInfoItem::DynamicTags' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, TextList) == 0x0000F8, "Member 'FSnfGameMapInfoItem::TextList' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, CheckHideMarker) == 0x000108, "Member 'FSnfGameMapInfoItem::CheckHideMarker' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, IsJobMarker) == 0x000109, "Member 'FSnfGameMapInfoItem::IsJobMarker' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, IsHideMarker) == 0x00010A, "Member 'FSnfGameMapInfoItem::IsHideMarker' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, IsDynamicMarker) == 0x00010B, "Member 'FSnfGameMapInfoItem::IsDynamicMarker' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, IsInsideMarker) == 0x00010C, "Member 'FSnfGameMapInfoItem::IsInsideMarker' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, InsideLocation) == 0x000110, "Member 'FSnfGameMapInfoItem::InsideLocation' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, OutsideLocation) == 0x00011C, "Member 'FSnfGameMapInfoItem::OutsideLocation' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, OwnerActor) == 0x000128, "Member 'FSnfGameMapInfoItem::OwnerActor' has a wrong offset!");
static_assert(offsetof(FSnfGameMapInfoItem, OwnerComponent) == 0x000130, "Member 'FSnfGameMapInfoItem::OwnerComponent' has a wrong offset!");

// ScriptStruct Snowfall.SnfControlInvokeActionRequest
// 0x0040 (0x0040 - 0x0000)
struct FSnfControlInvokeActionRequest final
{
public:
	TSoftObjectPtr<class AActor>                  TargetActorSoft;                                   // 0x0000(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfControlInvokeActionRequest) == 0x000008, "Wrong alignment on FSnfControlInvokeActionRequest");
static_assert(sizeof(FSnfControlInvokeActionRequest) == 0x000040, "Wrong size on FSnfControlInvokeActionRequest");
static_assert(offsetof(FSnfControlInvokeActionRequest, TargetActorSoft) == 0x000000, "Member 'FSnfControlInvokeActionRequest::TargetActorSoft' has a wrong offset!");

// ScriptStruct Snowfall.SnfActorAction
// 0x0010 (0x0010 - 0x0000)
struct FSnfActorAction final
{
public:
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfActorAction) == 0x000004, "Wrong alignment on FSnfActorAction");
static_assert(sizeof(FSnfActorAction) == 0x000010, "Wrong size on FSnfActorAction");
static_assert(offsetof(FSnfActorAction, TargetActor) == 0x000000, "Member 'FSnfActorAction::TargetActor' has a wrong offset!");
static_assert(offsetof(FSnfActorAction, ActionName) == 0x000008, "Member 'FSnfActorAction::ActionName' has a wrong offset!");

// ScriptStruct Snowfall.SnfActionTagParam
// 0x0020 (0x0020 - 0x0000)
struct FSnfActionTagParam final
{
public:
	class AActor*                                 ActorParam;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VectorParam;                                       // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatParam;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntParam;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfActionTagParam) == 0x000008, "Wrong alignment on FSnfActionTagParam");
static_assert(sizeof(FSnfActionTagParam) == 0x000020, "Wrong size on FSnfActionTagParam");
static_assert(offsetof(FSnfActionTagParam, ActorParam) == 0x000000, "Member 'FSnfActionTagParam::ActorParam' has a wrong offset!");
static_assert(offsetof(FSnfActionTagParam, VectorParam) == 0x000008, "Member 'FSnfActionTagParam::VectorParam' has a wrong offset!");
static_assert(offsetof(FSnfActionTagParam, FloatParam) == 0x000014, "Member 'FSnfActionTagParam::FloatParam' has a wrong offset!");
static_assert(offsetof(FSnfActionTagParam, IntParam) == 0x000018, "Member 'FSnfActionTagParam::IntParam' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogCityGraffiti
// 0x0028 (0x0148 - 0x0120)
struct FSnfCatalogCityGraffiti final : public FSnfCatalogItem
{
public:
	class FName                                   RewardId;                                          // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           CameraStampCatalogIdList;                          // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           CameraFrameCatalogIdList;                          // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCatalogCityGraffiti) == 0x000008, "Wrong alignment on FSnfCatalogCityGraffiti");
static_assert(sizeof(FSnfCatalogCityGraffiti) == 0x000148, "Wrong size on FSnfCatalogCityGraffiti");
static_assert(offsetof(FSnfCatalogCityGraffiti, RewardId) == 0x000120, "Member 'FSnfCatalogCityGraffiti::RewardId' has a wrong offset!");
static_assert(offsetof(FSnfCatalogCityGraffiti, CameraStampCatalogIdList) == 0x000128, "Member 'FSnfCatalogCityGraffiti::CameraStampCatalogIdList' has a wrong offset!");
static_assert(offsetof(FSnfCatalogCityGraffiti, CameraFrameCatalogIdList) == 0x000138, "Member 'FSnfCatalogCityGraffiti::CameraFrameCatalogIdList' has a wrong offset!");

// ScriptStruct Snowfall.SnfYokaiRokurokubiTalkSetting
// 0x0038 (0x0038 - 0x0000)
struct FSnfYokaiRokurokubiTalkSetting final
{
public:
	class FName                                   Talk_Found;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Talk_ArrivalList;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   Talk_Success;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Talk_Faild;                                        // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Talk_WarningList;                                  // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfYokaiRokurokubiTalkSetting) == 0x000008, "Wrong alignment on FSnfYokaiRokurokubiTalkSetting");
static_assert(sizeof(FSnfYokaiRokurokubiTalkSetting) == 0x000038, "Wrong size on FSnfYokaiRokurokubiTalkSetting");
static_assert(offsetof(FSnfYokaiRokurokubiTalkSetting, Talk_Found) == 0x000000, "Member 'FSnfYokaiRokurokubiTalkSetting::Talk_Found' has a wrong offset!");
static_assert(offsetof(FSnfYokaiRokurokubiTalkSetting, Talk_ArrivalList) == 0x000008, "Member 'FSnfYokaiRokurokubiTalkSetting::Talk_ArrivalList' has a wrong offset!");
static_assert(offsetof(FSnfYokaiRokurokubiTalkSetting, Talk_Success) == 0x000018, "Member 'FSnfYokaiRokurokubiTalkSetting::Talk_Success' has a wrong offset!");
static_assert(offsetof(FSnfYokaiRokurokubiTalkSetting, Talk_Faild) == 0x000020, "Member 'FSnfYokaiRokurokubiTalkSetting::Talk_Faild' has a wrong offset!");
static_assert(offsetof(FSnfYokaiRokurokubiTalkSetting, Talk_WarningList) == 0x000028, "Member 'FSnfYokaiRokurokubiTalkSetting::Talk_WarningList' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessFloorReport
// 0x0044 (0x0044 - 0x0000)
struct alignas(0x04) FSnfEndlessFloorReport final
{
public:
	uint8                                         Pad_0[0x44];                                       // 0x0000(0x0044)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfEndlessFloorReport) == 0x000004, "Wrong alignment on FSnfEndlessFloorReport");
static_assert(sizeof(FSnfEndlessFloorReport) == 0x000044, "Wrong size on FSnfEndlessFloorReport");

// ScriptStruct Snowfall.SnfYokaiRokurokubiTimingTalkSetting
// 0x0020 (0x0020 - 0x0000)
struct FSnfYokaiRokurokubiTimingTalkSetting final
{
public:
	int32                                         EscapeRokurokubiListIndex;                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkID;                                            // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfYokaiRokurokubiTalkTiming                 TalkTiming;                                        // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ASnfCheckGotoActor*                     CheckGoto;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfYokaiRokurokubiTimingTalkSetting) == 0x000008, "Wrong alignment on FSnfYokaiRokurokubiTimingTalkSetting");
static_assert(sizeof(FSnfYokaiRokurokubiTimingTalkSetting) == 0x000020, "Wrong size on FSnfYokaiRokurokubiTimingTalkSetting");
static_assert(offsetof(FSnfYokaiRokurokubiTimingTalkSetting, EscapeRokurokubiListIndex) == 0x000000, "Member 'FSnfYokaiRokurokubiTimingTalkSetting::EscapeRokurokubiListIndex' has a wrong offset!");
static_assert(offsetof(FSnfYokaiRokurokubiTimingTalkSetting, TalkID) == 0x000004, "Member 'FSnfYokaiRokurokubiTimingTalkSetting::TalkID' has a wrong offset!");
static_assert(offsetof(FSnfYokaiRokurokubiTimingTalkSetting, TalkTiming) == 0x00000C, "Member 'FSnfYokaiRokurokubiTimingTalkSetting::TalkTiming' has a wrong offset!");
static_assert(offsetof(FSnfYokaiRokurokubiTimingTalkSetting, CheckGoto) == 0x000010, "Member 'FSnfYokaiRokurokubiTimingTalkSetting::CheckGoto' has a wrong offset!");

// ScriptStruct Snowfall.SnfDebugSetupActivityFlag
// 0x0048 (0x0048 - 0x0000)
struct FSnfDebugSetupActivityFlag final
{
public:
	TSoftObjectPtr<class UDataTable>              Table;                                             // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CatalogId;                                         // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetClear;                                          // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetPlay;                                           // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 StepList;                                          // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDebugSetupActivityFlag) == 0x000008, "Wrong alignment on FSnfDebugSetupActivityFlag");
static_assert(sizeof(FSnfDebugSetupActivityFlag) == 0x000048, "Wrong size on FSnfDebugSetupActivityFlag");
static_assert(offsetof(FSnfDebugSetupActivityFlag, Table) == 0x000000, "Member 'FSnfDebugSetupActivityFlag::Table' has a wrong offset!");
static_assert(offsetof(FSnfDebugSetupActivityFlag, CatalogId) == 0x000028, "Member 'FSnfDebugSetupActivityFlag::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfDebugSetupActivityFlag, SetClear) == 0x000030, "Member 'FSnfDebugSetupActivityFlag::SetClear' has a wrong offset!");
static_assert(offsetof(FSnfDebugSetupActivityFlag, SetPlay) == 0x000031, "Member 'FSnfDebugSetupActivityFlag::SetPlay' has a wrong offset!");
static_assert(offsetof(FSnfDebugSetupActivityFlag, StepList) == 0x000038, "Member 'FSnfDebugSetupActivityFlag::StepList' has a wrong offset!");

// ScriptStruct Snowfall.SnfDebugSetupItem
// 0x0118 (0x0120 - 0x0008)
struct FSnfDebugSetupItem final : public FTableRowBase
{
public:
	bool                                          IsTeleport;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FacadeName;                                        // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TeleportTo;                                        // 0x0020(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Sequence;                                          // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayerParamater;                                   // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ESnfPlayerFlag, bool>                    PlayerFlag;                                        // 0x0060(0x0050)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FSnfDebugSetupActivityFlag>     ActList;                                           // 0x00B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActivityClearNameList;                             // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ArchiveClearNameList;                              // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           QuestOpenNameList;                                 // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTngInventoryGroup                     AddInventory;                                      // 0x00F0(0x0010)(Edit, NativeAccessSpecifierPublic)
	bool                                          IsFacadeLocation;                                  // 0x0100(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLevelJump;                                       // 0x0101(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LevelName;                                         // 0x0104(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartName;                                         // 0x010C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0xC];                                      // 0x0114(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfDebugSetupItem) == 0x000010, "Wrong alignment on FSnfDebugSetupItem");
static_assert(sizeof(FSnfDebugSetupItem) == 0x000120, "Wrong size on FSnfDebugSetupItem");
static_assert(offsetof(FSnfDebugSetupItem, IsTeleport) == 0x000008, "Member 'FSnfDebugSetupItem::IsTeleport' has a wrong offset!");
static_assert(offsetof(FSnfDebugSetupItem, FacadeName) == 0x00000C, "Member 'FSnfDebugSetupItem::FacadeName' has a wrong offset!");
static_assert(offsetof(FSnfDebugSetupItem, TeleportTo) == 0x000020, "Member 'FSnfDebugSetupItem::TeleportTo' has a wrong offset!");
static_assert(offsetof(FSnfDebugSetupItem, Sequence) == 0x000050, "Member 'FSnfDebugSetupItem::Sequence' has a wrong offset!");
static_assert(offsetof(FSnfDebugSetupItem, PlayerParamater) == 0x000054, "Member 'FSnfDebugSetupItem::PlayerParamater' has a wrong offset!");
static_assert(offsetof(FSnfDebugSetupItem, PlayerFlag) == 0x000060, "Member 'FSnfDebugSetupItem::PlayerFlag' has a wrong offset!");
static_assert(offsetof(FSnfDebugSetupItem, ActList) == 0x0000B0, "Member 'FSnfDebugSetupItem::ActList' has a wrong offset!");
static_assert(offsetof(FSnfDebugSetupItem, ActivityClearNameList) == 0x0000C0, "Member 'FSnfDebugSetupItem::ActivityClearNameList' has a wrong offset!");
static_assert(offsetof(FSnfDebugSetupItem, ArchiveClearNameList) == 0x0000D0, "Member 'FSnfDebugSetupItem::ArchiveClearNameList' has a wrong offset!");
static_assert(offsetof(FSnfDebugSetupItem, QuestOpenNameList) == 0x0000E0, "Member 'FSnfDebugSetupItem::QuestOpenNameList' has a wrong offset!");
static_assert(offsetof(FSnfDebugSetupItem, AddInventory) == 0x0000F0, "Member 'FSnfDebugSetupItem::AddInventory' has a wrong offset!");
static_assert(offsetof(FSnfDebugSetupItem, IsFacadeLocation) == 0x000100, "Member 'FSnfDebugSetupItem::IsFacadeLocation' has a wrong offset!");
static_assert(offsetof(FSnfDebugSetupItem, IsLevelJump) == 0x000101, "Member 'FSnfDebugSetupItem::IsLevelJump' has a wrong offset!");
static_assert(offsetof(FSnfDebugSetupItem, LevelName) == 0x000104, "Member 'FSnfDebugSetupItem::LevelName' has a wrong offset!");
static_assert(offsetof(FSnfDebugSetupItem, StartName) == 0x00010C, "Member 'FSnfDebugSetupItem::StartName' has a wrong offset!");

// ScriptStruct Snowfall.SnfAmmoInformation
// 0x0030 (0x0030 - 0x0000)
struct FSnfAmmoInformation final
{
public:
	class FName                                   CatalogId;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfSkillParam                                UseReferenceParam;                                 // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTngInventoryItem>              CraftList;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAmmoInformation) == 0x000008, "Wrong alignment on FSnfAmmoInformation");
static_assert(sizeof(FSnfAmmoInformation) == 0x000030, "Wrong size on FSnfAmmoInformation");
static_assert(offsetof(FSnfAmmoInformation, CatalogId) == 0x000000, "Member 'FSnfAmmoInformation::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfAmmoInformation, UseReferenceParam) == 0x000008, "Member 'FSnfAmmoInformation::UseReferenceParam' has a wrong offset!");
static_assert(offsetof(FSnfAmmoInformation, CraftList) == 0x000010, "Member 'FSnfAmmoInformation::CraftList' has a wrong offset!");
static_assert(offsetof(FSnfAmmoInformation, Tags) == 0x000020, "Member 'FSnfAmmoInformation::Tags' has a wrong offset!");

// ScriptStruct Snowfall.SnfYokaiRokurokubiMosionSetting
// 0x0060 (0x0060 - 0x0000)
struct FSnfYokaiRokurokubiMosionSetting final
{
public:
	TSoftObjectPtr<class UAnimSequenceBase>       RequestBaseAnim;                                   // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBlendSpace>             EscapeAnim;                                        // 0x0028(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USnfJobConfig*>                  JobConfigs;                                        // 0x0050(0x0010)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfYokaiRokurokubiMosionSetting) == 0x000008, "Wrong alignment on FSnfYokaiRokurokubiMosionSetting");
static_assert(sizeof(FSnfYokaiRokurokubiMosionSetting) == 0x000060, "Wrong size on FSnfYokaiRokurokubiMosionSetting");
static_assert(offsetof(FSnfYokaiRokurokubiMosionSetting, RequestBaseAnim) == 0x000000, "Member 'FSnfYokaiRokurokubiMosionSetting::RequestBaseAnim' has a wrong offset!");
static_assert(offsetof(FSnfYokaiRokurokubiMosionSetting, EscapeAnim) == 0x000028, "Member 'FSnfYokaiRokurokubiMosionSetting::EscapeAnim' has a wrong offset!");
static_assert(offsetof(FSnfYokaiRokurokubiMosionSetting, JobConfigs) == 0x000050, "Member 'FSnfYokaiRokurokubiMosionSetting::JobConfigs' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogShrineYureiSetting
// 0x0010 (0x0010 - 0x0000)
struct FSnfCatalogShrineYureiSetting final
{
public:
	int32                                         SetValue;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetRand;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCatalogShrineYureiSetting) == 0x000004, "Wrong alignment on FSnfCatalogShrineYureiSetting");
static_assert(sizeof(FSnfCatalogShrineYureiSetting) == 0x000010, "Wrong size on FSnfCatalogShrineYureiSetting");
static_assert(offsetof(FSnfCatalogShrineYureiSetting, SetValue) == 0x000000, "Member 'FSnfCatalogShrineYureiSetting::SetValue' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrineYureiSetting, SetRand) == 0x000004, "Member 'FSnfCatalogShrineYureiSetting::SetRand' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrineYureiSetting, Total) == 0x000008, "Member 'FSnfCatalogShrineYureiSetting::Total' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrineYureiSetting, Count) == 0x00000C, "Member 'FSnfCatalogShrineYureiSetting::Count' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogShrineWorldSetting
// 0x0058 (0x0058 - 0x0000)
struct FSnfCatalogShrineWorldSetting final
{
public:
	int32                                         Total;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSnfCatalogShrineYureiSetting> YureiList;                                         // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCatalogShrineWorldSetting) == 0x000008, "Wrong alignment on FSnfCatalogShrineWorldSetting");
static_assert(sizeof(FSnfCatalogShrineWorldSetting) == 0x000058, "Wrong size on FSnfCatalogShrineWorldSetting");
static_assert(offsetof(FSnfCatalogShrineWorldSetting, Total) == 0x000000, "Member 'FSnfCatalogShrineWorldSetting::Total' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrineWorldSetting, Count) == 0x000004, "Member 'FSnfCatalogShrineWorldSetting::Count' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrineWorldSetting, YureiList) == 0x000008, "Member 'FSnfCatalogShrineWorldSetting::YureiList' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogShrineSetting
// 0x0058 (0x0058 - 0x0000)
struct FSnfCatalogShrineSetting final
{
public:
	int32                                         Total;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSnfCatalogShrineWorldSetting> WorldList;                                         // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCatalogShrineSetting) == 0x000008, "Wrong alignment on FSnfCatalogShrineSetting");
static_assert(sizeof(FSnfCatalogShrineSetting) == 0x000058, "Wrong size on FSnfCatalogShrineSetting");
static_assert(offsetof(FSnfCatalogShrineSetting, Total) == 0x000000, "Member 'FSnfCatalogShrineSetting::Total' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrineSetting, Count) == 0x000004, "Member 'FSnfCatalogShrineSetting::Count' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrineSetting, WorldList) == 0x000008, "Member 'FSnfCatalogShrineSetting::WorldList' has a wrong offset!");

// ScriptStruct Snowfall.SnfNpcPerceptionResult
// 0x000C (0x000C - 0x0000)
struct FSnfNpcPerceptionResult final
{
public:
	bool                                          IsInSightRadius;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOutSightRadius;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInSightForward;                                  // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInHearingRadius;                                 // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInTakeRadius;                                    // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInTouchRadius;                                   // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Detection;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfNpcPerceptionResult) == 0x000004, "Wrong alignment on FSnfNpcPerceptionResult");
static_assert(sizeof(FSnfNpcPerceptionResult) == 0x00000C, "Wrong size on FSnfNpcPerceptionResult");
static_assert(offsetof(FSnfNpcPerceptionResult, IsInSightRadius) == 0x000000, "Member 'FSnfNpcPerceptionResult::IsInSightRadius' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerceptionResult, IsOutSightRadius) == 0x000001, "Member 'FSnfNpcPerceptionResult::IsOutSightRadius' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerceptionResult, IsInSightForward) == 0x000002, "Member 'FSnfNpcPerceptionResult::IsInSightForward' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerceptionResult, IsInHearingRadius) == 0x000003, "Member 'FSnfNpcPerceptionResult::IsInHearingRadius' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerceptionResult, IsInTakeRadius) == 0x000004, "Member 'FSnfNpcPerceptionResult::IsInTakeRadius' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerceptionResult, IsInTouchRadius) == 0x000005, "Member 'FSnfNpcPerceptionResult::IsInTouchRadius' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerceptionResult, Detection) == 0x000008, "Member 'FSnfNpcPerceptionResult::Detection' has a wrong offset!");

// ScriptStruct Snowfall.SnfActivityYokai_IttanmomenWaitSetting
// 0x001C (0x001C - 0x0000)
struct FSnfActivityYokai_IttanmomenWaitSetting final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfYokaiIttanmomenWaitType                   WaitType;                                          // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkID;                                            // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PathActionTag;                                     // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfActivityYokai_IttanmomenWaitSetting) == 0x000004, "Wrong alignment on FSnfActivityYokai_IttanmomenWaitSetting");
static_assert(sizeof(FSnfActivityYokai_IttanmomenWaitSetting) == 0x00001C, "Wrong size on FSnfActivityYokai_IttanmomenWaitSetting");
static_assert(offsetof(FSnfActivityYokai_IttanmomenWaitSetting, Distance) == 0x000000, "Member 'FSnfActivityYokai_IttanmomenWaitSetting::Distance' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_IttanmomenWaitSetting, WaitType) == 0x000004, "Member 'FSnfActivityYokai_IttanmomenWaitSetting::WaitType' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_IttanmomenWaitSetting, Value) == 0x000008, "Member 'FSnfActivityYokai_IttanmomenWaitSetting::Value' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_IttanmomenWaitSetting, TalkID) == 0x00000C, "Member 'FSnfActivityYokai_IttanmomenWaitSetting::TalkID' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_IttanmomenWaitSetting, PathActionTag) == 0x000014, "Member 'FSnfActivityYokai_IttanmomenWaitSetting::PathActionTag' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogCollection
// 0x0130 (0x0250 - 0x0120)
struct FSnfCatalogCollection final : public FSnfCatalogItem
{
public:
	TSoftObjectPtr<class UStaticMesh>             StaticMesh;                                        // 0x0120(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMesh;                                      // 0x0148(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          GetAudioEvent;                                     // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetMaster;                                      // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TargetList;                                        // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           OpenList;                                          // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   CharacterId;                                       // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WithOpenArchive;                                   // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   HintText;                                          // 0x01B0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         RewardMoney;                                       // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             DatabaseLocalTransform;                            // 0x01D0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                DatabaseLocalRotateCenterOffset;                   // 0x0200(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MarkLocation;                                      // 0x020C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MarkSize;                                          // 0x0218(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class AActor>                  MarkActor;                                         // 0x0228(0x0028)(Edit, BlueprintVisible, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCatalogCollection) == 0x000010, "Wrong alignment on FSnfCatalogCollection");
static_assert(sizeof(FSnfCatalogCollection) == 0x000250, "Wrong size on FSnfCatalogCollection");
static_assert(offsetof(FSnfCatalogCollection, StaticMesh) == 0x000120, "Member 'FSnfCatalogCollection::StaticMesh' has a wrong offset!");
static_assert(offsetof(FSnfCatalogCollection, SkeletalMesh) == 0x000148, "Member 'FSnfCatalogCollection::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FSnfCatalogCollection, GetAudioEvent) == 0x000170, "Member 'FSnfCatalogCollection::GetAudioEvent' has a wrong offset!");
static_assert(offsetof(FSnfCatalogCollection, TargetMaster) == 0x000178, "Member 'FSnfCatalogCollection::TargetMaster' has a wrong offset!");
static_assert(offsetof(FSnfCatalogCollection, TargetList) == 0x000180, "Member 'FSnfCatalogCollection::TargetList' has a wrong offset!");
static_assert(offsetof(FSnfCatalogCollection, OpenList) == 0x000190, "Member 'FSnfCatalogCollection::OpenList' has a wrong offset!");
static_assert(offsetof(FSnfCatalogCollection, CharacterId) == 0x0001A0, "Member 'FSnfCatalogCollection::CharacterId' has a wrong offset!");
static_assert(offsetof(FSnfCatalogCollection, WithOpenArchive) == 0x0001A8, "Member 'FSnfCatalogCollection::WithOpenArchive' has a wrong offset!");
static_assert(offsetof(FSnfCatalogCollection, HintText) == 0x0001B0, "Member 'FSnfCatalogCollection::HintText' has a wrong offset!");
static_assert(offsetof(FSnfCatalogCollection, RewardMoney) == 0x0001C8, "Member 'FSnfCatalogCollection::RewardMoney' has a wrong offset!");
static_assert(offsetof(FSnfCatalogCollection, DatabaseLocalTransform) == 0x0001D0, "Member 'FSnfCatalogCollection::DatabaseLocalTransform' has a wrong offset!");
static_assert(offsetof(FSnfCatalogCollection, DatabaseLocalRotateCenterOffset) == 0x000200, "Member 'FSnfCatalogCollection::DatabaseLocalRotateCenterOffset' has a wrong offset!");
static_assert(offsetof(FSnfCatalogCollection, MarkLocation) == 0x00020C, "Member 'FSnfCatalogCollection::MarkLocation' has a wrong offset!");
static_assert(offsetof(FSnfCatalogCollection, MarkSize) == 0x000218, "Member 'FSnfCatalogCollection::MarkSize' has a wrong offset!");
static_assert(offsetof(FSnfCatalogCollection, MarkActor) == 0x000228, "Member 'FSnfCatalogCollection::MarkActor' has a wrong offset!");

// ScriptStruct Snowfall.SnfActivityYokai_IttanmomenTalkInfo
// 0x0030 (0x0030 - 0x0000)
struct FSnfActivityYokai_IttanmomenTalkInfo final
{
public:
	class FName                                   Talk_Found;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Talk_Found2;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Talk_StopList;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   Talk_Seccess;                                      // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Talk_Faild;                                        // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfActivityYokai_IttanmomenTalkInfo) == 0x000008, "Wrong alignment on FSnfActivityYokai_IttanmomenTalkInfo");
static_assert(sizeof(FSnfActivityYokai_IttanmomenTalkInfo) == 0x000030, "Wrong size on FSnfActivityYokai_IttanmomenTalkInfo");
static_assert(offsetof(FSnfActivityYokai_IttanmomenTalkInfo, Talk_Found) == 0x000000, "Member 'FSnfActivityYokai_IttanmomenTalkInfo::Talk_Found' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_IttanmomenTalkInfo, Talk_Found2) == 0x000008, "Member 'FSnfActivityYokai_IttanmomenTalkInfo::Talk_Found2' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_IttanmomenTalkInfo, Talk_StopList) == 0x000010, "Member 'FSnfActivityYokai_IttanmomenTalkInfo::Talk_StopList' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_IttanmomenTalkInfo, Talk_Seccess) == 0x000020, "Member 'FSnfActivityYokai_IttanmomenTalkInfo::Talk_Seccess' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_IttanmomenTalkInfo, Talk_Faild) == 0x000028, "Member 'FSnfActivityYokai_IttanmomenTalkInfo::Talk_Faild' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessTaskStatus
// 0x0028 (0x0028 - 0x0000)
struct FSnfEndlessTaskStatus final
{
public:
	ESnfEndlessTaskStatusType                     Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StatsParam;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TaskParam;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TargetText;                                        // 0x0010(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessTaskStatus) == 0x000008, "Wrong alignment on FSnfEndlessTaskStatus");
static_assert(sizeof(FSnfEndlessTaskStatus) == 0x000028, "Wrong size on FSnfEndlessTaskStatus");
static_assert(offsetof(FSnfEndlessTaskStatus, Type) == 0x000000, "Member 'FSnfEndlessTaskStatus::Type' has a wrong offset!");
static_assert(offsetof(FSnfEndlessTaskStatus, StatsParam) == 0x000004, "Member 'FSnfEndlessTaskStatus::StatsParam' has a wrong offset!");
static_assert(offsetof(FSnfEndlessTaskStatus, TaskParam) == 0x000008, "Member 'FSnfEndlessTaskStatus::TaskParam' has a wrong offset!");
static_assert(offsetof(FSnfEndlessTaskStatus, TargetText) == 0x000010, "Member 'FSnfEndlessTaskStatus::TargetText' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponHandSpectrumComboInfomation
// 0x001C (0x001C - 0x0000)
struct FSnfWeaponHandSpectrumComboInfomation final
{
public:
	struct FVector                                LaunchOffset;                                      // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LaunchRotator;                                     // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponHandSpectrumComboInfomation) == 0x000004, "Wrong alignment on FSnfWeaponHandSpectrumComboInfomation");
static_assert(sizeof(FSnfWeaponHandSpectrumComboInfomation) == 0x00001C, "Wrong size on FSnfWeaponHandSpectrumComboInfomation");
static_assert(offsetof(FSnfWeaponHandSpectrumComboInfomation, LaunchOffset) == 0x000000, "Member 'FSnfWeaponHandSpectrumComboInfomation::LaunchOffset' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumComboInfomation, LaunchRotator) == 0x00000C, "Member 'FSnfWeaponHandSpectrumComboInfomation::LaunchRotator' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumComboInfomation, SpeedScale) == 0x000018, "Member 'FSnfWeaponHandSpectrumComboInfomation::SpeedScale' has a wrong offset!");

// ScriptStruct Snowfall.SnfActivityYokai_KamaitachiWaitSetting
// 0x001C (0x001C - 0x0000)
struct FSnfActivityYokai_KamaitachiWaitSetting final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfYokaiKamaitachiWaitType                   WaitType;                                          // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkID;                                            // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PathActionTag;                                     // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfActivityYokai_KamaitachiWaitSetting) == 0x000004, "Wrong alignment on FSnfActivityYokai_KamaitachiWaitSetting");
static_assert(sizeof(FSnfActivityYokai_KamaitachiWaitSetting) == 0x00001C, "Wrong size on FSnfActivityYokai_KamaitachiWaitSetting");
static_assert(offsetof(FSnfActivityYokai_KamaitachiWaitSetting, Distance) == 0x000000, "Member 'FSnfActivityYokai_KamaitachiWaitSetting::Distance' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_KamaitachiWaitSetting, WaitType) == 0x000004, "Member 'FSnfActivityYokai_KamaitachiWaitSetting::WaitType' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_KamaitachiWaitSetting, Value) == 0x000008, "Member 'FSnfActivityYokai_KamaitachiWaitSetting::Value' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_KamaitachiWaitSetting, TalkID) == 0x00000C, "Member 'FSnfActivityYokai_KamaitachiWaitSetting::TalkID' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_KamaitachiWaitSetting, PathActionTag) == 0x000014, "Member 'FSnfActivityYokai_KamaitachiWaitSetting::PathActionTag' has a wrong offset!");

// ScriptStruct Snowfall.SnfCrowdAgentSpawnClass
// 0x0010 (0x0010 - 0x0000)
struct FSnfCrowdAgentSpawnClass final
{
public:
	TSubclassOf<class ASnfCrowdActor>             ClassType;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChanceToSpawn;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCrowdAgentSpawnClass) == 0x000008, "Wrong alignment on FSnfCrowdAgentSpawnClass");
static_assert(sizeof(FSnfCrowdAgentSpawnClass) == 0x000010, "Wrong size on FSnfCrowdAgentSpawnClass");
static_assert(offsetof(FSnfCrowdAgentSpawnClass, ClassType) == 0x000000, "Member 'FSnfCrowdAgentSpawnClass::ClassType' has a wrong offset!");
static_assert(offsetof(FSnfCrowdAgentSpawnClass, ChanceToSpawn) == 0x000008, "Member 'FSnfCrowdAgentSpawnClass::ChanceToSpawn' has a wrong offset!");

// ScriptStruct Snowfall.SnfCrowdAgentDirRange
// 0x0008 (0x0008 - 0x0000)
struct FSnfCrowdAgentDirRange final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MAX;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCrowdAgentDirRange) == 0x000004, "Wrong alignment on FSnfCrowdAgentDirRange");
static_assert(sizeof(FSnfCrowdAgentDirRange) == 0x000008, "Wrong size on FSnfCrowdAgentDirRange");
static_assert(offsetof(FSnfCrowdAgentDirRange, Min) == 0x000000, "Member 'FSnfCrowdAgentDirRange::Min' has a wrong offset!");
static_assert(offsetof(FSnfCrowdAgentDirRange, MAX) == 0x000004, "Member 'FSnfCrowdAgentDirRange::MAX' has a wrong offset!");

// ScriptStruct Snowfall.SnfCrowdAgentSpawnParam
// 0x0028 (0x0028 - 0x0000)
struct FSnfCrowdAgentSpawnParam final
{
public:
	TArray<struct FSnfCrowdAgentSpawnClass>       SpawnClassTable;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfCrowdAgentDirRange>         FaceDirection;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SpawnCount;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnActorCollisionHandlingMethod            SpawnMethod;                                       // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCrowdAgentSpawnParam) == 0x000008, "Wrong alignment on FSnfCrowdAgentSpawnParam");
static_assert(sizeof(FSnfCrowdAgentSpawnParam) == 0x000028, "Wrong size on FSnfCrowdAgentSpawnParam");
static_assert(offsetof(FSnfCrowdAgentSpawnParam, SpawnClassTable) == 0x000000, "Member 'FSnfCrowdAgentSpawnParam::SpawnClassTable' has a wrong offset!");
static_assert(offsetof(FSnfCrowdAgentSpawnParam, FaceDirection) == 0x000010, "Member 'FSnfCrowdAgentSpawnParam::FaceDirection' has a wrong offset!");
static_assert(offsetof(FSnfCrowdAgentSpawnParam, SpawnCount) == 0x000020, "Member 'FSnfCrowdAgentSpawnParam::SpawnCount' has a wrong offset!");
static_assert(offsetof(FSnfCrowdAgentSpawnParam, SpawnMethod) == 0x000024, "Member 'FSnfCrowdAgentSpawnParam::SpawnMethod' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogPSNActivityProgress
// 0x0040 (0x0048 - 0x0008)
struct FSnfCatalogPSNActivityProgress final : public FTableRowBase
{
public:
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfPSNActivityType                           Type;                                              // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParentPSNActivityId;                               // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RootPSNActivityId;                                 // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AvailableGameIntentLevelNames;                     // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SuspendGameSequence;                               // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Attribute;                                         // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCatalogPSNActivityProgress) == 0x000008, "Wrong alignment on FSnfCatalogPSNActivityProgress");
static_assert(sizeof(FSnfCatalogPSNActivityProgress) == 0x000048, "Wrong size on FSnfCatalogPSNActivityProgress");
static_assert(offsetof(FSnfCatalogPSNActivityProgress, Comment) == 0x000008, "Member 'FSnfCatalogPSNActivityProgress::Comment' has a wrong offset!");
static_assert(offsetof(FSnfCatalogPSNActivityProgress, Type) == 0x000018, "Member 'FSnfCatalogPSNActivityProgress::Type' has a wrong offset!");
static_assert(offsetof(FSnfCatalogPSNActivityProgress, ParentPSNActivityId) == 0x00001C, "Member 'FSnfCatalogPSNActivityProgress::ParentPSNActivityId' has a wrong offset!");
static_assert(offsetof(FSnfCatalogPSNActivityProgress, RootPSNActivityId) == 0x000024, "Member 'FSnfCatalogPSNActivityProgress::RootPSNActivityId' has a wrong offset!");
static_assert(offsetof(FSnfCatalogPSNActivityProgress, AvailableGameIntentLevelNames) == 0x000030, "Member 'FSnfCatalogPSNActivityProgress::AvailableGameIntentLevelNames' has a wrong offset!");
static_assert(offsetof(FSnfCatalogPSNActivityProgress, SuspendGameSequence) == 0x000040, "Member 'FSnfCatalogPSNActivityProgress::SuspendGameSequence' has a wrong offset!");
static_assert(offsetof(FSnfCatalogPSNActivityProgress, Attribute) == 0x000044, "Member 'FSnfCatalogPSNActivityProgress::Attribute' has a wrong offset!");

// ScriptStruct Snowfall.SnfActivityYokai_OniAction
// 0x0010 (0x0010 - 0x0000)
struct FSnfActivityYokai_OniAction final
{
public:
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfActivityYokai_OniAction) == 0x000004, "Wrong alignment on FSnfActivityYokai_OniAction");
static_assert(sizeof(FSnfActivityYokai_OniAction) == 0x000010, "Wrong size on FSnfActivityYokai_OniAction");
static_assert(offsetof(FSnfActivityYokai_OniAction, TargetActor) == 0x000000, "Member 'FSnfActivityYokai_OniAction::TargetActor' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_OniAction, ActionName) == 0x000008, "Member 'FSnfActivityYokai_OniAction::ActionName' has a wrong offset!");

// ScriptStruct Snowfall.SnfActivityYokai_KodamaDefenseHPRateSetting
// 0x0030 (0x0030 - 0x0000)
struct FSnfActivityYokai_KodamaDefenseHPRateSetting final
{
public:
	TSoftObjectPtr<class UAnimSequenceBase>       Anim;                                              // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkID;                                            // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfActivityYokai_KodamaDefenseHPRateSetting) == 0x000008, "Wrong alignment on FSnfActivityYokai_KodamaDefenseHPRateSetting");
static_assert(sizeof(FSnfActivityYokai_KodamaDefenseHPRateSetting) == 0x000030, "Wrong size on FSnfActivityYokai_KodamaDefenseHPRateSetting");
static_assert(offsetof(FSnfActivityYokai_KodamaDefenseHPRateSetting, Anim) == 0x000000, "Member 'FSnfActivityYokai_KodamaDefenseHPRateSetting::Anim' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_KodamaDefenseHPRateSetting, TalkID) == 0x000028, "Member 'FSnfActivityYokai_KodamaDefenseHPRateSetting::TalkID' has a wrong offset!");

// ScriptStruct Snowfall.SnfDivisionBaseAkInfoBase
// 0x0040 (0x0040 - 0x0000)
struct FSnfDivisionBaseAkInfoBase final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ActorLabel;                                        // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDivisionBaseAkInfoBase) == 0x000010, "Wrong alignment on FSnfDivisionBaseAkInfoBase");
static_assert(sizeof(FSnfDivisionBaseAkInfoBase) == 0x000040, "Wrong size on FSnfDivisionBaseAkInfoBase");
static_assert(offsetof(FSnfDivisionBaseAkInfoBase, Transform) == 0x000000, "Member 'FSnfDivisionBaseAkInfoBase::Transform' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkInfoBase, ActorLabel) == 0x000030, "Member 'FSnfDivisionBaseAkInfoBase::ActorLabel' has a wrong offset!");

// ScriptStruct Snowfall.SnfDivisionBaseAkSpatialAudioVolumeInfo
// 0x00E0 (0x00E0 - 0x0000)
struct FSnfDivisionBaseAkSpatialAudioVolumeInfo final
{
public:
	struct FSnfDivisionBaseAkInfoBase             AkInfoBase;                                        // 0x0000(0x0040)(Edit, NativeAccessSpecifierPublic)
	class UAkAuxBus*                              AuxBus;                                            // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LateReverbSendLevel;                               // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LateReverbFadeRate;                                // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LateReverbPriority;                                // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AuxBusName;                                        // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoomPriority;                                      // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoomWallOcclusion;                                 // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoomEnvEventsFadeOutTime;                          // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RoomIgnoreEnvEvents;                               // 0x0074(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAkAudioEvent*>                  RoomEnvEvents;                                     // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAkAudioEvent*>                  RoomInEvents;                                      // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAkAudioEvent*>                  RoomOutEvents;                                     // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint32                                        bVolumeSpeakerEnable;                              // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVolumeSpeakerDebugDraw;                           // 0x00AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InsideTickInterval;                                // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutsideTickInterval;                               // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAkAudioEvent*>                  Events;                                            // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AttenuationScalingFactor;                          // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionRefreshInterval;                          // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OcclusionCollisionChannel;                         // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkChangeRoomType                             ChangeRoomType;                                    // 0x00D1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x2];                                       // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeOutMsWhenStopped;                              // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfDivisionBaseAkSpatialAudioVolumeInfo) == 0x000010, "Wrong alignment on FSnfDivisionBaseAkSpatialAudioVolumeInfo");
static_assert(sizeof(FSnfDivisionBaseAkSpatialAudioVolumeInfo) == 0x0000E0, "Wrong size on FSnfDivisionBaseAkSpatialAudioVolumeInfo");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, AkInfoBase) == 0x000000, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::AkInfoBase' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, AuxBus) == 0x000040, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::AuxBus' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, LateReverbSendLevel) == 0x000048, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::LateReverbSendLevel' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, LateReverbFadeRate) == 0x00004C, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::LateReverbFadeRate' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, LateReverbPriority) == 0x000050, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::LateReverbPriority' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, AuxBusName) == 0x000058, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::AuxBusName' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, RoomPriority) == 0x000068, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::RoomPriority' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, RoomWallOcclusion) == 0x00006C, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::RoomWallOcclusion' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, RoomEnvEventsFadeOutTime) == 0x000070, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::RoomEnvEventsFadeOutTime' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, RoomIgnoreEnvEvents) == 0x000074, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::RoomIgnoreEnvEvents' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, RoomEnvEvents) == 0x000078, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::RoomEnvEvents' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, RoomInEvents) == 0x000088, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::RoomInEvents' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, RoomOutEvents) == 0x000098, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::RoomOutEvents' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, bVolumeSpeakerEnable) == 0x0000A8, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::bVolumeSpeakerEnable' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, bVolumeSpeakerDebugDraw) == 0x0000AC, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::bVolumeSpeakerDebugDraw' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, InsideTickInterval) == 0x0000B0, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::InsideTickInterval' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, OutsideTickInterval) == 0x0000B4, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::OutsideTickInterval' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, Events) == 0x0000B8, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::Events' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, AttenuationScalingFactor) == 0x0000C8, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::AttenuationScalingFactor' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, OcclusionRefreshInterval) == 0x0000CC, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, OcclusionCollisionChannel) == 0x0000D0, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::OcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, ChangeRoomType) == 0x0000D1, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::ChangeRoomType' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkSpatialAudioVolumeInfo, FadeOutMsWhenStopped) == 0x0000D4, "Member 'FSnfDivisionBaseAkSpatialAudioVolumeInfo::FadeOutMsWhenStopped' has a wrong offset!");

// ScriptStruct Snowfall.SnfActivityYokai_KodamaJobInfo
// 0x0068 (0x0068 - 0x0000)
struct FSnfActivityYokai_KodamaJobInfo final
{
public:
	struct FGameplayTagContainer                  RequestRole;                                       // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class USnfActorIni*                           JobIni;                                            // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnfJobType*                            JobType;                                           // 0x0028(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USnfJobConfig*>                  JobConfigs;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequenceBase>       RequestBaseAnim;                                   // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfActivityYokai_KodamaJobInfo) == 0x000008, "Wrong alignment on FSnfActivityYokai_KodamaJobInfo");
static_assert(sizeof(FSnfActivityYokai_KodamaJobInfo) == 0x000068, "Wrong size on FSnfActivityYokai_KodamaJobInfo");
static_assert(offsetof(FSnfActivityYokai_KodamaJobInfo, RequestRole) == 0x000000, "Member 'FSnfActivityYokai_KodamaJobInfo::RequestRole' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_KodamaJobInfo, JobIni) == 0x000020, "Member 'FSnfActivityYokai_KodamaJobInfo::JobIni' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_KodamaJobInfo, JobType) == 0x000028, "Member 'FSnfActivityYokai_KodamaJobInfo::JobType' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_KodamaJobInfo, JobConfigs) == 0x000030, "Member 'FSnfActivityYokai_KodamaJobInfo::JobConfigs' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_KodamaJobInfo, RequestBaseAnim) == 0x000040, "Member 'FSnfActivityYokai_KodamaJobInfo::RequestBaseAnim' has a wrong offset!");

// ScriptStruct Snowfall.SnfDialogRequestParam
// 0x0050 (0x0050 - 0x0000)
struct FSnfDialogRequestParam final
{
public:
	TWeakObjectPtr<class ULocalPlayer>            OwningPlayer;                                      // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfDialogWidgetType                          WidgetType;                                        // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfDialogMessage                             Message;                                           // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfDialogButtonSet                           ButtonSet;                                         // 0x000A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OverrideMessageText;                               // 0x0010(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Flags;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnButtonClickDelegate0;                            // 0x002C(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnButtonClickDelegate1;                            // 0x003C(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfDialogRequestParam) == 0x000008, "Wrong alignment on FSnfDialogRequestParam");
static_assert(sizeof(FSnfDialogRequestParam) == 0x000050, "Wrong size on FSnfDialogRequestParam");
static_assert(offsetof(FSnfDialogRequestParam, OwningPlayer) == 0x000000, "Member 'FSnfDialogRequestParam::OwningPlayer' has a wrong offset!");
static_assert(offsetof(FSnfDialogRequestParam, WidgetType) == 0x000008, "Member 'FSnfDialogRequestParam::WidgetType' has a wrong offset!");
static_assert(offsetof(FSnfDialogRequestParam, Message) == 0x000009, "Member 'FSnfDialogRequestParam::Message' has a wrong offset!");
static_assert(offsetof(FSnfDialogRequestParam, ButtonSet) == 0x00000A, "Member 'FSnfDialogRequestParam::ButtonSet' has a wrong offset!");
static_assert(offsetof(FSnfDialogRequestParam, OverrideMessageText) == 0x000010, "Member 'FSnfDialogRequestParam::OverrideMessageText' has a wrong offset!");
static_assert(offsetof(FSnfDialogRequestParam, Flags) == 0x000028, "Member 'FSnfDialogRequestParam::Flags' has a wrong offset!");
static_assert(offsetof(FSnfDialogRequestParam, OnButtonClickDelegate0) == 0x00002C, "Member 'FSnfDialogRequestParam::OnButtonClickDelegate0' has a wrong offset!");
static_assert(offsetof(FSnfDialogRequestParam, OnButtonClickDelegate1) == 0x00003C, "Member 'FSnfDialogRequestParam::OnButtonClickDelegate1' has a wrong offset!");

// ScriptStruct Snowfall.SnfActivityYokai_KarakasaTalkInfo
// 0x0030 (0x0030 - 0x0000)
struct FSnfActivityYokai_KarakasaTalkInfo final
{
public:
	class FName                                   Talk_Found;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Talk_Follow;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Talk_Stop;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Talk_Success;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Talk_FaildList;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfActivityYokai_KarakasaTalkInfo) == 0x000008, "Wrong alignment on FSnfActivityYokai_KarakasaTalkInfo");
static_assert(sizeof(FSnfActivityYokai_KarakasaTalkInfo) == 0x000030, "Wrong size on FSnfActivityYokai_KarakasaTalkInfo");
static_assert(offsetof(FSnfActivityYokai_KarakasaTalkInfo, Talk_Found) == 0x000000, "Member 'FSnfActivityYokai_KarakasaTalkInfo::Talk_Found' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_KarakasaTalkInfo, Talk_Follow) == 0x000008, "Member 'FSnfActivityYokai_KarakasaTalkInfo::Talk_Follow' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_KarakasaTalkInfo, Talk_Stop) == 0x000010, "Member 'FSnfActivityYokai_KarakasaTalkInfo::Talk_Stop' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_KarakasaTalkInfo, Talk_Success) == 0x000018, "Member 'FSnfActivityYokai_KarakasaTalkInfo::Talk_Success' has a wrong offset!");
static_assert(offsetof(FSnfActivityYokai_KarakasaTalkInfo, Talk_FaildList) == 0x000020, "Member 'FSnfActivityYokai_KarakasaTalkInfo::Talk_FaildList' has a wrong offset!");

// ScriptStruct Snowfall.SnfCarBaseBoxCollisionSetting
// 0x0050 (0x0050 - 0x0000)
struct FSnfCarBaseBoxCollisionSetting final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0030(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CollisionProfileName;                              // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCarBaseBoxCollisionSetting) == 0x000010, "Wrong alignment on FSnfCarBaseBoxCollisionSetting");
static_assert(sizeof(FSnfCarBaseBoxCollisionSetting) == 0x000050, "Wrong size on FSnfCarBaseBoxCollisionSetting");
static_assert(offsetof(FSnfCarBaseBoxCollisionSetting, Transform) == 0x000000, "Member 'FSnfCarBaseBoxCollisionSetting::Transform' has a wrong offset!");
static_assert(offsetof(FSnfCarBaseBoxCollisionSetting, BoxExtent) == 0x000030, "Member 'FSnfCarBaseBoxCollisionSetting::BoxExtent' has a wrong offset!");
static_assert(offsetof(FSnfCarBaseBoxCollisionSetting, CollisionProfileName) == 0x00003C, "Member 'FSnfCarBaseBoxCollisionSetting::CollisionProfileName' has a wrong offset!");

// ScriptStruct Snowfall.SnfAgitationAnimalInfo
// 0x0008 (0x0008 - 0x0000)
struct FSnfAgitationAnimalInfo final
{
public:
	class ASnfJobActor*                           JobActor;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAgitationAnimalInfo) == 0x000008, "Wrong alignment on FSnfAgitationAnimalInfo");
static_assert(sizeof(FSnfAgitationAnimalInfo) == 0x000008, "Wrong size on FSnfAgitationAnimalInfo");
static_assert(offsetof(FSnfAgitationAnimalInfo, JobActor) == 0x000000, "Member 'FSnfAgitationAnimalInfo::JobActor' has a wrong offset!");

// ScriptStruct Snowfall.SnfPrisonEnemySpawnInfo
// 0x0040 (0x0040 - 0x0000)
struct FSnfPrisonEnemySpawnInfo final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         CageIndex;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnRadius;                                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfPrisonEnemySpawnInfo) == 0x000010, "Wrong alignment on FSnfPrisonEnemySpawnInfo");
static_assert(sizeof(FSnfPrisonEnemySpawnInfo) == 0x000040, "Wrong size on FSnfPrisonEnemySpawnInfo");
static_assert(offsetof(FSnfPrisonEnemySpawnInfo, Transform) == 0x000000, "Member 'FSnfPrisonEnemySpawnInfo::Transform' has a wrong offset!");
static_assert(offsetof(FSnfPrisonEnemySpawnInfo, CageIndex) == 0x000030, "Member 'FSnfPrisonEnemySpawnInfo::CageIndex' has a wrong offset!");
static_assert(offsetof(FSnfPrisonEnemySpawnInfo, SpawnRadius) == 0x000034, "Member 'FSnfPrisonEnemySpawnInfo::SpawnRadius' has a wrong offset!");

// ScriptStruct Snowfall.SnfAgitationTalkSequenceInfo
// 0x0010 (0x0018 - 0x0008)
struct FSnfAgitationTalkSequenceInfo final : public FTableRowBase
{
public:
	int32                                         SequenceId;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkID;                                            // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfAgitationTalkSequenceInfo) == 0x000008, "Wrong alignment on FSnfAgitationTalkSequenceInfo");
static_assert(sizeof(FSnfAgitationTalkSequenceInfo) == 0x000018, "Wrong size on FSnfAgitationTalkSequenceInfo");
static_assert(offsetof(FSnfAgitationTalkSequenceInfo, SequenceId) == 0x000008, "Member 'FSnfAgitationTalkSequenceInfo::SequenceId' has a wrong offset!");
static_assert(offsetof(FSnfAgitationTalkSequenceInfo, TalkID) == 0x00000C, "Member 'FSnfAgitationTalkSequenceInfo::TalkID' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponAmmoReplicateData
// 0x0018 (0x0018 - 0x0000)
struct FSnfWeaponAmmoReplicateData final
{
public:
	struct FVector_NetQuantize                    Location;                                          // 0x0000(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              Direction;                                         // 0x000C(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponAmmoReplicateData) == 0x000004, "Wrong alignment on FSnfWeaponAmmoReplicateData");
static_assert(sizeof(FSnfWeaponAmmoReplicateData) == 0x000018, "Wrong size on FSnfWeaponAmmoReplicateData");
static_assert(offsetof(FSnfWeaponAmmoReplicateData, Location) == 0x000000, "Member 'FSnfWeaponAmmoReplicateData::Location' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoReplicateData, Direction) == 0x00000C, "Member 'FSnfWeaponAmmoReplicateData::Direction' has a wrong offset!");

// ScriptStruct Snowfall.SnfAIHearingParam
// 0x0008 (0x0008 - 0x0000)
struct FSnfAIHearingParam final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToForget;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAIHearingParam) == 0x000004, "Wrong alignment on FSnfAIHearingParam");
static_assert(sizeof(FSnfAIHearingParam) == 0x000008, "Wrong size on FSnfAIHearingParam");
static_assert(offsetof(FSnfAIHearingParam, Radius) == 0x000000, "Member 'FSnfAIHearingParam::Radius' has a wrong offset!");
static_assert(offsetof(FSnfAIHearingParam, TimeToForget) == 0x000004, "Member 'FSnfAIHearingParam::TimeToForget' has a wrong offset!");

// ScriptStruct Snowfall.SnfTatariyaAiBehavior
// 0x000C (0x000C - 0x0000)
struct FSnfTatariyaAiBehavior final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskName;                                          // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTatariyaAiBehavior) == 0x000004, "Wrong alignment on FSnfTatariyaAiBehavior");
static_assert(sizeof(FSnfTatariyaAiBehavior) == 0x00000C, "Wrong size on FSnfTatariyaAiBehavior");
static_assert(offsetof(FSnfTatariyaAiBehavior, Percent) == 0x000000, "Member 'FSnfTatariyaAiBehavior::Percent' has a wrong offset!");
static_assert(offsetof(FSnfTatariyaAiBehavior, TaskName) == 0x000004, "Member 'FSnfTatariyaAiBehavior::TaskName' has a wrong offset!");

// ScriptStruct Snowfall.SnfTatariyaAiBehaviorSequence
// 0x0018 (0x0020 - 0x0008)
struct FSnfTatariyaAiBehaviorSequence final : public FTableRowBase
{
public:
	float                                         DefaultWeight;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSnfTatariyaAiBehavior>         Sequence;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTatariyaAiBehaviorSequence) == 0x000008, "Wrong alignment on FSnfTatariyaAiBehaviorSequence");
static_assert(sizeof(FSnfTatariyaAiBehaviorSequence) == 0x000020, "Wrong size on FSnfTatariyaAiBehaviorSequence");
static_assert(offsetof(FSnfTatariyaAiBehaviorSequence, DefaultWeight) == 0x000008, "Member 'FSnfTatariyaAiBehaviorSequence::DefaultWeight' has a wrong offset!");
static_assert(offsetof(FSnfTatariyaAiBehaviorSequence, Sequence) == 0x000010, "Member 'FSnfTatariyaAiBehaviorSequence::Sequence' has a wrong offset!");

// ScriptStruct Snowfall.SnfAISightShapeParam
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FSnfAISightShapeParam
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfAISightShapeParam) == 0x000004, "Wrong alignment on FSnfAISightShapeParam");
static_assert(sizeof(FSnfAISightShapeParam) == 0x000004, "Wrong size on FSnfAISightShapeParam");

// ScriptStruct Snowfall.SnfChoiceTalkData
// 0x0028 (0x0028 - 0x0000)
struct FSnfChoiceTalkData final
{
public:
	class FText                                   DrawText;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   ItemCatalogId;                                     // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x4];                                       // 0x0020(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsAlreadyRead;                                     // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLockItem;                                        // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfChoiceTalkData) == 0x000008, "Wrong alignment on FSnfChoiceTalkData");
static_assert(sizeof(FSnfChoiceTalkData) == 0x000028, "Wrong size on FSnfChoiceTalkData");
static_assert(offsetof(FSnfChoiceTalkData, DrawText) == 0x000000, "Member 'FSnfChoiceTalkData::DrawText' has a wrong offset!");
static_assert(offsetof(FSnfChoiceTalkData, ItemCatalogId) == 0x000018, "Member 'FSnfChoiceTalkData::ItemCatalogId' has a wrong offset!");
static_assert(offsetof(FSnfChoiceTalkData, IsAlreadyRead) == 0x000024, "Member 'FSnfChoiceTalkData::IsAlreadyRead' has a wrong offset!");
static_assert(offsetof(FSnfChoiceTalkData, IsLockItem) == 0x000025, "Member 'FSnfChoiceTalkData::IsLockItem' has a wrong offset!");

// ScriptStruct Snowfall.SnfDivisionBaseAkAcousticPortalInfo
// 0x0050 (0x0050 - 0x0000)
struct FSnfDivisionBaseAkAcousticPortalInfo final
{
public:
	struct FSnfDivisionBaseAkInfoBase             AkInfoBase;                                        // 0x0000(0x0040)(Edit, NativeAccessSpecifierPublic)
	uint8                                         InitialState;                                      // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ObstructionRefreshInterval;                        // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TickInterval;                                      // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDivisionBaseAkAcousticPortalInfo) == 0x000010, "Wrong alignment on FSnfDivisionBaseAkAcousticPortalInfo");
static_assert(sizeof(FSnfDivisionBaseAkAcousticPortalInfo) == 0x000050, "Wrong size on FSnfDivisionBaseAkAcousticPortalInfo");
static_assert(offsetof(FSnfDivisionBaseAkAcousticPortalInfo, AkInfoBase) == 0x000000, "Member 'FSnfDivisionBaseAkAcousticPortalInfo::AkInfoBase' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkAcousticPortalInfo, InitialState) == 0x000040, "Member 'FSnfDivisionBaseAkAcousticPortalInfo::InitialState' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkAcousticPortalInfo, ObstructionRefreshInterval) == 0x000044, "Member 'FSnfDivisionBaseAkAcousticPortalInfo::ObstructionRefreshInterval' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkAcousticPortalInfo, CollisionChannel) == 0x000048, "Member 'FSnfDivisionBaseAkAcousticPortalInfo::CollisionChannel' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseAkAcousticPortalInfo, TickInterval) == 0x00004C, "Member 'FSnfDivisionBaseAkAcousticPortalInfo::TickInterval' has a wrong offset!");

// ScriptStruct Snowfall.SnfAISightConeParam
// 0x0010 (0x0014 - 0x0004)
struct FSnfAISightConeParam final : public FSnfAISightShapeParam
{
public:
	float                                         Range;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoseRange;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoseAngle;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAISightConeParam) == 0x000004, "Wrong alignment on FSnfAISightConeParam");
static_assert(sizeof(FSnfAISightConeParam) == 0x000014, "Wrong size on FSnfAISightConeParam");
static_assert(offsetof(FSnfAISightConeParam, Range) == 0x000004, "Member 'FSnfAISightConeParam::Range' has a wrong offset!");
static_assert(offsetof(FSnfAISightConeParam, Angle) == 0x000008, "Member 'FSnfAISightConeParam::Angle' has a wrong offset!");
static_assert(offsetof(FSnfAISightConeParam, LoseRange) == 0x00000C, "Member 'FSnfAISightConeParam::LoseRange' has a wrong offset!");
static_assert(offsetof(FSnfAISightConeParam, LoseAngle) == 0x000010, "Member 'FSnfAISightConeParam::LoseAngle' has a wrong offset!");

// ScriptStruct Snowfall.SnfAISightCylinderParam
// 0x0010 (0x0014 - 0x0004)
struct FSnfAISightCylinderParam final : public FSnfAISightShapeParam
{
public:
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoseRadius;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfAngleDgreesH;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAISightCylinderParam) == 0x000004, "Wrong alignment on FSnfAISightCylinderParam");
static_assert(sizeof(FSnfAISightCylinderParam) == 0x000014, "Wrong size on FSnfAISightCylinderParam");
static_assert(offsetof(FSnfAISightCylinderParam, Radius) == 0x000004, "Member 'FSnfAISightCylinderParam::Radius' has a wrong offset!");
static_assert(offsetof(FSnfAISightCylinderParam, LoseRadius) == 0x000008, "Member 'FSnfAISightCylinderParam::LoseRadius' has a wrong offset!");
static_assert(offsetof(FSnfAISightCylinderParam, HalfAngleDgreesH) == 0x00000C, "Member 'FSnfAISightCylinderParam::HalfAngleDgreesH' has a wrong offset!");
static_assert(offsetof(FSnfAISightCylinderParam, HalfHeight) == 0x000010, "Member 'FSnfAISightCylinderParam::HalfHeight' has a wrong offset!");

// ScriptStruct Snowfall.SnfPlayerStatusPreset
// 0x0268 (0x0270 - 0x0008)
struct FSnfPlayerStatusPreset final : public FTableRowBase
{
public:
	int32                                         Sequence;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LiberationMax;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ESnfLiberationType, int32>               FreeLiberationMax;                                 // 0x0010(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LifeNow;                                           // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LifeMax;                                           // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfWeaponType                                EquipWeapon;                                       // 0x006C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfTalismanEffectType                        EquipTalisman;                                     // 0x006D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ESnfAmmoType, int32>                     AmmoMax;                                           // 0x0070(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<ESnfAmmoType, int32>                     AmmoCount;                                         // 0x00C0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<ESnfTalismanEffectType, int32>           TalismanCount;                                     // 0x0110(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         SubstituteCount;                                   // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 SubstituteUseList;                                 // 0x0168(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ESnfRosaryType>                        RosaryFlag;                                        // 0x0178(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<int32, ESnfRosaryType>                   EquipRosary;                                       // 0x0188(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ESnfSkillType>                         SkillFlag;                                         // 0x01D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ESnfEndlessSkillType>                  SkillEndlessFlag;                                  // 0x01E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   EquipCostumeTag;                                   // 0x01F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           HaveCostumeList;                                   // 0x0200(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ESnfGameFlag>                          GameFlag;                                          // 0x0210(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ESnfPlayerFlag>                        PlayerFlag;                                        // 0x0220(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           ItemShortcut;                                      // 0x0230(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FTngInventoryGroup                     PlayerInventory;                                   // 0x0240(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           OpenArchives;                                      // 0x0250(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x0260(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPlayerStatusPreset) == 0x000008, "Wrong alignment on FSnfPlayerStatusPreset");
static_assert(sizeof(FSnfPlayerStatusPreset) == 0x000270, "Wrong size on FSnfPlayerStatusPreset");
static_assert(offsetof(FSnfPlayerStatusPreset, Sequence) == 0x000008, "Member 'FSnfPlayerStatusPreset::Sequence' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, LiberationMax) == 0x00000C, "Member 'FSnfPlayerStatusPreset::LiberationMax' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, FreeLiberationMax) == 0x000010, "Member 'FSnfPlayerStatusPreset::FreeLiberationMax' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, Level) == 0x000060, "Member 'FSnfPlayerStatusPreset::Level' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, LifeNow) == 0x000064, "Member 'FSnfPlayerStatusPreset::LifeNow' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, LifeMax) == 0x000068, "Member 'FSnfPlayerStatusPreset::LifeMax' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, EquipWeapon) == 0x00006C, "Member 'FSnfPlayerStatusPreset::EquipWeapon' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, EquipTalisman) == 0x00006D, "Member 'FSnfPlayerStatusPreset::EquipTalisman' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, AmmoMax) == 0x000070, "Member 'FSnfPlayerStatusPreset::AmmoMax' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, AmmoCount) == 0x0000C0, "Member 'FSnfPlayerStatusPreset::AmmoCount' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, TalismanCount) == 0x000110, "Member 'FSnfPlayerStatusPreset::TalismanCount' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, SubstituteCount) == 0x000160, "Member 'FSnfPlayerStatusPreset::SubstituteCount' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, SubstituteUseList) == 0x000168, "Member 'FSnfPlayerStatusPreset::SubstituteUseList' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, RosaryFlag) == 0x000178, "Member 'FSnfPlayerStatusPreset::RosaryFlag' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, EquipRosary) == 0x000188, "Member 'FSnfPlayerStatusPreset::EquipRosary' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, SkillFlag) == 0x0001D8, "Member 'FSnfPlayerStatusPreset::SkillFlag' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, SkillEndlessFlag) == 0x0001E8, "Member 'FSnfPlayerStatusPreset::SkillEndlessFlag' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, EquipCostumeTag) == 0x0001F8, "Member 'FSnfPlayerStatusPreset::EquipCostumeTag' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, HaveCostumeList) == 0x000200, "Member 'FSnfPlayerStatusPreset::HaveCostumeList' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, GameFlag) == 0x000210, "Member 'FSnfPlayerStatusPreset::GameFlag' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, PlayerFlag) == 0x000220, "Member 'FSnfPlayerStatusPreset::PlayerFlag' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, ItemShortcut) == 0x000230, "Member 'FSnfPlayerStatusPreset::ItemShortcut' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, PlayerInventory) == 0x000240, "Member 'FSnfPlayerStatusPreset::PlayerInventory' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, OpenArchives) == 0x000250, "Member 'FSnfPlayerStatusPreset::OpenArchives' has a wrong offset!");
static_assert(offsetof(FSnfPlayerStatusPreset, Tags) == 0x000260, "Member 'FSnfPlayerStatusPreset::Tags' has a wrong offset!");

// ScriptStruct Snowfall.SnfAISightParam
// 0x0014 (0x0014 - 0x0000)
struct FSnfAISightParam final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoseRadius;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfAngleDgreesH;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToForget;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAISightParam) == 0x000004, "Wrong alignment on FSnfAISightParam");
static_assert(sizeof(FSnfAISightParam) == 0x000014, "Wrong size on FSnfAISightParam");
static_assert(offsetof(FSnfAISightParam, Radius) == 0x000000, "Member 'FSnfAISightParam::Radius' has a wrong offset!");
static_assert(offsetof(FSnfAISightParam, LoseRadius) == 0x000004, "Member 'FSnfAISightParam::LoseRadius' has a wrong offset!");
static_assert(offsetof(FSnfAISightParam, HalfAngleDgreesH) == 0x000008, "Member 'FSnfAISightParam::HalfAngleDgreesH' has a wrong offset!");
static_assert(offsetof(FSnfAISightParam, HalfHeight) == 0x00000C, "Member 'FSnfAISightParam::HalfHeight' has a wrong offset!");
static_assert(offsetof(FSnfAISightParam, TimeToForget) == 0x000010, "Member 'FSnfAISightParam::TimeToForget' has a wrong offset!");

// ScriptStruct Snowfall.SnfActionTagNetParam
// 0x0030 (0x0030 - 0x0000)
struct FSnfActionTagNetParam final
{
public:
	int32                                         NetCounter;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ActionTag;                                         // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSnfActionTagParam                     ActTagParam;                                       // 0x0010(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfActionTagNetParam) == 0x000008, "Wrong alignment on FSnfActionTagNetParam");
static_assert(sizeof(FSnfActionTagNetParam) == 0x000030, "Wrong size on FSnfActionTagNetParam");
static_assert(offsetof(FSnfActionTagNetParam, NetCounter) == 0x000000, "Member 'FSnfActionTagNetParam::NetCounter' has a wrong offset!");
static_assert(offsetof(FSnfActionTagNetParam, ActionTag) == 0x000004, "Member 'FSnfActionTagNetParam::ActionTag' has a wrong offset!");
static_assert(offsetof(FSnfActionTagNetParam, ActTagParam) == 0x000010, "Member 'FSnfActionTagNetParam::ActTagParam' has a wrong offset!");

// ScriptStruct Snowfall.SnfAIStimulusFilter
// 0x0010 (0x0018 - 0x0008)
struct FSnfAIStimulusFilter final : public FTableRowBase
{
public:
	TSubclassOf<class UAISense>                   SenseType;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorType;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAIStimulusFilter) == 0x000008, "Wrong alignment on FSnfAIStimulusFilter");
static_assert(sizeof(FSnfAIStimulusFilter) == 0x000018, "Wrong size on FSnfAIStimulusFilter");
static_assert(offsetof(FSnfAIStimulusFilter, SenseType) == 0x000008, "Member 'FSnfAIStimulusFilter::SenseType' has a wrong offset!");
static_assert(offsetof(FSnfAIStimulusFilter, ActorType) == 0x000010, "Member 'FSnfAIStimulusFilter::ActorType' has a wrong offset!");

// ScriptStruct Snowfall.SnfPlayerInMusubiAnimation
// 0x0030 (0x0038 - 0x0008)
struct FSnfPlayerInMusubiAnimation final : public FTableRowBase
{
public:
	float                                         TotalFrame;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frame_1;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frame_2;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frame_3;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frame_4;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frame_5;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frame_6;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frame_7;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frame_8;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frame_9;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frame_10;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfPlayerInMusubiAnimation) == 0x000008, "Wrong alignment on FSnfPlayerInMusubiAnimation");
static_assert(sizeof(FSnfPlayerInMusubiAnimation) == 0x000038, "Wrong size on FSnfPlayerInMusubiAnimation");
static_assert(offsetof(FSnfPlayerInMusubiAnimation, TotalFrame) == 0x000008, "Member 'FSnfPlayerInMusubiAnimation::TotalFrame' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInMusubiAnimation, Frame_1) == 0x00000C, "Member 'FSnfPlayerInMusubiAnimation::Frame_1' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInMusubiAnimation, Frame_2) == 0x000010, "Member 'FSnfPlayerInMusubiAnimation::Frame_2' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInMusubiAnimation, Frame_3) == 0x000014, "Member 'FSnfPlayerInMusubiAnimation::Frame_3' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInMusubiAnimation, Frame_4) == 0x000018, "Member 'FSnfPlayerInMusubiAnimation::Frame_4' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInMusubiAnimation, Frame_5) == 0x00001C, "Member 'FSnfPlayerInMusubiAnimation::Frame_5' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInMusubiAnimation, Frame_6) == 0x000020, "Member 'FSnfPlayerInMusubiAnimation::Frame_6' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInMusubiAnimation, Frame_7) == 0x000024, "Member 'FSnfPlayerInMusubiAnimation::Frame_7' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInMusubiAnimation, Frame_8) == 0x000028, "Member 'FSnfPlayerInMusubiAnimation::Frame_8' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInMusubiAnimation, Frame_9) == 0x00002C, "Member 'FSnfPlayerInMusubiAnimation::Frame_9' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInMusubiAnimation, Frame_10) == 0x000030, "Member 'FSnfPlayerInMusubiAnimation::Frame_10' has a wrong offset!");

// ScriptStruct Snowfall.SnfInterpFloat
// 0x0018 (0x0018 - 0x0000)
struct FSnfInterpFloat final
{
public:
	float                                         CurrentValue;                                      // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetValue;                                       // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpTime;                                        // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfInterpFloat) == 0x000004, "Wrong alignment on FSnfInterpFloat");
static_assert(sizeof(FSnfInterpFloat) == 0x000018, "Wrong size on FSnfInterpFloat");
static_assert(offsetof(FSnfInterpFloat, CurrentValue) == 0x000000, "Member 'FSnfInterpFloat::CurrentValue' has a wrong offset!");
static_assert(offsetof(FSnfInterpFloat, StartValue) == 0x000004, "Member 'FSnfInterpFloat::StartValue' has a wrong offset!");
static_assert(offsetof(FSnfInterpFloat, TargetValue) == 0x000008, "Member 'FSnfInterpFloat::TargetValue' has a wrong offset!");
static_assert(offsetof(FSnfInterpFloat, InterpTime) == 0x00000C, "Member 'FSnfInterpFloat::InterpTime' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponEm1900Tornado
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x10) FSnfWeaponEm1900Tornado final
{
public:
	class UChildActorComponent*                   FxPropChild;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnfWeaponCollisionShape_Cylinder*      Collision;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x30];                                      // 0x0010(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfWeaponEm1900Tornado) == 0x000010, "Wrong alignment on FSnfWeaponEm1900Tornado");
static_assert(sizeof(FSnfWeaponEm1900Tornado) == 0x000040, "Wrong size on FSnfWeaponEm1900Tornado");
static_assert(offsetof(FSnfWeaponEm1900Tornado, FxPropChild) == 0x000000, "Member 'FSnfWeaponEm1900Tornado::FxPropChild' has a wrong offset!");
static_assert(offsetof(FSnfWeaponEm1900Tornado, Collision) == 0x000008, "Member 'FSnfWeaponEm1900Tornado::Collision' has a wrong offset!");

// ScriptStruct Snowfall.SnfAnimInstInputParam
// 0x003C (0x003C - 0x0000)
struct FSnfAnimInstInputParam final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Throttle;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldDir;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldVec;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DeltaRot;                                          // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               DeltaAim;                                          // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bStrafing;                                         // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBraking;                                          // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfAnimInstInputParam) == 0x000004, "Wrong alignment on FSnfAnimInstInputParam");
static_assert(sizeof(FSnfAnimInstInputParam) == 0x00003C, "Wrong size on FSnfAnimInstInputParam");
static_assert(offsetof(FSnfAnimInstInputParam, Speed) == 0x000000, "Member 'FSnfAnimInstInputParam::Speed' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstInputParam, Throttle) == 0x000004, "Member 'FSnfAnimInstInputParam::Throttle' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstInputParam, WorldDir) == 0x000008, "Member 'FSnfAnimInstInputParam::WorldDir' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstInputParam, WorldVec) == 0x000014, "Member 'FSnfAnimInstInputParam::WorldVec' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstInputParam, DeltaRot) == 0x000020, "Member 'FSnfAnimInstInputParam::DeltaRot' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstInputParam, DeltaAim) == 0x00002C, "Member 'FSnfAnimInstInputParam::DeltaAim' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstInputParam, bStrafing) == 0x000038, "Member 'FSnfAnimInstInputParam::bStrafing' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstInputParam, bBraking) == 0x000039, "Member 'FSnfAnimInstInputParam::bBraking' has a wrong offset!");

// ScriptStruct Snowfall.SnfAnimInstMovingParam
// 0x000C (0x000C - 0x0000)
struct FSnfAnimInstMovingParam final
{
public:
	float                                         Throttle;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastThrottle;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAnimInstMovingParam) == 0x000004, "Wrong alignment on FSnfAnimInstMovingParam");
static_assert(sizeof(FSnfAnimInstMovingParam) == 0x00000C, "Wrong size on FSnfAnimInstMovingParam");
static_assert(offsetof(FSnfAnimInstMovingParam, Throttle) == 0x000000, "Member 'FSnfAnimInstMovingParam::Throttle' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstMovingParam, LastThrottle) == 0x000004, "Member 'FSnfAnimInstMovingParam::LastThrottle' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstMovingParam, InterpSpeed) == 0x000008, "Member 'FSnfAnimInstMovingParam::InterpSpeed' has a wrong offset!");

// ScriptStruct Snowfall.SnfAnimInstRotParam
// 0x0010 (0x0010 - 0x0000)
struct FSnfAnimInstRotParam final
{
public:
	struct FRotator                               DeltaRot;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAnimInstRotParam) == 0x000004, "Wrong alignment on FSnfAnimInstRotParam");
static_assert(sizeof(FSnfAnimInstRotParam) == 0x000010, "Wrong size on FSnfAnimInstRotParam");
static_assert(offsetof(FSnfAnimInstRotParam, DeltaRot) == 0x000000, "Member 'FSnfAnimInstRotParam::DeltaRot' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstRotParam, InterpSpeed) == 0x00000C, "Member 'FSnfAnimInstRotParam::InterpSpeed' has a wrong offset!");

// ScriptStruct Snowfall.SnfAnimInstStrafingParam
// 0x0030 (0x0030 - 0x0000)
struct FSnfAnimInstStrafingParam final
{
public:
	struct FVector                                WorldVec;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldDir;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PureYaw;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FwdYaw;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BwdYaw;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TIME;                                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBwdStrafe;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSpeed;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAnimInstStrafingParam) == 0x000004, "Wrong alignment on FSnfAnimInstStrafingParam");
static_assert(sizeof(FSnfAnimInstStrafingParam) == 0x000030, "Wrong size on FSnfAnimInstStrafingParam");
static_assert(offsetof(FSnfAnimInstStrafingParam, WorldVec) == 0x000000, "Member 'FSnfAnimInstStrafingParam::WorldVec' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstStrafingParam, WorldDir) == 0x00000C, "Member 'FSnfAnimInstStrafingParam::WorldDir' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstStrafingParam, PureYaw) == 0x000018, "Member 'FSnfAnimInstStrafingParam::PureYaw' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstStrafingParam, FwdYaw) == 0x00001C, "Member 'FSnfAnimInstStrafingParam::FwdYaw' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstStrafingParam, BwdYaw) == 0x000020, "Member 'FSnfAnimInstStrafingParam::BwdYaw' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstStrafingParam, TIME) == 0x000024, "Member 'FSnfAnimInstStrafingParam::TIME' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstStrafingParam, bBwdStrafe) == 0x000028, "Member 'FSnfAnimInstStrafingParam::bBwdStrafe' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstStrafingParam, InterpSpeed) == 0x00002C, "Member 'FSnfAnimInstStrafingParam::InterpSpeed' has a wrong offset!");

// ScriptStruct Snowfall.SnfAnimInstParam
// 0x00A4 (0x00A4 - 0x0000)
struct FSnfAnimInstParam final
{
public:
	TWeakObjectPtr<class USnfCharacterAnimInstance> MyAnimInst;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ATngCharacter>           MyChara;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USkeletalMeshComponent>  MyMesh;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSnfAnimInstInputParam                 Input;                                             // 0x0018(0x003C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfAnimInstMovingParam                Moving;                                            // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfAnimInstRotParam                   Rotation;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfAnimInstStrafingParam              Strafing;                                          // 0x0070(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bLocomotion;                                       // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStrafing;                                         // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfAnimInstParam) == 0x000004, "Wrong alignment on FSnfAnimInstParam");
static_assert(sizeof(FSnfAnimInstParam) == 0x0000A4, "Wrong size on FSnfAnimInstParam");
static_assert(offsetof(FSnfAnimInstParam, MyAnimInst) == 0x000000, "Member 'FSnfAnimInstParam::MyAnimInst' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstParam, MyChara) == 0x000008, "Member 'FSnfAnimInstParam::MyChara' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstParam, MyMesh) == 0x000010, "Member 'FSnfAnimInstParam::MyMesh' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstParam, Input) == 0x000018, "Member 'FSnfAnimInstParam::Input' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstParam, Moving) == 0x000054, "Member 'FSnfAnimInstParam::Moving' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstParam, Rotation) == 0x000060, "Member 'FSnfAnimInstParam::Rotation' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstParam, Strafing) == 0x000070, "Member 'FSnfAnimInstParam::Strafing' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstParam, bLocomotion) == 0x0000A0, "Member 'FSnfAnimInstParam::bLocomotion' has a wrong offset!");
static_assert(offsetof(FSnfAnimInstParam, bStrafing) == 0x0000A1, "Member 'FSnfAnimInstParam::bStrafing' has a wrong offset!");

// ScriptStruct Snowfall.SnfDivisionBaseCollisionBaseSetting
// 0x0060 (0x0060 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x10) FSnfDivisionBaseCollisionBaseSetting
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FCollisionResponseContainer            CollisionResponseContainer;                        // 0x0030(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCanEverAffectNavigation;                          // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
#pragma pack(pop)
static_assert(alignof(FSnfDivisionBaseCollisionBaseSetting) == 0x000010, "Wrong alignment on FSnfDivisionBaseCollisionBaseSetting");
static_assert(sizeof(FSnfDivisionBaseCollisionBaseSetting) == 0x000060, "Wrong size on FSnfDivisionBaseCollisionBaseSetting");
static_assert(offsetof(FSnfDivisionBaseCollisionBaseSetting, Transform) == 0x000000, "Member 'FSnfDivisionBaseCollisionBaseSetting::Transform' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseCollisionBaseSetting, CollisionResponseContainer) == 0x000030, "Member 'FSnfDivisionBaseCollisionBaseSetting::CollisionResponseContainer' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseCollisionBaseSetting, bCanEverAffectNavigation) == 0x000050, "Member 'FSnfDivisionBaseCollisionBaseSetting::bCanEverAffectNavigation' has a wrong offset!");

// ScriptStruct Snowfall.SnfDivisionBaseSphereCollisionSetting
// 0x0000 (0x0060 - 0x0060)
struct FSnfDivisionBaseSphereCollisionSetting final : public FSnfDivisionBaseCollisionBaseSetting
{
public:
	float                                         SphereSize;                                        // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfDivisionBaseSphereCollisionSetting) == 0x000010, "Wrong alignment on FSnfDivisionBaseSphereCollisionSetting");
static_assert(sizeof(FSnfDivisionBaseSphereCollisionSetting) == 0x000060, "Wrong size on FSnfDivisionBaseSphereCollisionSetting");
static_assert(offsetof(FSnfDivisionBaseSphereCollisionSetting, SphereSize) == 0x000058, "Member 'FSnfDivisionBaseSphereCollisionSetting::SphereSize' has a wrong offset!");

// ScriptStruct Snowfall.SnfSpecialPopupInfo
// 0x0098 (0x0098 - 0x0000)
struct FSnfSpecialPopupInfo final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TitleText;                                         // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          IsReplaceTitleText;                                // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DescriptionText;                                   // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                Icon;                                              // 0x0048(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>           PopupSound;                                        // 0x0070(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfSpecialPopupInfo) == 0x000008, "Wrong alignment on FSnfSpecialPopupInfo");
static_assert(sizeof(FSnfSpecialPopupInfo) == 0x000098, "Wrong size on FSnfSpecialPopupInfo");
static_assert(offsetof(FSnfSpecialPopupInfo, Color) == 0x000000, "Member 'FSnfSpecialPopupInfo::Color' has a wrong offset!");
static_assert(offsetof(FSnfSpecialPopupInfo, TitleText) == 0x000010, "Member 'FSnfSpecialPopupInfo::TitleText' has a wrong offset!");
static_assert(offsetof(FSnfSpecialPopupInfo, IsReplaceTitleText) == 0x000028, "Member 'FSnfSpecialPopupInfo::IsReplaceTitleText' has a wrong offset!");
static_assert(offsetof(FSnfSpecialPopupInfo, DescriptionText) == 0x000030, "Member 'FSnfSpecialPopupInfo::DescriptionText' has a wrong offset!");
static_assert(offsetof(FSnfSpecialPopupInfo, Icon) == 0x000048, "Member 'FSnfSpecialPopupInfo::Icon' has a wrong offset!");
static_assert(offsetof(FSnfSpecialPopupInfo, PopupSound) == 0x000070, "Member 'FSnfSpecialPopupInfo::PopupSound' has a wrong offset!");

// ScriptStruct Snowfall.SnfSelectTalismanInfo
// 0x0128 (0x0128 - 0x0000)
struct FSnfSelectTalismanInfo final
{
public:
	struct FSnfCatalogItem                        CatalogItem;                                       // 0x0000(0x0120)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         HaveNum;                                           // 0x0120(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfTalismanEffectType                        RosaryType;                                        // 0x0124(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfSelectTalismanInfo) == 0x000008, "Wrong alignment on FSnfSelectTalismanInfo");
static_assert(sizeof(FSnfSelectTalismanInfo) == 0x000128, "Wrong size on FSnfSelectTalismanInfo");
static_assert(offsetof(FSnfSelectTalismanInfo, CatalogItem) == 0x000000, "Member 'FSnfSelectTalismanInfo::CatalogItem' has a wrong offset!");
static_assert(offsetof(FSnfSelectTalismanInfo, HaveNum) == 0x000120, "Member 'FSnfSelectTalismanInfo::HaveNum' has a wrong offset!");
static_assert(offsetof(FSnfSelectTalismanInfo, RosaryType) == 0x000124, "Member 'FSnfSelectTalismanInfo::RosaryType' has a wrong offset!");

// ScriptStruct Snowfall.SnfControlCheckActStepItem
// 0x0030 (0x0030 - 0x0000)
struct FSnfControlCheckActStepItem final
{
public:
	TSoftObjectPtr<class UDataTable>              Table;                                             // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Step;                                              // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfControlCheckActStepSendCondition          SendCondition;                                     // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfControlCheckActStepItem) == 0x000008, "Wrong alignment on FSnfControlCheckActStepItem");
static_assert(sizeof(FSnfControlCheckActStepItem) == 0x000030, "Wrong size on FSnfControlCheckActStepItem");
static_assert(offsetof(FSnfControlCheckActStepItem, Table) == 0x000000, "Member 'FSnfControlCheckActStepItem::Table' has a wrong offset!");
static_assert(offsetof(FSnfControlCheckActStepItem, Step) == 0x000028, "Member 'FSnfControlCheckActStepItem::Step' has a wrong offset!");
static_assert(offsetof(FSnfControlCheckActStepItem, SendCondition) == 0x00002C, "Member 'FSnfControlCheckActStepItem::SendCondition' has a wrong offset!");

// ScriptStruct Snowfall.SnfChangeAssaultNetParam
// 0x0004 (0x0004 - 0x0000)
struct FSnfChangeAssaultNetParam final
{
public:
	float                                         ChangeTime;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfChangeAssaultNetParam) == 0x000004, "Wrong alignment on FSnfChangeAssaultNetParam");
static_assert(sizeof(FSnfChangeAssaultNetParam) == 0x000004, "Wrong size on FSnfChangeAssaultNetParam");
static_assert(offsetof(FSnfChangeAssaultNetParam, ChangeTime) == 0x000000, "Member 'FSnfChangeAssaultNetParam::ChangeTime' has a wrong offset!");

// ScriptStruct Snowfall.RayTraceAndOffsetFxPropJoint
// 0x0014 (0x0014 - 0x0000)
struct FRayTraceAndOffsetFxPropJoint final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   JointName;                                         // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRayTraceAndOffsetFxPropJoint) == 0x000004, "Wrong alignment on FRayTraceAndOffsetFxPropJoint");
static_assert(sizeof(FRayTraceAndOffsetFxPropJoint) == 0x000014, "Wrong size on FRayTraceAndOffsetFxPropJoint");
static_assert(offsetof(FRayTraceAndOffsetFxPropJoint, JointName) == 0x00000C, "Member 'FRayTraceAndOffsetFxPropJoint::JointName' has a wrong offset!");

// ScriptStruct Snowfall.SnfSoundSimpleParam
// 0x0018 (0x0018 - 0x0000)
struct FSnfSoundSimpleParam final
{
public:
	class UAkAudioEvent*                          Sound;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFollow;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfSoundSimpleParam) == 0x000008, "Wrong alignment on FSnfSoundSimpleParam");
static_assert(sizeof(FSnfSoundSimpleParam) == 0x000018, "Wrong size on FSnfSoundSimpleParam");
static_assert(offsetof(FSnfSoundSimpleParam, Sound) == 0x000000, "Member 'FSnfSoundSimpleParam::Sound' has a wrong offset!");
static_assert(offsetof(FSnfSoundSimpleParam, SocketName) == 0x000008, "Member 'FSnfSoundSimpleParam::SocketName' has a wrong offset!");
static_assert(offsetof(FSnfSoundSimpleParam, bFollow) == 0x000010, "Member 'FSnfSoundSimpleParam::bFollow' has a wrong offset!");

// ScriptStruct Snowfall.SnfAttuneTriggerEvents
// 0x0010 (0x0010 - 0x0000)
struct FSnfAttuneTriggerEvents final
{
public:
	TArray<struct FSnfSoundSimpleParam>           Sounds;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAttuneTriggerEvents) == 0x000008, "Wrong alignment on FSnfAttuneTriggerEvents");
static_assert(sizeof(FSnfAttuneTriggerEvents) == 0x000010, "Wrong size on FSnfAttuneTriggerEvents");
static_assert(offsetof(FSnfAttuneTriggerEvents, Sounds) == 0x000000, "Member 'FSnfAttuneTriggerEvents::Sounds' has a wrong offset!");

// ScriptStruct Snowfall.SnfWidgetInputAxisKeyInfo
// 0x0020 (0x0020 - 0x0000)
struct FSnfWidgetInputAxisKeyInfo final
{
public:
	TSubclassOf<class USnfWidgetInputKeySettingObject> Class;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfWidgetInputAxisKeyInfo) == 0x000008, "Wrong alignment on FSnfWidgetInputAxisKeyInfo");
static_assert(sizeof(FSnfWidgetInputAxisKeyInfo) == 0x000020, "Wrong size on FSnfWidgetInputAxisKeyInfo");
static_assert(offsetof(FSnfWidgetInputAxisKeyInfo, Class) == 0x000000, "Member 'FSnfWidgetInputAxisKeyInfo::Class' has a wrong offset!");

// ScriptStruct Snowfall.SnfAttuneTest
// 0x000C (0x000C - 0x0000)
struct FSnfAttuneTest final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAttuneTest) == 0x000004, "Wrong alignment on FSnfAttuneTest");
static_assert(sizeof(FSnfAttuneTest) == 0x00000C, "Wrong size on FSnfAttuneTest");
static_assert(offsetof(FSnfAttuneTest, BoneName) == 0x000000, "Member 'FSnfAttuneTest::BoneName' has a wrong offset!");
static_assert(offsetof(FSnfAttuneTest, Radius) == 0x000008, "Member 'FSnfAttuneTest::Radius' has a wrong offset!");

// ScriptStruct Snowfall.SnfDivisionBaseActorNavigationSetting
// 0x0010 (0x0010 - 0x0000)
struct FSnfDivisionBaseActorNavigationSetting final
{
public:
	int32                                         PartsIndex;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInstancedStaticMeshComponent*          InstancedNavigationMesh;                           // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDivisionBaseActorNavigationSetting) == 0x000008, "Wrong alignment on FSnfDivisionBaseActorNavigationSetting");
static_assert(sizeof(FSnfDivisionBaseActorNavigationSetting) == 0x000010, "Wrong size on FSnfDivisionBaseActorNavigationSetting");
static_assert(offsetof(FSnfDivisionBaseActorNavigationSetting, PartsIndex) == 0x000000, "Member 'FSnfDivisionBaseActorNavigationSetting::PartsIndex' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseActorNavigationSetting, InstancedNavigationMesh) == 0x000008, "Member 'FSnfDivisionBaseActorNavigationSetting::InstancedNavigationMesh' has a wrong offset!");

// ScriptStruct Snowfall.SnfAttuneVectorParam
// 0x0010 (0x0010 - 0x0000)
struct FSnfAttuneVectorParam final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           CurveData;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAttuneVectorParam) == 0x000008, "Wrong alignment on FSnfAttuneVectorParam");
static_assert(sizeof(FSnfAttuneVectorParam) == 0x000010, "Wrong size on FSnfAttuneVectorParam");
static_assert(offsetof(FSnfAttuneVectorParam, ParamName) == 0x000000, "Member 'FSnfAttuneVectorParam::ParamName' has a wrong offset!");
static_assert(offsetof(FSnfAttuneVectorParam, CurveData) == 0x000008, "Member 'FSnfAttuneVectorParam::CurveData' has a wrong offset!");

// ScriptStruct Snowfall.SnfConditionEffectVectorData
// 0x0058 (0x0058 - 0x0000)
struct FSnfConditionEffectVectorData final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NormalConditionParam;                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OtherConditionParam;                               // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DamageConditionParam;                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x20];                                      // 0x0038(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfConditionEffectVectorData) == 0x000004, "Wrong alignment on FSnfConditionEffectVectorData");
static_assert(sizeof(FSnfConditionEffectVectorData) == 0x000058, "Wrong size on FSnfConditionEffectVectorData");
static_assert(offsetof(FSnfConditionEffectVectorData, ParamName) == 0x000000, "Member 'FSnfConditionEffectVectorData::ParamName' has a wrong offset!");
static_assert(offsetof(FSnfConditionEffectVectorData, NormalConditionParam) == 0x000008, "Member 'FSnfConditionEffectVectorData::NormalConditionParam' has a wrong offset!");
static_assert(offsetof(FSnfConditionEffectVectorData, OtherConditionParam) == 0x000018, "Member 'FSnfConditionEffectVectorData::OtherConditionParam' has a wrong offset!");
static_assert(offsetof(FSnfConditionEffectVectorData, DamageConditionParam) == 0x000028, "Member 'FSnfConditionEffectVectorData::DamageConditionParam' has a wrong offset!");

// ScriptStruct Snowfall.SnfAttuneScalarParam
// 0x0010 (0x0010 - 0x0000)
struct FSnfAttuneScalarParam final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CurveData;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAttuneScalarParam) == 0x000008, "Wrong alignment on FSnfAttuneScalarParam");
static_assert(sizeof(FSnfAttuneScalarParam) == 0x000010, "Wrong size on FSnfAttuneScalarParam");
static_assert(offsetof(FSnfAttuneScalarParam, ParamName) == 0x000000, "Member 'FSnfAttuneScalarParam::ParamName' has a wrong offset!");
static_assert(offsetof(FSnfAttuneScalarParam, CurveData) == 0x000008, "Member 'FSnfAttuneScalarParam::CurveData' has a wrong offset!");

// ScriptStruct Snowfall.SnfHYCompanionSubMeshParam
// 0x0058 (0x0058 - 0x0000)
struct FSnfHYCompanionSubMeshParam final
{
public:
	TSoftObjectPtr<class USkeletalMesh>           MeshClass;                                         // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       MaterialClass;                                     // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachName;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfHYCompanionSubMeshParam) == 0x000008, "Wrong alignment on FSnfHYCompanionSubMeshParam");
static_assert(sizeof(FSnfHYCompanionSubMeshParam) == 0x000058, "Wrong size on FSnfHYCompanionSubMeshParam");
static_assert(offsetof(FSnfHYCompanionSubMeshParam, MeshClass) == 0x000000, "Member 'FSnfHYCompanionSubMeshParam::MeshClass' has a wrong offset!");
static_assert(offsetof(FSnfHYCompanionSubMeshParam, MaterialClass) == 0x000028, "Member 'FSnfHYCompanionSubMeshParam::MaterialClass' has a wrong offset!");
static_assert(offsetof(FSnfHYCompanionSubMeshParam, AttachName) == 0x000050, "Member 'FSnfHYCompanionSubMeshParam::AttachName' has a wrong offset!");

// ScriptStruct Snowfall.SnfPlacableItem
// 0x0010 (0x0010 - 0x0000)
struct FSnfPlacableItem final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrequencyLevel;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfPlacableItem) == 0x000008, "Wrong alignment on FSnfPlacableItem");
static_assert(sizeof(FSnfPlacableItem) == 0x000010, "Wrong size on FSnfPlacableItem");
static_assert(offsetof(FSnfPlacableItem, StaticMesh) == 0x000000, "Member 'FSnfPlacableItem::StaticMesh' has a wrong offset!");
static_assert(offsetof(FSnfPlacableItem, FrequencyLevel) == 0x000008, "Member 'FSnfPlacableItem::FrequencyLevel' has a wrong offset!");

// ScriptStruct Snowfall.SnfEspWidgetParam
// 0x0060 (0x0060 - 0x0000)
struct FSnfEspWidgetParam final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	EEasingFunc                                   EasingType;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EasingTimeMax;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x4];                                       // 0x0018(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaitTimeMax;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnStartChange;                                     // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnEndChange;                                       // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangeEspRate;                                   // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfEspWidgetParam) == 0x000008, "Wrong alignment on FSnfEspWidgetParam");
static_assert(sizeof(FSnfEspWidgetParam) == 0x000060, "Wrong size on FSnfEspWidgetParam");
static_assert(offsetof(FSnfEspWidgetParam, EasingType) == 0x000010, "Member 'FSnfEspWidgetParam::EasingType' has a wrong offset!");
static_assert(offsetof(FSnfEspWidgetParam, EasingTimeMax) == 0x000014, "Member 'FSnfEspWidgetParam::EasingTimeMax' has a wrong offset!");
static_assert(offsetof(FSnfEspWidgetParam, WaitTimeMax) == 0x00001C, "Member 'FSnfEspWidgetParam::WaitTimeMax' has a wrong offset!");
static_assert(offsetof(FSnfEspWidgetParam, OnStartChange) == 0x000028, "Member 'FSnfEspWidgetParam::OnStartChange' has a wrong offset!");
static_assert(offsetof(FSnfEspWidgetParam, OnEndChange) == 0x000038, "Member 'FSnfEspWidgetParam::OnEndChange' has a wrong offset!");
static_assert(offsetof(FSnfEspWidgetParam, OnChangeEspRate) == 0x000048, "Member 'FSnfEspWidgetParam::OnChangeEspRate' has a wrong offset!");

// ScriptStruct Snowfall.SnfPlayerAbsorbInfo
// 0x0048 (0x0048 - 0x0000)
struct FSnfPlayerAbsorbInfo final
{
public:
	class UParticleSystemComponent*               ParticleComponent;                                 // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASnfSplineFxProps*                      FxProps;                                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASnfEnemyCharacter>      Target;                                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASnfMarebitoCore>        Core;                                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Ghost;                                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        TangentPoint;                                      // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class ASnfPlayerAbsorbWire*                   Wire;                                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoreHP;                                            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfPlayerAbsorbInfo) == 0x000008, "Wrong alignment on FSnfPlayerAbsorbInfo");
static_assert(sizeof(FSnfPlayerAbsorbInfo) == 0x000048, "Wrong size on FSnfPlayerAbsorbInfo");
static_assert(offsetof(FSnfPlayerAbsorbInfo, ParticleComponent) == 0x000000, "Member 'FSnfPlayerAbsorbInfo::ParticleComponent' has a wrong offset!");
static_assert(offsetof(FSnfPlayerAbsorbInfo, FxProps) == 0x000008, "Member 'FSnfPlayerAbsorbInfo::FxProps' has a wrong offset!");
static_assert(offsetof(FSnfPlayerAbsorbInfo, Target) == 0x000010, "Member 'FSnfPlayerAbsorbInfo::Target' has a wrong offset!");
static_assert(offsetof(FSnfPlayerAbsorbInfo, Core) == 0x000018, "Member 'FSnfPlayerAbsorbInfo::Core' has a wrong offset!");
static_assert(offsetof(FSnfPlayerAbsorbInfo, Ghost) == 0x000020, "Member 'FSnfPlayerAbsorbInfo::Ghost' has a wrong offset!");
static_assert(offsetof(FSnfPlayerAbsorbInfo, TangentPoint) == 0x000028, "Member 'FSnfPlayerAbsorbInfo::TangentPoint' has a wrong offset!");
static_assert(offsetof(FSnfPlayerAbsorbInfo, Wire) == 0x000038, "Member 'FSnfPlayerAbsorbInfo::Wire' has a wrong offset!");
static_assert(offsetof(FSnfPlayerAbsorbInfo, CoreHP) == 0x000040, "Member 'FSnfPlayerAbsorbInfo::CoreHP' has a wrong offset!");

// ScriptStruct Snowfall.StealthBattleTutorial
// 0x0020 (0x0020 - 0x0000)
struct FStealthBattleTutorial final
{
public:
	class FName                                   StartTalkID;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StealthSuccessTalkID;                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FoundTalkID;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StealthFailureBattleTalkID;                        // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStealthBattleTutorial) == 0x000004, "Wrong alignment on FStealthBattleTutorial");
static_assert(sizeof(FStealthBattleTutorial) == 0x000020, "Wrong size on FStealthBattleTutorial");
static_assert(offsetof(FStealthBattleTutorial, StartTalkID) == 0x000000, "Member 'FStealthBattleTutorial::StartTalkID' has a wrong offset!");
static_assert(offsetof(FStealthBattleTutorial, StealthSuccessTalkID) == 0x000008, "Member 'FStealthBattleTutorial::StealthSuccessTalkID' has a wrong offset!");
static_assert(offsetof(FStealthBattleTutorial, FoundTalkID) == 0x000010, "Member 'FStealthBattleTutorial::FoundTalkID' has a wrong offset!");
static_assert(offsetof(FStealthBattleTutorial, StealthFailureBattleTalkID) == 0x000018, "Member 'FStealthBattleTutorial::StealthFailureBattleTalkID' has a wrong offset!");

// ScriptStruct Snowfall.BattleTutorialTwoEnemyCorePullOut
// 0x0030 (0x0030 - 0x0000)
struct FBattleTutorialTwoEnemyCorePullOut final
{
public:
	class FName                                   StartTalkID;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndTalkID;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartTalkWait;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndTalkWait;                                      // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           MissTalkIdList;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattleTutorialTwoEnemyCorePullOut) == 0x000008, "Wrong alignment on FBattleTutorialTwoEnemyCorePullOut");
static_assert(sizeof(FBattleTutorialTwoEnemyCorePullOut) == 0x000030, "Wrong size on FBattleTutorialTwoEnemyCorePullOut");
static_assert(offsetof(FBattleTutorialTwoEnemyCorePullOut, StartTalkID) == 0x000000, "Member 'FBattleTutorialTwoEnemyCorePullOut::StartTalkID' has a wrong offset!");
static_assert(offsetof(FBattleTutorialTwoEnemyCorePullOut, EndTalkID) == 0x000008, "Member 'FBattleTutorialTwoEnemyCorePullOut::EndTalkID' has a wrong offset!");
static_assert(offsetof(FBattleTutorialTwoEnemyCorePullOut, bStartTalkWait) == 0x000010, "Member 'FBattleTutorialTwoEnemyCorePullOut::bStartTalkWait' has a wrong offset!");
static_assert(offsetof(FBattleTutorialTwoEnemyCorePullOut, bEndTalkWait) == 0x000011, "Member 'FBattleTutorialTwoEnemyCorePullOut::bEndTalkWait' has a wrong offset!");
static_assert(offsetof(FBattleTutorialTwoEnemyCorePullOut, MissTalkIdList) == 0x000018, "Member 'FBattleTutorialTwoEnemyCorePullOut::MissTalkIdList' has a wrong offset!");

// ScriptStruct Snowfall.SnfVendingMachineAppearanceComponent
// 0x0018 (0x0018 - 0x0000)
struct FSnfVendingMachineAppearanceComponent final
{
public:
	class UStaticMeshComponent*                   MachineMeshComponent;                              // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   ContentsMeshComponent;                             // 0x0008(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContentsIndex;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfVendingMachineAppearanceComponent) == 0x000008, "Wrong alignment on FSnfVendingMachineAppearanceComponent");
static_assert(sizeof(FSnfVendingMachineAppearanceComponent) == 0x000018, "Wrong size on FSnfVendingMachineAppearanceComponent");
static_assert(offsetof(FSnfVendingMachineAppearanceComponent, MachineMeshComponent) == 0x000000, "Member 'FSnfVendingMachineAppearanceComponent::MachineMeshComponent' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineAppearanceComponent, ContentsMeshComponent) == 0x000008, "Member 'FSnfVendingMachineAppearanceComponent::ContentsMeshComponent' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineAppearanceComponent, ContentsIndex) == 0x000010, "Member 'FSnfVendingMachineAppearanceComponent::ContentsIndex' has a wrong offset!");

// ScriptStruct Snowfall.SnfGimmickActorMaterialScalarValueSetting
// 0x0010 (0x0010 - 0x0000)
struct FSnfGimmickActorMaterialScalarValueSetting final
{
public:
	bool                                          bUseActiveSetting;                                 // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivateValue;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseInActiveSetting;                               // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InActivateValue;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGimmickActorMaterialScalarValueSetting) == 0x000004, "Wrong alignment on FSnfGimmickActorMaterialScalarValueSetting");
static_assert(sizeof(FSnfGimmickActorMaterialScalarValueSetting) == 0x000010, "Wrong size on FSnfGimmickActorMaterialScalarValueSetting");
static_assert(offsetof(FSnfGimmickActorMaterialScalarValueSetting, bUseActiveSetting) == 0x000000, "Member 'FSnfGimmickActorMaterialScalarValueSetting::bUseActiveSetting' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorMaterialScalarValueSetting, ActivateValue) == 0x000004, "Member 'FSnfGimmickActorMaterialScalarValueSetting::ActivateValue' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorMaterialScalarValueSetting, bUseInActiveSetting) == 0x000008, "Member 'FSnfGimmickActorMaterialScalarValueSetting::bUseInActiveSetting' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorMaterialScalarValueSetting, InActivateValue) == 0x00000C, "Member 'FSnfGimmickActorMaterialScalarValueSetting::InActivateValue' has a wrong offset!");

// ScriptStruct Snowfall.SnfGimmickActorMaterialVectorValueSetting
// 0x0030 (0x0030 - 0x0000)
struct FSnfGimmickActorMaterialVectorValueSetting final
{
public:
	bool                                          ReferencePartsSize;                                // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReferenceSizePartsIndex;                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelativeSize;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseActiveSetting;                                 // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ActivateValue;                                     // 0x000C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseInActiveSetting;                               // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           InActivateValue;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGimmickActorMaterialVectorValueSetting) == 0x000004, "Wrong alignment on FSnfGimmickActorMaterialVectorValueSetting");
static_assert(sizeof(FSnfGimmickActorMaterialVectorValueSetting) == 0x000030, "Wrong size on FSnfGimmickActorMaterialVectorValueSetting");
static_assert(offsetof(FSnfGimmickActorMaterialVectorValueSetting, ReferencePartsSize) == 0x000000, "Member 'FSnfGimmickActorMaterialVectorValueSetting::ReferencePartsSize' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorMaterialVectorValueSetting, ReferenceSizePartsIndex) == 0x000004, "Member 'FSnfGimmickActorMaterialVectorValueSetting::ReferenceSizePartsIndex' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorMaterialVectorValueSetting, bRelativeSize) == 0x000008, "Member 'FSnfGimmickActorMaterialVectorValueSetting::bRelativeSize' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorMaterialVectorValueSetting, bUseActiveSetting) == 0x000009, "Member 'FSnfGimmickActorMaterialVectorValueSetting::bUseActiveSetting' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorMaterialVectorValueSetting, ActivateValue) == 0x00000C, "Member 'FSnfGimmickActorMaterialVectorValueSetting::ActivateValue' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorMaterialVectorValueSetting, bUseInActiveSetting) == 0x00001C, "Member 'FSnfGimmickActorMaterialVectorValueSetting::bUseInActiveSetting' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorMaterialVectorValueSetting, InActivateValue) == 0x000020, "Member 'FSnfGimmickActorMaterialVectorValueSetting::InActivateValue' has a wrong offset!");

// ScriptStruct Snowfall.SnfGimmickActorMaterialSlotSetting
// 0x00A0 (0x00A0 - 0x0000)
struct FSnfGimmickActorMaterialSlotSetting final
{
public:
	TMap<class FName, struct FSnfGimmickActorMaterialScalarValueSetting> ScalarValueList;                                   // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSnfGimmickActorMaterialVectorValueSetting> VectorValueList;                                   // 0x0050(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGimmickActorMaterialSlotSetting) == 0x000008, "Wrong alignment on FSnfGimmickActorMaterialSlotSetting");
static_assert(sizeof(FSnfGimmickActorMaterialSlotSetting) == 0x0000A0, "Wrong size on FSnfGimmickActorMaterialSlotSetting");
static_assert(offsetof(FSnfGimmickActorMaterialSlotSetting, ScalarValueList) == 0x000000, "Member 'FSnfGimmickActorMaterialSlotSetting::ScalarValueList' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorMaterialSlotSetting, VectorValueList) == 0x000050, "Member 'FSnfGimmickActorMaterialSlotSetting::VectorValueList' has a wrong offset!");

// ScriptStruct Snowfall.BattleTutorialChargeShotCoreExposureOne
// 0x0030 (0x0030 - 0x0000)
struct FBattleTutorialChargeShotCoreExposureOne final
{
public:
	class FName                                   StartTalkID;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndTalkID;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartTalkWait;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndTalkWait;                                      // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           MissTalkIdList;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattleTutorialChargeShotCoreExposureOne) == 0x000008, "Wrong alignment on FBattleTutorialChargeShotCoreExposureOne");
static_assert(sizeof(FBattleTutorialChargeShotCoreExposureOne) == 0x000030, "Wrong size on FBattleTutorialChargeShotCoreExposureOne");
static_assert(offsetof(FBattleTutorialChargeShotCoreExposureOne, StartTalkID) == 0x000000, "Member 'FBattleTutorialChargeShotCoreExposureOne::StartTalkID' has a wrong offset!");
static_assert(offsetof(FBattleTutorialChargeShotCoreExposureOne, EndTalkID) == 0x000008, "Member 'FBattleTutorialChargeShotCoreExposureOne::EndTalkID' has a wrong offset!");
static_assert(offsetof(FBattleTutorialChargeShotCoreExposureOne, bStartTalkWait) == 0x000010, "Member 'FBattleTutorialChargeShotCoreExposureOne::bStartTalkWait' has a wrong offset!");
static_assert(offsetof(FBattleTutorialChargeShotCoreExposureOne, bEndTalkWait) == 0x000011, "Member 'FBattleTutorialChargeShotCoreExposureOne::bEndTalkWait' has a wrong offset!");
static_assert(offsetof(FBattleTutorialChargeShotCoreExposureOne, MissTalkIdList) == 0x000018, "Member 'FBattleTutorialChargeShotCoreExposureOne::MissTalkIdList' has a wrong offset!");

// ScriptStruct Snowfall.BattleTutorialNormalShotAllKill
// 0x0014 (0x0014 - 0x0000)
struct FBattleTutorialNormalShotAllKill final
{
public:
	class FName                                   StartTalkID;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndTalkID;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartTalkWait;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndTalkWait;                                      // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattleTutorialNormalShotAllKill) == 0x000004, "Wrong alignment on FBattleTutorialNormalShotAllKill");
static_assert(sizeof(FBattleTutorialNormalShotAllKill) == 0x000014, "Wrong size on FBattleTutorialNormalShotAllKill");
static_assert(offsetof(FBattleTutorialNormalShotAllKill, StartTalkID) == 0x000000, "Member 'FBattleTutorialNormalShotAllKill::StartTalkID' has a wrong offset!");
static_assert(offsetof(FBattleTutorialNormalShotAllKill, EndTalkID) == 0x000008, "Member 'FBattleTutorialNormalShotAllKill::EndTalkID' has a wrong offset!");
static_assert(offsetof(FBattleTutorialNormalShotAllKill, bStartTalkWait) == 0x000010, "Member 'FBattleTutorialNormalShotAllKill::bStartTalkWait' has a wrong offset!");
static_assert(offsetof(FBattleTutorialNormalShotAllKill, bEndTalkWait) == 0x000011, "Member 'FBattleTutorialNormalShotAllKill::bEndTalkWait' has a wrong offset!");

// ScriptStruct Snowfall.SnfPhotoModeCameraFrameParameter
// 0x0040 (0x0040 - 0x0000)
struct FSnfPhotoModeCameraFrameParameter final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Texture;                                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPhotoModeCameraFrameParameter) == 0x000008, "Wrong alignment on FSnfPhotoModeCameraFrameParameter");
static_assert(sizeof(FSnfPhotoModeCameraFrameParameter) == 0x000040, "Wrong size on FSnfPhotoModeCameraFrameParameter");
static_assert(offsetof(FSnfPhotoModeCameraFrameParameter, Texture) == 0x000038, "Member 'FSnfPhotoModeCameraFrameParameter::Texture' has a wrong offset!");

// ScriptStruct Snowfall.SnfHYCompanionTable
// 0x0038 (0x0040 - 0x0008)
struct FSnfHYCompanionTable final : public FTableRowBase
{
public:
	class FName                                   DefineName;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Trans;                                             // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfHYCompanionTable) == 0x000010, "Wrong alignment on FSnfHYCompanionTable");
static_assert(sizeof(FSnfHYCompanionTable) == 0x000040, "Wrong size on FSnfHYCompanionTable");
static_assert(offsetof(FSnfHYCompanionTable, DefineName) == 0x000008, "Member 'FSnfHYCompanionTable::DefineName' has a wrong offset!");
static_assert(offsetof(FSnfHYCompanionTable, Trans) == 0x000010, "Member 'FSnfHYCompanionTable::Trans' has a wrong offset!");

// ScriptStruct Snowfall.BattleTutorialGuard
// 0x0014 (0x0014 - 0x0000)
struct FBattleTutorialGuard final
{
public:
	class FName                                   StartTalkID;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndTalkID;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartTalkWait;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndTalkWait;                                      // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattleTutorialGuard) == 0x000004, "Wrong alignment on FBattleTutorialGuard");
static_assert(sizeof(FBattleTutorialGuard) == 0x000014, "Wrong size on FBattleTutorialGuard");
static_assert(offsetof(FBattleTutorialGuard, StartTalkID) == 0x000000, "Member 'FBattleTutorialGuard::StartTalkID' has a wrong offset!");
static_assert(offsetof(FBattleTutorialGuard, EndTalkID) == 0x000008, "Member 'FBattleTutorialGuard::EndTalkID' has a wrong offset!");
static_assert(offsetof(FBattleTutorialGuard, bStartTalkWait) == 0x000010, "Member 'FBattleTutorialGuard::bStartTalkWait' has a wrong offset!");
static_assert(offsetof(FBattleTutorialGuard, bEndTalkWait) == 0x000011, "Member 'FBattleTutorialGuard::bEndTalkWait' has a wrong offset!");

// ScriptStruct Snowfall.BattleTutorialNormalShotEnemyDefeat
// 0x0014 (0x0014 - 0x0000)
struct FBattleTutorialNormalShotEnemyDefeat final
{
public:
	class FName                                   StartTalkID;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndTalkID;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartTalkWait;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndTalkWait;                                      // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattleTutorialNormalShotEnemyDefeat) == 0x000004, "Wrong alignment on FBattleTutorialNormalShotEnemyDefeat");
static_assert(sizeof(FBattleTutorialNormalShotEnemyDefeat) == 0x000014, "Wrong size on FBattleTutorialNormalShotEnemyDefeat");
static_assert(offsetof(FBattleTutorialNormalShotEnemyDefeat, StartTalkID) == 0x000000, "Member 'FBattleTutorialNormalShotEnemyDefeat::StartTalkID' has a wrong offset!");
static_assert(offsetof(FBattleTutorialNormalShotEnemyDefeat, EndTalkID) == 0x000008, "Member 'FBattleTutorialNormalShotEnemyDefeat::EndTalkID' has a wrong offset!");
static_assert(offsetof(FBattleTutorialNormalShotEnemyDefeat, bStartTalkWait) == 0x000010, "Member 'FBattleTutorialNormalShotEnemyDefeat::bStartTalkWait' has a wrong offset!");
static_assert(offsetof(FBattleTutorialNormalShotEnemyDefeat, bEndTalkWait) == 0x000011, "Member 'FBattleTutorialNormalShotEnemyDefeat::bEndTalkWait' has a wrong offset!");

// ScriptStruct Snowfall.SnfInteractActorMultipleInteractComponent
// 0x0030 (0x0030 - 0x0000)
struct FSnfInteractActorMultipleInteractComponent final
{
public:
	class USnfInteractComponent*                  InteractComponent;                                 // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UShapeComponent*>                InteractCollitionArray;                            // 0x0008(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         RelationPartsIndex;                                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RelationInteractList;                              // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfInteractActorMultipleInteractComponent) == 0x000008, "Wrong alignment on FSnfInteractActorMultipleInteractComponent");
static_assert(sizeof(FSnfInteractActorMultipleInteractComponent) == 0x000030, "Wrong size on FSnfInteractActorMultipleInteractComponent");
static_assert(offsetof(FSnfInteractActorMultipleInteractComponent, InteractComponent) == 0x000000, "Member 'FSnfInteractActorMultipleInteractComponent::InteractComponent' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleInteractComponent, InteractCollitionArray) == 0x000008, "Member 'FSnfInteractActorMultipleInteractComponent::InteractCollitionArray' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleInteractComponent, RelationPartsIndex) == 0x000018, "Member 'FSnfInteractActorMultipleInteractComponent::RelationPartsIndex' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleInteractComponent, RelationInteractList) == 0x000020, "Member 'FSnfInteractActorMultipleInteractComponent::RelationInteractList' has a wrong offset!");

// ScriptStruct Snowfall.SnfPhotoModeFigureParameter
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x10) FSnfPhotoModeFigureParameter final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 FigureActor;                                       // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPhotoModeFigureParameter) == 0x000010, "Wrong alignment on FSnfPhotoModeFigureParameter");
static_assert(sizeof(FSnfPhotoModeFigureParameter) == 0x000070, "Wrong size on FSnfPhotoModeFigureParameter");
static_assert(offsetof(FSnfPhotoModeFigureParameter, FigureActor) == 0x000068, "Member 'FSnfPhotoModeFigureParameter::FigureActor' has a wrong offset!");

// ScriptStruct Snowfall.BattleTutorialNormalShot
// 0x0014 (0x0014 - 0x0000)
struct FBattleTutorialNormalShot final
{
public:
	class FName                                   StartTalkID;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndTalkID;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartTalkWait;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndTalkWait;                                      // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattleTutorialNormalShot) == 0x000004, "Wrong alignment on FBattleTutorialNormalShot");
static_assert(sizeof(FBattleTutorialNormalShot) == 0x000014, "Wrong size on FBattleTutorialNormalShot");
static_assert(offsetof(FBattleTutorialNormalShot, StartTalkID) == 0x000000, "Member 'FBattleTutorialNormalShot::StartTalkID' has a wrong offset!");
static_assert(offsetof(FBattleTutorialNormalShot, EndTalkID) == 0x000008, "Member 'FBattleTutorialNormalShot::EndTalkID' has a wrong offset!");
static_assert(offsetof(FBattleTutorialNormalShot, bStartTalkWait) == 0x000010, "Member 'FBattleTutorialNormalShot::bStartTalkWait' has a wrong offset!");
static_assert(offsetof(FBattleTutorialNormalShot, bEndTalkWait) == 0x000011, "Member 'FBattleTutorialNormalShot::bEndTalkWait' has a wrong offset!");

// ScriptStruct Snowfall.SnfPictureStoryInfo
// 0x0028 (0x0030 - 0x0008)
struct FSnfPictureStoryInfo final : public FTableRowBase
{
public:
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextID;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Comment;                                           // 0x0018(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPictureStoryInfo) == 0x000008, "Wrong alignment on FSnfPictureStoryInfo");
static_assert(sizeof(FSnfPictureStoryInfo) == 0x000030, "Wrong size on FSnfPictureStoryInfo");
static_assert(offsetof(FSnfPictureStoryInfo, Texture) == 0x000008, "Member 'FSnfPictureStoryInfo::Texture' has a wrong offset!");
static_assert(offsetof(FSnfPictureStoryInfo, NextID) == 0x000010, "Member 'FSnfPictureStoryInfo::NextID' has a wrong offset!");
static_assert(offsetof(FSnfPictureStoryInfo, Comment) == 0x000018, "Member 'FSnfPictureStoryInfo::Comment' has a wrong offset!");

// ScriptStruct Snowfall.BattleTutorialEnemySetData
// 0x0010 (0x0010 - 0x0000)
struct FBattleTutorialEnemySetData final
{
public:
	TArray<class ASnfJobActor*>                   List;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleTutorialEnemySetData) == 0x000008, "Wrong alignment on FBattleTutorialEnemySetData");
static_assert(sizeof(FBattleTutorialEnemySetData) == 0x000010, "Wrong size on FBattleTutorialEnemySetData");
static_assert(offsetof(FBattleTutorialEnemySetData, List) == 0x000000, "Member 'FBattleTutorialEnemySetData::List' has a wrong offset!");

// ScriptStruct Snowfall.SnfTeleportInfo
// 0x0058 (0x0058 - 0x0000)
struct FSnfTeleportInfo final
{
public:
	TSoftObjectPtr<class UWorld>                  Level;                                             // 0x0000(0x0028)(Edit, DisableEditOnTemplate, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ASnfFacadeBase>          Facade;                                            // 0x0028(0x0028)(Edit, DisableEditOnTemplate, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SequenceId;                                        // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTeleportInfo) == 0x000008, "Wrong alignment on FSnfTeleportInfo");
static_assert(sizeof(FSnfTeleportInfo) == 0x000058, "Wrong size on FSnfTeleportInfo");
static_assert(offsetof(FSnfTeleportInfo, Level) == 0x000000, "Member 'FSnfTeleportInfo::Level' has a wrong offset!");
static_assert(offsetof(FSnfTeleportInfo, Facade) == 0x000028, "Member 'FSnfTeleportInfo::Facade' has a wrong offset!");
static_assert(offsetof(FSnfTeleportInfo, Percent) == 0x000050, "Member 'FSnfTeleportInfo::Percent' has a wrong offset!");
static_assert(offsetof(FSnfTeleportInfo, SequenceId) == 0x000054, "Member 'FSnfTeleportInfo::SequenceId' has a wrong offset!");

// ScriptStruct Snowfall.BattleTutorialEnemyData
// 0x001C (0x001C - 0x0000)
struct FBattleTutorialEnemyData final
{
public:
	bool                                          OnFlag;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpwanFlag;                                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KillFlag;                                          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BackstabKillFlag;                                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASnfJobActor>            JobActor;                                          // 0x000C(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USnfJobComponent>        JobComponent;                                      // 0x0014(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleTutorialEnemyData) == 0x000004, "Wrong alignment on FBattleTutorialEnemyData");
static_assert(sizeof(FBattleTutorialEnemyData) == 0x00001C, "Wrong size on FBattleTutorialEnemyData");
static_assert(offsetof(FBattleTutorialEnemyData, OnFlag) == 0x000000, "Member 'FBattleTutorialEnemyData::OnFlag' has a wrong offset!");
static_assert(offsetof(FBattleTutorialEnemyData, SpwanFlag) == 0x000001, "Member 'FBattleTutorialEnemyData::SpwanFlag' has a wrong offset!");
static_assert(offsetof(FBattleTutorialEnemyData, KillFlag) == 0x000002, "Member 'FBattleTutorialEnemyData::KillFlag' has a wrong offset!");
static_assert(offsetof(FBattleTutorialEnemyData, BackstabKillFlag) == 0x000003, "Member 'FBattleTutorialEnemyData::BackstabKillFlag' has a wrong offset!");
static_assert(offsetof(FBattleTutorialEnemyData, TargetActor) == 0x000004, "Member 'FBattleTutorialEnemyData::TargetActor' has a wrong offset!");
static_assert(offsetof(FBattleTutorialEnemyData, JobActor) == 0x00000C, "Member 'FBattleTutorialEnemyData::JobActor' has a wrong offset!");
static_assert(offsetof(FBattleTutorialEnemyData, JobComponent) == 0x000014, "Member 'FBattleTutorialEnemyData::JobComponent' has a wrong offset!");

// ScriptStruct Snowfall.BattleTutorialEnemyInfo
// 0x0018 (0x0018 - 0x0000)
struct FBattleTutorialEnemyInfo final
{
public:
	bool                                          OnFlag;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBattleTutorialEnemyData>       EnemyList;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleTutorialEnemyInfo) == 0x000008, "Wrong alignment on FBattleTutorialEnemyInfo");
static_assert(sizeof(FBattleTutorialEnemyInfo) == 0x000018, "Wrong size on FBattleTutorialEnemyInfo");
static_assert(offsetof(FBattleTutorialEnemyInfo, OnFlag) == 0x000000, "Member 'FBattleTutorialEnemyInfo::OnFlag' has a wrong offset!");
static_assert(offsetof(FBattleTutorialEnemyInfo, EnemyList) == 0x000008, "Member 'FBattleTutorialEnemyInfo::EnemyList' has a wrong offset!");

// ScriptStruct Snowfall.USnfHBModelPeekPointParam
// 0x0038 (0x0038 - 0x0000)
struct FUSnfHBModelPeekPointParam final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATriggerBox*                            TriggerBox;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfPeekPointAnimType                         AnimType;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x17];                                      // 0x0021(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUSnfHBModelPeekPointParam) == 0x000008, "Wrong alignment on FUSnfHBModelPeekPointParam");
static_assert(sizeof(FUSnfHBModelPeekPointParam) == 0x000038, "Wrong size on FUSnfHBModelPeekPointParam");
static_assert(offsetof(FUSnfHBModelPeekPointParam, bEnable) == 0x000000, "Member 'FUSnfHBModelPeekPointParam::bEnable' has a wrong offset!");
static_assert(offsetof(FUSnfHBModelPeekPointParam, TriggerBox) == 0x000008, "Member 'FUSnfHBModelPeekPointParam::TriggerBox' has a wrong offset!");
static_assert(offsetof(FUSnfHBModelPeekPointParam, Pos) == 0x000010, "Member 'FUSnfHBModelPeekPointParam::Pos' has a wrong offset!");
static_assert(offsetof(FUSnfHBModelPeekPointParam, Angle) == 0x00001C, "Member 'FUSnfHBModelPeekPointParam::Angle' has a wrong offset!");
static_assert(offsetof(FUSnfHBModelPeekPointParam, AnimType) == 0x000020, "Member 'FUSnfHBModelPeekPointParam::AnimType' has a wrong offset!");

// ScriptStruct Snowfall.SnfBinocularsActorActivityAction
// 0x0010 (0x0010 - 0x0000)
struct FSnfBinocularsActorActivityAction final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TypeAction;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfBinocularsActorActivityAction) == 0x000008, "Wrong alignment on FSnfBinocularsActorActivityAction");
static_assert(sizeof(FSnfBinocularsActorActivityAction) == 0x000010, "Wrong size on FSnfBinocularsActorActivityAction");
static_assert(offsetof(FSnfBinocularsActorActivityAction, TargetActor) == 0x000000, "Member 'FSnfBinocularsActorActivityAction::TargetActor' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorActivityAction, TypeAction) == 0x000008, "Member 'FSnfBinocularsActorActivityAction::TypeAction' has a wrong offset!");

// ScriptStruct Snowfall.SnfBinocularsActorEventSetting
// 0x0050 (0x0050 - 0x0000)
struct FSnfBinocularsActorEventSetting final
{
public:
	class AActor*                                 EventTarget;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FindZoomRate;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FindZoomTime;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSnfBinocularsActorActivityAction> StartZoomActionList;                               // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfBinocularsActorActivityAction> EndZoomActionList;                                 // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   GroupKey;                                          // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FOPlayList;                                        // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FOLocation;                                        // 0x0040(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfBinocularsActorEventSetting) == 0x000008, "Wrong alignment on FSnfBinocularsActorEventSetting");
static_assert(sizeof(FSnfBinocularsActorEventSetting) == 0x000050, "Wrong size on FSnfBinocularsActorEventSetting");
static_assert(offsetof(FSnfBinocularsActorEventSetting, EventTarget) == 0x000000, "Member 'FSnfBinocularsActorEventSetting::EventTarget' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorEventSetting, FindZoomRate) == 0x000008, "Member 'FSnfBinocularsActorEventSetting::FindZoomRate' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorEventSetting, FindZoomTime) == 0x00000C, "Member 'FSnfBinocularsActorEventSetting::FindZoomTime' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorEventSetting, StartZoomActionList) == 0x000010, "Member 'FSnfBinocularsActorEventSetting::StartZoomActionList' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorEventSetting, EndZoomActionList) == 0x000020, "Member 'FSnfBinocularsActorEventSetting::EndZoomActionList' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorEventSetting, GroupKey) == 0x000030, "Member 'FSnfBinocularsActorEventSetting::GroupKey' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorEventSetting, FOPlayList) == 0x000038, "Member 'FSnfBinocularsActorEventSetting::FOPlayList' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorEventSetting, FOLocation) == 0x000040, "Member 'FSnfBinocularsActorEventSetting::FOLocation' has a wrong offset!");

// ScriptStruct Snowfall.SnfHyakkiyakoAreaInfo
// 0x0050 (0x0050 - 0x0000)
struct FSnfHyakkiyakoAreaInfo final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CollisionSize;                                     // 0x0030(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USnfBoxComponent*                       BoxCollision;                                      // 0x0040(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   JobGroupTag;                                       // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfHyakkiyakoAreaInfo) == 0x000010, "Wrong alignment on FSnfHyakkiyakoAreaInfo");
static_assert(sizeof(FSnfHyakkiyakoAreaInfo) == 0x000050, "Wrong size on FSnfHyakkiyakoAreaInfo");
static_assert(offsetof(FSnfHyakkiyakoAreaInfo, Transform) == 0x000000, "Member 'FSnfHyakkiyakoAreaInfo::Transform' has a wrong offset!");
static_assert(offsetof(FSnfHyakkiyakoAreaInfo, CollisionSize) == 0x000030, "Member 'FSnfHyakkiyakoAreaInfo::CollisionSize' has a wrong offset!");
static_assert(offsetof(FSnfHyakkiyakoAreaInfo, BoxCollision) == 0x000040, "Member 'FSnfHyakkiyakoAreaInfo::BoxCollision' has a wrong offset!");
static_assert(offsetof(FSnfHyakkiyakoAreaInfo, JobGroupTag) == 0x000048, "Member 'FSnfHyakkiyakoAreaInfo::JobGroupTag' has a wrong offset!");

// ScriptStruct Snowfall.SnfToriiActorPurgeEtherCost
// 0x000C (0x000C - 0x0000)
struct FSnfToriiActorPurgeEtherCost final
{
public:
	int32                                         EtherN;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EtherR;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EtherL;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfToriiActorPurgeEtherCost) == 0x000004, "Wrong alignment on FSnfToriiActorPurgeEtherCost");
static_assert(sizeof(FSnfToriiActorPurgeEtherCost) == 0x00000C, "Wrong size on FSnfToriiActorPurgeEtherCost");
static_assert(offsetof(FSnfToriiActorPurgeEtherCost, EtherN) == 0x000000, "Member 'FSnfToriiActorPurgeEtherCost::EtherN' has a wrong offset!");
static_assert(offsetof(FSnfToriiActorPurgeEtherCost, EtherR) == 0x000004, "Member 'FSnfToriiActorPurgeEtherCost::EtherR' has a wrong offset!");
static_assert(offsetof(FSnfToriiActorPurgeEtherCost, EtherL) == 0x000008, "Member 'FSnfToriiActorPurgeEtherCost::EtherL' has a wrong offset!");

// ScriptStruct Snowfall.SnfBinocularsActorActivityActionSoft
// 0x0030 (0x0030 - 0x0000)
struct FSnfBinocularsActorActivityActionSoft final
{
public:
	TSoftObjectPtr<class AActor>                  TargetActor;                                       // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TypeAction;                                        // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfBinocularsActorActivityActionSoft) == 0x000008, "Wrong alignment on FSnfBinocularsActorActivityActionSoft");
static_assert(sizeof(FSnfBinocularsActorActivityActionSoft) == 0x000030, "Wrong size on FSnfBinocularsActorActivityActionSoft");
static_assert(offsetof(FSnfBinocularsActorActivityActionSoft, TargetActor) == 0x000000, "Member 'FSnfBinocularsActorActivityActionSoft::TargetActor' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorActivityActionSoft, TypeAction) == 0x000028, "Member 'FSnfBinocularsActorActivityActionSoft::TypeAction' has a wrong offset!");

// ScriptStruct Snowfall.SnfBinocularsActorEventViewSetting
// 0x0034 (0x0034 - 0x0000)
struct FSnfBinocularsActorEventViewSetting final
{
public:
	struct FVector                                EventTargetLocation;                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FindZoomRate;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FindZoomTime;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFindEventTarget;                                  // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEventCameraMode;                                // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GroupKey;                                          // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FOPlayList;                                        // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FOLocation;                                        // 0x0028(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfBinocularsActorEventViewSetting) == 0x000004, "Wrong alignment on FSnfBinocularsActorEventViewSetting");
static_assert(sizeof(FSnfBinocularsActorEventViewSetting) == 0x000034, "Wrong size on FSnfBinocularsActorEventViewSetting");
static_assert(offsetof(FSnfBinocularsActorEventViewSetting, EventTargetLocation) == 0x000000, "Member 'FSnfBinocularsActorEventViewSetting::EventTargetLocation' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorEventViewSetting, FindZoomRate) == 0x00000C, "Member 'FSnfBinocularsActorEventViewSetting::FindZoomRate' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorEventViewSetting, FindZoomTime) == 0x000010, "Member 'FSnfBinocularsActorEventViewSetting::FindZoomTime' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorEventViewSetting, bFindEventTarget) == 0x000014, "Member 'FSnfBinocularsActorEventViewSetting::bFindEventTarget' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorEventViewSetting, bIsEventCameraMode) == 0x000015, "Member 'FSnfBinocularsActorEventViewSetting::bIsEventCameraMode' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorEventViewSetting, GroupKey) == 0x000018, "Member 'FSnfBinocularsActorEventViewSetting::GroupKey' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorEventViewSetting, FOPlayList) == 0x000020, "Member 'FSnfBinocularsActorEventViewSetting::FOPlayList' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorEventViewSetting, FOLocation) == 0x000028, "Member 'FSnfBinocularsActorEventViewSetting::FOLocation' has a wrong offset!");

// ScriptStruct Snowfall.SnfBinocularsActorViewSetting
// 0x0078 (0x0078 - 0x0000)
struct FSnfBinocularsActorViewSetting final
{
public:
	struct FVector                                PlayerLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ViewCenter;                                        // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveAnglePitch;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveAngleYaw;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultFieldOfView;                                // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DefaultViewCenter;                                 // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FieldOfViewRateMin;                                // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FieldOfViewRateMax;                                // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EventTargetLocation;                               // 0x0038(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FindZoomRate;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FindZoomTime;                                      // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FOPlayList;                                        // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FOLocation;                                        // 0x0054(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSnfBinocularsActorEventViewSetting> EventViewSettingList;                              // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	bool                                          bDisableBack;                                      // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfBinocularsActorViewSetting) == 0x000008, "Wrong alignment on FSnfBinocularsActorViewSetting");
static_assert(sizeof(FSnfBinocularsActorViewSetting) == 0x000078, "Wrong size on FSnfBinocularsActorViewSetting");
static_assert(offsetof(FSnfBinocularsActorViewSetting, PlayerLocation) == 0x000000, "Member 'FSnfBinocularsActorViewSetting::PlayerLocation' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorViewSetting, ViewCenter) == 0x00000C, "Member 'FSnfBinocularsActorViewSetting::ViewCenter' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorViewSetting, MoveAnglePitch) == 0x000018, "Member 'FSnfBinocularsActorViewSetting::MoveAnglePitch' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorViewSetting, MoveAngleYaw) == 0x00001C, "Member 'FSnfBinocularsActorViewSetting::MoveAngleYaw' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorViewSetting, DefaultFieldOfView) == 0x000020, "Member 'FSnfBinocularsActorViewSetting::DefaultFieldOfView' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorViewSetting, DefaultViewCenter) == 0x000024, "Member 'FSnfBinocularsActorViewSetting::DefaultViewCenter' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorViewSetting, FieldOfViewRateMin) == 0x000030, "Member 'FSnfBinocularsActorViewSetting::FieldOfViewRateMin' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorViewSetting, FieldOfViewRateMax) == 0x000034, "Member 'FSnfBinocularsActorViewSetting::FieldOfViewRateMax' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorViewSetting, EventTargetLocation) == 0x000038, "Member 'FSnfBinocularsActorViewSetting::EventTargetLocation' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorViewSetting, FindZoomRate) == 0x000044, "Member 'FSnfBinocularsActorViewSetting::FindZoomRate' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorViewSetting, FindZoomTime) == 0x000048, "Member 'FSnfBinocularsActorViewSetting::FindZoomTime' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorViewSetting, FOPlayList) == 0x00004C, "Member 'FSnfBinocularsActorViewSetting::FOPlayList' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorViewSetting, FOLocation) == 0x000054, "Member 'FSnfBinocularsActorViewSetting::FOLocation' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorViewSetting, EventViewSettingList) == 0x000060, "Member 'FSnfBinocularsActorViewSetting::EventViewSettingList' has a wrong offset!");
static_assert(offsetof(FSnfBinocularsActorViewSetting, bDisableBack) == 0x000070, "Member 'FSnfBinocularsActorViewSetting::bDisableBack' has a wrong offset!");

// ScriptStruct Snowfall.SnfTitleAnimParam
// 0x0048 (0x0048 - 0x0000)
struct FSnfTitleAnimParam final
{
public:
	TWeakObjectPtr<class UBorder>                 AnimBorder;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UMaterialInstanceDynamic> MaterialR;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamNameR;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UMaterialInstanceDynamic> MaterialG;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamNameG;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UMaterialInstanceDynamic> MaterialB;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamNameB;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UMaterialInstanceDynamic> MaterialA;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamNameA;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTitleAnimParam) == 0x000004, "Wrong alignment on FSnfTitleAnimParam");
static_assert(sizeof(FSnfTitleAnimParam) == 0x000048, "Wrong size on FSnfTitleAnimParam");
static_assert(offsetof(FSnfTitleAnimParam, AnimBorder) == 0x000000, "Member 'FSnfTitleAnimParam::AnimBorder' has a wrong offset!");
static_assert(offsetof(FSnfTitleAnimParam, MaterialR) == 0x000008, "Member 'FSnfTitleAnimParam::MaterialR' has a wrong offset!");
static_assert(offsetof(FSnfTitleAnimParam, ParamNameR) == 0x000010, "Member 'FSnfTitleAnimParam::ParamNameR' has a wrong offset!");
static_assert(offsetof(FSnfTitleAnimParam, MaterialG) == 0x000018, "Member 'FSnfTitleAnimParam::MaterialG' has a wrong offset!");
static_assert(offsetof(FSnfTitleAnimParam, ParamNameG) == 0x000020, "Member 'FSnfTitleAnimParam::ParamNameG' has a wrong offset!");
static_assert(offsetof(FSnfTitleAnimParam, MaterialB) == 0x000028, "Member 'FSnfTitleAnimParam::MaterialB' has a wrong offset!");
static_assert(offsetof(FSnfTitleAnimParam, ParamNameB) == 0x000030, "Member 'FSnfTitleAnimParam::ParamNameB' has a wrong offset!");
static_assert(offsetof(FSnfTitleAnimParam, MaterialA) == 0x000038, "Member 'FSnfTitleAnimParam::MaterialA' has a wrong offset!");
static_assert(offsetof(FSnfTitleAnimParam, ParamNameA) == 0x000040, "Member 'FSnfTitleAnimParam::ParamNameA' has a wrong offset!");

// ScriptStruct Snowfall.SnfIntaractConditionTextTable
// 0x0030 (0x0038 - 0x0008)
struct FSnfIntaractConditionTextTable final : public FTableRowBase
{
public:
	EInteractCondition                            Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ConditionText;                                     // 0x0010(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          DrawReason;                                        // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Comment;                                           // 0x002C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfIntaractConditionTextTable) == 0x000008, "Wrong alignment on FSnfIntaractConditionTextTable");
static_assert(sizeof(FSnfIntaractConditionTextTable) == 0x000038, "Wrong size on FSnfIntaractConditionTextTable");
static_assert(offsetof(FSnfIntaractConditionTextTable, Type) == 0x000008, "Member 'FSnfIntaractConditionTextTable::Type' has a wrong offset!");
static_assert(offsetof(FSnfIntaractConditionTextTable, ConditionText) == 0x000010, "Member 'FSnfIntaractConditionTextTable::ConditionText' has a wrong offset!");
static_assert(offsetof(FSnfIntaractConditionTextTable, DrawReason) == 0x000028, "Member 'FSnfIntaractConditionTextTable::DrawReason' has a wrong offset!");
static_assert(offsetof(FSnfIntaractConditionTextTable, Comment) == 0x00002C, "Member 'FSnfIntaractConditionTextTable::Comment' has a wrong offset!");

// ScriptStruct Snowfall.BirdMaterialInfo
// 0x0020 (0x0020 - 0x0000)
struct FBirdMaterialInfo final
{
public:
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeOverrideIndex;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColourIndex;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeManualIndex;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BigFlapIndex;                                      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LittleFlapIndex;                                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBirdMaterialInfo) == 0x000008, "Wrong alignment on FBirdMaterialInfo");
static_assert(sizeof(FBirdMaterialInfo) == 0x000020, "Wrong size on FBirdMaterialInfo");
static_assert(offsetof(FBirdMaterialInfo, DynamicMaterial) == 0x000000, "Member 'FBirdMaterialInfo::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(FBirdMaterialInfo, TimeOverrideIndex) == 0x000008, "Member 'FBirdMaterialInfo::TimeOverrideIndex' has a wrong offset!");
static_assert(offsetof(FBirdMaterialInfo, ColourIndex) == 0x00000C, "Member 'FBirdMaterialInfo::ColourIndex' has a wrong offset!");
static_assert(offsetof(FBirdMaterialInfo, TimeManualIndex) == 0x000010, "Member 'FBirdMaterialInfo::TimeManualIndex' has a wrong offset!");
static_assert(offsetof(FBirdMaterialInfo, BigFlapIndex) == 0x000014, "Member 'FBirdMaterialInfo::BigFlapIndex' has a wrong offset!");
static_assert(offsetof(FBirdMaterialInfo, LittleFlapIndex) == 0x000018, "Member 'FBirdMaterialInfo::LittleFlapIndex' has a wrong offset!");

// ScriptStruct Snowfall.SnfHumanoidFootIK
// 0x001C (0x001C - 0x0000)
struct FSnfHumanoidFootIK final
{
public:
	struct FVector                                EffectorLocation;                                  // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                JointTargetLocation;                               // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfHumanoidFootIK) == 0x000004, "Wrong alignment on FSnfHumanoidFootIK");
static_assert(sizeof(FSnfHumanoidFootIK) == 0x00001C, "Wrong size on FSnfHumanoidFootIK");
static_assert(offsetof(FSnfHumanoidFootIK, EffectorLocation) == 0x000000, "Member 'FSnfHumanoidFootIK::EffectorLocation' has a wrong offset!");
static_assert(offsetof(FSnfHumanoidFootIK, JointTargetLocation) == 0x00000C, "Member 'FSnfHumanoidFootIK::JointTargetLocation' has a wrong offset!");
static_assert(offsetof(FSnfHumanoidFootIK, Alpha) == 0x000018, "Member 'FSnfHumanoidFootIK::Alpha' has a wrong offset!");

// ScriptStruct Snowfall.SnfInteractActorMultipleCollisionSetting
// 0x0060 (0x0060 - 0x0000)
struct FSnfInteractActorMultipleCollisionSetting final
{
public:
	class USceneComponent*                        CollisionRoot;                                     // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CollisionTransform;                                // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ESnfInteractCollisionType                     CollisionType;                                     // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoxSize;                                           // 0x0044(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereSize;                                        // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeight;                                 // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfInteractActorMultipleCollisionSetting) == 0x000010, "Wrong alignment on FSnfInteractActorMultipleCollisionSetting");
static_assert(sizeof(FSnfInteractActorMultipleCollisionSetting) == 0x000060, "Wrong size on FSnfInteractActorMultipleCollisionSetting");
static_assert(offsetof(FSnfInteractActorMultipleCollisionSetting, CollisionRoot) == 0x000000, "Member 'FSnfInteractActorMultipleCollisionSetting::CollisionRoot' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleCollisionSetting, CollisionTransform) == 0x000010, "Member 'FSnfInteractActorMultipleCollisionSetting::CollisionTransform' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleCollisionSetting, CollisionType) == 0x000040, "Member 'FSnfInteractActorMultipleCollisionSetting::CollisionType' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleCollisionSetting, BoxSize) == 0x000044, "Member 'FSnfInteractActorMultipleCollisionSetting::BoxSize' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleCollisionSetting, SphereSize) == 0x000050, "Member 'FSnfInteractActorMultipleCollisionSetting::SphereSize' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleCollisionSetting, CapsuleHalfHeight) == 0x000054, "Member 'FSnfInteractActorMultipleCollisionSetting::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleCollisionSetting, CapsuleRadius) == 0x000058, "Member 'FSnfInteractActorMultipleCollisionSetting::CapsuleRadius' has a wrong offset!");

// ScriptStruct Snowfall.SnfBTTaskAnimStateName
// 0x0010 (0x0010 - 0x0000)
struct FSnfBTTaskAnimStateName final
{
public:
	class FName                                   MachineName;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfBTTaskAnimStateName) == 0x000004, "Wrong alignment on FSnfBTTaskAnimStateName");
static_assert(sizeof(FSnfBTTaskAnimStateName) == 0x000010, "Wrong size on FSnfBTTaskAnimStateName");
static_assert(offsetof(FSnfBTTaskAnimStateName, MachineName) == 0x000000, "Member 'FSnfBTTaskAnimStateName::MachineName' has a wrong offset!");
static_assert(offsetof(FSnfBTTaskAnimStateName, StateName) == 0x000008, "Member 'FSnfBTTaskAnimStateName::StateName' has a wrong offset!");

// ScriptStruct Snowfall.SnfBuildingLODTableRow
// 0x0018 (0x0020 - 0x0008)
struct FSnfBuildingLODTableRow final : public FTableRowBase
{
public:
	class UStaticMesh*                            BaseMesh;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            LODMesh;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreSizeCheck;                                   // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfBuildingLODTableRow) == 0x000008, "Wrong alignment on FSnfBuildingLODTableRow");
static_assert(sizeof(FSnfBuildingLODTableRow) == 0x000020, "Wrong size on FSnfBuildingLODTableRow");
static_assert(offsetof(FSnfBuildingLODTableRow, BaseMesh) == 0x000008, "Member 'FSnfBuildingLODTableRow::BaseMesh' has a wrong offset!");
static_assert(offsetof(FSnfBuildingLODTableRow, LODMesh) == 0x000010, "Member 'FSnfBuildingLODTableRow::LODMesh' has a wrong offset!");
static_assert(offsetof(FSnfBuildingLODTableRow, IgnoreSizeCheck) == 0x000018, "Member 'FSnfBuildingLODTableRow::IgnoreSizeCheck' has a wrong offset!");

// ScriptStruct Snowfall.SnfParticlParamScalar
// 0x0010 (0x0010 - 0x0000)
struct FSnfParticlParamScalar final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParamMin;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParamMax;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfParticlParamScalar) == 0x000004, "Wrong alignment on FSnfParticlParamScalar");
static_assert(sizeof(FSnfParticlParamScalar) == 0x000010, "Wrong size on FSnfParticlParamScalar");
static_assert(offsetof(FSnfParticlParamScalar, Name) == 0x000000, "Member 'FSnfParticlParamScalar::Name' has a wrong offset!");
static_assert(offsetof(FSnfParticlParamScalar, ParamMin) == 0x000008, "Member 'FSnfParticlParamScalar::ParamMin' has a wrong offset!");
static_assert(offsetof(FSnfParticlParamScalar, ParamMax) == 0x00000C, "Member 'FSnfParticlParamScalar::ParamMax' has a wrong offset!");

// ScriptStruct Snowfall.SnfHyakkiyakoEnemyInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FSnfHyakkiyakoEnemyInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfHyakkiyakoEnemyInfo) == 0x000004, "Wrong alignment on FSnfHyakkiyakoEnemyInfo");
static_assert(sizeof(FSnfHyakkiyakoEnemyInfo) == 0x000008, "Wrong size on FSnfHyakkiyakoEnemyInfo");

// ScriptStruct Snowfall.RoofingParts
// 0x0090 (0x0090 - 0x0000)
struct FRoofingParts final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0010(0x0010)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0020(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Mesh;                                              // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class UMaterialInterface*>        MaterialMap;                                       // 0x0038(0x0050)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRoofingParts) == 0x000010, "Wrong alignment on FRoofingParts");
static_assert(sizeof(FRoofingParts) == 0x000090, "Wrong size on FRoofingParts");
static_assert(offsetof(FRoofingParts, Offset) == 0x000000, "Member 'FRoofingParts::Offset' has a wrong offset!");
static_assert(offsetof(FRoofingParts, Rotation) == 0x000010, "Member 'FRoofingParts::Rotation' has a wrong offset!");
static_assert(offsetof(FRoofingParts, Scale) == 0x000020, "Member 'FRoofingParts::Scale' has a wrong offset!");
static_assert(offsetof(FRoofingParts, Mesh) == 0x000030, "Member 'FRoofingParts::Mesh' has a wrong offset!");
static_assert(offsetof(FRoofingParts, MaterialMap) == 0x000038, "Member 'FRoofingParts::MaterialMap' has a wrong offset!");

// ScriptStruct Snowfall.SnfVendingMachineChildInfo
// 0x0020 (0x0020 - 0x0000)
struct FSnfVendingMachineChildInfo final
{
public:
	TArray<struct FPropsGimmickMeshSetting>       MachineList;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPropsGimmickMeshSetting>       GarbageList;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfVendingMachineChildInfo) == 0x000008, "Wrong alignment on FSnfVendingMachineChildInfo");
static_assert(sizeof(FSnfVendingMachineChildInfo) == 0x000020, "Wrong size on FSnfVendingMachineChildInfo");
static_assert(offsetof(FSnfVendingMachineChildInfo, MachineList) == 0x000000, "Member 'FSnfVendingMachineChildInfo::MachineList' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineChildInfo, GarbageList) == 0x000010, "Member 'FSnfVendingMachineChildInfo::GarbageList' has a wrong offset!");

// ScriptStruct Snowfall.SnfRichButtonData
// 0x0050 (0x0050 - 0x0000)
struct FSnfRichButtonData final
{
public:
	TArray<ETngKeyButtonMap>                      ButtonImageKeys;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ESnfPlayerKeyInput                            PlayerImageKey;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStickL;                                          // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStickR;                                          // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           DesignationImageKeyName;                           // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsUsePlayerInputService;                           // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ButtonDescription;                                 // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          IsHoldButton;                                      // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfRichButtonData) == 0x000008, "Wrong alignment on FSnfRichButtonData");
static_assert(sizeof(FSnfRichButtonData) == 0x000050, "Wrong size on FSnfRichButtonData");
static_assert(offsetof(FSnfRichButtonData, ButtonImageKeys) == 0x000000, "Member 'FSnfRichButtonData::ButtonImageKeys' has a wrong offset!");
static_assert(offsetof(FSnfRichButtonData, PlayerImageKey) == 0x000010, "Member 'FSnfRichButtonData::PlayerImageKey' has a wrong offset!");
static_assert(offsetof(FSnfRichButtonData, IsStickL) == 0x000011, "Member 'FSnfRichButtonData::IsStickL' has a wrong offset!");
static_assert(offsetof(FSnfRichButtonData, IsStickR) == 0x000012, "Member 'FSnfRichButtonData::IsStickR' has a wrong offset!");
static_assert(offsetof(FSnfRichButtonData, DesignationImageKeyName) == 0x000018, "Member 'FSnfRichButtonData::DesignationImageKeyName' has a wrong offset!");
static_assert(offsetof(FSnfRichButtonData, IsUsePlayerInputService) == 0x000028, "Member 'FSnfRichButtonData::IsUsePlayerInputService' has a wrong offset!");
static_assert(offsetof(FSnfRichButtonData, ButtonDescription) == 0x000030, "Member 'FSnfRichButtonData::ButtonDescription' has a wrong offset!");
static_assert(offsetof(FSnfRichButtonData, IsHoldButton) == 0x000048, "Member 'FSnfRichButtonData::IsHoldButton' has a wrong offset!");

// ScriptStruct Snowfall.SnfVendingMachineShopAutoPlacementInfo
// 0x0100 (0x0100 - 0x0000)
struct alignas(0x10) FSnfVendingMachineShopAutoPlacementInfo final
{
public:
	uint8                                         Pad_0[0x100];                                      // 0x0000(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfVendingMachineShopAutoPlacementInfo) == 0x000010, "Wrong alignment on FSnfVendingMachineShopAutoPlacementInfo");
static_assert(sizeof(FSnfVendingMachineShopAutoPlacementInfo) == 0x000100, "Wrong size on FSnfVendingMachineShopAutoPlacementInfo");

// ScriptStruct Snowfall.SnfRemainCapsuleToy
// 0x000C (0x000C - 0x0000)
struct FSnfRemainCapsuleToy final
{
public:
	struct FSnfCapsuleToyItem                     CapsuleToy;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OriginalIndex;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfRemainCapsuleToy) == 0x000004, "Wrong alignment on FSnfRemainCapsuleToy");
static_assert(sizeof(FSnfRemainCapsuleToy) == 0x00000C, "Wrong size on FSnfRemainCapsuleToy");
static_assert(offsetof(FSnfRemainCapsuleToy, CapsuleToy) == 0x000000, "Member 'FSnfRemainCapsuleToy::CapsuleToy' has a wrong offset!");
static_assert(offsetof(FSnfRemainCapsuleToy, OriginalIndex) == 0x000008, "Member 'FSnfRemainCapsuleToy::OriginalIndex' has a wrong offset!");

// ScriptStruct Snowfall.SnfPlayerBodyActionInfo
// 0x0030 (0x0038 - 0x0008)
struct FSnfPlayerBodyActionInfo final : public FTableRowBase
{
public:
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ControlSlotName;                                   // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CheckTags;                                         // 0x0018(0x0020)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPlayerBodyActionInfo) == 0x000008, "Wrong alignment on FSnfPlayerBodyActionInfo");
static_assert(sizeof(FSnfPlayerBodyActionInfo) == 0x000038, "Wrong size on FSnfPlayerBodyActionInfo");
static_assert(offsetof(FSnfPlayerBodyActionInfo, Priority) == 0x000008, "Member 'FSnfPlayerBodyActionInfo::Priority' has a wrong offset!");
static_assert(offsetof(FSnfPlayerBodyActionInfo, ControlSlotName) == 0x00000C, "Member 'FSnfPlayerBodyActionInfo::ControlSlotName' has a wrong offset!");
static_assert(offsetof(FSnfPlayerBodyActionInfo, CheckTags) == 0x000018, "Member 'FSnfPlayerBodyActionInfo::CheckTags' has a wrong offset!");

// ScriptStruct Snowfall.SnfCapsuleToyResultData
// 0x0010 (0x0010 - 0x0000)
struct FSnfCapsuleToyResultData final
{
public:
	class UTexture2D*                             CapsuleFullTexture;                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CapsulBottomTexture;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCapsuleToyResultData) == 0x000008, "Wrong alignment on FSnfCapsuleToyResultData");
static_assert(sizeof(FSnfCapsuleToyResultData) == 0x000010, "Wrong size on FSnfCapsuleToyResultData");
static_assert(offsetof(FSnfCapsuleToyResultData, CapsuleFullTexture) == 0x000000, "Member 'FSnfCapsuleToyResultData::CapsuleFullTexture' has a wrong offset!");
static_assert(offsetof(FSnfCapsuleToyResultData, CapsulBottomTexture) == 0x000008, "Member 'FSnfCapsuleToyResultData::CapsulBottomTexture' has a wrong offset!");

// ScriptStruct Snowfall.CaptureStudioScene
// 0x00E0 (0x00E0 - 0x0000)
struct FCaptureStudioScene final
{
public:
	struct FTransform                             TargetTransform;                                   // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoCameraAdjustByBounds;                         // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0xF];                                       // 0x0031(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CameraTransform;                                   // 0x0040(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ECameraProjectionMode                         CameraProjectionType;                              // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraFOVAngle;                                    // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CameraRotateAngularVel;                            // 0x0078(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0xC];                                       // 0x0084(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LightTransform;                                    // 0x0090(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LightIntensity;                                    // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightAttenuationRadius;                            // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightOuterConeAngle;                               // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x00CC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCaptureStudioScene) == 0x000010, "Wrong alignment on FCaptureStudioScene");
static_assert(sizeof(FCaptureStudioScene) == 0x0000E0, "Wrong size on FCaptureStudioScene");
static_assert(offsetof(FCaptureStudioScene, TargetTransform) == 0x000000, "Member 'FCaptureStudioScene::TargetTransform' has a wrong offset!");
static_assert(offsetof(FCaptureStudioScene, bAutoCameraAdjustByBounds) == 0x000030, "Member 'FCaptureStudioScene::bAutoCameraAdjustByBounds' has a wrong offset!");
static_assert(offsetof(FCaptureStudioScene, CameraTransform) == 0x000040, "Member 'FCaptureStudioScene::CameraTransform' has a wrong offset!");
static_assert(offsetof(FCaptureStudioScene, CameraProjectionType) == 0x000070, "Member 'FCaptureStudioScene::CameraProjectionType' has a wrong offset!");
static_assert(offsetof(FCaptureStudioScene, CameraFOVAngle) == 0x000074, "Member 'FCaptureStudioScene::CameraFOVAngle' has a wrong offset!");
static_assert(offsetof(FCaptureStudioScene, CameraRotateAngularVel) == 0x000078, "Member 'FCaptureStudioScene::CameraRotateAngularVel' has a wrong offset!");
static_assert(offsetof(FCaptureStudioScene, LightTransform) == 0x000090, "Member 'FCaptureStudioScene::LightTransform' has a wrong offset!");
static_assert(offsetof(FCaptureStudioScene, LightIntensity) == 0x0000C0, "Member 'FCaptureStudioScene::LightIntensity' has a wrong offset!");
static_assert(offsetof(FCaptureStudioScene, LightAttenuationRadius) == 0x0000C4, "Member 'FCaptureStudioScene::LightAttenuationRadius' has a wrong offset!");
static_assert(offsetof(FCaptureStudioScene, LightOuterConeAngle) == 0x0000C8, "Member 'FCaptureStudioScene::LightOuterConeAngle' has a wrong offset!");
static_assert(offsetof(FCaptureStudioScene, LightColor) == 0x0000CC, "Member 'FCaptureStudioScene::LightColor' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkShopSelectEtherAction
// 0x0028 (0x0028 - 0x0000)
struct FSnfTalkShopSelectEtherAction final
{
public:
	int32                                         Money;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemId;                                            // 0x0004(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnValueRateMin;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnValueRateMax;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 HandleList;                                        // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalkShopSelectEtherAction) == 0x000008, "Wrong alignment on FSnfTalkShopSelectEtherAction");
static_assert(sizeof(FSnfTalkShopSelectEtherAction) == 0x000028, "Wrong size on FSnfTalkShopSelectEtherAction");
static_assert(offsetof(FSnfTalkShopSelectEtherAction, Money) == 0x000000, "Member 'FSnfTalkShopSelectEtherAction::Money' has a wrong offset!");
static_assert(offsetof(FSnfTalkShopSelectEtherAction, ItemId) == 0x000004, "Member 'FSnfTalkShopSelectEtherAction::ItemId' has a wrong offset!");
static_assert(offsetof(FSnfTalkShopSelectEtherAction, SpawnValueRateMin) == 0x00000C, "Member 'FSnfTalkShopSelectEtherAction::SpawnValueRateMin' has a wrong offset!");
static_assert(offsetof(FSnfTalkShopSelectEtherAction, SpawnValueRateMax) == 0x000010, "Member 'FSnfTalkShopSelectEtherAction::SpawnValueRateMax' has a wrong offset!");
static_assert(offsetof(FSnfTalkShopSelectEtherAction, HandleList) == 0x000018, "Member 'FSnfTalkShopSelectEtherAction::HandleList' has a wrong offset!");

// ScriptStruct Snowfall.SnfCarBaseCLUTSetting
// 0x0058 (0x0058 - 0x0000)
struct FSnfCarBaseCLUTSetting final
{
public:
	int32                                         PartsIndex;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UMaterialInterface*>  OverrideMaterial;                                  // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCarBaseCLUTSetting) == 0x000008, "Wrong alignment on FSnfCarBaseCLUTSetting");
static_assert(sizeof(FSnfCarBaseCLUTSetting) == 0x000058, "Wrong size on FSnfCarBaseCLUTSetting");
static_assert(offsetof(FSnfCarBaseCLUTSetting, PartsIndex) == 0x000000, "Member 'FSnfCarBaseCLUTSetting::PartsIndex' has a wrong offset!");
static_assert(offsetof(FSnfCarBaseCLUTSetting, OverrideMaterial) == 0x000008, "Member 'FSnfCarBaseCLUTSetting::OverrideMaterial' has a wrong offset!");

// ScriptStruct Snowfall.SnfVendingMachineComponentSetting
// 0x00B0 (0x00B0 - 0x0000)
struct FSnfVendingMachineComponentSetting final
{
public:
	TArray<class UStaticMesh*>                    TargetMeshList;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTransform                             ShopInteractTransform;                             // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CollisionSize;                                     // 0x0040(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             AkTransform;                                       // 0x0050(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SphereTickInterval;                                // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAkAudioEvent*>                  SphereEvents;                                      // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AttenuationScalingFactor;                          // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionRefreshInterval;                          // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             OcclusionCollisionChannel;                         // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableChangeRoom;                                  // 0x00A1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDraw;                                        // 0x00A2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A3[0xD];                                       // 0x00A3(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfVendingMachineComponentSetting) == 0x000010, "Wrong alignment on FSnfVendingMachineComponentSetting");
static_assert(sizeof(FSnfVendingMachineComponentSetting) == 0x0000B0, "Wrong size on FSnfVendingMachineComponentSetting");
static_assert(offsetof(FSnfVendingMachineComponentSetting, TargetMeshList) == 0x000000, "Member 'FSnfVendingMachineComponentSetting::TargetMeshList' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineComponentSetting, ShopInteractTransform) == 0x000010, "Member 'FSnfVendingMachineComponentSetting::ShopInteractTransform' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineComponentSetting, CollisionSize) == 0x000040, "Member 'FSnfVendingMachineComponentSetting::CollisionSize' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineComponentSetting, AkTransform) == 0x000050, "Member 'FSnfVendingMachineComponentSetting::AkTransform' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineComponentSetting, SphereTickInterval) == 0x000080, "Member 'FSnfVendingMachineComponentSetting::SphereTickInterval' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineComponentSetting, SphereEvents) == 0x000088, "Member 'FSnfVendingMachineComponentSetting::SphereEvents' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineComponentSetting, AttenuationScalingFactor) == 0x000098, "Member 'FSnfVendingMachineComponentSetting::AttenuationScalingFactor' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineComponentSetting, OcclusionRefreshInterval) == 0x00009C, "Member 'FSnfVendingMachineComponentSetting::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineComponentSetting, OcclusionCollisionChannel) == 0x0000A0, "Member 'FSnfVendingMachineComponentSetting::OcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineComponentSetting, EnableChangeRoom) == 0x0000A1, "Member 'FSnfVendingMachineComponentSetting::EnableChangeRoom' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineComponentSetting, bDebugDraw) == 0x0000A2, "Member 'FSnfVendingMachineComponentSetting::bDebugDraw' has a wrong offset!");

// ScriptStruct Snowfall.SnfCarBasePartsComponent
// 0x0068 (0x0068 - 0x0000)
struct FSnfCarBasePartsComponent final
{
public:
	class USnfStaticMeshComponent*                StaticMeshComponent;                               // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChildActorComponent*                   ChildFxPropComponent;                              // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class UMaterialInstanceDynamic*>  DynamicMaterials;                                  // 0x0010(0x0050)(NativeAccessSpecifierPublic)
	bool                                          bSetActorCLUT;                                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActorCLUTValue;                                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCarBasePartsComponent) == 0x000008, "Wrong alignment on FSnfCarBasePartsComponent");
static_assert(sizeof(FSnfCarBasePartsComponent) == 0x000068, "Wrong size on FSnfCarBasePartsComponent");
static_assert(offsetof(FSnfCarBasePartsComponent, StaticMeshComponent) == 0x000000, "Member 'FSnfCarBasePartsComponent::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(FSnfCarBasePartsComponent, ChildFxPropComponent) == 0x000008, "Member 'FSnfCarBasePartsComponent::ChildFxPropComponent' has a wrong offset!");
static_assert(offsetof(FSnfCarBasePartsComponent, DynamicMaterials) == 0x000010, "Member 'FSnfCarBasePartsComponent::DynamicMaterials' has a wrong offset!");
static_assert(offsetof(FSnfCarBasePartsComponent, bSetActorCLUT) == 0x000060, "Member 'FSnfCarBasePartsComponent::bSetActorCLUT' has a wrong offset!");
static_assert(offsetof(FSnfCarBasePartsComponent, ActorCLUTValue) == 0x000064, "Member 'FSnfCarBasePartsComponent::ActorCLUTValue' has a wrong offset!");

// ScriptStruct Snowfall.SnfCarBasePartsMaterialOperationSetting
// 0x00B0 (0x00B0 - 0x0000)
struct FSnfCarBasePartsMaterialOperationSetting final
{
public:
	bool                                          bUseSlotName;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SlotName;                                          // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ElementIndex;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      FroatParameter;                                    // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLinearColor>        VectorParameter;                                   // 0x0060(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCarBasePartsMaterialOperationSetting) == 0x000008, "Wrong alignment on FSnfCarBasePartsMaterialOperationSetting");
static_assert(sizeof(FSnfCarBasePartsMaterialOperationSetting) == 0x0000B0, "Wrong size on FSnfCarBasePartsMaterialOperationSetting");
static_assert(offsetof(FSnfCarBasePartsMaterialOperationSetting, bUseSlotName) == 0x000000, "Member 'FSnfCarBasePartsMaterialOperationSetting::bUseSlotName' has a wrong offset!");
static_assert(offsetof(FSnfCarBasePartsMaterialOperationSetting, SlotName) == 0x000004, "Member 'FSnfCarBasePartsMaterialOperationSetting::SlotName' has a wrong offset!");
static_assert(offsetof(FSnfCarBasePartsMaterialOperationSetting, ElementIndex) == 0x00000C, "Member 'FSnfCarBasePartsMaterialOperationSetting::ElementIndex' has a wrong offset!");
static_assert(offsetof(FSnfCarBasePartsMaterialOperationSetting, FroatParameter) == 0x000010, "Member 'FSnfCarBasePartsMaterialOperationSetting::FroatParameter' has a wrong offset!");
static_assert(offsetof(FSnfCarBasePartsMaterialOperationSetting, VectorParameter) == 0x000060, "Member 'FSnfCarBasePartsMaterialOperationSetting::VectorParameter' has a wrong offset!");

// ScriptStruct Snowfall.SnfCarBaseOperation
// 0x0020 (0x0020 - 0x0000)
struct FSnfCarBaseOperation final
{
public:
	TArray<class FName>                           PlayListKeys;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfCarBasePartsMaterialOperationSetting> MaterialSettings;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCarBaseOperation) == 0x000008, "Wrong alignment on FSnfCarBaseOperation");
static_assert(sizeof(FSnfCarBaseOperation) == 0x000020, "Wrong size on FSnfCarBaseOperation");
static_assert(offsetof(FSnfCarBaseOperation, PlayListKeys) == 0x000000, "Member 'FSnfCarBaseOperation::PlayListKeys' has a wrong offset!");
static_assert(offsetof(FSnfCarBaseOperation, MaterialSettings) == 0x000010, "Member 'FSnfCarBaseOperation::MaterialSettings' has a wrong offset!");

// ScriptStruct Snowfall.SnfCarBasePartsOperationSetting
// 0x00A0 (0x00A0 - 0x0000)
struct FSnfCarBasePartsOperationSetting final
{
public:
	class FName                                   KeyName;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartsIndex;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, bool>                       CheckOperationSettingKeyList;                      // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FSnfCarBaseOperation                   EnableSetting;                                     // 0x0060(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FSnfCarBaseOperation                   DisableSetting;                                    // 0x0080(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCarBasePartsOperationSetting) == 0x000008, "Wrong alignment on FSnfCarBasePartsOperationSetting");
static_assert(sizeof(FSnfCarBasePartsOperationSetting) == 0x0000A0, "Wrong size on FSnfCarBasePartsOperationSetting");
static_assert(offsetof(FSnfCarBasePartsOperationSetting, KeyName) == 0x000000, "Member 'FSnfCarBasePartsOperationSetting::KeyName' has a wrong offset!");
static_assert(offsetof(FSnfCarBasePartsOperationSetting, PartsIndex) == 0x000008, "Member 'FSnfCarBasePartsOperationSetting::PartsIndex' has a wrong offset!");
static_assert(offsetof(FSnfCarBasePartsOperationSetting, CheckOperationSettingKeyList) == 0x000010, "Member 'FSnfCarBasePartsOperationSetting::CheckOperationSettingKeyList' has a wrong offset!");
static_assert(offsetof(FSnfCarBasePartsOperationSetting, EnableSetting) == 0x000060, "Member 'FSnfCarBasePartsOperationSetting::EnableSetting' has a wrong offset!");
static_assert(offsetof(FSnfCarBasePartsOperationSetting, DisableSetting) == 0x000080, "Member 'FSnfCarBasePartsOperationSetting::DisableSetting' has a wrong offset!");

// ScriptStruct Snowfall.SnfYokaiCollectibleConditionalAnim
// 0x0018 (0x0018 - 0x0000)
struct FSnfYokaiCollectibleConditionalAnim final
{
public:
	class UAnimSequenceBase*                      RejoiceAnim;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      AfterRejoiceAnim;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      IdleAnim;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfYokaiCollectibleConditionalAnim) == 0x000008, "Wrong alignment on FSnfYokaiCollectibleConditionalAnim");
static_assert(sizeof(FSnfYokaiCollectibleConditionalAnim) == 0x000018, "Wrong size on FSnfYokaiCollectibleConditionalAnim");
static_assert(offsetof(FSnfYokaiCollectibleConditionalAnim, RejoiceAnim) == 0x000000, "Member 'FSnfYokaiCollectibleConditionalAnim::RejoiceAnim' has a wrong offset!");
static_assert(offsetof(FSnfYokaiCollectibleConditionalAnim, AfterRejoiceAnim) == 0x000008, "Member 'FSnfYokaiCollectibleConditionalAnim::AfterRejoiceAnim' has a wrong offset!");
static_assert(offsetof(FSnfYokaiCollectibleConditionalAnim, IdleAnim) == 0x000010, "Member 'FSnfYokaiCollectibleConditionalAnim::IdleAnim' has a wrong offset!");

// ScriptStruct Snowfall.SnfYokaiCollectibleCostume
// 0x00D8 (0x00D8 - 0x0000)
struct FSnfYokaiCollectibleCostume final
{
public:
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  MaterialSlots;                                     // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class ASnfFXPropsActor>           FXPropClass;                                       // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FxPropPlaylistName;                                // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlipDelayTime;                                     // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UAnimSequenceBase*, struct FSnfYokaiCollectibleConditionalAnim> ConditionalAnims;                                  // 0x0070(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      RejoiceAnim;                                       // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      AfterRejoiceAnim;                                  // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      IdleAnim;                                          // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfYokaiCollectibleCostume) == 0x000008, "Wrong alignment on FSnfYokaiCollectibleCostume");
static_assert(sizeof(FSnfYokaiCollectibleCostume) == 0x0000D8, "Wrong size on FSnfYokaiCollectibleCostume");
static_assert(offsetof(FSnfYokaiCollectibleCostume, SkeletalMesh) == 0x000000, "Member 'FSnfYokaiCollectibleCostume::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FSnfYokaiCollectibleCostume, MaterialSlots) == 0x000008, "Member 'FSnfYokaiCollectibleCostume::MaterialSlots' has a wrong offset!");
static_assert(offsetof(FSnfYokaiCollectibleCostume, FXPropClass) == 0x000058, "Member 'FSnfYokaiCollectibleCostume::FXPropClass' has a wrong offset!");
static_assert(offsetof(FSnfYokaiCollectibleCostume, FxPropPlaylistName) == 0x000060, "Member 'FSnfYokaiCollectibleCostume::FxPropPlaylistName' has a wrong offset!");
static_assert(offsetof(FSnfYokaiCollectibleCostume, SlipDelayTime) == 0x000068, "Member 'FSnfYokaiCollectibleCostume::SlipDelayTime' has a wrong offset!");
static_assert(offsetof(FSnfYokaiCollectibleCostume, ConditionalAnims) == 0x000070, "Member 'FSnfYokaiCollectibleCostume::ConditionalAnims' has a wrong offset!");
static_assert(offsetof(FSnfYokaiCollectibleCostume, RejoiceAnim) == 0x0000C0, "Member 'FSnfYokaiCollectibleCostume::RejoiceAnim' has a wrong offset!");
static_assert(offsetof(FSnfYokaiCollectibleCostume, AfterRejoiceAnim) == 0x0000C8, "Member 'FSnfYokaiCollectibleCostume::AfterRejoiceAnim' has a wrong offset!");
static_assert(offsetof(FSnfYokaiCollectibleCostume, IdleAnim) == 0x0000D0, "Member 'FSnfYokaiCollectibleCostume::IdleAnim' has a wrong offset!");

// ScriptStruct Snowfall.SnfItemRosaryMaterialInfo
// 0x0050 (0x0050 - 0x0000)
struct FSnfItemRosaryMaterialInfo final
{
public:
	TMap<class FName, class UMaterialInterface*>  Materials;                                         // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfItemRosaryMaterialInfo) == 0x000008, "Wrong alignment on FSnfItemRosaryMaterialInfo");
static_assert(sizeof(FSnfItemRosaryMaterialInfo) == 0x000050, "Wrong size on FSnfItemRosaryMaterialInfo");
static_assert(offsetof(FSnfItemRosaryMaterialInfo, Materials) == 0x000000, "Member 'FSnfItemRosaryMaterialInfo::Materials' has a wrong offset!");

// ScriptStruct Snowfall.SnfYokaiGrapple
// 0x0028 (0x0028 - 0x0000)
struct FSnfYokaiGrapple final
{
public:
	class UAnimSequenceBase*                      IdleAnim;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                        LocomotionMoveIn;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                        LocomotionMoveLoop;                                // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      LocomotionMoveOut;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                        GrappleAnim;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfYokaiGrapple) == 0x000008, "Wrong alignment on FSnfYokaiGrapple");
static_assert(sizeof(FSnfYokaiGrapple) == 0x000028, "Wrong size on FSnfYokaiGrapple");
static_assert(offsetof(FSnfYokaiGrapple, IdleAnim) == 0x000000, "Member 'FSnfYokaiGrapple::IdleAnim' has a wrong offset!");
static_assert(offsetof(FSnfYokaiGrapple, LocomotionMoveIn) == 0x000008, "Member 'FSnfYokaiGrapple::LocomotionMoveIn' has a wrong offset!");
static_assert(offsetof(FSnfYokaiGrapple, LocomotionMoveLoop) == 0x000010, "Member 'FSnfYokaiGrapple::LocomotionMoveLoop' has a wrong offset!");
static_assert(offsetof(FSnfYokaiGrapple, LocomotionMoveOut) == 0x000018, "Member 'FSnfYokaiGrapple::LocomotionMoveOut' has a wrong offset!");
static_assert(offsetof(FSnfYokaiGrapple, GrappleAnim) == 0x000020, "Member 'FSnfYokaiGrapple::GrappleAnim' has a wrong offset!");

// ScriptStruct Snowfall.SnfCarBasePartsSetting
// 0x00D0 (0x00D0 - 0x0000)
struct FSnfCarBasePartsSetting final
{
public:
	class UStaticMesh*                            PartsMesh;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  MeshMaterials;                                     // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MeshTransform;                                     // 0x0060(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class ASnfFXPropsActor>           FXPropActor;                                       // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FXTransform;                                       // 0x00A0(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCarBasePartsSetting) == 0x000010, "Wrong alignment on FSnfCarBasePartsSetting");
static_assert(sizeof(FSnfCarBasePartsSetting) == 0x0000D0, "Wrong size on FSnfCarBasePartsSetting");
static_assert(offsetof(FSnfCarBasePartsSetting, PartsMesh) == 0x000000, "Member 'FSnfCarBasePartsSetting::PartsMesh' has a wrong offset!");
static_assert(offsetof(FSnfCarBasePartsSetting, MeshMaterials) == 0x000008, "Member 'FSnfCarBasePartsSetting::MeshMaterials' has a wrong offset!");
static_assert(offsetof(FSnfCarBasePartsSetting, MeshTransform) == 0x000060, "Member 'FSnfCarBasePartsSetting::MeshTransform' has a wrong offset!");
static_assert(offsetof(FSnfCarBasePartsSetting, FXPropActor) == 0x000090, "Member 'FSnfCarBasePartsSetting::FXPropActor' has a wrong offset!");
static_assert(offsetof(FSnfCarBasePartsSetting, FXTransform) == 0x0000A0, "Member 'FSnfCarBasePartsSetting::FXTransform' has a wrong offset!");

// ScriptStruct Snowfall.SnfPropsGimmickFacadePortalPlaceInfo
// 0x0018 (0x0020 - 0x0008)
struct FSnfPropsGimmickFacadePortalPlaceInfo final : public FTableRowBase
{
public:
	TArray<class UStaticMesh*>                    DoorMeshList;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class ASnfTeleportPortalBase>     PortalActor;                                       // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPropsGimmickFacadePortalPlaceInfo) == 0x000008, "Wrong alignment on FSnfPropsGimmickFacadePortalPlaceInfo");
static_assert(sizeof(FSnfPropsGimmickFacadePortalPlaceInfo) == 0x000020, "Wrong size on FSnfPropsGimmickFacadePortalPlaceInfo");
static_assert(offsetof(FSnfPropsGimmickFacadePortalPlaceInfo, DoorMeshList) == 0x000008, "Member 'FSnfPropsGimmickFacadePortalPlaceInfo::DoorMeshList' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickFacadePortalPlaceInfo, PortalActor) == 0x000018, "Member 'FSnfPropsGimmickFacadePortalPlaceInfo::PortalActor' has a wrong offset!");

// ScriptStruct Snowfall.DelayFxPlayWorkParam
// 0x0018 (0x0018 - 0x0000)
struct FDelayFxPlayWorkParam final
{
public:
	class FName                                   PlayName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTime;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndName;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelayFxPlayWorkParam) == 0x000004, "Wrong alignment on FDelayFxPlayWorkParam");
static_assert(sizeof(FDelayFxPlayWorkParam) == 0x000018, "Wrong size on FDelayFxPlayWorkParam");
static_assert(offsetof(FDelayFxPlayWorkParam, PlayName) == 0x000000, "Member 'FDelayFxPlayWorkParam::PlayName' has a wrong offset!");
static_assert(offsetof(FDelayFxPlayWorkParam, DelayTime) == 0x000008, "Member 'FDelayFxPlayWorkParam::DelayTime' has a wrong offset!");
static_assert(offsetof(FDelayFxPlayWorkParam, PlayTime) == 0x00000C, "Member 'FDelayFxPlayWorkParam::PlayTime' has a wrong offset!");
static_assert(offsetof(FDelayFxPlayWorkParam, EndName) == 0x000010, "Member 'FDelayFxPlayWorkParam::EndName' has a wrong offset!");

// ScriptStruct Snowfall.ItemPickupBaseRandomItemSetting
// 0x0018 (0x0018 - 0x0000)
struct FItemPickupBaseRandomItemSetting final
{
public:
	TArray<struct FTngInventoryItem>              InventoryItemArray;                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RandomValue;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemPickupBaseRandomItemSetting) == 0x000008, "Wrong alignment on FItemPickupBaseRandomItemSetting");
static_assert(sizeof(FItemPickupBaseRandomItemSetting) == 0x000018, "Wrong size on FItemPickupBaseRandomItemSetting");
static_assert(offsetof(FItemPickupBaseRandomItemSetting, InventoryItemArray) == 0x000000, "Member 'FItemPickupBaseRandomItemSetting::InventoryItemArray' has a wrong offset!");
static_assert(offsetof(FItemPickupBaseRandomItemSetting, RandomValue) == 0x000010, "Member 'FItemPickupBaseRandomItemSetting::RandomValue' has a wrong offset!");

// ScriptStruct Snowfall.DamageMaterialOverwriteSetting
// 0x0020 (0x0020 - 0x0000)
struct FDamageMaterialOverwriteSetting final
{
public:
	class FName                                   TargetBoneName;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ApplyIndex;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstRadius;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PointOffset;                                       // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFix;                                              // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDamageMaterialOverwriteSetting) == 0x000004, "Wrong alignment on FDamageMaterialOverwriteSetting");
static_assert(sizeof(FDamageMaterialOverwriteSetting) == 0x000020, "Wrong size on FDamageMaterialOverwriteSetting");
static_assert(offsetof(FDamageMaterialOverwriteSetting, TargetBoneName) == 0x000000, "Member 'FDamageMaterialOverwriteSetting::TargetBoneName' has a wrong offset!");
static_assert(offsetof(FDamageMaterialOverwriteSetting, ApplyIndex) == 0x000008, "Member 'FDamageMaterialOverwriteSetting::ApplyIndex' has a wrong offset!");
static_assert(offsetof(FDamageMaterialOverwriteSetting, ConstRadius) == 0x00000C, "Member 'FDamageMaterialOverwriteSetting::ConstRadius' has a wrong offset!");
static_assert(offsetof(FDamageMaterialOverwriteSetting, PointOffset) == 0x000010, "Member 'FDamageMaterialOverwriteSetting::PointOffset' has a wrong offset!");
static_assert(offsetof(FDamageMaterialOverwriteSetting, bFix) == 0x00001C, "Member 'FDamageMaterialOverwriteSetting::bFix' has a wrong offset!");

// ScriptStruct Snowfall.DamageMaterialParameter
// 0x002C (0x002C - 0x0000)
struct FDamageMaterialParameter final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RelativeLocation;                                  // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitTime;                                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VanishTime;                                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTime;                                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComboTime;                                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFix;                                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDamageMaterialParameter) == 0x000004, "Wrong alignment on FDamageMaterialParameter");
static_assert(sizeof(FDamageMaterialParameter) == 0x00002C, "Wrong size on FDamageMaterialParameter");
static_assert(offsetof(FDamageMaterialParameter, RelativeLocation) == 0x000008, "Member 'FDamageMaterialParameter::RelativeLocation' has a wrong offset!");
static_assert(offsetof(FDamageMaterialParameter, Radius) == 0x000014, "Member 'FDamageMaterialParameter::Radius' has a wrong offset!");
static_assert(offsetof(FDamageMaterialParameter, WaitTime) == 0x000018, "Member 'FDamageMaterialParameter::WaitTime' has a wrong offset!");
static_assert(offsetof(FDamageMaterialParameter, VanishTime) == 0x00001C, "Member 'FDamageMaterialParameter::VanishTime' has a wrong offset!");
static_assert(offsetof(FDamageMaterialParameter, CurrentTime) == 0x000020, "Member 'FDamageMaterialParameter::CurrentTime' has a wrong offset!");
static_assert(offsetof(FDamageMaterialParameter, ComboTime) == 0x000024, "Member 'FDamageMaterialParameter::ComboTime' has a wrong offset!");
static_assert(offsetof(FDamageMaterialParameter, bFix) == 0x000028, "Member 'FDamageMaterialParameter::bFix' has a wrong offset!");

// ScriptStruct Snowfall.SnfItemBoxPartsInfo
// 0x0020 (0x0020 - 0x0000)
struct FSnfItemBoxPartsInfo
{
public:
	class USnfStaticMeshComponent*                MeshComponent;                                     // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemLightIntensity;                                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfItemBoxPartsInfo) == 0x000008, "Wrong alignment on FSnfItemBoxPartsInfo");
static_assert(sizeof(FSnfItemBoxPartsInfo) == 0x000020, "Wrong size on FSnfItemBoxPartsInfo");
static_assert(offsetof(FSnfItemBoxPartsInfo, MeshComponent) == 0x000000, "Member 'FSnfItemBoxPartsInfo::MeshComponent' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxPartsInfo, SocketName) == 0x000008, "Member 'FSnfItemBoxPartsInfo::SocketName' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxPartsInfo, DynamicMaterial) == 0x000010, "Member 'FSnfItemBoxPartsInfo::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxPartsInfo, ItemLightIntensity) == 0x000018, "Member 'FSnfItemBoxPartsInfo::ItemLightIntensity' has a wrong offset!");

// ScriptStruct Snowfall.SnfItemBoxMovablePartsInfo
// 0x00E0 (0x0100 - 0x0020)
struct FSnfItemBoxMovablePartsInfo final : public FSnfItemBoxPartsInfo
{
public:
	struct FSnfPropsGimmickAnimationInfo          AnimationInfo;                                     // 0x0020(0x00B8)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         AnimationDelay;                                    // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AkPosition;                                        // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          SoundOpen;                                         // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SoundClose;                                        // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfItemBoxMovablePartsInfo) == 0x000008, "Wrong alignment on FSnfItemBoxMovablePartsInfo");
static_assert(sizeof(FSnfItemBoxMovablePartsInfo) == 0x000100, "Wrong size on FSnfItemBoxMovablePartsInfo");
static_assert(offsetof(FSnfItemBoxMovablePartsInfo, AnimationInfo) == 0x000020, "Member 'FSnfItemBoxMovablePartsInfo::AnimationInfo' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxMovablePartsInfo, AnimationDelay) == 0x0000D8, "Member 'FSnfItemBoxMovablePartsInfo::AnimationDelay' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxMovablePartsInfo, AkPosition) == 0x0000E0, "Member 'FSnfItemBoxMovablePartsInfo::AkPosition' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxMovablePartsInfo, SoundOpen) == 0x0000F0, "Member 'FSnfItemBoxMovablePartsInfo::SoundOpen' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxMovablePartsInfo, SoundClose) == 0x0000F8, "Member 'FSnfItemBoxMovablePartsInfo::SoundClose' has a wrong offset!");

// ScriptStruct Snowfall.SnfCcBodyPartConfigParam
// 0x0008 (0x0008 - 0x0000)
struct FSnfCcBodyPartConfigParam final
{
public:
	int32                                         MeshNo;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VariationNo;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCcBodyPartConfigParam) == 0x000004, "Wrong alignment on FSnfCcBodyPartConfigParam");
static_assert(sizeof(FSnfCcBodyPartConfigParam) == 0x000008, "Wrong size on FSnfCcBodyPartConfigParam");
static_assert(offsetof(FSnfCcBodyPartConfigParam, MeshNo) == 0x000000, "Member 'FSnfCcBodyPartConfigParam::MeshNo' has a wrong offset!");
static_assert(offsetof(FSnfCcBodyPartConfigParam, VariationNo) == 0x000004, "Member 'FSnfCcBodyPartConfigParam::VariationNo' has a wrong offset!");

// ScriptStruct Snowfall.SnfCcBodyPartConfigParamList
// 0x0010 (0x0010 - 0x0000)
struct FSnfCcBodyPartConfigParamList final
{
public:
	TArray<struct FSnfCcBodyPartConfigParam>      Params;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCcBodyPartConfigParamList) == 0x000008, "Wrong alignment on FSnfCcBodyPartConfigParamList");
static_assert(sizeof(FSnfCcBodyPartConfigParamList) == 0x000010, "Wrong size on FSnfCcBodyPartConfigParamList");
static_assert(offsetof(FSnfCcBodyPartConfigParamList, Params) == 0x000000, "Member 'FSnfCcBodyPartConfigParamList::Params' has a wrong offset!");

// ScriptStruct Snowfall.SnfItemPickupBaseAdProp
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x10) FSnfItemPickupBaseAdProp final
{
public:
	bool                                          bIsAutoDelete;                                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USnfStaticMeshComponent*                AdPropMeshComp;                                    // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x30];                                      // 0x0010(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfItemPickupBaseAdProp) == 0x000010, "Wrong alignment on FSnfItemPickupBaseAdProp");
static_assert(sizeof(FSnfItemPickupBaseAdProp) == 0x000040, "Wrong size on FSnfItemPickupBaseAdProp");
static_assert(offsetof(FSnfItemPickupBaseAdProp, bIsAutoDelete) == 0x000000, "Member 'FSnfItemPickupBaseAdProp::bIsAutoDelete' has a wrong offset!");
static_assert(offsetof(FSnfItemPickupBaseAdProp, AdPropMeshComp) == 0x000008, "Member 'FSnfItemPickupBaseAdProp::AdPropMeshComp' has a wrong offset!");

// ScriptStruct Snowfall.SnfSyncActionParam
// 0x0018 (0x0018 - 0x0000)
struct FSnfSyncActionParam final
{
public:
	ESnfSyncActRole                               RoleType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	ESnfSyncActApply                              ApplyType;                                         // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      MasterAnimSeq;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      SlaveAnimSeq;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfSyncActionParam) == 0x000008, "Wrong alignment on FSnfSyncActionParam");
static_assert(sizeof(FSnfSyncActionParam) == 0x000018, "Wrong size on FSnfSyncActionParam");
static_assert(offsetof(FSnfSyncActionParam, RoleType) == 0x000000, "Member 'FSnfSyncActionParam::RoleType' has a wrong offset!");
static_assert(offsetof(FSnfSyncActionParam, ApplyType) == 0x000002, "Member 'FSnfSyncActionParam::ApplyType' has a wrong offset!");
static_assert(offsetof(FSnfSyncActionParam, MasterAnimSeq) == 0x000008, "Member 'FSnfSyncActionParam::MasterAnimSeq' has a wrong offset!");
static_assert(offsetof(FSnfSyncActionParam, SlaveAnimSeq) == 0x000010, "Member 'FSnfSyncActionParam::SlaveAnimSeq' has a wrong offset!");

// ScriptStruct Snowfall.SnfCcMeshFootstepTableRow
// 0x0078 (0x0080 - 0x0008)
struct FSnfCcMeshFootstepTableRow final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USkeletalMesh>           Mesh;                                              // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USnfFootstepEffectTable> FootstepEffectDefault;                             // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USnfFootstepEffectTable> FootstepEffectSprint;                              // 0x0058(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCcMeshFootstepTableRow) == 0x000008, "Wrong alignment on FSnfCcMeshFootstepTableRow");
static_assert(sizeof(FSnfCcMeshFootstepTableRow) == 0x000080, "Wrong size on FSnfCcMeshFootstepTableRow");
static_assert(offsetof(FSnfCcMeshFootstepTableRow, Mesh) == 0x000008, "Member 'FSnfCcMeshFootstepTableRow::Mesh' has a wrong offset!");
static_assert(offsetof(FSnfCcMeshFootstepTableRow, FootstepEffectDefault) == 0x000030, "Member 'FSnfCcMeshFootstepTableRow::FootstepEffectDefault' has a wrong offset!");
static_assert(offsetof(FSnfCcMeshFootstepTableRow, FootstepEffectSprint) == 0x000058, "Member 'FSnfCcMeshFootstepTableRow::FootstepEffectSprint' has a wrong offset!");

// ScriptStruct Snowfall.SnfCcMeshMaterialSlot
// 0x0010 (0x0010 - 0x0000)
struct FSnfCcMeshMaterialSlot final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCcMeshMaterialSlot) == 0x000008, "Wrong alignment on FSnfCcMeshMaterialSlot");
static_assert(sizeof(FSnfCcMeshMaterialSlot) == 0x000010, "Wrong size on FSnfCcMeshMaterialSlot");
static_assert(offsetof(FSnfCcMeshMaterialSlot, SlotName) == 0x000000, "Member 'FSnfCcMeshMaterialSlot::SlotName' has a wrong offset!");
static_assert(offsetof(FSnfCcMeshMaterialSlot, Material) == 0x000008, "Member 'FSnfCcMeshMaterialSlot::Material' has a wrong offset!");

// ScriptStruct Snowfall.SnfCcMeshMaterialTableRow
// 0x0038 (0x0040 - 0x0008)
struct FSnfCcMeshMaterialTableRow final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USkeletalMesh>           Mesh;                                              // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSnfCcMeshMaterialSlot>         MaterialSlots;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCcMeshMaterialTableRow) == 0x000008, "Wrong alignment on FSnfCcMeshMaterialTableRow");
static_assert(sizeof(FSnfCcMeshMaterialTableRow) == 0x000040, "Wrong size on FSnfCcMeshMaterialTableRow");
static_assert(offsetof(FSnfCcMeshMaterialTableRow, Mesh) == 0x000008, "Member 'FSnfCcMeshMaterialTableRow::Mesh' has a wrong offset!");
static_assert(offsetof(FSnfCcMeshMaterialTableRow, MaterialSlots) == 0x000030, "Member 'FSnfCcMeshMaterialTableRow::MaterialSlots' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameSupplyItem
// 0x0048 (0x0048 - 0x0000)
struct FSnfGameSupplyItem final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Class;                                             // 0x0020(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameSupplyItem) == 0x000008, "Wrong alignment on FSnfGameSupplyItem");
static_assert(sizeof(FSnfGameSupplyItem) == 0x000048, "Wrong size on FSnfGameSupplyItem");
static_assert(offsetof(FSnfGameSupplyItem, Tags) == 0x000000, "Member 'FSnfGameSupplyItem::Tags' has a wrong offset!");
static_assert(offsetof(FSnfGameSupplyItem, Class) == 0x000020, "Member 'FSnfGameSupplyItem::Class' has a wrong offset!");

// ScriptStruct Snowfall.KKVisorAndAnim
// 0x0010 (0x0010 - 0x0000)
struct FKKVisorAndAnim final
{
public:
	int32                                         VisorDisplayNo;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      AnimSequenceBase;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKKVisorAndAnim) == 0x000008, "Wrong alignment on FKKVisorAndAnim");
static_assert(sizeof(FKKVisorAndAnim) == 0x000010, "Wrong size on FKKVisorAndAnim");
static_assert(offsetof(FKKVisorAndAnim, VisorDisplayNo) == 0x000000, "Member 'FKKVisorAndAnim::VisorDisplayNo' has a wrong offset!");
static_assert(offsetof(FKKVisorAndAnim, AnimSequenceBase) == 0x000008, "Member 'FKKVisorAndAnim::AnimSequenceBase' has a wrong offset!");

// ScriptStruct Snowfall.SnfCcBodyPartParam
// 0x0008 (0x0008 - 0x0000)
struct FSnfCcBodyPartParam final
{
public:
	int32                                         MeshNo;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VariationNo;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCcBodyPartParam) == 0x000004, "Wrong alignment on FSnfCcBodyPartParam");
static_assert(sizeof(FSnfCcBodyPartParam) == 0x000008, "Wrong size on FSnfCcBodyPartParam");
static_assert(offsetof(FSnfCcBodyPartParam, MeshNo) == 0x000000, "Member 'FSnfCcBodyPartParam::MeshNo' has a wrong offset!");
static_assert(offsetof(FSnfCcBodyPartParam, VariationNo) == 0x000004, "Member 'FSnfCcBodyPartParam::VariationNo' has a wrong offset!");

// ScriptStruct Snowfall.SnfCcInitParam
// 0x0020 (0x0020 - 0x0000)
struct FSnfCcInitParam final
{
public:
	class FName                                   PartDataName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkinnedMeshComponent*                  TargetMeshComp;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkinnedMeshComponent*                  TargetClothMeshComp;                               // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSnfCcBodyPartParam                    BodyPartParam;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCcInitParam) == 0x000008, "Wrong alignment on FSnfCcInitParam");
static_assert(sizeof(FSnfCcInitParam) == 0x000020, "Wrong size on FSnfCcInitParam");
static_assert(offsetof(FSnfCcInitParam, PartDataName) == 0x000000, "Member 'FSnfCcInitParam::PartDataName' has a wrong offset!");
static_assert(offsetof(FSnfCcInitParam, TargetMeshComp) == 0x000008, "Member 'FSnfCcInitParam::TargetMeshComp' has a wrong offset!");
static_assert(offsetof(FSnfCcInitParam, TargetClothMeshComp) == 0x000010, "Member 'FSnfCcInitParam::TargetClothMeshComp' has a wrong offset!");
static_assert(offsetof(FSnfCcInitParam, BodyPartParam) == 0x000018, "Member 'FSnfCcInitParam::BodyPartParam' has a wrong offset!");

// ScriptStruct Snowfall.SnfCcNpcParamSet
// 0x004C (0x004C - 0x0000)
struct FSnfCcNpcParamSet final
{
public:
	ESnfCcNpcSkeletonType                         SkeletonType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSnfCcBodyPartParam                    HeadParam;                                         // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfCcBodyPartParam                    TopsParam;                                         // 0x000C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfCcBodyPartParam                    BottomsParam;                                      // 0x0014(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfCcBodyPartParam                    GlovesParam;                                       // 0x001C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfCcBodyPartParam                    ShoesParam;                                        // 0x0024(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfCcBodyPartParam                    HairParam;                                         // 0x002C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfCcBodyPartParam                    AccessoryParam1;                                   // 0x0034(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfCcBodyPartParam                    AccessoryParam2;                                   // 0x003C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfCcBodyPartParam                    MaskParam;                                         // 0x0044(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCcNpcParamSet) == 0x000004, "Wrong alignment on FSnfCcNpcParamSet");
static_assert(sizeof(FSnfCcNpcParamSet) == 0x00004C, "Wrong size on FSnfCcNpcParamSet");
static_assert(offsetof(FSnfCcNpcParamSet, SkeletonType) == 0x000000, "Member 'FSnfCcNpcParamSet::SkeletonType' has a wrong offset!");
static_assert(offsetof(FSnfCcNpcParamSet, HeadParam) == 0x000004, "Member 'FSnfCcNpcParamSet::HeadParam' has a wrong offset!");
static_assert(offsetof(FSnfCcNpcParamSet, TopsParam) == 0x00000C, "Member 'FSnfCcNpcParamSet::TopsParam' has a wrong offset!");
static_assert(offsetof(FSnfCcNpcParamSet, BottomsParam) == 0x000014, "Member 'FSnfCcNpcParamSet::BottomsParam' has a wrong offset!");
static_assert(offsetof(FSnfCcNpcParamSet, GlovesParam) == 0x00001C, "Member 'FSnfCcNpcParamSet::GlovesParam' has a wrong offset!");
static_assert(offsetof(FSnfCcNpcParamSet, ShoesParam) == 0x000024, "Member 'FSnfCcNpcParamSet::ShoesParam' has a wrong offset!");
static_assert(offsetof(FSnfCcNpcParamSet, HairParam) == 0x00002C, "Member 'FSnfCcNpcParamSet::HairParam' has a wrong offset!");
static_assert(offsetof(FSnfCcNpcParamSet, AccessoryParam1) == 0x000034, "Member 'FSnfCcNpcParamSet::AccessoryParam1' has a wrong offset!");
static_assert(offsetof(FSnfCcNpcParamSet, AccessoryParam2) == 0x00003C, "Member 'FSnfCcNpcParamSet::AccessoryParam2' has a wrong offset!");
static_assert(offsetof(FSnfCcNpcParamSet, MaskParam) == 0x000044, "Member 'FSnfCcNpcParamSet::MaskParam' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatWaitAnimInfo
// 0x0050 (0x0050 - 0x0000)
struct FSnfCatWaitAnimInfo final
{
public:
	TSoftObjectPtr<class UAnimSequenceBase>       StartAnim;                                         // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequenceBase>       EndAnim;                                           // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCatWaitAnimInfo) == 0x000008, "Wrong alignment on FSnfCatWaitAnimInfo");
static_assert(sizeof(FSnfCatWaitAnimInfo) == 0x000050, "Wrong size on FSnfCatWaitAnimInfo");
static_assert(offsetof(FSnfCatWaitAnimInfo, StartAnim) == 0x000000, "Member 'FSnfCatWaitAnimInfo::StartAnim' has a wrong offset!");
static_assert(offsetof(FSnfCatWaitAnimInfo, EndAnim) == 0x000028, "Member 'FSnfCatWaitAnimInfo::EndAnim' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatWaitInfo
// 0x0018 (0x0018 - 0x0000)
struct FSnfCatWaitInfo final
{
public:
	TArray<struct FSnfCatWaitAnimInfo>            WaitAnimList;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         WaitTime;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCatWaitInfo) == 0x000008, "Wrong alignment on FSnfCatWaitInfo");
static_assert(sizeof(FSnfCatWaitInfo) == 0x000018, "Wrong size on FSnfCatWaitInfo");
static_assert(offsetof(FSnfCatWaitInfo, WaitAnimList) == 0x000000, "Member 'FSnfCatWaitInfo::WaitAnimList' has a wrong offset!");
static_assert(offsetof(FSnfCatWaitInfo, WaitTime) == 0x000010, "Member 'FSnfCatWaitInfo::WaitTime' has a wrong offset!");

// ScriptStruct Snowfall.SnfCcReplaceMaterial
// 0x0010 (0x0010 - 0x0000)
struct FSnfCcReplaceMaterial final
{
public:
	class UMaterialInterface*                     DefaultMI;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ReplaceMI;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCcReplaceMaterial) == 0x000008, "Wrong alignment on FSnfCcReplaceMaterial");
static_assert(sizeof(FSnfCcReplaceMaterial) == 0x000010, "Wrong size on FSnfCcReplaceMaterial");
static_assert(offsetof(FSnfCcReplaceMaterial, DefaultMI) == 0x000000, "Member 'FSnfCcReplaceMaterial::DefaultMI' has a wrong offset!");
static_assert(offsetof(FSnfCcReplaceMaterial, ReplaceMI) == 0x000008, "Member 'FSnfCcReplaceMaterial::ReplaceMI' has a wrong offset!");

// ScriptStruct Snowfall.SnfNpcCharacterReductionParam
// 0x0018 (0x0018 - 0x0000)
struct FSnfNpcCharacterReductionParam final
{
public:
	float                                         MinDistance;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAnimationOptimization;                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AnimEvaluationRateMin;                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimEvaluationRateMax;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableClothOptimization;                          // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfNpcCharacterReductionParam) == 0x000004, "Wrong alignment on FSnfNpcCharacterReductionParam");
static_assert(sizeof(FSnfNpcCharacterReductionParam) == 0x000018, "Wrong size on FSnfNpcCharacterReductionParam");
static_assert(offsetof(FSnfNpcCharacterReductionParam, MinDistance) == 0x000000, "Member 'FSnfNpcCharacterReductionParam::MinDistance' has a wrong offset!");
static_assert(offsetof(FSnfNpcCharacterReductionParam, MaxDistance) == 0x000004, "Member 'FSnfNpcCharacterReductionParam::MaxDistance' has a wrong offset!");
static_assert(offsetof(FSnfNpcCharacterReductionParam, bEnableAnimationOptimization) == 0x000008, "Member 'FSnfNpcCharacterReductionParam::bEnableAnimationOptimization' has a wrong offset!");
static_assert(offsetof(FSnfNpcCharacterReductionParam, AnimEvaluationRateMin) == 0x00000C, "Member 'FSnfNpcCharacterReductionParam::AnimEvaluationRateMin' has a wrong offset!");
static_assert(offsetof(FSnfNpcCharacterReductionParam, AnimEvaluationRateMax) == 0x000010, "Member 'FSnfNpcCharacterReductionParam::AnimEvaluationRateMax' has a wrong offset!");
static_assert(offsetof(FSnfNpcCharacterReductionParam, bEnableClothOptimization) == 0x000014, "Member 'FSnfNpcCharacterReductionParam::bEnableClothOptimization' has a wrong offset!");

// ScriptStruct Snowfall.SnfItemPickupBaseAutoPlacementInfo
// 0x0040 (0x0040 - 0x0000)
struct FSnfItemPickupBaseAutoPlacementInfo final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ItemType;                                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfItemPickupBaseAutoPlacementInfo) == 0x000010, "Wrong alignment on FSnfItemPickupBaseAutoPlacementInfo");
static_assert(sizeof(FSnfItemPickupBaseAutoPlacementInfo) == 0x000040, "Wrong size on FSnfItemPickupBaseAutoPlacementInfo");
static_assert(offsetof(FSnfItemPickupBaseAutoPlacementInfo, Transform) == 0x000000, "Member 'FSnfItemPickupBaseAutoPlacementInfo::Transform' has a wrong offset!");
static_assert(offsetof(FSnfItemPickupBaseAutoPlacementInfo, ItemType) == 0x000030, "Member 'FSnfItemPickupBaseAutoPlacementInfo::ItemType' has a wrong offset!");

// ScriptStruct Snowfall.SnfCcTargetMeshInfo
// 0x0078 (0x0078 - 0x0000)
struct alignas(0x08) FSnfCcTargetMeshInfo final
{
public:
	uint8                                         Pad_0[0x78];                                       // 0x0000(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCcTargetMeshInfo) == 0x000008, "Wrong alignment on FSnfCcTargetMeshInfo");
static_assert(sizeof(FSnfCcTargetMeshInfo) == 0x000078, "Wrong size on FSnfCcTargetMeshInfo");

// ScriptStruct Snowfall.SnfWeaponSpreadOverlapInfo
// 0x0094 (0x0094 - 0x0000)
struct FSnfWeaponSpreadOverlapInfo final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ApplyDamageCount;                                  // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApplyDamageLastTime;                               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTime;                                         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponSpreadOverlapInfo) == 0x000004, "Wrong alignment on FSnfWeaponSpreadOverlapInfo");
static_assert(sizeof(FSnfWeaponSpreadOverlapInfo) == 0x000094, "Wrong size on FSnfWeaponSpreadOverlapInfo");
static_assert(offsetof(FSnfWeaponSpreadOverlapInfo, HitResult) == 0x000000, "Member 'FSnfWeaponSpreadOverlapInfo::HitResult' has a wrong offset!");
static_assert(offsetof(FSnfWeaponSpreadOverlapInfo, ApplyDamageCount) == 0x000088, "Member 'FSnfWeaponSpreadOverlapInfo::ApplyDamageCount' has a wrong offset!");
static_assert(offsetof(FSnfWeaponSpreadOverlapInfo, ApplyDamageLastTime) == 0x00008C, "Member 'FSnfWeaponSpreadOverlapInfo::ApplyDamageLastTime' has a wrong offset!");
static_assert(offsetof(FSnfWeaponSpreadOverlapInfo, TotalTime) == 0x000090, "Member 'FSnfWeaponSpreadOverlapInfo::TotalTime' has a wrong offset!");

// ScriptStruct Snowfall.SnfCcBodyPartTable
// 0x0018 (0x0018 - 0x0000)
struct FSnfCcBodyPartTable final
{
public:
	class FName                                   MorphTargetPartName;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UDataTable*>                     DataTable;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCcBodyPartTable) == 0x000008, "Wrong alignment on FSnfCcBodyPartTable");
static_assert(sizeof(FSnfCcBodyPartTable) == 0x000018, "Wrong size on FSnfCcBodyPartTable");
static_assert(offsetof(FSnfCcBodyPartTable, MorphTargetPartName) == 0x000000, "Member 'FSnfCcBodyPartTable::MorphTargetPartName' has a wrong offset!");
static_assert(offsetof(FSnfCcBodyPartTable, DataTable) == 0x000008, "Member 'FSnfCcBodyPartTable::DataTable' has a wrong offset!");

// ScriptStruct Snowfall.SnfCcBodyPartSet
// 0x0070 (0x0070 - 0x0000)
struct FSnfCcBodyPartSet final
{
public:
	TMap<class FName, struct FSnfCcBodyPartTable> BodyPartSet;                                       // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class USnfCcBodyPartKit*>              BodyPartKits;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDataTable*                             BodyPartSkinTable;                                 // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             BodyPartFootTable;                                 // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCcBodyPartSet) == 0x000008, "Wrong alignment on FSnfCcBodyPartSet");
static_assert(sizeof(FSnfCcBodyPartSet) == 0x000070, "Wrong size on FSnfCcBodyPartSet");
static_assert(offsetof(FSnfCcBodyPartSet, BodyPartSet) == 0x000000, "Member 'FSnfCcBodyPartSet::BodyPartSet' has a wrong offset!");
static_assert(offsetof(FSnfCcBodyPartSet, BodyPartKits) == 0x000050, "Member 'FSnfCcBodyPartSet::BodyPartKits' has a wrong offset!");
static_assert(offsetof(FSnfCcBodyPartSet, BodyPartSkinTable) == 0x000060, "Member 'FSnfCcBodyPartSet::BodyPartSkinTable' has a wrong offset!");
static_assert(offsetof(FSnfCcBodyPartSet, BodyPartFootTable) == 0x000068, "Member 'FSnfCcBodyPartSet::BodyPartFootTable' has a wrong offset!");

// ScriptStruct Snowfall.SnfJobConfigLevelActor
// 0x0008 (0x0008 - 0x0000)
struct FSnfJobConfigLevelActor final
{
public:
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfJobConfigLevelActor) == 0x000004, "Wrong alignment on FSnfJobConfigLevelActor");
static_assert(sizeof(FSnfJobConfigLevelActor) == 0x000008, "Wrong size on FSnfJobConfigLevelActor");
static_assert(offsetof(FSnfJobConfigLevelActor, Actor) == 0x000000, "Member 'FSnfJobConfigLevelActor::Actor' has a wrong offset!");

// ScriptStruct Snowfall.SnfPropsGimmickDivisionPlacementInfo
// 0x0098 (0x00A0 - 0x0008)
struct FSnfPropsGimmickDivisionPlacementInfo final : public FTableRowBase
{
public:
	class FName                                   ActorLabel;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActivityIndex;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ActorClass;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  Actor;                                             // 0x0020(0x0028)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  Level;                                             // 0x0048(0x0028)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0070(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPropsGimmickDivisionPlacementInfo) == 0x000010, "Wrong alignment on FSnfPropsGimmickDivisionPlacementInfo");
static_assert(sizeof(FSnfPropsGimmickDivisionPlacementInfo) == 0x0000A0, "Wrong size on FSnfPropsGimmickDivisionPlacementInfo");
static_assert(offsetof(FSnfPropsGimmickDivisionPlacementInfo, ActorLabel) == 0x000008, "Member 'FSnfPropsGimmickDivisionPlacementInfo::ActorLabel' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickDivisionPlacementInfo, ActivityIndex) == 0x000010, "Member 'FSnfPropsGimmickDivisionPlacementInfo::ActivityIndex' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickDivisionPlacementInfo, ActorClass) == 0x000018, "Member 'FSnfPropsGimmickDivisionPlacementInfo::ActorClass' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickDivisionPlacementInfo, Actor) == 0x000020, "Member 'FSnfPropsGimmickDivisionPlacementInfo::Actor' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickDivisionPlacementInfo, Level) == 0x000048, "Member 'FSnfPropsGimmickDivisionPlacementInfo::Level' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickDivisionPlacementInfo, Transform) == 0x000070, "Member 'FSnfPropsGimmickDivisionPlacementInfo::Transform' has a wrong offset!");

// ScriptStruct Snowfall.SnfCcMorphTargetParam
// 0x0010 (0x0010 - 0x0000)
struct FSnfCcMorphTargetParam final
{
public:
	TArray<class FName>                           ActiveMorphName;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCcMorphTargetParam) == 0x000008, "Wrong alignment on FSnfCcMorphTargetParam");
static_assert(sizeof(FSnfCcMorphTargetParam) == 0x000010, "Wrong size on FSnfCcMorphTargetParam");
static_assert(offsetof(FSnfCcMorphTargetParam, ActiveMorphName) == 0x000000, "Member 'FSnfCcMorphTargetParam::ActiveMorphName' has a wrong offset!");

// ScriptStruct Snowfall.SnfCcBodyPartTableRow
// 0x0098 (0x00A0 - 0x0008)
struct FSnfCcBodyPartTableRow final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USkeletalMesh>           Mesh;                                              // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FSnfCcMorphTargetParam>    MorphTargetMaps;                                   // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USnfCcParamDataAsset>> VariationParams;                                   // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	class FString                                 DevComment;                                        // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCcBodyPartTableRow) == 0x000008, "Wrong alignment on FSnfCcBodyPartTableRow");
static_assert(sizeof(FSnfCcBodyPartTableRow) == 0x0000A0, "Wrong size on FSnfCcBodyPartTableRow");
static_assert(offsetof(FSnfCcBodyPartTableRow, Mesh) == 0x000008, "Member 'FSnfCcBodyPartTableRow::Mesh' has a wrong offset!");
static_assert(offsetof(FSnfCcBodyPartTableRow, MorphTargetMaps) == 0x000030, "Member 'FSnfCcBodyPartTableRow::MorphTargetMaps' has a wrong offset!");
static_assert(offsetof(FSnfCcBodyPartTableRow, VariationParams) == 0x000080, "Member 'FSnfCcBodyPartTableRow::VariationParams' has a wrong offset!");
static_assert(offsetof(FSnfCcBodyPartTableRow, DevComment) == 0x000090, "Member 'FSnfCcBodyPartTableRow::DevComment' has a wrong offset!");

// ScriptStruct Snowfall.USnfKoomoteActionPointParam
// 0x0008 (0x0008 - 0x0000)
struct FUSnfKoomoteActionPointParam
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckAngle;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Angle;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUSnfKoomoteActionPointParam) == 0x000004, "Wrong alignment on FUSnfKoomoteActionPointParam");
static_assert(sizeof(FUSnfKoomoteActionPointParam) == 0x000008, "Wrong size on FUSnfKoomoteActionPointParam");
static_assert(offsetof(FUSnfKoomoteActionPointParam, bEnable) == 0x000000, "Member 'FUSnfKoomoteActionPointParam::bEnable' has a wrong offset!");
static_assert(offsetof(FUSnfKoomoteActionPointParam, bCheckAngle) == 0x000001, "Member 'FUSnfKoomoteActionPointParam::bCheckAngle' has a wrong offset!");
static_assert(offsetof(FUSnfKoomoteActionPointParam, Angle) == 0x000004, "Member 'FUSnfKoomoteActionPointParam::Angle' has a wrong offset!");

// ScriptStruct Snowfall.USnfKoomoteRushPointParam
// 0x0010 (0x0018 - 0x0008)
struct FUSnfKoomoteRushPointParam final : public FUSnfKoomoteActionPointParam
{
public:
	TArray<int32>                                 RushPosIndex;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUSnfKoomoteRushPointParam) == 0x000008, "Wrong alignment on FUSnfKoomoteRushPointParam");
static_assert(sizeof(FUSnfKoomoteRushPointParam) == 0x000018, "Wrong size on FUSnfKoomoteRushPointParam");
static_assert(offsetof(FUSnfKoomoteRushPointParam, RushPosIndex) == 0x000008, "Member 'FUSnfKoomoteRushPointParam::RushPosIndex' has a wrong offset!");

// ScriptStruct Snowfall.SnfMarebitoIniAttackTypeSet
// 0x0010 (0x0010 - 0x0000)
struct FSnfMarebitoIniAttackTypeSet final
{
public:
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackParam;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfMarebitoIniAttackTypeSet) == 0x000008, "Wrong alignment on FSnfMarebitoIniAttackTypeSet");
static_assert(sizeof(FSnfMarebitoIniAttackTypeSet) == 0x000010, "Wrong size on FSnfMarebitoIniAttackTypeSet");
static_assert(offsetof(FSnfMarebitoIniAttackTypeSet, DamageType) == 0x000000, "Member 'FSnfMarebitoIniAttackTypeSet::DamageType' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoIniAttackTypeSet, AttackParam) == 0x000008, "Member 'FSnfMarebitoIniAttackTypeSet::AttackParam' has a wrong offset!");

// ScriptStruct Snowfall.SnfMarebitoIniAttackParam
// 0x0010 (0x0010 - 0x0000)
struct FSnfMarebitoIniAttackParam final
{
public:
	TArray<struct FSnfMarebitoIniAttackTypeSet>   AttackSet;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMarebitoIniAttackParam) == 0x000008, "Wrong alignment on FSnfMarebitoIniAttackParam");
static_assert(sizeof(FSnfMarebitoIniAttackParam) == 0x000010, "Wrong size on FSnfMarebitoIniAttackParam");
static_assert(offsetof(FSnfMarebitoIniAttackParam, AttackSet) == 0x000000, "Member 'FSnfMarebitoIniAttackParam::AttackSet' has a wrong offset!");

// ScriptStruct Snowfall.SnfJobConfigArea
// 0x0070 (0x0070 - 0x0000)
struct FSnfJobConfigArea final
{
public:
	struct FTransform                             RelativeTransform;                                 // 0x0000(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BoxExtentColor;                                    // 0x003C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtentMargin;                                   // 0x004C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BoxExtentMarginColor;                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfJobConfigArea) == 0x000010, "Wrong alignment on FSnfJobConfigArea");
static_assert(sizeof(FSnfJobConfigArea) == 0x000070, "Wrong size on FSnfJobConfigArea");
static_assert(offsetof(FSnfJobConfigArea, RelativeTransform) == 0x000000, "Member 'FSnfJobConfigArea::RelativeTransform' has a wrong offset!");
static_assert(offsetof(FSnfJobConfigArea, BoxExtent) == 0x000030, "Member 'FSnfJobConfigArea::BoxExtent' has a wrong offset!");
static_assert(offsetof(FSnfJobConfigArea, BoxExtentColor) == 0x00003C, "Member 'FSnfJobConfigArea::BoxExtentColor' has a wrong offset!");
static_assert(offsetof(FSnfJobConfigArea, BoxExtentMargin) == 0x00004C, "Member 'FSnfJobConfigArea::BoxExtentMargin' has a wrong offset!");
static_assert(offsetof(FSnfJobConfigArea, BoxExtentMarginColor) == 0x000058, "Member 'FSnfJobConfigArea::BoxExtentMarginColor' has a wrong offset!");

// ScriptStruct Snowfall.SnfSpiritPhotoGroup
// 0x0030 (0x0038 - 0x0008)
struct FSnfSpiritPhotoGroup final : public FTableRowBase
{
public:
	class FName                                   OpenableActivityId;                                // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeedsGameSequence;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NeedsFinishedSpiritPhotoIdList;                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   OpenedActivityTalkId;                              // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RewardId;                                          // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfSpiritPhotoGroup) == 0x000008, "Wrong alignment on FSnfSpiritPhotoGroup");
static_assert(sizeof(FSnfSpiritPhotoGroup) == 0x000038, "Wrong size on FSnfSpiritPhotoGroup");
static_assert(offsetof(FSnfSpiritPhotoGroup, OpenableActivityId) == 0x000008, "Member 'FSnfSpiritPhotoGroup::OpenableActivityId' has a wrong offset!");
static_assert(offsetof(FSnfSpiritPhotoGroup, NeedsGameSequence) == 0x000010, "Member 'FSnfSpiritPhotoGroup::NeedsGameSequence' has a wrong offset!");
static_assert(offsetof(FSnfSpiritPhotoGroup, NeedsFinishedSpiritPhotoIdList) == 0x000018, "Member 'FSnfSpiritPhotoGroup::NeedsFinishedSpiritPhotoIdList' has a wrong offset!");
static_assert(offsetof(FSnfSpiritPhotoGroup, OpenedActivityTalkId) == 0x000028, "Member 'FSnfSpiritPhotoGroup::OpenedActivityTalkId' has a wrong offset!");
static_assert(offsetof(FSnfSpiritPhotoGroup, RewardId) == 0x000030, "Member 'FSnfSpiritPhotoGroup::RewardId' has a wrong offset!");

// ScriptStruct Snowfall.SnfMarebitoTakeDamageRate
// 0x000C (0x000C - 0x0000)
struct FSnfMarebitoTakeDamageRate final
{
public:
	float                                         Fire;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Wind;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Water;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMarebitoTakeDamageRate) == 0x000004, "Wrong alignment on FSnfMarebitoTakeDamageRate");
static_assert(sizeof(FSnfMarebitoTakeDamageRate) == 0x00000C, "Wrong size on FSnfMarebitoTakeDamageRate");
static_assert(offsetof(FSnfMarebitoTakeDamageRate, Fire) == 0x000000, "Member 'FSnfMarebitoTakeDamageRate::Fire' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoTakeDamageRate, Wind) == 0x000004, "Member 'FSnfMarebitoTakeDamageRate::Wind' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoTakeDamageRate, Water) == 0x000008, "Member 'FSnfMarebitoTakeDamageRate::Water' has a wrong offset!");

// ScriptStruct Snowfall.SnfMarebitoTakeFreezeDamageRate
// 0x0014 (0x0014 - 0x0000)
struct FSnfMarebitoTakeFreezeDamageRate final
{
public:
	float                                         Fire;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Wind;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Water;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bow;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strike;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMarebitoTakeFreezeDamageRate) == 0x000004, "Wrong alignment on FSnfMarebitoTakeFreezeDamageRate");
static_assert(sizeof(FSnfMarebitoTakeFreezeDamageRate) == 0x000014, "Wrong size on FSnfMarebitoTakeFreezeDamageRate");
static_assert(offsetof(FSnfMarebitoTakeFreezeDamageRate, Fire) == 0x000000, "Member 'FSnfMarebitoTakeFreezeDamageRate::Fire' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoTakeFreezeDamageRate, Wind) == 0x000004, "Member 'FSnfMarebitoTakeFreezeDamageRate::Wind' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoTakeFreezeDamageRate, Water) == 0x000008, "Member 'FSnfMarebitoTakeFreezeDamageRate::Water' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoTakeFreezeDamageRate, Bow) == 0x00000C, "Member 'FSnfMarebitoTakeFreezeDamageRate::Bow' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoTakeFreezeDamageRate, Strike) == 0x000010, "Member 'FSnfMarebitoTakeFreezeDamageRate::Strike' has a wrong offset!");

// ScriptStruct Snowfall.SnfMarebitoTakeCriticalHit
// 0x0010 (0x0010 - 0x0000)
struct FSnfMarebitoTakeCriticalHit final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageRate;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoreDamageRate;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaggerDamageRate;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMarebitoTakeCriticalHit) == 0x000004, "Wrong alignment on FSnfMarebitoTakeCriticalHit");
static_assert(sizeof(FSnfMarebitoTakeCriticalHit) == 0x000010, "Wrong size on FSnfMarebitoTakeCriticalHit");
static_assert(offsetof(FSnfMarebitoTakeCriticalHit, Percent) == 0x000000, "Member 'FSnfMarebitoTakeCriticalHit::Percent' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoTakeCriticalHit, DamageRate) == 0x000004, "Member 'FSnfMarebitoTakeCriticalHit::DamageRate' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoTakeCriticalHit, CoreDamageRate) == 0x000008, "Member 'FSnfMarebitoTakeCriticalHit::CoreDamageRate' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoTakeCriticalHit, StaggerDamageRate) == 0x00000C, "Member 'FSnfMarebitoTakeCriticalHit::StaggerDamageRate' has a wrong offset!");

// ScriptStruct Snowfall.SnfMarebitoAbnormalParam
// 0x0080 (0x0080 - 0x0000)
struct FSnfMarebitoAbnormalParam final
{
public:
	float                                         BurnRecoverySpeed;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BurnAddedMax;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BurnDamageMin;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BurnDamageMax;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BurnCoreDamageMax;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullBurnTimeMin;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullBurnTimeMax;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BurnSpreadRange;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FreezeRecoverySpeed;                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FreezeStopTime;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSnfMarebitoTakeFreezeDamageRate       FreezeDamageRate;                                  // 0x0028(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 FreezeProgress_Damage;                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 FreezeProgress_SlowRate;                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         WindRapid_DownStaggerCount;                        // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindRapid_DownStaggerResetWait;                    // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindRapid_StaggerDamageRate;                       // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindRapid_DamageRate;                              // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSnfMarebitoTakeCriticalHit            WindRapid_CriticalHit;                             // 0x0070(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMarebitoAbnormalParam) == 0x000008, "Wrong alignment on FSnfMarebitoAbnormalParam");
static_assert(sizeof(FSnfMarebitoAbnormalParam) == 0x000080, "Wrong size on FSnfMarebitoAbnormalParam");
static_assert(offsetof(FSnfMarebitoAbnormalParam, BurnRecoverySpeed) == 0x000000, "Member 'FSnfMarebitoAbnormalParam::BurnRecoverySpeed' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoAbnormalParam, BurnAddedMax) == 0x000004, "Member 'FSnfMarebitoAbnormalParam::BurnAddedMax' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoAbnormalParam, BurnDamageMin) == 0x000008, "Member 'FSnfMarebitoAbnormalParam::BurnDamageMin' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoAbnormalParam, BurnDamageMax) == 0x00000C, "Member 'FSnfMarebitoAbnormalParam::BurnDamageMax' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoAbnormalParam, BurnCoreDamageMax) == 0x000010, "Member 'FSnfMarebitoAbnormalParam::BurnCoreDamageMax' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoAbnormalParam, FullBurnTimeMin) == 0x000014, "Member 'FSnfMarebitoAbnormalParam::FullBurnTimeMin' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoAbnormalParam, FullBurnTimeMax) == 0x000018, "Member 'FSnfMarebitoAbnormalParam::FullBurnTimeMax' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoAbnormalParam, BurnSpreadRange) == 0x00001C, "Member 'FSnfMarebitoAbnormalParam::BurnSpreadRange' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoAbnormalParam, FreezeRecoverySpeed) == 0x000020, "Member 'FSnfMarebitoAbnormalParam::FreezeRecoverySpeed' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoAbnormalParam, FreezeStopTime) == 0x000024, "Member 'FSnfMarebitoAbnormalParam::FreezeStopTime' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoAbnormalParam, FreezeDamageRate) == 0x000028, "Member 'FSnfMarebitoAbnormalParam::FreezeDamageRate' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoAbnormalParam, FreezeProgress_Damage) == 0x000040, "Member 'FSnfMarebitoAbnormalParam::FreezeProgress_Damage' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoAbnormalParam, FreezeProgress_SlowRate) == 0x000050, "Member 'FSnfMarebitoAbnormalParam::FreezeProgress_SlowRate' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoAbnormalParam, WindRapid_DownStaggerCount) == 0x000060, "Member 'FSnfMarebitoAbnormalParam::WindRapid_DownStaggerCount' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoAbnormalParam, WindRapid_DownStaggerResetWait) == 0x000064, "Member 'FSnfMarebitoAbnormalParam::WindRapid_DownStaggerResetWait' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoAbnormalParam, WindRapid_StaggerDamageRate) == 0x000068, "Member 'FSnfMarebitoAbnormalParam::WindRapid_StaggerDamageRate' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoAbnormalParam, WindRapid_DamageRate) == 0x00006C, "Member 'FSnfMarebitoAbnormalParam::WindRapid_DamageRate' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoAbnormalParam, WindRapid_CriticalHit) == 0x000070, "Member 'FSnfMarebitoAbnormalParam::WindRapid_CriticalHit' has a wrong offset!");

// ScriptStruct Snowfall.SnfMarebitoIniBaseParam
// 0x0078 (0x0078 - 0x0000)
struct FSnfMarebitoIniBaseParam final
{
public:
	float                                         VitalHP;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngerVital;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngerOpenPer;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoreWaitTime;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoreCloseTime;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoreOpenDamage;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoreStunTime;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 CoreResistance;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         StaggerResetWait;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaggeringDamage;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaggerSubValue;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CounterStartStagger;                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BattleRange;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BattleHearingRange;                                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DiscoverySeconds;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoseSightTime;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackstubCoreDamagePer;                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableHeadshot;                                    // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLegDamageBonus;                              // 0x0055(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSnfMarebitoTakeDamageRate             TakeDamageRate;                                    // 0x0058(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSnfMarebitoAbnormalParam>      AbnormalParam;                                     // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMarebitoIniBaseParam) == 0x000008, "Wrong alignment on FSnfMarebitoIniBaseParam");
static_assert(sizeof(FSnfMarebitoIniBaseParam) == 0x000078, "Wrong size on FSnfMarebitoIniBaseParam");
static_assert(offsetof(FSnfMarebitoIniBaseParam, VitalHP) == 0x000000, "Member 'FSnfMarebitoIniBaseParam::VitalHP' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoIniBaseParam, AngerVital) == 0x000004, "Member 'FSnfMarebitoIniBaseParam::AngerVital' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoIniBaseParam, AngerOpenPer) == 0x000008, "Member 'FSnfMarebitoIniBaseParam::AngerOpenPer' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoIniBaseParam, CoreWaitTime) == 0x00000C, "Member 'FSnfMarebitoIniBaseParam::CoreWaitTime' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoIniBaseParam, CoreCloseTime) == 0x000010, "Member 'FSnfMarebitoIniBaseParam::CoreCloseTime' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoIniBaseParam, CoreOpenDamage) == 0x000014, "Member 'FSnfMarebitoIniBaseParam::CoreOpenDamage' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoIniBaseParam, CoreStunTime) == 0x000018, "Member 'FSnfMarebitoIniBaseParam::CoreStunTime' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoIniBaseParam, CoreResistance) == 0x000020, "Member 'FSnfMarebitoIniBaseParam::CoreResistance' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoIniBaseParam, StaggerResetWait) == 0x000030, "Member 'FSnfMarebitoIniBaseParam::StaggerResetWait' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoIniBaseParam, StaggeringDamage) == 0x000034, "Member 'FSnfMarebitoIniBaseParam::StaggeringDamage' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoIniBaseParam, StaggerSubValue) == 0x000038, "Member 'FSnfMarebitoIniBaseParam::StaggerSubValue' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoIniBaseParam, CounterStartStagger) == 0x00003C, "Member 'FSnfMarebitoIniBaseParam::CounterStartStagger' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoIniBaseParam, BattleRange) == 0x000040, "Member 'FSnfMarebitoIniBaseParam::BattleRange' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoIniBaseParam, BattleHearingRange) == 0x000044, "Member 'FSnfMarebitoIniBaseParam::BattleHearingRange' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoIniBaseParam, DiscoverySeconds) == 0x000048, "Member 'FSnfMarebitoIniBaseParam::DiscoverySeconds' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoIniBaseParam, LoseSightTime) == 0x00004C, "Member 'FSnfMarebitoIniBaseParam::LoseSightTime' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoIniBaseParam, BackstubCoreDamagePer) == 0x000050, "Member 'FSnfMarebitoIniBaseParam::BackstubCoreDamagePer' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoIniBaseParam, EnableHeadshot) == 0x000054, "Member 'FSnfMarebitoIniBaseParam::EnableHeadshot' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoIniBaseParam, EnableLegDamageBonus) == 0x000055, "Member 'FSnfMarebitoIniBaseParam::EnableLegDamageBonus' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoIniBaseParam, TakeDamageRate) == 0x000058, "Member 'FSnfMarebitoIniBaseParam::TakeDamageRate' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoIniBaseParam, AbnormalParam) == 0x000068, "Member 'FSnfMarebitoIniBaseParam::AbnormalParam' has a wrong offset!");

// ScriptStruct Snowfall.SnfJobActorPoseInfo
// 0x0060 (0x0068 - 0x0008)
struct FSnfJobActorPoseInfo final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USkeletalMesh>           Mesh;                                              // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimationAsset>         AnimToPlay;                                        // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0058(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfJobActorPoseInfo) == 0x000008, "Wrong alignment on FSnfJobActorPoseInfo");
static_assert(sizeof(FSnfJobActorPoseInfo) == 0x000068, "Wrong size on FSnfJobActorPoseInfo");
static_assert(offsetof(FSnfJobActorPoseInfo, Mesh) == 0x000008, "Member 'FSnfJobActorPoseInfo::Mesh' has a wrong offset!");
static_assert(offsetof(FSnfJobActorPoseInfo, AnimToPlay) == 0x000030, "Member 'FSnfJobActorPoseInfo::AnimToPlay' has a wrong offset!");
static_assert(offsetof(FSnfJobActorPoseInfo, Offset) == 0x000058, "Member 'FSnfJobActorPoseInfo::Offset' has a wrong offset!");

// ScriptStruct Snowfall.SnfKekkaiActorFXSetting
// 0x0070 (0x0070 - 0x0000)
struct FSnfKekkaiActorFXSetting final
{
public:
	TMap<ESnfKekkaiFXAction, class FName>         PlayList;                                          // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
	bool                                          bAddCollision;                                     // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixedAddCollisionExtent;                          // 0x0051(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveAddCollision;                                 // 0x0052(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x1];                                       // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AddCollisionExtent;                                // 0x0054(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0060(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfKekkaiActorFXSetting) == 0x000008, "Wrong alignment on FSnfKekkaiActorFXSetting");
static_assert(sizeof(FSnfKekkaiActorFXSetting) == 0x000070, "Wrong size on FSnfKekkaiActorFXSetting");
static_assert(offsetof(FSnfKekkaiActorFXSetting, PlayList) == 0x000000, "Member 'FSnfKekkaiActorFXSetting::PlayList' has a wrong offset!");
static_assert(offsetof(FSnfKekkaiActorFXSetting, bAddCollision) == 0x000050, "Member 'FSnfKekkaiActorFXSetting::bAddCollision' has a wrong offset!");
static_assert(offsetof(FSnfKekkaiActorFXSetting, bFixedAddCollisionExtent) == 0x000051, "Member 'FSnfKekkaiActorFXSetting::bFixedAddCollisionExtent' has a wrong offset!");
static_assert(offsetof(FSnfKekkaiActorFXSetting, bMoveAddCollision) == 0x000052, "Member 'FSnfKekkaiActorFXSetting::bMoveAddCollision' has a wrong offset!");
static_assert(offsetof(FSnfKekkaiActorFXSetting, AddCollisionExtent) == 0x000054, "Member 'FSnfKekkaiActorFXSetting::AddCollisionExtent' has a wrong offset!");
static_assert(offsetof(FSnfKekkaiActorFXSetting, LocationOffset) == 0x000060, "Member 'FSnfKekkaiActorFXSetting::LocationOffset' has a wrong offset!");

// ScriptStruct Snowfall.SnfAttackCollision
// 0x0088 (0x0088 - 0x0000)
struct FSnfAttackCollision final
{
public:
	ESnfAttackCollisionShapeType                  CollisionType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCollidePlayerOnly;                                // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfMultiAttackQueryMobilityType              MobilityType;                                      // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x001C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RelativeScale3D;                                   // 0x0028(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0034(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHeadExtention;                              // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CapsuleTailSocketName;                             // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleTailExtention;                              // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeight;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExpand;                                           // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExpandSpeed;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitIntervalTime;                                   // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpecifyHitActor;                                  // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           SpecifyHitActors;                                  // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bEnableObstacleCheck;                              // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfAttackCollision) == 0x000008, "Wrong alignment on FSnfAttackCollision");
static_assert(sizeof(FSnfAttackCollision) == 0x000088, "Wrong size on FSnfAttackCollision");
static_assert(offsetof(FSnfAttackCollision, CollisionType) == 0x000000, "Member 'FSnfAttackCollision::CollisionType' has a wrong offset!");
static_assert(offsetof(FSnfAttackCollision, bCollidePlayerOnly) == 0x000001, "Member 'FSnfAttackCollision::bCollidePlayerOnly' has a wrong offset!");
static_assert(offsetof(FSnfAttackCollision, TraceChannel) == 0x000002, "Member 'FSnfAttackCollision::TraceChannel' has a wrong offset!");
static_assert(offsetof(FSnfAttackCollision, MobilityType) == 0x000003, "Member 'FSnfAttackCollision::MobilityType' has a wrong offset!");
static_assert(offsetof(FSnfAttackCollision, bTraceComplex) == 0x000004, "Member 'FSnfAttackCollision::bTraceComplex' has a wrong offset!");
static_assert(offsetof(FSnfAttackCollision, SocketName) == 0x000008, "Member 'FSnfAttackCollision::SocketName' has a wrong offset!");
static_assert(offsetof(FSnfAttackCollision, RelativeLocation) == 0x000010, "Member 'FSnfAttackCollision::RelativeLocation' has a wrong offset!");
static_assert(offsetof(FSnfAttackCollision, RelativeRotation) == 0x00001C, "Member 'FSnfAttackCollision::RelativeRotation' has a wrong offset!");
static_assert(offsetof(FSnfAttackCollision, RelativeScale3D) == 0x000028, "Member 'FSnfAttackCollision::RelativeScale3D' has a wrong offset!");
static_assert(offsetof(FSnfAttackCollision, BoxExtent) == 0x000034, "Member 'FSnfAttackCollision::BoxExtent' has a wrong offset!");
static_assert(offsetof(FSnfAttackCollision, SphereRadius) == 0x000040, "Member 'FSnfAttackCollision::SphereRadius' has a wrong offset!");
static_assert(offsetof(FSnfAttackCollision, CapsuleHeadExtention) == 0x000044, "Member 'FSnfAttackCollision::CapsuleHeadExtention' has a wrong offset!");
static_assert(offsetof(FSnfAttackCollision, CapsuleTailSocketName) == 0x000048, "Member 'FSnfAttackCollision::CapsuleTailSocketName' has a wrong offset!");
static_assert(offsetof(FSnfAttackCollision, CapsuleTailExtention) == 0x000050, "Member 'FSnfAttackCollision::CapsuleTailExtention' has a wrong offset!");
static_assert(offsetof(FSnfAttackCollision, CapsuleHalfHeight) == 0x000054, "Member 'FSnfAttackCollision::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(FSnfAttackCollision, CapsuleRadius) == 0x000058, "Member 'FSnfAttackCollision::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(FSnfAttackCollision, bExpand) == 0x00005C, "Member 'FSnfAttackCollision::bExpand' has a wrong offset!");
static_assert(offsetof(FSnfAttackCollision, ExpandSpeed) == 0x000060, "Member 'FSnfAttackCollision::ExpandSpeed' has a wrong offset!");
static_assert(offsetof(FSnfAttackCollision, HitIntervalTime) == 0x000064, "Member 'FSnfAttackCollision::HitIntervalTime' has a wrong offset!");
static_assert(offsetof(FSnfAttackCollision, bSpecifyHitActor) == 0x000068, "Member 'FSnfAttackCollision::bSpecifyHitActor' has a wrong offset!");
static_assert(offsetof(FSnfAttackCollision, SpecifyHitActors) == 0x000070, "Member 'FSnfAttackCollision::SpecifyHitActors' has a wrong offset!");
static_assert(offsetof(FSnfAttackCollision, bEnableObstacleCheck) == 0x000080, "Member 'FSnfAttackCollision::bEnableObstacleCheck' has a wrong offset!");

// ScriptStruct Snowfall.SnfMorphedRaccoonActorStaticPartsComponent
// 0x0018 (0x0018 - 0x0000)
struct FSnfMorphedRaccoonActorStaticPartsComponent final
{
public:
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartsSettingIndex;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SocketPartsIndex;                                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMorphedRaccoonActorStaticPartsComponent) == 0x000008, "Wrong alignment on FSnfMorphedRaccoonActorStaticPartsComponent");
static_assert(sizeof(FSnfMorphedRaccoonActorStaticPartsComponent) == 0x000018, "Wrong size on FSnfMorphedRaccoonActorStaticPartsComponent");
static_assert(offsetof(FSnfMorphedRaccoonActorStaticPartsComponent, StaticMeshComponent) == 0x000000, "Member 'FSnfMorphedRaccoonActorStaticPartsComponent::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorStaticPartsComponent, PartsSettingIndex) == 0x000008, "Member 'FSnfMorphedRaccoonActorStaticPartsComponent::PartsSettingIndex' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorStaticPartsComponent, SocketPartsIndex) == 0x00000C, "Member 'FSnfMorphedRaccoonActorStaticPartsComponent::SocketPartsIndex' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorStaticPartsComponent, SocketName) == 0x000010, "Member 'FSnfMorphedRaccoonActorStaticPartsComponent::SocketName' has a wrong offset!");

// ScriptStruct Snowfall.SnfGimmickActorPartsSetting
// 0x0110 (0x0110 - 0x0000)
struct FSnfGimmickActorPartsSetting final
{
public:
	class UStaticMesh*                            PartsMesh;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  PartsMaterials;                                    // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
	int32                                         AttachPartsIndex;                                  // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SocketPartsIndex;                                  // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastShadow;                                       // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0064(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PartsTransform;                                    // 0x0070(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   CollisionProfileName;                              // 0x00A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelativeAnimationedTransform;                     // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             AnimationedTransform;                              // 0x00B0(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseEaseAnimSpeed;                                 // 0x00E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   AnimType;                                          // 0x00E1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x2];                                       // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimationSpeed;                                    // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EaseMoveAnimSpeed;                                 // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EaseRotAnimSpeed;                                  // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EaseScaleAnimSpeed;                                // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   MoveAnimType;                                      // 0x00F4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   RotAnimType;                                       // 0x00F5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   ScaleAnimType;                                     // 0x00F6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F7[0x1];                                       // 0x00F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivateAnimationDelay;                            // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InActivateAnimationDelay;                          // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AnimationCurve;                                    // 0x0100(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationTimeMax;                                  // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGimmickActorPartsSetting) == 0x000010, "Wrong alignment on FSnfGimmickActorPartsSetting");
static_assert(sizeof(FSnfGimmickActorPartsSetting) == 0x000110, "Wrong size on FSnfGimmickActorPartsSetting");
static_assert(offsetof(FSnfGimmickActorPartsSetting, PartsMesh) == 0x000000, "Member 'FSnfGimmickActorPartsSetting::PartsMesh' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, PartsMaterials) == 0x000008, "Member 'FSnfGimmickActorPartsSetting::PartsMaterials' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, AttachPartsIndex) == 0x000058, "Member 'FSnfGimmickActorPartsSetting::AttachPartsIndex' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, SocketPartsIndex) == 0x00005C, "Member 'FSnfGimmickActorPartsSetting::SocketPartsIndex' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, bCastShadow) == 0x000060, "Member 'FSnfGimmickActorPartsSetting::bCastShadow' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, SocketName) == 0x000064, "Member 'FSnfGimmickActorPartsSetting::SocketName' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, PartsTransform) == 0x000070, "Member 'FSnfGimmickActorPartsSetting::PartsTransform' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, CollisionProfileName) == 0x0000A0, "Member 'FSnfGimmickActorPartsSetting::CollisionProfileName' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, bRelativeAnimationedTransform) == 0x0000A8, "Member 'FSnfGimmickActorPartsSetting::bRelativeAnimationedTransform' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, AnimationedTransform) == 0x0000B0, "Member 'FSnfGimmickActorPartsSetting::AnimationedTransform' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, bUseEaseAnimSpeed) == 0x0000E0, "Member 'FSnfGimmickActorPartsSetting::bUseEaseAnimSpeed' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, AnimType) == 0x0000E1, "Member 'FSnfGimmickActorPartsSetting::AnimType' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, AnimationSpeed) == 0x0000E4, "Member 'FSnfGimmickActorPartsSetting::AnimationSpeed' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, EaseMoveAnimSpeed) == 0x0000E8, "Member 'FSnfGimmickActorPartsSetting::EaseMoveAnimSpeed' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, EaseRotAnimSpeed) == 0x0000EC, "Member 'FSnfGimmickActorPartsSetting::EaseRotAnimSpeed' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, EaseScaleAnimSpeed) == 0x0000F0, "Member 'FSnfGimmickActorPartsSetting::EaseScaleAnimSpeed' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, MoveAnimType) == 0x0000F4, "Member 'FSnfGimmickActorPartsSetting::MoveAnimType' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, RotAnimType) == 0x0000F5, "Member 'FSnfGimmickActorPartsSetting::RotAnimType' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, ScaleAnimType) == 0x0000F6, "Member 'FSnfGimmickActorPartsSetting::ScaleAnimType' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, ActivateAnimationDelay) == 0x0000F8, "Member 'FSnfGimmickActorPartsSetting::ActivateAnimationDelay' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, InActivateAnimationDelay) == 0x0000FC, "Member 'FSnfGimmickActorPartsSetting::InActivateAnimationDelay' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, AnimationCurve) == 0x000100, "Member 'FSnfGimmickActorPartsSetting::AnimationCurve' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSetting, AnimationTimeMax) == 0x000108, "Member 'FSnfGimmickActorPartsSetting::AnimationTimeMax' has a wrong offset!");

// ScriptStruct Snowfall.SnfMarebitoSubMeshParam
// 0x0040 (0x0040 - 0x0000)
struct FSnfMarebitoSubMeshParam final
{
public:
	class FName                                   SubMeshName;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             AttachTransform;                                   // 0x0010(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMarebitoSubMeshParam) == 0x000010, "Wrong alignment on FSnfMarebitoSubMeshParam");
static_assert(sizeof(FSnfMarebitoSubMeshParam) == 0x000040, "Wrong size on FSnfMarebitoSubMeshParam");
static_assert(offsetof(FSnfMarebitoSubMeshParam, SubMeshName) == 0x000000, "Member 'FSnfMarebitoSubMeshParam::SubMeshName' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoSubMeshParam, BoneName) == 0x000008, "Member 'FSnfMarebitoSubMeshParam::BoneName' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoSubMeshParam, AttachTransform) == 0x000010, "Member 'FSnfMarebitoSubMeshParam::AttachTransform' has a wrong offset!");

// ScriptStruct Snowfall.SoundPlayerActorMeshSetting
// 0x0090 (0x0090 - 0x0000)
struct FSoundPlayerActorMeshSetting final
{
public:
	class UStaticMesh*                            PartsMesh;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  PartsMaterials;                                    // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             TransformOffset;                                   // 0x0060(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoundPlayerActorMeshSetting) == 0x000010, "Wrong alignment on FSoundPlayerActorMeshSetting");
static_assert(sizeof(FSoundPlayerActorMeshSetting) == 0x000090, "Wrong size on FSoundPlayerActorMeshSetting");
static_assert(offsetof(FSoundPlayerActorMeshSetting, PartsMesh) == 0x000000, "Member 'FSoundPlayerActorMeshSetting::PartsMesh' has a wrong offset!");
static_assert(offsetof(FSoundPlayerActorMeshSetting, PartsMaterials) == 0x000008, "Member 'FSoundPlayerActorMeshSetting::PartsMaterials' has a wrong offset!");
static_assert(offsetof(FSoundPlayerActorMeshSetting, SocketName) == 0x000058, "Member 'FSoundPlayerActorMeshSetting::SocketName' has a wrong offset!");
static_assert(offsetof(FSoundPlayerActorMeshSetting, TransformOffset) == 0x000060, "Member 'FSoundPlayerActorMeshSetting::TransformOffset' has a wrong offset!");

// ScriptStruct Snowfall.SnfCheatItemNum
// 0x0010 (0x0010 - 0x0000)
struct FSnfCheatItemNum final
{
public:
	TArray<struct FTngInventoryItem>              ItemList;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCheatItemNum) == 0x000008, "Wrong alignment on FSnfCheatItemNum");
static_assert(sizeof(FSnfCheatItemNum) == 0x000010, "Wrong size on FSnfCheatItemNum");
static_assert(offsetof(FSnfCheatItemNum, ItemList) == 0x000000, "Member 'FSnfCheatItemNum::ItemList' has a wrong offset!");

// ScriptStruct Snowfall.SnfQualityPresetRayTracingCulling
// 0x0010 (0x0010 - 0x0000)
struct FSnfQualityPresetRayTracingCulling final
{
public:
	uint8                                         Index;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CullRadius;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CullFrustumLength;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CullSmallSolidAngle;                               // 0x000C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfQualityPresetRayTracingCulling) == 0x000004, "Wrong alignment on FSnfQualityPresetRayTracingCulling");
static_assert(sizeof(FSnfQualityPresetRayTracingCulling) == 0x000010, "Wrong size on FSnfQualityPresetRayTracingCulling");
static_assert(offsetof(FSnfQualityPresetRayTracingCulling, Index) == 0x000000, "Member 'FSnfQualityPresetRayTracingCulling::Index' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetRayTracingCulling, CullRadius) == 0x000004, "Member 'FSnfQualityPresetRayTracingCulling::CullRadius' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetRayTracingCulling, CullFrustumLength) == 0x000008, "Member 'FSnfQualityPresetRayTracingCulling::CullFrustumLength' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetRayTracingCulling, CullSmallSolidAngle) == 0x00000C, "Member 'FSnfQualityPresetRayTracingCulling::CullSmallSolidAngle' has a wrong offset!");

// ScriptStruct Snowfall.SnfCheatItemClass
// 0x0010 (0x0010 - 0x0000)
struct FSnfCheatItemClass final
{
public:
	TArray<TSubclassOf<class UTngItemObject>>     ItemList;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCheatItemClass) == 0x000008, "Wrong alignment on FSnfCheatItemClass");
static_assert(sizeof(FSnfCheatItemClass) == 0x000010, "Wrong size on FSnfCheatItemClass");
static_assert(offsetof(FSnfCheatItemClass, ItemList) == 0x000000, "Member 'FSnfCheatItemClass::ItemList' has a wrong offset!");

// ScriptStruct Snowfall.SnfAttackDamageSetting
// 0x0018 (0x0018 - 0x0000)
struct FSnfAttackDamageSetting final
{
public:
	class FName                                   DamageName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageAmount;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAttackDamageSetting) == 0x000008, "Wrong alignment on FSnfAttackDamageSetting");
static_assert(sizeof(FSnfAttackDamageSetting) == 0x000018, "Wrong size on FSnfAttackDamageSetting");
static_assert(offsetof(FSnfAttackDamageSetting, DamageName) == 0x000000, "Member 'FSnfAttackDamageSetting::DamageName' has a wrong offset!");
static_assert(offsetof(FSnfAttackDamageSetting, DamageAmount) == 0x000008, "Member 'FSnfAttackDamageSetting::DamageAmount' has a wrong offset!");
static_assert(offsetof(FSnfAttackDamageSetting, DamageType) == 0x000010, "Member 'FSnfAttackDamageSetting::DamageType' has a wrong offset!");

// ScriptStruct Snowfall.SnfAttackDamage
// 0x0020 (0x0020 - 0x0000)
struct FSnfAttackDamage final
{
public:
	TArray<struct FSnfAttackDamageSetting>        DamageSetting;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         CoreDamageAmount;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KKModeCoreDamageAmount;                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTngImpactEffectTable*                  ImpactEffectTable;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAttackDamage) == 0x000008, "Wrong alignment on FSnfAttackDamage");
static_assert(sizeof(FSnfAttackDamage) == 0x000020, "Wrong size on FSnfAttackDamage");
static_assert(offsetof(FSnfAttackDamage, DamageSetting) == 0x000000, "Member 'FSnfAttackDamage::DamageSetting' has a wrong offset!");
static_assert(offsetof(FSnfAttackDamage, CoreDamageAmount) == 0x000010, "Member 'FSnfAttackDamage::CoreDamageAmount' has a wrong offset!");
static_assert(offsetof(FSnfAttackDamage, KKModeCoreDamageAmount) == 0x000014, "Member 'FSnfAttackDamage::KKModeCoreDamageAmount' has a wrong offset!");
static_assert(offsetof(FSnfAttackDamage, ImpactEffectTable) == 0x000018, "Member 'FSnfAttackDamage::ImpactEffectTable' has a wrong offset!");

// ScriptStruct Snowfall.SnfCheckEliminateAction
// 0x0010 (0x0010 - 0x0000)
struct FSnfCheckEliminateAction final
{
public:
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCheckEliminateAction) == 0x000004, "Wrong alignment on FSnfCheckEliminateAction");
static_assert(sizeof(FSnfCheckEliminateAction) == 0x000010, "Wrong size on FSnfCheckEliminateAction");
static_assert(offsetof(FSnfCheckEliminateAction, TargetActor) == 0x000000, "Member 'FSnfCheckEliminateAction::TargetActor' has a wrong offset!");
static_assert(offsetof(FSnfCheckEliminateAction, ActionName) == 0x000008, "Member 'FSnfCheckEliminateAction::ActionName' has a wrong offset!");

// ScriptStruct Snowfall.SnfCheckEliminateSetData
// 0x0028 (0x0028 - 0x0000)
struct FSnfCheckEliminateSetData final
{
public:
	int32                                         StartNum;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ASnfJobActor*>                   List;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfCheckEliminateAction>       ActionListBeforeCheckDelayTime;                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCheckEliminateSetData) == 0x000008, "Wrong alignment on FSnfCheckEliminateSetData");
static_assert(sizeof(FSnfCheckEliminateSetData) == 0x000028, "Wrong size on FSnfCheckEliminateSetData");
static_assert(offsetof(FSnfCheckEliminateSetData, StartNum) == 0x000000, "Member 'FSnfCheckEliminateSetData::StartNum' has a wrong offset!");
static_assert(offsetof(FSnfCheckEliminateSetData, DelayTime) == 0x000004, "Member 'FSnfCheckEliminateSetData::DelayTime' has a wrong offset!");
static_assert(offsetof(FSnfCheckEliminateSetData, List) == 0x000008, "Member 'FSnfCheckEliminateSetData::List' has a wrong offset!");
static_assert(offsetof(FSnfCheckEliminateSetData, ActionListBeforeCheckDelayTime) == 0x000018, "Member 'FSnfCheckEliminateSetData::ActionListBeforeCheckDelayTime' has a wrong offset!");

// ScriptStruct Snowfall.SnfJobTypeList
// 0x0018 (0x0018 - 0x0000)
struct FSnfJobTypeList final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USnfJobAction*>                  Actions;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfJobTypeList) == 0x000008, "Wrong alignment on FSnfJobTypeList");
static_assert(sizeof(FSnfJobTypeList) == 0x000018, "Wrong size on FSnfJobTypeList");
static_assert(offsetof(FSnfJobTypeList, Distance) == 0x000000, "Member 'FSnfJobTypeList::Distance' has a wrong offset!");
static_assert(offsetof(FSnfJobTypeList, Actions) == 0x000008, "Member 'FSnfJobTypeList::Actions' has a wrong offset!");

// ScriptStruct Snowfall.SnfMissionDrawItem
// 0x001C (0x001C - 0x0000)
struct FSnfMissionDrawItem final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSnfGameActivityDraw                   ActivityCatalogData;                               // 0x0004(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x8];                                       // 0x0014(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfMissionDrawItem) == 0x000004, "Wrong alignment on FSnfMissionDrawItem");
static_assert(sizeof(FSnfMissionDrawItem) == 0x00001C, "Wrong size on FSnfMissionDrawItem");
static_assert(offsetof(FSnfMissionDrawItem, ActivityCatalogData) == 0x000004, "Member 'FSnfMissionDrawItem::ActivityCatalogData' has a wrong offset!");

// ScriptStruct Snowfall.SnfCcVoiceTypeList
// 0x0050 (0x0050 - 0x0000)
struct FSnfCcVoiceTypeList final
{
public:
	TMap<EVoiceType, class UAkAudioEvent*>        Events;                                            // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCcVoiceTypeList) == 0x000008, "Wrong alignment on FSnfCcVoiceTypeList");
static_assert(sizeof(FSnfCcVoiceTypeList) == 0x000050, "Wrong size on FSnfCcVoiceTypeList");
static_assert(offsetof(FSnfCcVoiceTypeList, Events) == 0x000000, "Member 'FSnfCcVoiceTypeList::Events' has a wrong offset!");

// ScriptStruct Snowfall.SnfCheckEliminateItem
// 0x001C (0x001C - 0x0000)
struct FSnfCheckEliminateItem final
{
public:
	bool                                          OnFlag;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpwanFlag;                                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KillFlag;                                          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASnfJobActor>            JobActor;                                          // 0x000C(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USnfJobComponent>        JobComponent;                                      // 0x0014(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCheckEliminateItem) == 0x000004, "Wrong alignment on FSnfCheckEliminateItem");
static_assert(sizeof(FSnfCheckEliminateItem) == 0x00001C, "Wrong size on FSnfCheckEliminateItem");
static_assert(offsetof(FSnfCheckEliminateItem, OnFlag) == 0x000000, "Member 'FSnfCheckEliminateItem::OnFlag' has a wrong offset!");
static_assert(offsetof(FSnfCheckEliminateItem, SpwanFlag) == 0x000001, "Member 'FSnfCheckEliminateItem::SpwanFlag' has a wrong offset!");
static_assert(offsetof(FSnfCheckEliminateItem, KillFlag) == 0x000002, "Member 'FSnfCheckEliminateItem::KillFlag' has a wrong offset!");
static_assert(offsetof(FSnfCheckEliminateItem, TargetActor) == 0x000004, "Member 'FSnfCheckEliminateItem::TargetActor' has a wrong offset!");
static_assert(offsetof(FSnfCheckEliminateItem, JobActor) == 0x00000C, "Member 'FSnfCheckEliminateItem::JobActor' has a wrong offset!");
static_assert(offsetof(FSnfCheckEliminateItem, JobComponent) == 0x000014, "Member 'FSnfCheckEliminateItem::JobComponent' has a wrong offset!");

// ScriptStruct Snowfall.SnfCheckEliminateData
// 0x0038 (0x0038 - 0x0000)
struct FSnfCheckEliminateData final
{
public:
	bool                                          OnFlag;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearFlag;                                         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartNum;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timer;                                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSnfCheckEliminateItem>         List;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ActionedBeforeCheckDelayTime;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSnfCheckEliminateAction>       ActionListBeforeCheckDelayTime;                    // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCheckEliminateData) == 0x000008, "Wrong alignment on FSnfCheckEliminateData");
static_assert(sizeof(FSnfCheckEliminateData) == 0x000038, "Wrong size on FSnfCheckEliminateData");
static_assert(offsetof(FSnfCheckEliminateData, OnFlag) == 0x000000, "Member 'FSnfCheckEliminateData::OnFlag' has a wrong offset!");
static_assert(offsetof(FSnfCheckEliminateData, ClearFlag) == 0x000001, "Member 'FSnfCheckEliminateData::ClearFlag' has a wrong offset!");
static_assert(offsetof(FSnfCheckEliminateData, StartNum) == 0x000004, "Member 'FSnfCheckEliminateData::StartNum' has a wrong offset!");
static_assert(offsetof(FSnfCheckEliminateData, DelayTime) == 0x000008, "Member 'FSnfCheckEliminateData::DelayTime' has a wrong offset!");
static_assert(offsetof(FSnfCheckEliminateData, Timer) == 0x00000C, "Member 'FSnfCheckEliminateData::Timer' has a wrong offset!");
static_assert(offsetof(FSnfCheckEliminateData, List) == 0x000010, "Member 'FSnfCheckEliminateData::List' has a wrong offset!");
static_assert(offsetof(FSnfCheckEliminateData, ActionedBeforeCheckDelayTime) == 0x000020, "Member 'FSnfCheckEliminateData::ActionedBeforeCheckDelayTime' has a wrong offset!");
static_assert(offsetof(FSnfCheckEliminateData, ActionListBeforeCheckDelayTime) == 0x000028, "Member 'FSnfCheckEliminateData::ActionListBeforeCheckDelayTime' has a wrong offset!");

// ScriptStruct Snowfall.SnfGimmickActorInteractSetting
// 0x00A0 (0x00A0 - 0x0000)
struct FSnfGimmickActorInteractSetting final
{
public:
	bool                                          bMakeComponent;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFollowPartsTransform;                             // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0xE];                                        // 0x0002(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InteractTransformOffset;                           // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             CollisionTransformOffset;                          // 0x0040(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CollisionBoxExtentOffset;                          // 0x0070(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetInteractRange;                                 // 0x007C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InteractRange;                                     // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetSelfToSenderAngle;                             // 0x0084(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelfToSenderAngle;                                 // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetSelfToSenderSideAngle;                         // 0x008C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelfToSenderSideAngle;                             // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0xC];                                       // 0x0094(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGimmickActorInteractSetting) == 0x000010, "Wrong alignment on FSnfGimmickActorInteractSetting");
static_assert(sizeof(FSnfGimmickActorInteractSetting) == 0x0000A0, "Wrong size on FSnfGimmickActorInteractSetting");
static_assert(offsetof(FSnfGimmickActorInteractSetting, bMakeComponent) == 0x000000, "Member 'FSnfGimmickActorInteractSetting::bMakeComponent' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInteractSetting, bFollowPartsTransform) == 0x000001, "Member 'FSnfGimmickActorInteractSetting::bFollowPartsTransform' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInteractSetting, InteractTransformOffset) == 0x000010, "Member 'FSnfGimmickActorInteractSetting::InteractTransformOffset' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInteractSetting, CollisionTransformOffset) == 0x000040, "Member 'FSnfGimmickActorInteractSetting::CollisionTransformOffset' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInteractSetting, CollisionBoxExtentOffset) == 0x000070, "Member 'FSnfGimmickActorInteractSetting::CollisionBoxExtentOffset' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInteractSetting, bSetInteractRange) == 0x00007C, "Member 'FSnfGimmickActorInteractSetting::bSetInteractRange' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInteractSetting, InteractRange) == 0x000080, "Member 'FSnfGimmickActorInteractSetting::InteractRange' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInteractSetting, bSetSelfToSenderAngle) == 0x000084, "Member 'FSnfGimmickActorInteractSetting::bSetSelfToSenderAngle' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInteractSetting, SelfToSenderAngle) == 0x000088, "Member 'FSnfGimmickActorInteractSetting::SelfToSenderAngle' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInteractSetting, bSetSelfToSenderSideAngle) == 0x00008C, "Member 'FSnfGimmickActorInteractSetting::bSetSelfToSenderSideAngle' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInteractSetting, SelfToSenderSideAngle) == 0x000090, "Member 'FSnfGimmickActorInteractSetting::SelfToSenderSideAngle' has a wrong offset!");

// ScriptStruct Snowfall.CheckGotoShape
// 0x0028 (0x0028 - 0x0000)
struct FCheckGotoShape final
{
public:
	ESnfPlayerCheckCollisionType                  CollisionType;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CollisionLocation;                                 // 0x0004(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CollisionRotation;                                 // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CollisionScale;                                    // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCheckGotoShape) == 0x000004, "Wrong alignment on FCheckGotoShape");
static_assert(sizeof(FCheckGotoShape) == 0x000028, "Wrong size on FCheckGotoShape");
static_assert(offsetof(FCheckGotoShape, CollisionType) == 0x000000, "Member 'FCheckGotoShape::CollisionType' has a wrong offset!");
static_assert(offsetof(FCheckGotoShape, CollisionLocation) == 0x000004, "Member 'FCheckGotoShape::CollisionLocation' has a wrong offset!");
static_assert(offsetof(FCheckGotoShape, CollisionRotation) == 0x000010, "Member 'FCheckGotoShape::CollisionRotation' has a wrong offset!");
static_assert(offsetof(FCheckGotoShape, CollisionScale) == 0x00001C, "Member 'FCheckGotoShape::CollisionScale' has a wrong offset!");

// ScriptStruct Snowfall.SnfCheckTimerAction
// 0x0038 (0x0038 - 0x0000)
struct FSnfCheckTimerAction final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetDirect;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  TargetSoft;                                        // 0x0010(0x0028)(Edit, BlueprintVisible, DisableEditOnTemplate, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCheckTimerAction) == 0x000008, "Wrong alignment on FSnfCheckTimerAction");
static_assert(sizeof(FSnfCheckTimerAction) == 0x000038, "Wrong size on FSnfCheckTimerAction");
static_assert(offsetof(FSnfCheckTimerAction, ActionName) == 0x000000, "Member 'FSnfCheckTimerAction::ActionName' has a wrong offset!");
static_assert(offsetof(FSnfCheckTimerAction, TargetDirect) == 0x000008, "Member 'FSnfCheckTimerAction::TargetDirect' has a wrong offset!");
static_assert(offsetof(FSnfCheckTimerAction, TargetSoft) == 0x000010, "Member 'FSnfCheckTimerAction::TargetSoft' has a wrong offset!");

// ScriptStruct Snowfall.SnfShrineActorSoftActionInfo
// 0x0040 (0x0040 - 0x0000)
struct FSnfShrineActorSoftActionInfo final
{
public:
	TSoftObjectPtr<class AActor>                  TargetActor;                                       // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TypeName;                                          // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ActionParam;                                       // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CheckPrepareName;                                  // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfShrineActorSoftActionInfo) == 0x000008, "Wrong alignment on FSnfShrineActorSoftActionInfo");
static_assert(sizeof(FSnfShrineActorSoftActionInfo) == 0x000040, "Wrong size on FSnfShrineActorSoftActionInfo");
static_assert(offsetof(FSnfShrineActorSoftActionInfo, TargetActor) == 0x000000, "Member 'FSnfShrineActorSoftActionInfo::TargetActor' has a wrong offset!");
static_assert(offsetof(FSnfShrineActorSoftActionInfo, TypeName) == 0x000028, "Member 'FSnfShrineActorSoftActionInfo::TypeName' has a wrong offset!");
static_assert(offsetof(FSnfShrineActorSoftActionInfo, ActionParam) == 0x000030, "Member 'FSnfShrineActorSoftActionInfo::ActionParam' has a wrong offset!");
static_assert(offsetof(FSnfShrineActorSoftActionInfo, CheckPrepareName) == 0x000038, "Member 'FSnfShrineActorSoftActionInfo::CheckPrepareName' has a wrong offset!");

// ScriptStruct Snowfall.SnfClothActorPair
// 0x0010 (0x0010 - 0x0000)
struct FSnfClothActorPair final
{
public:
	class USkinnedMeshComponent*                  MeshComp;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnfSkeletalMeshComponent*              ClothMeshComp;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfClothActorPair) == 0x000008, "Wrong alignment on FSnfClothActorPair");
static_assert(sizeof(FSnfClothActorPair) == 0x000010, "Wrong size on FSnfClothActorPair");
static_assert(offsetof(FSnfClothActorPair, MeshComp) == 0x000000, "Member 'FSnfClothActorPair::MeshComp' has a wrong offset!");
static_assert(offsetof(FSnfClothActorPair, ClothMeshComp) == 0x000008, "Member 'FSnfClothActorPair::ClothMeshComp' has a wrong offset!");

// ScriptStruct Snowfall.CollisionMarkerActorSectionInfo
// 0x0038 (0x0038 - 0x0000)
struct FCollisionMarkerActorSectionInfo final
{
public:
	TArray<struct FVector>                        Vertices;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Triangles;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionIndex;                                      // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCollisionMarkerActorSectionInfo) == 0x000008, "Wrong alignment on FCollisionMarkerActorSectionInfo");
static_assert(sizeof(FCollisionMarkerActorSectionInfo) == 0x000038, "Wrong size on FCollisionMarkerActorSectionInfo");
static_assert(offsetof(FCollisionMarkerActorSectionInfo, Vertices) == 0x000000, "Member 'FCollisionMarkerActorSectionInfo::Vertices' has a wrong offset!");
static_assert(offsetof(FCollisionMarkerActorSectionInfo, Triangles) == 0x000010, "Member 'FCollisionMarkerActorSectionInfo::Triangles' has a wrong offset!");
static_assert(offsetof(FCollisionMarkerActorSectionInfo, Color) == 0x000020, "Member 'FCollisionMarkerActorSectionInfo::Color' has a wrong offset!");
static_assert(offsetof(FCollisionMarkerActorSectionInfo, SectionIndex) == 0x000030, "Member 'FCollisionMarkerActorSectionInfo::SectionIndex' has a wrong offset!");

// ScriptStruct Snowfall.SnfNpcDataInfo
// 0x0038 (0x0038 - 0x0000)
struct FSnfNpcDataInfo final
{
public:
	TSoftObjectPtr<class USkeletalMesh>           Mesh;                                              // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           MateSlotNames;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfNpcDataInfo) == 0x000008, "Wrong alignment on FSnfNpcDataInfo");
static_assert(sizeof(FSnfNpcDataInfo) == 0x000038, "Wrong size on FSnfNpcDataInfo");
static_assert(offsetof(FSnfNpcDataInfo, Mesh) == 0x000000, "Member 'FSnfNpcDataInfo::Mesh' has a wrong offset!");
static_assert(offsetof(FSnfNpcDataInfo, MateSlotNames) == 0x000028, "Member 'FSnfNpcDataInfo::MateSlotNames' has a wrong offset!");

// ScriptStruct Snowfall.SnfCompassParentInfo
// 0x0028 (0x0028 - 0x0000)
struct FSnfCompassParentInfo final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Edit, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USnfCompassMarkerWidget>    ChildWidgetClass;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USnfGameCompassObject>      MarkerData;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MarkerMinNum;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LayerNum;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCheckGameFlag;                                  // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNotCheckCreateGameFlag;                         // 0x0021(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseCatalogIcon;                                 // 0x0022(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCompassParentInfo) == 0x000008, "Wrong alignment on FSnfCompassParentInfo");
static_assert(sizeof(FSnfCompassParentInfo) == 0x000028, "Wrong size on FSnfCompassParentInfo");
static_assert(offsetof(FSnfCompassParentInfo, Tag) == 0x000000, "Member 'FSnfCompassParentInfo::Tag' has a wrong offset!");
static_assert(offsetof(FSnfCompassParentInfo, ChildWidgetClass) == 0x000008, "Member 'FSnfCompassParentInfo::ChildWidgetClass' has a wrong offset!");
static_assert(offsetof(FSnfCompassParentInfo, MarkerData) == 0x000010, "Member 'FSnfCompassParentInfo::MarkerData' has a wrong offset!");
static_assert(offsetof(FSnfCompassParentInfo, MarkerMinNum) == 0x000018, "Member 'FSnfCompassParentInfo::MarkerMinNum' has a wrong offset!");
static_assert(offsetof(FSnfCompassParentInfo, LayerNum) == 0x00001C, "Member 'FSnfCompassParentInfo::LayerNum' has a wrong offset!");
static_assert(offsetof(FSnfCompassParentInfo, bIsCheckGameFlag) == 0x000020, "Member 'FSnfCompassParentInfo::bIsCheckGameFlag' has a wrong offset!");
static_assert(offsetof(FSnfCompassParentInfo, bIsNotCheckCreateGameFlag) == 0x000021, "Member 'FSnfCompassParentInfo::bIsNotCheckCreateGameFlag' has a wrong offset!");
static_assert(offsetof(FSnfCompassParentInfo, bIsUseCatalogIcon) == 0x000022, "Member 'FSnfCompassParentInfo::bIsUseCatalogIcon' has a wrong offset!");

// ScriptStruct Snowfall.SnfControlCheckActStateItem
// 0x0078 (0x0078 - 0x0000)
struct FSnfControlCheckActStateItem final
{
public:
	TSoftObjectPtr<class UDataTable>              Table;                                             // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UniqueId;                                          // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetActorUniqueId;                               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  TargetActorSoft;                                   // 0x0040(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetActorSoftUniqueId;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfGameActivityState                         CheckState;                                        // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfControlCheckActStateItem) == 0x000008, "Wrong alignment on FSnfControlCheckActStateItem");
static_assert(sizeof(FSnfControlCheckActStateItem) == 0x000078, "Wrong size on FSnfControlCheckActStateItem");
static_assert(offsetof(FSnfControlCheckActStateItem, Table) == 0x000000, "Member 'FSnfControlCheckActStateItem::Table' has a wrong offset!");
static_assert(offsetof(FSnfControlCheckActStateItem, UniqueId) == 0x000028, "Member 'FSnfControlCheckActStateItem::UniqueId' has a wrong offset!");
static_assert(offsetof(FSnfControlCheckActStateItem, TargetActor) == 0x000030, "Member 'FSnfControlCheckActStateItem::TargetActor' has a wrong offset!");
static_assert(offsetof(FSnfControlCheckActStateItem, TargetActorUniqueId) == 0x000038, "Member 'FSnfControlCheckActStateItem::TargetActorUniqueId' has a wrong offset!");
static_assert(offsetof(FSnfControlCheckActStateItem, TargetActorSoft) == 0x000040, "Member 'FSnfControlCheckActStateItem::TargetActorSoft' has a wrong offset!");
static_assert(offsetof(FSnfControlCheckActStateItem, TargetActorSoftUniqueId) == 0x000068, "Member 'FSnfControlCheckActStateItem::TargetActorSoftUniqueId' has a wrong offset!");
static_assert(offsetof(FSnfControlCheckActStateItem, CheckState) == 0x000070, "Member 'FSnfControlCheckActStateItem::CheckState' has a wrong offset!");

// ScriptStruct Snowfall.SnfControlCheckItem
// 0x0038 (0x0038 - 0x0000)
struct FSnfControlCheckItem final
{
public:
	TArray<struct FSnfControlCheckActStateItem>   ActivityState;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfControlCheckActStepItem>    ActivityStep;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCheckGameSequence;                                // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GameSequence;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckGameSequenceMin;                             // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GameSequenceMin;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckGameSequenceMax;                             // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GameSequenceMax;                                   // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfControlCheckItem) == 0x000008, "Wrong alignment on FSnfControlCheckItem");
static_assert(sizeof(FSnfControlCheckItem) == 0x000038, "Wrong size on FSnfControlCheckItem");
static_assert(offsetof(FSnfControlCheckItem, ActivityState) == 0x000000, "Member 'FSnfControlCheckItem::ActivityState' has a wrong offset!");
static_assert(offsetof(FSnfControlCheckItem, ActivityStep) == 0x000010, "Member 'FSnfControlCheckItem::ActivityStep' has a wrong offset!");
static_assert(offsetof(FSnfControlCheckItem, bCheckGameSequence) == 0x000020, "Member 'FSnfControlCheckItem::bCheckGameSequence' has a wrong offset!");
static_assert(offsetof(FSnfControlCheckItem, GameSequence) == 0x000024, "Member 'FSnfControlCheckItem::GameSequence' has a wrong offset!");
static_assert(offsetof(FSnfControlCheckItem, bCheckGameSequenceMin) == 0x000028, "Member 'FSnfControlCheckItem::bCheckGameSequenceMin' has a wrong offset!");
static_assert(offsetof(FSnfControlCheckItem, GameSequenceMin) == 0x00002C, "Member 'FSnfControlCheckItem::GameSequenceMin' has a wrong offset!");
static_assert(offsetof(FSnfControlCheckItem, bCheckGameSequenceMax) == 0x000030, "Member 'FSnfControlCheckItem::bCheckGameSequenceMax' has a wrong offset!");
static_assert(offsetof(FSnfControlCheckItem, GameSequenceMax) == 0x000034, "Member 'FSnfControlCheckItem::GameSequenceMax' has a wrong offset!");

// ScriptStruct Snowfall.SnfControlItem
// 0x0028 (0x0028 - 0x0000)
struct FSnfControlItem final
{
public:
	class FName                                   InvokeType;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSnfControlCheckItem>           CheckList;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfControlCheckItem>           NotList;                                           // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfControlItem) == 0x000008, "Wrong alignment on FSnfControlItem");
static_assert(sizeof(FSnfControlItem) == 0x000028, "Wrong size on FSnfControlItem");
static_assert(offsetof(FSnfControlItem, InvokeType) == 0x000000, "Member 'FSnfControlItem::InvokeType' has a wrong offset!");
static_assert(offsetof(FSnfControlItem, CheckList) == 0x000008, "Member 'FSnfControlItem::CheckList' has a wrong offset!");
static_assert(offsetof(FSnfControlItem, NotList) == 0x000018, "Member 'FSnfControlItem::NotList' has a wrong offset!");

// ScriptStruct Snowfall.SnfSaisenActorSpawnItemSetting
// 0x0018 (0x0018 - 0x0000)
struct FSnfSaisenActorSpawnItemSetting final
{
public:
	TSubclassOf<class ASnfItemDropBase>           SpawnItemClass;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTngInventoryItem>              SetItemList;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfSaisenActorSpawnItemSetting) == 0x000008, "Wrong alignment on FSnfSaisenActorSpawnItemSetting");
static_assert(sizeof(FSnfSaisenActorSpawnItemSetting) == 0x000018, "Wrong size on FSnfSaisenActorSpawnItemSetting");
static_assert(offsetof(FSnfSaisenActorSpawnItemSetting, SpawnItemClass) == 0x000000, "Member 'FSnfSaisenActorSpawnItemSetting::SpawnItemClass' has a wrong offset!");
static_assert(offsetof(FSnfSaisenActorSpawnItemSetting, SetItemList) == 0x000008, "Member 'FSnfSaisenActorSpawnItemSetting::SetItemList' has a wrong offset!");

// ScriptStruct Snowfall.SnfControlPartsData
// 0x0030 (0x0030 - 0x0000)
struct FSnfControlPartsData final
{
public:
	TArray<EControlButton>                        ControlButton;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   ControlText;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsHold;                                            // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfControlPartsData) == 0x000008, "Wrong alignment on FSnfControlPartsData");
static_assert(sizeof(FSnfControlPartsData) == 0x000030, "Wrong size on FSnfControlPartsData");
static_assert(offsetof(FSnfControlPartsData, ControlButton) == 0x000000, "Member 'FSnfControlPartsData::ControlButton' has a wrong offset!");
static_assert(offsetof(FSnfControlPartsData, ControlText) == 0x000010, "Member 'FSnfControlPartsData::ControlText' has a wrong offset!");
static_assert(offsetof(FSnfControlPartsData, IsHold) == 0x000028, "Member 'FSnfControlPartsData::IsHold' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponHitLog
// 0x0010 (0x0010 - 0x0000)
struct FSnfWeaponHitLog final
{
public:
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TIME;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponHitLog) == 0x000004, "Wrong alignment on FSnfWeaponHitLog");
static_assert(sizeof(FSnfWeaponHitLog) == 0x000010, "Wrong size on FSnfWeaponHitLog");
static_assert(offsetof(FSnfWeaponHitLog, Actor) == 0x000000, "Member 'FSnfWeaponHitLog::Actor' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHitLog, TIME) == 0x000008, "Member 'FSnfWeaponHitLog::TIME' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHitLog, Count) == 0x00000C, "Member 'FSnfWeaponHitLog::Count' has a wrong offset!");

// ScriptStruct Snowfall.SnfWidgetInputValueKeyInfo
// 0x0018 (0x0018 - 0x0000)
struct FSnfWidgetInputValueKeyInfo final
{
public:
	TSubclassOf<class USnfWidgetInputKeySettingObject> Class;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfWidgetInputValueKeyInfo) == 0x000008, "Wrong alignment on FSnfWidgetInputValueKeyInfo");
static_assert(sizeof(FSnfWidgetInputValueKeyInfo) == 0x000018, "Wrong size on FSnfWidgetInputValueKeyInfo");
static_assert(offsetof(FSnfWidgetInputValueKeyInfo, Class) == 0x000000, "Member 'FSnfWidgetInputValueKeyInfo::Class' has a wrong offset!");

// ScriptStruct Snowfall.SnfCrowdUnit
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FSnfCrowdUnit final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCrowdUnit) == 0x000008, "Wrong alignment on FSnfCrowdUnit");
static_assert(sizeof(FSnfCrowdUnit) == 0x000018, "Wrong size on FSnfCrowdUnit");

// ScriptStruct Snowfall.SnfCrwdSimulationRes
// 0x002C (0x002C - 0x0000)
struct alignas(0x04) FSnfCrwdSimulationRes final
{
public:
	uint8                                         Pad_0[0x2C];                                       // 0x0000(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCrwdSimulationRes) == 0x000004, "Wrong alignment on FSnfCrwdSimulationRes");
static_assert(sizeof(FSnfCrwdSimulationRes) == 0x00002C, "Wrong size on FSnfCrwdSimulationRes");

// ScriptStruct Snowfall.SnfCrwdAgentDirty
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FSnfCrwdAgentDirty final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCrwdAgentDirty) == 0x000004, "Wrong alignment on FSnfCrwdAgentDirty");
static_assert(sizeof(FSnfCrwdAgentDirty) == 0x000004, "Wrong size on FSnfCrwdAgentDirty");

// ScriptStruct Snowfall.SnfFlockingParam
// 0x0020 (0x0020 - 0x0000)
struct FSnfFlockingParam final
{
public:
	float                                         NeighborRadius;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlignmentWeight;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeparationWeight;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CohesionWeight;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Steering;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Catchup;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalLerp;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is3D;                                              // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplySpeed;                                       // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfFlockingParam) == 0x000004, "Wrong alignment on FSnfFlockingParam");
static_assert(sizeof(FSnfFlockingParam) == 0x000020, "Wrong size on FSnfFlockingParam");
static_assert(offsetof(FSnfFlockingParam, NeighborRadius) == 0x000000, "Member 'FSnfFlockingParam::NeighborRadius' has a wrong offset!");
static_assert(offsetof(FSnfFlockingParam, AlignmentWeight) == 0x000004, "Member 'FSnfFlockingParam::AlignmentWeight' has a wrong offset!");
static_assert(offsetof(FSnfFlockingParam, SeparationWeight) == 0x000008, "Member 'FSnfFlockingParam::SeparationWeight' has a wrong offset!");
static_assert(offsetof(FSnfFlockingParam, CohesionWeight) == 0x00000C, "Member 'FSnfFlockingParam::CohesionWeight' has a wrong offset!");
static_assert(offsetof(FSnfFlockingParam, Steering) == 0x000010, "Member 'FSnfFlockingParam::Steering' has a wrong offset!");
static_assert(offsetof(FSnfFlockingParam, Catchup) == 0x000014, "Member 'FSnfFlockingParam::Catchup' has a wrong offset!");
static_assert(offsetof(FSnfFlockingParam, FinalLerp) == 0x000018, "Member 'FSnfFlockingParam::FinalLerp' has a wrong offset!");
static_assert(offsetof(FSnfFlockingParam, Is3D) == 0x00001C, "Member 'FSnfFlockingParam::Is3D' has a wrong offset!");
static_assert(offsetof(FSnfFlockingParam, bApplySpeed) == 0x00001D, "Member 'FSnfFlockingParam::bApplySpeed' has a wrong offset!");

// ScriptStruct Snowfall.SnfQualityPresetFSR2
// 0x0008 (0x0008 - 0x0000)
struct FSnfQualityPresetFSR2 final
{
public:
	uint8                                         Index;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0001(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QualityMode;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfQualityPresetFSR2) == 0x000004, "Wrong alignment on FSnfQualityPresetFSR2");
static_assert(sizeof(FSnfQualityPresetFSR2) == 0x000008, "Wrong size on FSnfQualityPresetFSR2");
static_assert(offsetof(FSnfQualityPresetFSR2, Index) == 0x000000, "Member 'FSnfQualityPresetFSR2::Index' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetFSR2, bEnabled) == 0x000001, "Member 'FSnfQualityPresetFSR2::bEnabled' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetFSR2, QualityMode) == 0x000004, "Member 'FSnfQualityPresetFSR2::QualityMode' has a wrong offset!");

// ScriptStruct Snowfall.SnfCrowdMasterData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FSnfCrowdMasterData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCrowdMasterData) == 0x000004, "Wrong alignment on FSnfCrowdMasterData");
static_assert(sizeof(FSnfCrowdMasterData) == 0x000008, "Wrong size on FSnfCrowdMasterData");

// ScriptStruct Snowfall.SnfShrineActorDivisionActionInfo
// 0x0018 (0x0018 - 0x0000)
struct FSnfShrineActorDivisionActionInfo
{
public:
	TSubclassOf<class AActor>                     TargetActorClass;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TypeNameList;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfShrineActorDivisionActionInfo) == 0x000008, "Wrong alignment on FSnfShrineActorDivisionActionInfo");
static_assert(sizeof(FSnfShrineActorDivisionActionInfo) == 0x000018, "Wrong size on FSnfShrineActorDivisionActionInfo");
static_assert(offsetof(FSnfShrineActorDivisionActionInfo, TargetActorClass) == 0x000000, "Member 'FSnfShrineActorDivisionActionInfo::TargetActorClass' has a wrong offset!");
static_assert(offsetof(FSnfShrineActorDivisionActionInfo, TypeNameList) == 0x000008, "Member 'FSnfShrineActorDivisionActionInfo::TypeNameList' has a wrong offset!");

// ScriptStruct Snowfall.SnfCrowdStreamParamByCircle
// 0x0020 (0x0020 - 0x0000)
struct FSnfCrowdStreamParamByCircle final
{
public:
	int32                                         ClassIdx;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocationIdx;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDegree;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDegree;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetDegree;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tag;                                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseClone;                                          // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCrowdStreamParamByCircle) == 0x000004, "Wrong alignment on FSnfCrowdStreamParamByCircle");
static_assert(sizeof(FSnfCrowdStreamParamByCircle) == 0x000020, "Wrong size on FSnfCrowdStreamParamByCircle");
static_assert(offsetof(FSnfCrowdStreamParamByCircle, ClassIdx) == 0x000000, "Member 'FSnfCrowdStreamParamByCircle::ClassIdx' has a wrong offset!");
static_assert(offsetof(FSnfCrowdStreamParamByCircle, Count) == 0x000004, "Member 'FSnfCrowdStreamParamByCircle::Count' has a wrong offset!");
static_assert(offsetof(FSnfCrowdStreamParamByCircle, LocationIdx) == 0x000008, "Member 'FSnfCrowdStreamParamByCircle::LocationIdx' has a wrong offset!");
static_assert(offsetof(FSnfCrowdStreamParamByCircle, MinDegree) == 0x00000C, "Member 'FSnfCrowdStreamParamByCircle::MinDegree' has a wrong offset!");
static_assert(offsetof(FSnfCrowdStreamParamByCircle, MaxDegree) == 0x000010, "Member 'FSnfCrowdStreamParamByCircle::MaxDegree' has a wrong offset!");
static_assert(offsetof(FSnfCrowdStreamParamByCircle, OffsetDegree) == 0x000014, "Member 'FSnfCrowdStreamParamByCircle::OffsetDegree' has a wrong offset!");
static_assert(offsetof(FSnfCrowdStreamParamByCircle, Tag) == 0x000018, "Member 'FSnfCrowdStreamParamByCircle::Tag' has a wrong offset!");
static_assert(offsetof(FSnfCrowdStreamParamByCircle, UseClone) == 0x00001C, "Member 'FSnfCrowdStreamParamByCircle::UseClone' has a wrong offset!");

// ScriptStruct Snowfall.SnfCrowdStreamLane
// 0x0004 (0x0004 - 0x0000)
struct FSnfCrowdStreamLane final
{
public:
	float                                         Divergence;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCrowdStreamLane) == 0x000004, "Wrong alignment on FSnfCrowdStreamLane");
static_assert(sizeof(FSnfCrowdStreamLane) == 0x000004, "Wrong size on FSnfCrowdStreamLane");
static_assert(offsetof(FSnfCrowdStreamLane, Divergence) == 0x000000, "Member 'FSnfCrowdStreamLane::Divergence' has a wrong offset!");

// ScriptStruct Snowfall.SnfCrowdAgentData
// 0x0110 (0x0110 - 0x0000)
struct alignas(0x10) FSnfCrowdAgentData final
{
public:
	uint8                                         Pad_0[0x110];                                      // 0x0000(0x0110)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCrowdAgentData) == 0x000010, "Wrong alignment on FSnfCrowdAgentData");
static_assert(sizeof(FSnfCrowdAgentData) == 0x000110, "Wrong size on FSnfCrowdAgentData");

// ScriptStruct Snowfall.SnfWeaponLauncherDiffusionParam
// 0x0018 (0x0018 - 0x0000)
struct FSnfWeaponLauncherDiffusionParam final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandom;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AngleMin;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AngleMax;                                          // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRotator>                       FixAngles;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponLauncherDiffusionParam) == 0x000008, "Wrong alignment on FSnfWeaponLauncherDiffusionParam");
static_assert(sizeof(FSnfWeaponLauncherDiffusionParam) == 0x000018, "Wrong size on FSnfWeaponLauncherDiffusionParam");
static_assert(offsetof(FSnfWeaponLauncherDiffusionParam, bEnable) == 0x000000, "Member 'FSnfWeaponLauncherDiffusionParam::bEnable' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherDiffusionParam, bRandom) == 0x000001, "Member 'FSnfWeaponLauncherDiffusionParam::bRandom' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherDiffusionParam, AngleMin) == 0x000002, "Member 'FSnfWeaponLauncherDiffusionParam::AngleMin' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherDiffusionParam, AngleMax) == 0x000003, "Member 'FSnfWeaponLauncherDiffusionParam::AngleMax' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherDiffusionParam, FixAngles) == 0x000008, "Member 'FSnfWeaponLauncherDiffusionParam::FixAngles' has a wrong offset!");

// ScriptStruct Snowfall.SnfDaidaraFarParameter
// 0x0030 (0x0030 - 0x0000)
struct FSnfDaidaraFarParameter final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  JobRequestRole;                                    // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         ModelScale;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfDaidaraFarParameter) == 0x000008, "Wrong alignment on FSnfDaidaraFarParameter");
static_assert(sizeof(FSnfDaidaraFarParameter) == 0x000030, "Wrong size on FSnfDaidaraFarParameter");
static_assert(offsetof(FSnfDaidaraFarParameter, bEnable) == 0x000000, "Member 'FSnfDaidaraFarParameter::bEnable' has a wrong offset!");
static_assert(offsetof(FSnfDaidaraFarParameter, JobRequestRole) == 0x000008, "Member 'FSnfDaidaraFarParameter::JobRequestRole' has a wrong offset!");
static_assert(offsetof(FSnfDaidaraFarParameter, ModelScale) == 0x000028, "Member 'FSnfDaidaraFarParameter::ModelScale' has a wrong offset!");

// ScriptStruct Snowfall.SnfDaidaraNearParameter
// 0x0070 (0x0070 - 0x0000)
struct FSnfDaidaraNearParameter final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  JobRequestRole;                                    // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StopPoint;                                         // 0x0030(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         StopRadius;                                        // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDelay;                                        // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfDaidaraNearParameter) == 0x000010, "Wrong alignment on FSnfDaidaraNearParameter");
static_assert(sizeof(FSnfDaidaraNearParameter) == 0x000070, "Wrong size on FSnfDaidaraNearParameter");
static_assert(offsetof(FSnfDaidaraNearParameter, bEnable) == 0x000000, "Member 'FSnfDaidaraNearParameter::bEnable' has a wrong offset!");
static_assert(offsetof(FSnfDaidaraNearParameter, JobRequestRole) == 0x000008, "Member 'FSnfDaidaraNearParameter::JobRequestRole' has a wrong offset!");
static_assert(offsetof(FSnfDaidaraNearParameter, StopPoint) == 0x000030, "Member 'FSnfDaidaraNearParameter::StopPoint' has a wrong offset!");
static_assert(offsetof(FSnfDaidaraNearParameter, StopRadius) == 0x000060, "Member 'FSnfDaidaraNearParameter::StopRadius' has a wrong offset!");
static_assert(offsetof(FSnfDaidaraNearParameter, StartDelay) == 0x000064, "Member 'FSnfDaidaraNearParameter::StartDelay' has a wrong offset!");

// ScriptStruct Snowfall.SnfDaidaraEnemyJobInfo
// 0x0008 (0x0008 - 0x0000)
struct FSnfDaidaraEnemyJobInfo final
{
public:
	class ASnfJobActor*                           JobActor;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDaidaraEnemyJobInfo) == 0x000008, "Wrong alignment on FSnfDaidaraEnemyJobInfo");
static_assert(sizeof(FSnfDaidaraEnemyJobInfo) == 0x000008, "Wrong size on FSnfDaidaraEnemyJobInfo");
static_assert(offsetof(FSnfDaidaraEnemyJobInfo, JobActor) == 0x000000, "Member 'FSnfDaidaraEnemyJobInfo::JobActor' has a wrong offset!");

// ScriptStruct Snowfall.SnfDaidaraDoorFXSetting
// 0x0010 (0x0010 - 0x0000)
struct FSnfDaidaraDoorFXSetting final
{
public:
	class FName                                   PlayListName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayListTime;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfDaidaraDoorFXSetting) == 0x000004, "Wrong alignment on FSnfDaidaraDoorFXSetting");
static_assert(sizeof(FSnfDaidaraDoorFXSetting) == 0x000010, "Wrong size on FSnfDaidaraDoorFXSetting");
static_assert(offsetof(FSnfDaidaraDoorFXSetting, PlayListName) == 0x000000, "Member 'FSnfDaidaraDoorFXSetting::PlayListName' has a wrong offset!");
static_assert(offsetof(FSnfDaidaraDoorFXSetting, PlayListTime) == 0x000008, "Member 'FSnfDaidaraDoorFXSetting::PlayListTime' has a wrong offset!");

// ScriptStruct Snowfall.SnfPrisonSpawnEnemyInfo
// 0x0002 (0x0002 - 0x0000)
struct FSnfPrisonSpawnEnemyInfo final
{
public:
	ESnfPrisonEnemyType                           EnemyType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfMarebitoAIType                            AIType;                                            // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPrisonSpawnEnemyInfo) == 0x000001, "Wrong alignment on FSnfPrisonSpawnEnemyInfo");
static_assert(sizeof(FSnfPrisonSpawnEnemyInfo) == 0x000002, "Wrong size on FSnfPrisonSpawnEnemyInfo");
static_assert(offsetof(FSnfPrisonSpawnEnemyInfo, EnemyType) == 0x000000, "Member 'FSnfPrisonSpawnEnemyInfo::EnemyType' has a wrong offset!");
static_assert(offsetof(FSnfPrisonSpawnEnemyInfo, AIType) == 0x000001, "Member 'FSnfPrisonSpawnEnemyInfo::AIType' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkShopRandomData
// 0x0008 (0x0008 - 0x0000)
struct FSnfTalkShopRandomData final
{
public:
	ESnfTalkShopBuffType                          Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Ratio;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalkShopRandomData) == 0x000004, "Wrong alignment on FSnfTalkShopRandomData");
static_assert(sizeof(FSnfTalkShopRandomData) == 0x000008, "Wrong size on FSnfTalkShopRandomData");
static_assert(offsetof(FSnfTalkShopRandomData, Type) == 0x000000, "Member 'FSnfTalkShopRandomData::Type' has a wrong offset!");
static_assert(offsetof(FSnfTalkShopRandomData, Ratio) == 0x000004, "Member 'FSnfTalkShopRandomData::Ratio' has a wrong offset!");

// ScriptStruct Snowfall.SnfDestructiblePropActorFXPropSetting
// 0x0028 (0x0028 - 0x0000)
struct FSnfDestructiblePropActorFXPropSetting final
{
public:
	TSubclassOf<class ASnfFXPropsActor>           FXPropClass;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            OuterMesh;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceivesDecals;                                   // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0014(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfDestructiblePropActorFXPropSetting) == 0x000008, "Wrong alignment on FSnfDestructiblePropActorFXPropSetting");
static_assert(sizeof(FSnfDestructiblePropActorFXPropSetting) == 0x000028, "Wrong size on FSnfDestructiblePropActorFXPropSetting");
static_assert(offsetof(FSnfDestructiblePropActorFXPropSetting, FXPropClass) == 0x000000, "Member 'FSnfDestructiblePropActorFXPropSetting::FXPropClass' has a wrong offset!");
static_assert(offsetof(FSnfDestructiblePropActorFXPropSetting, OuterMesh) == 0x000008, "Member 'FSnfDestructiblePropActorFXPropSetting::OuterMesh' has a wrong offset!");
static_assert(offsetof(FSnfDestructiblePropActorFXPropSetting, bReceivesDecals) == 0x000010, "Member 'FSnfDestructiblePropActorFXPropSetting::bReceivesDecals' has a wrong offset!");
static_assert(offsetof(FSnfDestructiblePropActorFXPropSetting, Location) == 0x000014, "Member 'FSnfDestructiblePropActorFXPropSetting::Location' has a wrong offset!");
static_assert(offsetof(FSnfDestructiblePropActorFXPropSetting, Yaw) == 0x000020, "Member 'FSnfDestructiblePropActorFXPropSetting::Yaw' has a wrong offset!");

// ScriptStruct Snowfall.SnfDevPlayLogLevelEntry
// 0x0018 (0x0018 - 0x0000)
struct FSnfDevPlayLogLevelEntry final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowProfileLogs;                                 // 0x0010(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidLogLocationParam;                            // 0x0011(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfDevPlayLogLevelEntry) == 0x000008, "Wrong alignment on FSnfDevPlayLogLevelEntry");
static_assert(sizeof(FSnfDevPlayLogLevelEntry) == 0x000018, "Wrong size on FSnfDevPlayLogLevelEntry");
static_assert(offsetof(FSnfDevPlayLogLevelEntry, LevelName) == 0x000000, "Member 'FSnfDevPlayLogLevelEntry::LevelName' has a wrong offset!");
static_assert(offsetof(FSnfDevPlayLogLevelEntry, bAllowProfileLogs) == 0x000010, "Member 'FSnfDevPlayLogLevelEntry::bAllowProfileLogs' has a wrong offset!");
static_assert(offsetof(FSnfDevPlayLogLevelEntry, bValidLogLocationParam) == 0x000011, "Member 'FSnfDevPlayLogLevelEntry::bValidLogLocationParam' has a wrong offset!");

// ScriptStruct Snowfall.PendingParam
// 0x0088 (0x0088 - 0x0000)
struct FPendingParam final
{
public:
	TWeakObjectPtr<class ULocalPlayer>            OwningPlayer;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   WidgetClass;                                       // 0x0008(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x58];                                      // 0x0030(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPendingParam) == 0x000008, "Wrong alignment on FPendingParam");
static_assert(sizeof(FPendingParam) == 0x000088, "Wrong size on FPendingParam");
static_assert(offsetof(FPendingParam, OwningPlayer) == 0x000000, "Member 'FPendingParam::OwningPlayer' has a wrong offset!");
static_assert(offsetof(FPendingParam, WidgetClass) == 0x000008, "Member 'FPendingParam::WidgetClass' has a wrong offset!");

// ScriptStruct Snowfall.SnfDialogMessageTableRow
// 0x0018 (0x0020 - 0x0008)
struct FSnfDialogMessageTableRow final : public FTableRowBase
{
public:
	class FText                                   Message;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDialogMessageTableRow) == 0x000008, "Wrong alignment on FSnfDialogMessageTableRow");
static_assert(sizeof(FSnfDialogMessageTableRow) == 0x000020, "Wrong size on FSnfDialogMessageTableRow");
static_assert(offsetof(FSnfDialogMessageTableRow, Message) == 0x000008, "Member 'FSnfDialogMessageTableRow::Message' has a wrong offset!");

// ScriptStruct Snowfall.SnfPeopleGeneralMotion
// 0x0010 (0x0010 - 0x0000)
struct FSnfPeopleGeneralMotion final
{
public:
	class USnfGeneralMotionAsset*                 GeneralMotionAsset;                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNotifyGeneralMotionChanged;                      // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfPeopleGeneralMotion) == 0x000008, "Wrong alignment on FSnfPeopleGeneralMotion");
static_assert(sizeof(FSnfPeopleGeneralMotion) == 0x000010, "Wrong size on FSnfPeopleGeneralMotion");
static_assert(offsetof(FSnfPeopleGeneralMotion, GeneralMotionAsset) == 0x000000, "Member 'FSnfPeopleGeneralMotion::GeneralMotionAsset' has a wrong offset!");
static_assert(offsetof(FSnfPeopleGeneralMotion, IsNotifyGeneralMotionChanged) == 0x000008, "Member 'FSnfPeopleGeneralMotion::IsNotifyGeneralMotionChanged' has a wrong offset!");

// ScriptStruct Snowfall.SnfDialogButtonTextHolder
// 0x0090 (0x0090 - 0x0000)
struct FSnfDialogButtonTextHolder final
{
public:
	class FText                                   Accept;                                            // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Cancel;                                            // 0x0018(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Yes;                                               // 0x0030(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   No;                                                // 0x0048(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Continue;                                          // 0x0060(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Return;                                            // 0x0078(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDialogButtonTextHolder) == 0x000008, "Wrong alignment on FSnfDialogButtonTextHolder");
static_assert(sizeof(FSnfDialogButtonTextHolder) == 0x000090, "Wrong size on FSnfDialogButtonTextHolder");
static_assert(offsetof(FSnfDialogButtonTextHolder, Accept) == 0x000000, "Member 'FSnfDialogButtonTextHolder::Accept' has a wrong offset!");
static_assert(offsetof(FSnfDialogButtonTextHolder, Cancel) == 0x000018, "Member 'FSnfDialogButtonTextHolder::Cancel' has a wrong offset!");
static_assert(offsetof(FSnfDialogButtonTextHolder, Yes) == 0x000030, "Member 'FSnfDialogButtonTextHolder::Yes' has a wrong offset!");
static_assert(offsetof(FSnfDialogButtonTextHolder, No) == 0x000048, "Member 'FSnfDialogButtonTextHolder::No' has a wrong offset!");
static_assert(offsetof(FSnfDialogButtonTextHolder, Continue) == 0x000060, "Member 'FSnfDialogButtonTextHolder::Continue' has a wrong offset!");
static_assert(offsetof(FSnfDialogButtonTextHolder, Return) == 0x000078, "Member 'FSnfDialogButtonTextHolder::Return' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponEm1900LanceData
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x10) FSnfWeaponEm1900LanceData final
{
public:
	class UChildActorComponent*                   FxPropChild;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          AttackShape;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x30];                                      // 0x0010(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfWeaponEm1900LanceData) == 0x000010, "Wrong alignment on FSnfWeaponEm1900LanceData");
static_assert(sizeof(FSnfWeaponEm1900LanceData) == 0x000040, "Wrong size on FSnfWeaponEm1900LanceData");
static_assert(offsetof(FSnfWeaponEm1900LanceData, FxPropChild) == 0x000000, "Member 'FSnfWeaponEm1900LanceData::FxPropChild' has a wrong offset!");
static_assert(offsetof(FSnfWeaponEm1900LanceData, AttackShape) == 0x000008, "Member 'FSnfWeaponEm1900LanceData::AttackShape' has a wrong offset!");

// ScriptStruct Snowfall.SnfDialogWidgetClasses
// 0x0020 (0x0020 - 0x0000)
struct FSnfDialogWidgetClasses final
{
public:
	TSubclassOf<class USnfDialogWidget>           Generic;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USnfDialogWidget>           Warning;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USnfDialogWidget>           BNetConnectionError;                               // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USnfDialogWidget>           BNetError;                                         // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDialogWidgetClasses) == 0x000008, "Wrong alignment on FSnfDialogWidgetClasses");
static_assert(sizeof(FSnfDialogWidgetClasses) == 0x000020, "Wrong size on FSnfDialogWidgetClasses");
static_assert(offsetof(FSnfDialogWidgetClasses, Generic) == 0x000000, "Member 'FSnfDialogWidgetClasses::Generic' has a wrong offset!");
static_assert(offsetof(FSnfDialogWidgetClasses, Warning) == 0x000008, "Member 'FSnfDialogWidgetClasses::Warning' has a wrong offset!");
static_assert(offsetof(FSnfDialogWidgetClasses, BNetConnectionError) == 0x000010, "Member 'FSnfDialogWidgetClasses::BNetConnectionError' has a wrong offset!");
static_assert(offsetof(FSnfDialogWidgetClasses, BNetError) == 0x000018, "Member 'FSnfDialogWidgetClasses::BNetError' has a wrong offset!");

// ScriptStruct Snowfall.SnfDialogOnButtonClickForBPArray
// 0x0010 (0x0010 - 0x0000)
struct FSnfDialogOnButtonClickForBPArray final
{
public:
	TDelegate<void()>                             Delegate;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDialogOnButtonClickForBPArray) == 0x000004, "Wrong alignment on FSnfDialogOnButtonClickForBPArray");
static_assert(sizeof(FSnfDialogOnButtonClickForBPArray) == 0x000010, "Wrong size on FSnfDialogOnButtonClickForBPArray");
static_assert(offsetof(FSnfDialogOnButtonClickForBPArray, Delegate) == 0x000000, "Member 'FSnfDialogOnButtonClickForBPArray::Delegate' has a wrong offset!");

// ScriptStruct Snowfall.SnfDivisionBaseCapsuleCollisionSetting
// 0x0000 (0x0060 - 0x0060)
struct FSnfDivisionBaseCapsuleCollisionSetting final : public FSnfDivisionBaseCollisionBaseSetting
{
public:
	float                                         SizeHalfHeight;                                    // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizeRadius;                                        // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDivisionBaseCapsuleCollisionSetting) == 0x000010, "Wrong alignment on FSnfDivisionBaseCapsuleCollisionSetting");
static_assert(sizeof(FSnfDivisionBaseCapsuleCollisionSetting) == 0x000060, "Wrong size on FSnfDivisionBaseCapsuleCollisionSetting");
static_assert(offsetof(FSnfDivisionBaseCapsuleCollisionSetting, SizeHalfHeight) == 0x000058, "Member 'FSnfDivisionBaseCapsuleCollisionSetting::SizeHalfHeight' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseCapsuleCollisionSetting, SizeRadius) == 0x00005C, "Member 'FSnfDivisionBaseCapsuleCollisionSetting::SizeRadius' has a wrong offset!");

// ScriptStruct Snowfall.SnfDivisionBaseBoxCollisionSetting
// 0x0010 (0x0070 - 0x0060)
struct FSnfDivisionBaseBoxCollisionSetting final : public FSnfDivisionBaseCollisionBaseSetting
{
public:
	struct FVector                                BoxExtent;                                         // 0x0058(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfDivisionBaseBoxCollisionSetting) == 0x000010, "Wrong alignment on FSnfDivisionBaseBoxCollisionSetting");
static_assert(sizeof(FSnfDivisionBaseBoxCollisionSetting) == 0x000070, "Wrong size on FSnfDivisionBaseBoxCollisionSetting");
static_assert(offsetof(FSnfDivisionBaseBoxCollisionSetting, BoxExtent) == 0x000058, "Member 'FSnfDivisionBaseBoxCollisionSetting::BoxExtent' has a wrong offset!");

// ScriptStruct Snowfall.SnfDivisionBaseSyncActivityActionRequest
// 0x0010 (0x0010 - 0x0000)
struct FSnfDivisionBaseSyncActivityActionRequest final
{
public:
	class FName                                   TypeAction;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDivisionBaseSyncActivityActionRequest) == 0x000008, "Wrong alignment on FSnfDivisionBaseSyncActivityActionRequest");
static_assert(sizeof(FSnfDivisionBaseSyncActivityActionRequest) == 0x000010, "Wrong size on FSnfDivisionBaseSyncActivityActionRequest");
static_assert(offsetof(FSnfDivisionBaseSyncActivityActionRequest, TypeAction) == 0x000000, "Member 'FSnfDivisionBaseSyncActivityActionRequest::TypeAction' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseSyncActivityActionRequest, Object) == 0x000008, "Member 'FSnfDivisionBaseSyncActivityActionRequest::Object' has a wrong offset!");

// ScriptStruct Snowfall.SnfDivisionBaseSyncActivityAction
// 0x0010 (0x0010 - 0x0000)
struct FSnfDivisionBaseSyncActivityAction final
{
public:
	class UClass*                                 TargetClass;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TypeAction;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDivisionBaseSyncActivityAction) == 0x000008, "Wrong alignment on FSnfDivisionBaseSyncActivityAction");
static_assert(sizeof(FSnfDivisionBaseSyncActivityAction) == 0x000010, "Wrong size on FSnfDivisionBaseSyncActivityAction");
static_assert(offsetof(FSnfDivisionBaseSyncActivityAction, TargetClass) == 0x000000, "Member 'FSnfDivisionBaseSyncActivityAction::TargetClass' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseSyncActivityAction, TypeAction) == 0x000008, "Member 'FSnfDivisionBaseSyncActivityAction::TypeAction' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponDamageSetting
// 0x0010 (0x0010 - 0x0000)
struct FSnfWeaponDamageSetting final
{
public:
	int32                                         DamageAmount;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponDamageSetting) == 0x000008, "Wrong alignment on FSnfWeaponDamageSetting");
static_assert(sizeof(FSnfWeaponDamageSetting) == 0x000010, "Wrong size on FSnfWeaponDamageSetting");
static_assert(offsetof(FSnfWeaponDamageSetting, DamageAmount) == 0x000000, "Member 'FSnfWeaponDamageSetting::DamageAmount' has a wrong offset!");
static_assert(offsetof(FSnfWeaponDamageSetting, DamageType) == 0x000008, "Member 'FSnfWeaponDamageSetting::DamageType' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponReflectionSetting
// 0x0058 (0x0058 - 0x0000)
struct FSnfWeaponReflectionSetting final
{
public:
	TSoftClassPtr<class UClass>                   TargetClass;                                       // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfWeaponReflectionType                      Type;                                              // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NotReflectBoneNames;                               // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           NotReflectTag;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bCheckFire1stLv;                                   // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyDamage;                                      // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfWeaponReflectionSetting) == 0x000008, "Wrong alignment on FSnfWeaponReflectionSetting");
static_assert(sizeof(FSnfWeaponReflectionSetting) == 0x000058, "Wrong size on FSnfWeaponReflectionSetting");
static_assert(offsetof(FSnfWeaponReflectionSetting, TargetClass) == 0x000000, "Member 'FSnfWeaponReflectionSetting::TargetClass' has a wrong offset!");
static_assert(offsetof(FSnfWeaponReflectionSetting, Type) == 0x000028, "Member 'FSnfWeaponReflectionSetting::Type' has a wrong offset!");
static_assert(offsetof(FSnfWeaponReflectionSetting, NotReflectBoneNames) == 0x000030, "Member 'FSnfWeaponReflectionSetting::NotReflectBoneNames' has a wrong offset!");
static_assert(offsetof(FSnfWeaponReflectionSetting, NotReflectTag) == 0x000040, "Member 'FSnfWeaponReflectionSetting::NotReflectTag' has a wrong offset!");
static_assert(offsetof(FSnfWeaponReflectionSetting, bCheckFire1stLv) == 0x000050, "Member 'FSnfWeaponReflectionSetting::bCheckFire1stLv' has a wrong offset!");
static_assert(offsetof(FSnfWeaponReflectionSetting, bApplyDamage) == 0x000051, "Member 'FSnfWeaponReflectionSetting::bApplyDamage' has a wrong offset!");

// ScriptStruct Snowfall.HitActionSetting
// 0x0050 (0x0050 - 0x0000)
struct FHitActionSetting final
{
public:
	bool                                          bSpecifyTarget;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   TargetClass;                                       // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHitAction                                    Action;                                            // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AttachOffset;                                      // 0x0034(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateNormal;                                     // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttachTime;                                        // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDropOnParentDead;                                 // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHitActionSetting) == 0x000008, "Wrong alignment on FHitActionSetting");
static_assert(sizeof(FHitActionSetting) == 0x000050, "Wrong size on FHitActionSetting");
static_assert(offsetof(FHitActionSetting, bSpecifyTarget) == 0x000000, "Member 'FHitActionSetting::bSpecifyTarget' has a wrong offset!");
static_assert(offsetof(FHitActionSetting, TargetClass) == 0x000008, "Member 'FHitActionSetting::TargetClass' has a wrong offset!");
static_assert(offsetof(FHitActionSetting, Action) == 0x000030, "Member 'FHitActionSetting::Action' has a wrong offset!");
static_assert(offsetof(FHitActionSetting, AttachOffset) == 0x000034, "Member 'FHitActionSetting::AttachOffset' has a wrong offset!");
static_assert(offsetof(FHitActionSetting, bRotateNormal) == 0x000040, "Member 'FHitActionSetting::bRotateNormal' has a wrong offset!");
static_assert(offsetof(FHitActionSetting, AttachTime) == 0x000044, "Member 'FHitActionSetting::AttachTime' has a wrong offset!");
static_assert(offsetof(FHitActionSetting, bDropOnParentDead) == 0x000048, "Member 'FHitActionSetting::bDropOnParentDead' has a wrong offset!");

// ScriptStruct Snowfall.HomingSetting
// 0x004C (0x004C - 0x0000)
struct FHomingSetting final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfWeaponHomingCalcType                      CalcType;                                          // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Rate;                                              // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RateInterpTime;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RateTimeThresholdDistance;                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitDistance;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartAiming;                                      // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InvalidHomingThresholdDistance;                    // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAimTargetOnLimit;                                 // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PredictionTime;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param0;                                            // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param1;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x002C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetOffset;                                      // 0x0034(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetFluctuation;                                 // 0x0040(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomingSetting) == 0x000004, "Wrong alignment on FHomingSetting");
static_assert(sizeof(FHomingSetting) == 0x00004C, "Wrong size on FHomingSetting");
static_assert(offsetof(FHomingSetting, bEnable) == 0x000000, "Member 'FHomingSetting::bEnable' has a wrong offset!");
static_assert(offsetof(FHomingSetting, CalcType) == 0x000001, "Member 'FHomingSetting::CalcType' has a wrong offset!");
static_assert(offsetof(FHomingSetting, Rate) == 0x000002, "Member 'FHomingSetting::Rate' has a wrong offset!");
static_assert(offsetof(FHomingSetting, RateInterpTime) == 0x000004, "Member 'FHomingSetting::RateInterpTime' has a wrong offset!");
static_assert(offsetof(FHomingSetting, RateTimeThresholdDistance) == 0x000008, "Member 'FHomingSetting::RateTimeThresholdDistance' has a wrong offset!");
static_assert(offsetof(FHomingSetting, LimitDistance) == 0x00000C, "Member 'FHomingSetting::LimitDistance' has a wrong offset!");
static_assert(offsetof(FHomingSetting, bStartAiming) == 0x000010, "Member 'FHomingSetting::bStartAiming' has a wrong offset!");
static_assert(offsetof(FHomingSetting, InvalidHomingThresholdDistance) == 0x000014, "Member 'FHomingSetting::InvalidHomingThresholdDistance' has a wrong offset!");
static_assert(offsetof(FHomingSetting, bAimTargetOnLimit) == 0x000018, "Member 'FHomingSetting::bAimTargetOnLimit' has a wrong offset!");
static_assert(offsetof(FHomingSetting, PredictionTime) == 0x00001C, "Member 'FHomingSetting::PredictionTime' has a wrong offset!");
static_assert(offsetof(FHomingSetting, DelayTime) == 0x000020, "Member 'FHomingSetting::DelayTime' has a wrong offset!");
static_assert(offsetof(FHomingSetting, Param0) == 0x000024, "Member 'FHomingSetting::Param0' has a wrong offset!");
static_assert(offsetof(FHomingSetting, Param1) == 0x000028, "Member 'FHomingSetting::Param1' has a wrong offset!");
static_assert(offsetof(FHomingSetting, SocketName) == 0x00002C, "Member 'FHomingSetting::SocketName' has a wrong offset!");
static_assert(offsetof(FHomingSetting, TargetOffset) == 0x000034, "Member 'FHomingSetting::TargetOffset' has a wrong offset!");
static_assert(offsetof(FHomingSetting, TargetFluctuation) == 0x000040, "Member 'FHomingSetting::TargetFluctuation' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponIgnoreSetting
// 0x0040 (0x0040 - 0x0000)
struct FSnfWeaponIgnoreSetting final
{
public:
	TSoftClassPtr<class UClass>                   TargetClass;                                       // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpecifyBone;                                      // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           SpecifyBoneList;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponIgnoreSetting) == 0x000008, "Wrong alignment on FSnfWeaponIgnoreSetting");
static_assert(sizeof(FSnfWeaponIgnoreSetting) == 0x000040, "Wrong size on FSnfWeaponIgnoreSetting");
static_assert(offsetof(FSnfWeaponIgnoreSetting, TargetClass) == 0x000000, "Member 'FSnfWeaponIgnoreSetting::TargetClass' has a wrong offset!");
static_assert(offsetof(FSnfWeaponIgnoreSetting, bSpecifyBone) == 0x000028, "Member 'FSnfWeaponIgnoreSetting::bSpecifyBone' has a wrong offset!");
static_assert(offsetof(FSnfWeaponIgnoreSetting, SpecifyBoneList) == 0x000030, "Member 'FSnfWeaponIgnoreSetting::SpecifyBoneList' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponAmmoData
// 0x0260 (0x0260 - 0x0000)
struct FSnfWeaponAmmoData final
{
public:
	class FName                                   IdentifierTag;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfAmmoType                                  AmmoType;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSnfWeaponDamageSetting>        DamageSettings;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DistanceDampingDamageRateCurve;                    // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoreDamageAmount;                                  // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KKModeCoreDamageAmount;                            // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRadialDamage;                               // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RadialDamageRadius;                                // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRadialDamageFalloff;                              // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RadialDamageFalloffStartDistance;                  // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadialDamageFalloffLimitRate;                      // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             RadialTraceChannel;                                // 0x0044(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSnfWeaponDamageSetting>        RadialDamageSettings;                              // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         RadialCoreDamageAmount;                            // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KKModeRadialCoreDamageAmount;                      // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTngEffectAsset*                        RadialDamageImpactEffect;                          // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTngEffectAsset*                        RadialDamageHitImpactEffect;                       // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTngImpactEffectTable*                  HitImpactEffectTable;                              // 0x0070(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTngImpactEffectTable*                  DropImpactEffectTable;                             // 0x0078(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplaceHeadShotEffect;                            // 0x0080(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              HeadShotSurface;                                   // 0x0081(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x0084(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0088(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x008C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityDelayTime;                                  // 0x0090(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitActionSetting>              HitActions;                                        // 0x0098(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bMovableOnRangeOver;                               // 0x00A8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImpulse;                                          // 0x00A9(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ImpulsePower;                                      // 0x00AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoise;                                            // 0x00B0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NoiseName;                                         // 0x00B4(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHomingSetting                         HomingSetting;                                     // 0x00BC(0x004C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPenetrateSetting                      PenetrateSetting;                                  // 0x0108(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         DropTime;                                          // 0x0120(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReflection;                                       // 0x0124(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSnfWeaponReflectionSetting>    ReflectionSettings;                                // 0x0128(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FSnfWeaponIgnoreSetting>        IgnoreSettings;                                    // 0x0138(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class ATngEffectActor>            FollowEffect;                                      // 0x0148(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ItemClass;                                         // 0x0150(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           IgnoreActorClasses;                                // 0x0178(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	ESnfWeaponAmmoAttachParent                    AttachParent;                                      // 0x0188(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachSocket;                                      // 0x018C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194[0xC];                                      // 0x0194(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             AttachOffset;                                      // 0x01A0(0x0030)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Em1600Class;                                       // 0x01D0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Em1600WeakTagName;                                 // 0x01F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Em1600ReflectBuddyEventName;                       // 0x0200(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Em1700Class;                                       // 0x0208(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Em1800Class;                                       // 0x0230(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258[0x8];                                      // 0x0258(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfWeaponAmmoData) == 0x000010, "Wrong alignment on FSnfWeaponAmmoData");
static_assert(sizeof(FSnfWeaponAmmoData) == 0x000260, "Wrong size on FSnfWeaponAmmoData");
static_assert(offsetof(FSnfWeaponAmmoData, IdentifierTag) == 0x000000, "Member 'FSnfWeaponAmmoData::IdentifierTag' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, AmmoType) == 0x000008, "Member 'FSnfWeaponAmmoData::AmmoType' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, DamageSettings) == 0x000010, "Member 'FSnfWeaponAmmoData::DamageSettings' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, DistanceDampingDamageRateCurve) == 0x000020, "Member 'FSnfWeaponAmmoData::DistanceDampingDamageRateCurve' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, CoreDamageAmount) == 0x000028, "Member 'FSnfWeaponAmmoData::CoreDamageAmount' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, KKModeCoreDamageAmount) == 0x00002C, "Member 'FSnfWeaponAmmoData::KKModeCoreDamageAmount' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, bEnableRadialDamage) == 0x000030, "Member 'FSnfWeaponAmmoData::bEnableRadialDamage' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, RadialDamageRadius) == 0x000034, "Member 'FSnfWeaponAmmoData::RadialDamageRadius' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, bRadialDamageFalloff) == 0x000038, "Member 'FSnfWeaponAmmoData::bRadialDamageFalloff' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, RadialDamageFalloffStartDistance) == 0x00003C, "Member 'FSnfWeaponAmmoData::RadialDamageFalloffStartDistance' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, RadialDamageFalloffLimitRate) == 0x000040, "Member 'FSnfWeaponAmmoData::RadialDamageFalloffLimitRate' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, RadialTraceChannel) == 0x000044, "Member 'FSnfWeaponAmmoData::RadialTraceChannel' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, RadialDamageSettings) == 0x000048, "Member 'FSnfWeaponAmmoData::RadialDamageSettings' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, RadialCoreDamageAmount) == 0x000058, "Member 'FSnfWeaponAmmoData::RadialCoreDamageAmount' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, KKModeRadialCoreDamageAmount) == 0x00005C, "Member 'FSnfWeaponAmmoData::KKModeRadialCoreDamageAmount' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, RadialDamageImpactEffect) == 0x000060, "Member 'FSnfWeaponAmmoData::RadialDamageImpactEffect' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, RadialDamageHitImpactEffect) == 0x000068, "Member 'FSnfWeaponAmmoData::RadialDamageHitImpactEffect' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, HitImpactEffectTable) == 0x000070, "Member 'FSnfWeaponAmmoData::HitImpactEffectTable' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, DropImpactEffectTable) == 0x000078, "Member 'FSnfWeaponAmmoData::DropImpactEffectTable' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, bReplaceHeadShotEffect) == 0x000080, "Member 'FSnfWeaponAmmoData::bReplaceHeadShotEffect' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, HeadShotSurface) == 0x000081, "Member 'FSnfWeaponAmmoData::HeadShotSurface' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, Speed) == 0x000084, "Member 'FSnfWeaponAmmoData::Speed' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, Range) == 0x000088, "Member 'FSnfWeaponAmmoData::Range' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, GravityScale) == 0x00008C, "Member 'FSnfWeaponAmmoData::GravityScale' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, GravityDelayTime) == 0x000090, "Member 'FSnfWeaponAmmoData::GravityDelayTime' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, HitActions) == 0x000098, "Member 'FSnfWeaponAmmoData::HitActions' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, bMovableOnRangeOver) == 0x0000A8, "Member 'FSnfWeaponAmmoData::bMovableOnRangeOver' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, bImpulse) == 0x0000A9, "Member 'FSnfWeaponAmmoData::bImpulse' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, ImpulsePower) == 0x0000AC, "Member 'FSnfWeaponAmmoData::ImpulsePower' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, bNoise) == 0x0000B0, "Member 'FSnfWeaponAmmoData::bNoise' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, NoiseName) == 0x0000B4, "Member 'FSnfWeaponAmmoData::NoiseName' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, HomingSetting) == 0x0000BC, "Member 'FSnfWeaponAmmoData::HomingSetting' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, PenetrateSetting) == 0x000108, "Member 'FSnfWeaponAmmoData::PenetrateSetting' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, DropTime) == 0x000120, "Member 'FSnfWeaponAmmoData::DropTime' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, bReflection) == 0x000124, "Member 'FSnfWeaponAmmoData::bReflection' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, ReflectionSettings) == 0x000128, "Member 'FSnfWeaponAmmoData::ReflectionSettings' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, IgnoreSettings) == 0x000138, "Member 'FSnfWeaponAmmoData::IgnoreSettings' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, FollowEffect) == 0x000148, "Member 'FSnfWeaponAmmoData::FollowEffect' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, ItemClass) == 0x000150, "Member 'FSnfWeaponAmmoData::ItemClass' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, IgnoreActorClasses) == 0x000178, "Member 'FSnfWeaponAmmoData::IgnoreActorClasses' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, AttachParent) == 0x000188, "Member 'FSnfWeaponAmmoData::AttachParent' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, AttachSocket) == 0x00018C, "Member 'FSnfWeaponAmmoData::AttachSocket' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, AttachOffset) == 0x0001A0, "Member 'FSnfWeaponAmmoData::AttachOffset' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, Em1600Class) == 0x0001D0, "Member 'FSnfWeaponAmmoData::Em1600Class' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, Em1600WeakTagName) == 0x0001F8, "Member 'FSnfWeaponAmmoData::Em1600WeakTagName' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, Em1600ReflectBuddyEventName) == 0x000200, "Member 'FSnfWeaponAmmoData::Em1600ReflectBuddyEventName' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, Em1700Class) == 0x000208, "Member 'FSnfWeaponAmmoData::Em1700Class' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoData, Em1800Class) == 0x000230, "Member 'FSnfWeaponAmmoData::Em1800Class' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponAmmoTableData
// 0x0298 (0x02A0 - 0x0008)
struct FSnfWeaponAmmoTableData final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0020(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSnfWeaponAmmoData                     Data;                                              // 0x0040(0x0260)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponAmmoTableData) == 0x000010, "Wrong alignment on FSnfWeaponAmmoTableData");
static_assert(sizeof(FSnfWeaponAmmoTableData) == 0x0002A0, "Wrong size on FSnfWeaponAmmoTableData");
static_assert(offsetof(FSnfWeaponAmmoTableData, Name) == 0x000008, "Member 'FSnfWeaponAmmoTableData::Name' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoTableData, Description) == 0x000020, "Member 'FSnfWeaponAmmoTableData::Description' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAmmoTableData, Data) == 0x000040, "Member 'FSnfWeaponAmmoTableData::Data' has a wrong offset!");

// ScriptStruct Snowfall.SnfDivisionBaseHierarchicalLevel
// 0x0040 (0x0040 - 0x0000)
struct FSnfDivisionBaseHierarchicalLevel final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UWorld>>          StreamLevels;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDivisionBaseHierarchicalLevel) == 0x000010, "Wrong alignment on FSnfDivisionBaseHierarchicalLevel");
static_assert(sizeof(FSnfDivisionBaseHierarchicalLevel) == 0x000040, "Wrong size on FSnfDivisionBaseHierarchicalLevel");
static_assert(offsetof(FSnfDivisionBaseHierarchicalLevel, Transform) == 0x000000, "Member 'FSnfDivisionBaseHierarchicalLevel::Transform' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseHierarchicalLevel, StreamLevels) == 0x000030, "Member 'FSnfDivisionBaseHierarchicalLevel::StreamLevels' has a wrong offset!");

// ScriptStruct Snowfall.SnfDivisionBasePartsUnit
// 0x0018 (0x0018 - 0x0000)
struct FSnfDivisionBasePartsUnit final
{
public:
	bool                                          bReplaceParts;                                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInstancedStaticMeshComponent*          InstancedPartsMesh;                                // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionEnabled                             CollisionType;                                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfDivisionBasePartsUnit) == 0x000008, "Wrong alignment on FSnfDivisionBasePartsUnit");
static_assert(sizeof(FSnfDivisionBasePartsUnit) == 0x000018, "Wrong size on FSnfDivisionBasePartsUnit");
static_assert(offsetof(FSnfDivisionBasePartsUnit, bReplaceParts) == 0x000000, "Member 'FSnfDivisionBasePartsUnit::bReplaceParts' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBasePartsUnit, InstancedPartsMesh) == 0x000008, "Member 'FSnfDivisionBasePartsUnit::InstancedPartsMesh' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBasePartsUnit, CollisionType) == 0x000010, "Member 'FSnfDivisionBasePartsUnit::CollisionType' has a wrong offset!");

// ScriptStruct Snowfall.SnfSkillInfo
// 0x0088 (0x0090 - 0x0008)
struct FSnfSkillInfo final : public FTableRowBase
{
public:
	class FName                                   CatalogId;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfSkillType                                 Type;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfSkillType                                 LockSkill;                                         // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfPlayerFlag                                LockFlag;                                          // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LockLevel;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelOpenPopupCatalog;                             // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KeyCatalog;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Key;                                               // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Point;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EventSkill;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ESnfSkillParam, float>                   Param;                                             // 0x0038(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   Comment;                                           // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfSkillInfo) == 0x000008, "Wrong alignment on FSnfSkillInfo");
static_assert(sizeof(FSnfSkillInfo) == 0x000090, "Wrong size on FSnfSkillInfo");
static_assert(offsetof(FSnfSkillInfo, CatalogId) == 0x000008, "Member 'FSnfSkillInfo::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfSkillInfo, Type) == 0x000010, "Member 'FSnfSkillInfo::Type' has a wrong offset!");
static_assert(offsetof(FSnfSkillInfo, LockSkill) == 0x000011, "Member 'FSnfSkillInfo::LockSkill' has a wrong offset!");
static_assert(offsetof(FSnfSkillInfo, LockFlag) == 0x000012, "Member 'FSnfSkillInfo::LockFlag' has a wrong offset!");
static_assert(offsetof(FSnfSkillInfo, LockLevel) == 0x000014, "Member 'FSnfSkillInfo::LockLevel' has a wrong offset!");
static_assert(offsetof(FSnfSkillInfo, LevelOpenPopupCatalog) == 0x000018, "Member 'FSnfSkillInfo::LevelOpenPopupCatalog' has a wrong offset!");
static_assert(offsetof(FSnfSkillInfo, KeyCatalog) == 0x000020, "Member 'FSnfSkillInfo::KeyCatalog' has a wrong offset!");
static_assert(offsetof(FSnfSkillInfo, Key) == 0x000028, "Member 'FSnfSkillInfo::Key' has a wrong offset!");
static_assert(offsetof(FSnfSkillInfo, Point) == 0x00002C, "Member 'FSnfSkillInfo::Point' has a wrong offset!");
static_assert(offsetof(FSnfSkillInfo, EventSkill) == 0x000030, "Member 'FSnfSkillInfo::EventSkill' has a wrong offset!");
static_assert(offsetof(FSnfSkillInfo, Param) == 0x000038, "Member 'FSnfSkillInfo::Param' has a wrong offset!");
static_assert(offsetof(FSnfSkillInfo, Comment) == 0x000088, "Member 'FSnfSkillInfo::Comment' has a wrong offset!");

// ScriptStruct Snowfall.SnfDivisionBaseMeshParts
// 0x0110 (0x0110 - 0x0000)
struct FSnfDivisionBaseMeshParts final
{
public:
	bool                                          bReplaceParts;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfDivisionBasePartsType                     Type;                                              // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfDivisionBasePartsType                     PreType;                                           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Mesh;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  Material;                                          // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FTransform                             UnitTransform;                                     // 0x0060(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             PreUnitTransform;                                  // 0x0090(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PartsNum;                                          // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrePartsNum;                                       // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             AddOffset;                                         // 0x00D0(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     Instances;                                         // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDivisionBaseMeshParts) == 0x000010, "Wrong alignment on FSnfDivisionBaseMeshParts");
static_assert(sizeof(FSnfDivisionBaseMeshParts) == 0x000110, "Wrong size on FSnfDivisionBaseMeshParts");
static_assert(offsetof(FSnfDivisionBaseMeshParts, bReplaceParts) == 0x000000, "Member 'FSnfDivisionBaseMeshParts::bReplaceParts' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseMeshParts, Type) == 0x000001, "Member 'FSnfDivisionBaseMeshParts::Type' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseMeshParts, PreType) == 0x000002, "Member 'FSnfDivisionBaseMeshParts::PreType' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseMeshParts, Mesh) == 0x000008, "Member 'FSnfDivisionBaseMeshParts::Mesh' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseMeshParts, Material) == 0x000010, "Member 'FSnfDivisionBaseMeshParts::Material' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseMeshParts, UnitTransform) == 0x000060, "Member 'FSnfDivisionBaseMeshParts::UnitTransform' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseMeshParts, PreUnitTransform) == 0x000090, "Member 'FSnfDivisionBaseMeshParts::PreUnitTransform' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseMeshParts, PartsNum) == 0x0000C0, "Member 'FSnfDivisionBaseMeshParts::PartsNum' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseMeshParts, PrePartsNum) == 0x0000C4, "Member 'FSnfDivisionBaseMeshParts::PrePartsNum' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseMeshParts, AddOffset) == 0x0000D0, "Member 'FSnfDivisionBaseMeshParts::AddOffset' has a wrong offset!");
static_assert(offsetof(FSnfDivisionBaseMeshParts, Instances) == 0x000100, "Member 'FSnfDivisionBaseMeshParts::Instances' has a wrong offset!");

// ScriptStruct Snowfall.SnfLandformConnectInformation
// 0x0044 (0x0044 - 0x0000)
struct FSnfLandformConnectInformation final
{
public:
	ESnfLandformConnectRelation                   Relation;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConnectHeight;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConnectStart;                                      // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConnectEnd;                                        // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConnectDirection;                                  // 0x0020(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ObstaclePoint;                                     // 0x002C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ObstacleNormal;                                    // 0x0038(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfLandformConnectInformation) == 0x000004, "Wrong alignment on FSnfLandformConnectInformation");
static_assert(sizeof(FSnfLandformConnectInformation) == 0x000044, "Wrong size on FSnfLandformConnectInformation");
static_assert(offsetof(FSnfLandformConnectInformation, Relation) == 0x000000, "Member 'FSnfLandformConnectInformation::Relation' has a wrong offset!");
static_assert(offsetof(FSnfLandformConnectInformation, ConnectHeight) == 0x000004, "Member 'FSnfLandformConnectInformation::ConnectHeight' has a wrong offset!");
static_assert(offsetof(FSnfLandformConnectInformation, ConnectStart) == 0x000008, "Member 'FSnfLandformConnectInformation::ConnectStart' has a wrong offset!");
static_assert(offsetof(FSnfLandformConnectInformation, ConnectEnd) == 0x000014, "Member 'FSnfLandformConnectInformation::ConnectEnd' has a wrong offset!");
static_assert(offsetof(FSnfLandformConnectInformation, ConnectDirection) == 0x000020, "Member 'FSnfLandformConnectInformation::ConnectDirection' has a wrong offset!");
static_assert(offsetof(FSnfLandformConnectInformation, ObstaclePoint) == 0x00002C, "Member 'FSnfLandformConnectInformation::ObstaclePoint' has a wrong offset!");
static_assert(offsetof(FSnfLandformConnectInformation, ObstacleNormal) == 0x000038, "Member 'FSnfLandformConnectInformation::ObstacleNormal' has a wrong offset!");

// ScriptStruct Snowfall.SnfLandformConnectVolume
// 0x0040 (0x0040 - 0x0000)
struct FSnfLandformConnectVolume final
{
public:
	ESnfLandformConnectRelation                   Relation;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSnfLandformConnectInformation> ConnectList;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0024(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x0030(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfLandformConnectVolume) == 0x000008, "Wrong alignment on FSnfLandformConnectVolume");
static_assert(sizeof(FSnfLandformConnectVolume) == 0x000040, "Wrong size on FSnfLandformConnectVolume");
static_assert(offsetof(FSnfLandformConnectVolume, Relation) == 0x000000, "Member 'FSnfLandformConnectVolume::Relation' has a wrong offset!");
static_assert(offsetof(FSnfLandformConnectVolume, ConnectList) == 0x000008, "Member 'FSnfLandformConnectVolume::ConnectList' has a wrong offset!");
static_assert(offsetof(FSnfLandformConnectVolume, Center) == 0x000018, "Member 'FSnfLandformConnectVolume::Center' has a wrong offset!");
static_assert(offsetof(FSnfLandformConnectVolume, Direction) == 0x000024, "Member 'FSnfLandformConnectVolume::Direction' has a wrong offset!");
static_assert(offsetof(FSnfLandformConnectVolume, Extent) == 0x000030, "Member 'FSnfLandformConnectVolume::Extent' has a wrong offset!");

// ScriptStruct Snowfall.SnfNetMontageSecJump
// 0x000C (0x000C - 0x0000)
struct FSnfNetMontageSecJump final
{
public:
	class FName                                   SecName;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecCount;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfNetMontageSecJump) == 0x000004, "Wrong alignment on FSnfNetMontageSecJump");
static_assert(sizeof(FSnfNetMontageSecJump) == 0x00000C, "Wrong size on FSnfNetMontageSecJump");
static_assert(offsetof(FSnfNetMontageSecJump, SecName) == 0x000000, "Member 'FSnfNetMontageSecJump::SecName' has a wrong offset!");
static_assert(offsetof(FSnfNetMontageSecJump, SecCount) == 0x000008, "Member 'FSnfNetMontageSecJump::SecCount' has a wrong offset!");

// ScriptStruct Snowfall.SnfKKModeInfo
// 0x000C (0x000C - 0x0000)
struct FSnfKKModeInfo final
{
public:
	TWeakObjectPtr<class AActor>                  Target;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStunEnd;                                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfKKModeInfo) == 0x000004, "Wrong alignment on FSnfKKModeInfo");
static_assert(sizeof(FSnfKKModeInfo) == 0x00000C, "Wrong size on FSnfKKModeInfo");
static_assert(offsetof(FSnfKKModeInfo, Target) == 0x000000, "Member 'FSnfKKModeInfo::Target' has a wrong offset!");
static_assert(offsetof(FSnfKKModeInfo, IsStunEnd) == 0x000008, "Member 'FSnfKKModeInfo::IsStunEnd' has a wrong offset!");

// ScriptStruct Snowfall.SnfAIjobPosParam
// 0x0018 (0x0018 - 0x0000)
struct FSnfAIjobPosParam final
{
public:
	struct FVector                                JobPos;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                JobCompPos;                                        // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAIjobPosParam) == 0x000004, "Wrong alignment on FSnfAIjobPosParam");
static_assert(sizeof(FSnfAIjobPosParam) == 0x000018, "Wrong size on FSnfAIjobPosParam");
static_assert(offsetof(FSnfAIjobPosParam, JobPos) == 0x000000, "Member 'FSnfAIjobPosParam::JobPos' has a wrong offset!");
static_assert(offsetof(FSnfAIjobPosParam, JobCompPos) == 0x00000C, "Member 'FSnfAIjobPosParam::JobCompPos' has a wrong offset!");

// ScriptStruct Snowfall.SnfSpiritPhotoInfo
// 0x0088 (0x0090 - 0x0008)
struct FSnfSpiritPhotoInfo final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UMaterialInterface>      FrontMaterial;                                     // 0x0008(0x0028)(Edit, BlueprintVisible, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      BackMaterial;                                      // 0x0030(0x0028)(Edit, BlueprintVisible, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0058(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      EasingMaterial;                                    // 0x0068(0x0028)(Edit, BlueprintVisible, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfSpiritPhotoInfo) == 0x000008, "Wrong alignment on FSnfSpiritPhotoInfo");
static_assert(sizeof(FSnfSpiritPhotoInfo) == 0x000090, "Wrong size on FSnfSpiritPhotoInfo");
static_assert(offsetof(FSnfSpiritPhotoInfo, FrontMaterial) == 0x000008, "Member 'FSnfSpiritPhotoInfo::FrontMaterial' has a wrong offset!");
static_assert(offsetof(FSnfSpiritPhotoInfo, BackMaterial) == 0x000030, "Member 'FSnfSpiritPhotoInfo::BackMaterial' has a wrong offset!");
static_assert(offsetof(FSnfSpiritPhotoInfo, Position) == 0x000058, "Member 'FSnfSpiritPhotoInfo::Position' has a wrong offset!");
static_assert(offsetof(FSnfSpiritPhotoInfo, EasingMaterial) == 0x000068, "Member 'FSnfSpiritPhotoInfo::EasingMaterial' has a wrong offset!");

// ScriptStruct Snowfall.SnfAIjobAnimParam
// 0x0014 (0x0014 - 0x0000)
struct FSnfAIjobAnimParam final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NetCounter;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimIndex;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAIjobAnimParam) == 0x000004, "Wrong alignment on FSnfAIjobAnimParam");
static_assert(sizeof(FSnfAIjobAnimParam) == 0x000014, "Wrong size on FSnfAIjobAnimParam");
static_assert(offsetof(FSnfAIjobAnimParam, BlendTime) == 0x000000, "Member 'FSnfAIjobAnimParam::BlendTime' has a wrong offset!");
static_assert(offsetof(FSnfAIjobAnimParam, Rate) == 0x000004, "Member 'FSnfAIjobAnimParam::Rate' has a wrong offset!");
static_assert(offsetof(FSnfAIjobAnimParam, LoopCount) == 0x000008, "Member 'FSnfAIjobAnimParam::LoopCount' has a wrong offset!");
static_assert(offsetof(FSnfAIjobAnimParam, NetCounter) == 0x00000C, "Member 'FSnfAIjobAnimParam::NetCounter' has a wrong offset!");
static_assert(offsetof(FSnfAIjobAnimParam, AnimIndex) == 0x000010, "Member 'FSnfAIjobAnimParam::AnimIndex' has a wrong offset!");

// ScriptStruct Snowfall.SnfDamageInfoNetParam
// 0x0010 (0x0010 - 0x0000)
struct FSnfDamageInfoNetParam final
{
public:
	struct FVector                                DamagePos;                                         // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PartsType;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfDamageInfoNetParam) == 0x000004, "Wrong alignment on FSnfDamageInfoNetParam");
static_assert(sizeof(FSnfDamageInfoNetParam) == 0x000010, "Wrong size on FSnfDamageInfoNetParam");
static_assert(offsetof(FSnfDamageInfoNetParam, DamagePos) == 0x000000, "Member 'FSnfDamageInfoNetParam::DamagePos' has a wrong offset!");
static_assert(offsetof(FSnfDamageInfoNetParam, PartsType) == 0x00000C, "Member 'FSnfDamageInfoNetParam::PartsType' has a wrong offset!");

// ScriptStruct Snowfall.SnfAttuneNetParam
// 0x000C (0x000C - 0x0000)
struct FSnfAttuneNetParam final
{
public:
	float                                         ProgressRate;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MateScalar;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCastShadow;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfAttuneNetParam) == 0x000004, "Wrong alignment on FSnfAttuneNetParam");
static_assert(sizeof(FSnfAttuneNetParam) == 0x00000C, "Wrong size on FSnfAttuneNetParam");
static_assert(offsetof(FSnfAttuneNetParam, ProgressRate) == 0x000000, "Member 'FSnfAttuneNetParam::ProgressRate' has a wrong offset!");
static_assert(offsetof(FSnfAttuneNetParam, MateScalar) == 0x000004, "Member 'FSnfAttuneNetParam::MateScalar' has a wrong offset!");
static_assert(offsetof(FSnfAttuneNetParam, IsCastShadow) == 0x000008, "Member 'FSnfAttuneNetParam::IsCastShadow' has a wrong offset!");

// ScriptStruct Snowfall.SnfMorphedRaccoonActorSoundInfo
// 0x0030 (0x0030 - 0x0000)
struct FSnfMorphedRaccoonActorSoundInfo final
{
public:
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionRefreshInterval;                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkChangeRoomType                             ChangeRoomType;                                    // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             OcclusionCollisionChannel;                         // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetName;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AKLocation;                                        // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ComponentName;                                     // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfMorphedRaccoonActorSoundInfo) == 0x000008, "Wrong alignment on FSnfMorphedRaccoonActorSoundInfo");
static_assert(sizeof(FSnfMorphedRaccoonActorSoundInfo) == 0x000030, "Wrong size on FSnfMorphedRaccoonActorSoundInfo");
static_assert(offsetof(FSnfMorphedRaccoonActorSoundInfo, AudioEvent) == 0x000000, "Member 'FSnfMorphedRaccoonActorSoundInfo::AudioEvent' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorSoundInfo, OcclusionRefreshInterval) == 0x000008, "Member 'FSnfMorphedRaccoonActorSoundInfo::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorSoundInfo, ChangeRoomType) == 0x00000C, "Member 'FSnfMorphedRaccoonActorSoundInfo::ChangeRoomType' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorSoundInfo, OcclusionCollisionChannel) == 0x00000D, "Member 'FSnfMorphedRaccoonActorSoundInfo::OcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorSoundInfo, TargetName) == 0x000010, "Member 'FSnfMorphedRaccoonActorSoundInfo::TargetName' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorSoundInfo, AKLocation) == 0x000018, "Member 'FSnfMorphedRaccoonActorSoundInfo::AKLocation' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorSoundInfo, ComponentName) == 0x000024, "Member 'FSnfMorphedRaccoonActorSoundInfo::ComponentName' has a wrong offset!");

// ScriptStruct Snowfall.SnfGamBattleLocationItem
// 0x0020 (0x0020 - 0x0000)
struct FSnfGamBattleLocationItem final
{
public:
	TWeakObjectPtr<class AActor>                  Agent;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Size;                                              // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGamBattleLocationItem) == 0x000004, "Wrong alignment on FSnfGamBattleLocationItem");
static_assert(sizeof(FSnfGamBattleLocationItem) == 0x000020, "Wrong size on FSnfGamBattleLocationItem");
static_assert(offsetof(FSnfGamBattleLocationItem, Agent) == 0x000000, "Member 'FSnfGamBattleLocationItem::Agent' has a wrong offset!");
static_assert(offsetof(FSnfGamBattleLocationItem, Center) == 0x000008, "Member 'FSnfGamBattleLocationItem::Center' has a wrong offset!");
static_assert(offsetof(FSnfGamBattleLocationItem, Size) == 0x000014, "Member 'FSnfGamBattleLocationItem::Size' has a wrong offset!");

// ScriptStruct Snowfall.SnfElevatorFloorSetting
// 0x0014 (0x0014 - 0x0000)
struct FSnfElevatorFloorSetting final
{
public:
	int32                                         FloorNumber;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideHeight;                                   // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeightFromLowerFloor;                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipFloorNumber;                                  // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumFloorsToSkip;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfElevatorFloorSetting) == 0x000004, "Wrong alignment on FSnfElevatorFloorSetting");
static_assert(sizeof(FSnfElevatorFloorSetting) == 0x000014, "Wrong size on FSnfElevatorFloorSetting");
static_assert(offsetof(FSnfElevatorFloorSetting, FloorNumber) == 0x000000, "Member 'FSnfElevatorFloorSetting::FloorNumber' has a wrong offset!");
static_assert(offsetof(FSnfElevatorFloorSetting, bOverrideHeight) == 0x000004, "Member 'FSnfElevatorFloorSetting::bOverrideHeight' has a wrong offset!");
static_assert(offsetof(FSnfElevatorFloorSetting, HeightFromLowerFloor) == 0x000008, "Member 'FSnfElevatorFloorSetting::HeightFromLowerFloor' has a wrong offset!");
static_assert(offsetof(FSnfElevatorFloorSetting, bSkipFloorNumber) == 0x00000C, "Member 'FSnfElevatorFloorSetting::bSkipFloorNumber' has a wrong offset!");
static_assert(offsetof(FSnfElevatorFloorSetting, NumFloorsToSkip) == 0x000010, "Member 'FSnfElevatorFloorSetting::NumFloorsToSkip' has a wrong offset!");

// ScriptStruct Snowfall.SnfVendingMachineShopAppearanceSetting
// 0x00A8 (0x00A8 - 0x0000)
struct FSnfVendingMachineShopAppearanceSetting final
{
public:
	class UStaticMesh*                            TargetMesh;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  DisableMaterials;                                  // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  EnableMaterials;                                   // 0x0058(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfVendingMachineShopAppearanceSetting) == 0x000008, "Wrong alignment on FSnfVendingMachineShopAppearanceSetting");
static_assert(sizeof(FSnfVendingMachineShopAppearanceSetting) == 0x0000A8, "Wrong size on FSnfVendingMachineShopAppearanceSetting");
static_assert(offsetof(FSnfVendingMachineShopAppearanceSetting, TargetMesh) == 0x000000, "Member 'FSnfVendingMachineShopAppearanceSetting::TargetMesh' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineShopAppearanceSetting, DisableMaterials) == 0x000008, "Member 'FSnfVendingMachineShopAppearanceSetting::DisableMaterials' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineShopAppearanceSetting, EnableMaterials) == 0x000058, "Member 'FSnfVendingMachineShopAppearanceSetting::EnableMaterials' has a wrong offset!");

// ScriptStruct Snowfall.SnfElevatorBaseDisableFloorSetting
// 0x0014 (0x0014 - 0x0000)
struct FSnfElevatorBaseDisableFloorSetting final
{
public:
	class FName                                   DisableTypeAction;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnableTypeAction;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x4];                                       // 0x0010(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfElevatorBaseDisableFloorSetting) == 0x000004, "Wrong alignment on FSnfElevatorBaseDisableFloorSetting");
static_assert(sizeof(FSnfElevatorBaseDisableFloorSetting) == 0x000014, "Wrong size on FSnfElevatorBaseDisableFloorSetting");
static_assert(offsetof(FSnfElevatorBaseDisableFloorSetting, DisableTypeAction) == 0x000000, "Member 'FSnfElevatorBaseDisableFloorSetting::DisableTypeAction' has a wrong offset!");
static_assert(offsetof(FSnfElevatorBaseDisableFloorSetting, EnableTypeAction) == 0x000008, "Member 'FSnfElevatorBaseDisableFloorSetting::EnableTypeAction' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActivityRequestCastTypeD
// 0x0028 (0x0028 - 0x0000)
struct FSnfGameActivityRequestCastTypeD final
{
public:
	class ASnfJobActor*                           JobActor;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkId_A;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkId_B;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkId_C;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkId_D;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameActivityRequestCastTypeD) == 0x000008, "Wrong alignment on FSnfGameActivityRequestCastTypeD");
static_assert(sizeof(FSnfGameActivityRequestCastTypeD) == 0x000028, "Wrong size on FSnfGameActivityRequestCastTypeD");
static_assert(offsetof(FSnfGameActivityRequestCastTypeD, JobActor) == 0x000000, "Member 'FSnfGameActivityRequestCastTypeD::JobActor' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCastTypeD, TalkId_A) == 0x000008, "Member 'FSnfGameActivityRequestCastTypeD::TalkId_A' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCastTypeD, TalkId_B) == 0x000010, "Member 'FSnfGameActivityRequestCastTypeD::TalkId_B' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCastTypeD, TalkId_C) == 0x000018, "Member 'FSnfGameActivityRequestCastTypeD::TalkId_C' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCastTypeD, TalkId_D) == 0x000020, "Member 'FSnfGameActivityRequestCastTypeD::TalkId_D' has a wrong offset!");

// ScriptStruct Snowfall.SnfElevatorBasePropSetting
// 0x0090 (0x0090 - 0x0000)
struct FSnfElevatorBasePropSetting final
{
public:
	class UStaticMesh*                            PropMesh;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  Materials;                                         // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0060(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfElevatorBasePropSetting) == 0x000010, "Wrong alignment on FSnfElevatorBasePropSetting");
static_assert(sizeof(FSnfElevatorBasePropSetting) == 0x000090, "Wrong size on FSnfElevatorBasePropSetting");
static_assert(offsetof(FSnfElevatorBasePropSetting, PropMesh) == 0x000000, "Member 'FSnfElevatorBasePropSetting::PropMesh' has a wrong offset!");
static_assert(offsetof(FSnfElevatorBasePropSetting, Materials) == 0x000008, "Member 'FSnfElevatorBasePropSetting::Materials' has a wrong offset!");
static_assert(offsetof(FSnfElevatorBasePropSetting, Transform) == 0x000060, "Member 'FSnfElevatorBasePropSetting::Transform' has a wrong offset!");

// ScriptStruct Snowfall.SnfElevatorBaseFoorTimeSetting
// 0x0020 (0x0020 - 0x0000)
struct FSnfElevatorBaseFoorTimeSetting final
{
public:
	int32                                         SetFloor0;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASnfElevatorDoorActor>   SetFloor0Target;                                   // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetFloor1;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASnfElevatorDoorActor>   SetFloor1Target;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TIME;                                              // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendExp;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfElevatorBaseFoorTimeSetting) == 0x000004, "Wrong alignment on FSnfElevatorBaseFoorTimeSetting");
static_assert(sizeof(FSnfElevatorBaseFoorTimeSetting) == 0x000020, "Wrong size on FSnfElevatorBaseFoorTimeSetting");
static_assert(offsetof(FSnfElevatorBaseFoorTimeSetting, SetFloor0) == 0x000000, "Member 'FSnfElevatorBaseFoorTimeSetting::SetFloor0' has a wrong offset!");
static_assert(offsetof(FSnfElevatorBaseFoorTimeSetting, SetFloor0Target) == 0x000004, "Member 'FSnfElevatorBaseFoorTimeSetting::SetFloor0Target' has a wrong offset!");
static_assert(offsetof(FSnfElevatorBaseFoorTimeSetting, SetFloor1) == 0x00000C, "Member 'FSnfElevatorBaseFoorTimeSetting::SetFloor1' has a wrong offset!");
static_assert(offsetof(FSnfElevatorBaseFoorTimeSetting, SetFloor1Target) == 0x000010, "Member 'FSnfElevatorBaseFoorTimeSetting::SetFloor1Target' has a wrong offset!");
static_assert(offsetof(FSnfElevatorBaseFoorTimeSetting, TIME) == 0x000018, "Member 'FSnfElevatorBaseFoorTimeSetting::TIME' has a wrong offset!");
static_assert(offsetof(FSnfElevatorBaseFoorTimeSetting, BlendExp) == 0x00001C, "Member 'FSnfElevatorBaseFoorTimeSetting::BlendExp' has a wrong offset!");

// ScriptStruct Snowfall.SnfGamePointDensityLog
// 0x0018 (0x0018 - 0x0000)
struct FSnfGamePointDensityLog final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Density;                                           // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGamePointDensityLog) == 0x000004, "Wrong alignment on FSnfGamePointDensityLog");
static_assert(sizeof(FSnfGamePointDensityLog) == 0x000018, "Wrong size on FSnfGamePointDensityLog");
static_assert(offsetof(FSnfGamePointDensityLog, ID) == 0x000000, "Member 'FSnfGamePointDensityLog::ID' has a wrong offset!");
static_assert(offsetof(FSnfGamePointDensityLog, Location) == 0x000008, "Member 'FSnfGamePointDensityLog::Location' has a wrong offset!");
static_assert(offsetof(FSnfGamePointDensityLog, Density) == 0x000014, "Member 'FSnfGamePointDensityLog::Density' has a wrong offset!");

// ScriptStruct Snowfall.SnfElevatorBaseKeepUpSetting
// 0x0040 (0x0040 - 0x0000)
struct FSnfElevatorBaseKeepUpSetting final
{
public:
	TWeakObjectPtr<class AActor>                  Target;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeTransform;                                 // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfElevatorBaseKeepUpSetting) == 0x000010, "Wrong alignment on FSnfElevatorBaseKeepUpSetting");
static_assert(sizeof(FSnfElevatorBaseKeepUpSetting) == 0x000040, "Wrong size on FSnfElevatorBaseKeepUpSetting");
static_assert(offsetof(FSnfElevatorBaseKeepUpSetting, Target) == 0x000000, "Member 'FSnfElevatorBaseKeepUpSetting::Target' has a wrong offset!");
static_assert(offsetof(FSnfElevatorBaseKeepUpSetting, RelativeTransform) == 0x000010, "Member 'FSnfElevatorBaseKeepUpSetting::RelativeTransform' has a wrong offset!");

// ScriptStruct Snowfall.SnfElevatorBaseFloorButton
// 0x0018 (0x0018 - 0x0000)
struct FSnfElevatorBaseFloorButton final
{
public:
	uint32                                        FloorIndex;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USnfInteractComponent*                  IntaractComp;                                      // 0x0008(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          InteractCollision;                                 // 0x0010(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfElevatorBaseFloorButton) == 0x000008, "Wrong alignment on FSnfElevatorBaseFloorButton");
static_assert(sizeof(FSnfElevatorBaseFloorButton) == 0x000018, "Wrong size on FSnfElevatorBaseFloorButton");
static_assert(offsetof(FSnfElevatorBaseFloorButton, FloorIndex) == 0x000000, "Member 'FSnfElevatorBaseFloorButton::FloorIndex' has a wrong offset!");
static_assert(offsetof(FSnfElevatorBaseFloorButton, IntaractComp) == 0x000008, "Member 'FSnfElevatorBaseFloorButton::IntaractComp' has a wrong offset!");
static_assert(offsetof(FSnfElevatorBaseFloorButton, InteractCollision) == 0x000010, "Member 'FSnfElevatorBaseFloorButton::InteractCollision' has a wrong offset!");

// ScriptStruct Snowfall.SnfSpiritPhotoTalkContainer
// 0x0018 (0x0018 - 0x0000)
struct FSnfSpiritPhotoTalkContainer final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TalkIdList;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfSpiritPhotoTalkContainer) == 0x000008, "Wrong alignment on FSnfSpiritPhotoTalkContainer");
static_assert(sizeof(FSnfSpiritPhotoTalkContainer) == 0x000018, "Wrong size on FSnfSpiritPhotoTalkContainer");
static_assert(offsetof(FSnfSpiritPhotoTalkContainer, DataTable) == 0x000000, "Member 'FSnfSpiritPhotoTalkContainer::DataTable' has a wrong offset!");
static_assert(offsetof(FSnfSpiritPhotoTalkContainer, TalkIdList) == 0x000008, "Member 'FSnfSpiritPhotoTalkContainer::TalkIdList' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameParamLogeItem
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FSnfGameParamLogeItem final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGameParamLogeItem) == 0x000004, "Wrong alignment on FSnfGameParamLogeItem");
static_assert(sizeof(FSnfGameParamLogeItem) == 0x000020, "Wrong size on FSnfGameParamLogeItem");

// ScriptStruct Snowfall.SnfQualityPresetLevelStreaming
// 0x000C (0x000C - 0x0000)
struct FSnfQualityPresetLevelStreaming final
{
public:
	uint8                                         Index;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LevelStreamingOffset;                              // 0x0004(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VramCapacityMB;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfQualityPresetLevelStreaming) == 0x000004, "Wrong alignment on FSnfQualityPresetLevelStreaming");
static_assert(sizeof(FSnfQualityPresetLevelStreaming) == 0x00000C, "Wrong size on FSnfQualityPresetLevelStreaming");
static_assert(offsetof(FSnfQualityPresetLevelStreaming, Index) == 0x000000, "Member 'FSnfQualityPresetLevelStreaming::Index' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetLevelStreaming, LevelStreamingOffset) == 0x000004, "Member 'FSnfQualityPresetLevelStreaming::LevelStreamingOffset' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetLevelStreaming, VramCapacityMB) == 0x000008, "Member 'FSnfQualityPresetLevelStreaming::VramCapacityMB' has a wrong offset!");

// ScriptStruct Snowfall.SnfEm1600RockFallSetting
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FSnfEm1600RockFallSetting final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfEm1600RockFallSetting) == 0x000004, "Wrong alignment on FSnfEm1600RockFallSetting");
static_assert(sizeof(FSnfEm1600RockFallSetting) == 0x000004, "Wrong size on FSnfEm1600RockFallSetting");

// ScriptStruct Snowfall.SnfVehicleDoorState
// 0x00E0 (0x00E0 - 0x0000)
struct FSnfVehicleDoorState final
{
public:
	class USceneComponent*                        DoorRoot;                                          // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnfStaticMeshComponent*                DoorMeshComp;                                      // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USnfStaticMeshComponent*>        PropComps;                                         // 0x0010(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSnfPropsGimmickAnimationInfo          AnimationInfo;                                     // 0x0020(0x00B8)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bPlayingAnimation;                                 // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleDoorState                             VehicleDoorState;                                  // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfVehicleDoorState) == 0x000008, "Wrong alignment on FSnfVehicleDoorState");
static_assert(sizeof(FSnfVehicleDoorState) == 0x0000E0, "Wrong size on FSnfVehicleDoorState");
static_assert(offsetof(FSnfVehicleDoorState, DoorRoot) == 0x000000, "Member 'FSnfVehicleDoorState::DoorRoot' has a wrong offset!");
static_assert(offsetof(FSnfVehicleDoorState, DoorMeshComp) == 0x000008, "Member 'FSnfVehicleDoorState::DoorMeshComp' has a wrong offset!");
static_assert(offsetof(FSnfVehicleDoorState, PropComps) == 0x000010, "Member 'FSnfVehicleDoorState::PropComps' has a wrong offset!");
static_assert(offsetof(FSnfVehicleDoorState, AnimationInfo) == 0x000020, "Member 'FSnfVehicleDoorState::AnimationInfo' has a wrong offset!");
static_assert(offsetof(FSnfVehicleDoorState, bPlayingAnimation) == 0x0000D8, "Member 'FSnfVehicleDoorState::bPlayingAnimation' has a wrong offset!");
static_assert(offsetof(FSnfVehicleDoorState, VehicleDoorState) == 0x0000D9, "Member 'FSnfVehicleDoorState::VehicleDoorState' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndingCreditsSubtitleData
// 0x0020 (0x0028 - 0x0008)
struct FSnfEndingCreditsSubtitleData final : public FTableRowBase
{
public:
	float                                         StartTime;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0010(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndingCreditsSubtitleData) == 0x000008, "Wrong alignment on FSnfEndingCreditsSubtitleData");
static_assert(sizeof(FSnfEndingCreditsSubtitleData) == 0x000028, "Wrong size on FSnfEndingCreditsSubtitleData");
static_assert(offsetof(FSnfEndingCreditsSubtitleData, StartTime) == 0x000008, "Member 'FSnfEndingCreditsSubtitleData::StartTime' has a wrong offset!");
static_assert(offsetof(FSnfEndingCreditsSubtitleData, EndTime) == 0x00000C, "Member 'FSnfEndingCreditsSubtitleData::EndTime' has a wrong offset!");
static_assert(offsetof(FSnfEndingCreditsSubtitleData, Text) == 0x000010, "Member 'FSnfEndingCreditsSubtitleData::Text' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActivityRequestEnemyGroupA
// 0x0018 (0x0018 - 0x0000)
struct FSnfGameActivityRequestEnemyGroupA final
{
public:
	TArray<class ASnfJobActor*>                   Enemies;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 GotoActor;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameActivityRequestEnemyGroupA) == 0x000008, "Wrong alignment on FSnfGameActivityRequestEnemyGroupA");
static_assert(sizeof(FSnfGameActivityRequestEnemyGroupA) == 0x000018, "Wrong size on FSnfGameActivityRequestEnemyGroupA");
static_assert(offsetof(FSnfGameActivityRequestEnemyGroupA, Enemies) == 0x000000, "Member 'FSnfGameActivityRequestEnemyGroupA::Enemies' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestEnemyGroupA, GotoActor) == 0x000010, "Member 'FSnfGameActivityRequestEnemyGroupA::GotoActor' has a wrong offset!");

// ScriptStruct Snowfall.SnfVendingMachineShopComponentSetting
// 0x00B0 (0x00B0 - 0x0000)
struct FSnfVendingMachineShopComponentSetting final
{
public:
	class UStaticMesh*                            TargetMesh;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ShopInteractTransform;                             // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ShopInteractCollisionSize;                         // 0x0040(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             AkTransform;                                       // 0x0050(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SphereTickInterval;                                // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAkAudioEvent*>                  SphereEvents;                                      // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AttenuationScalingFactor;                          // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionRefreshInterval;                          // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             OcclusionCollisionChannel;                         // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableChangeRoom;                                  // 0x00A1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDraw;                                        // 0x00A2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A3[0xD];                                       // 0x00A3(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfVendingMachineShopComponentSetting) == 0x000010, "Wrong alignment on FSnfVendingMachineShopComponentSetting");
static_assert(sizeof(FSnfVendingMachineShopComponentSetting) == 0x0000B0, "Wrong size on FSnfVendingMachineShopComponentSetting");
static_assert(offsetof(FSnfVendingMachineShopComponentSetting, TargetMesh) == 0x000000, "Member 'FSnfVendingMachineShopComponentSetting::TargetMesh' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineShopComponentSetting, ShopInteractTransform) == 0x000010, "Member 'FSnfVendingMachineShopComponentSetting::ShopInteractTransform' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineShopComponentSetting, ShopInteractCollisionSize) == 0x000040, "Member 'FSnfVendingMachineShopComponentSetting::ShopInteractCollisionSize' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineShopComponentSetting, AkTransform) == 0x000050, "Member 'FSnfVendingMachineShopComponentSetting::AkTransform' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineShopComponentSetting, SphereTickInterval) == 0x000080, "Member 'FSnfVendingMachineShopComponentSetting::SphereTickInterval' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineShopComponentSetting, SphereEvents) == 0x000088, "Member 'FSnfVendingMachineShopComponentSetting::SphereEvents' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineShopComponentSetting, AttenuationScalingFactor) == 0x000098, "Member 'FSnfVendingMachineShopComponentSetting::AttenuationScalingFactor' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineShopComponentSetting, OcclusionRefreshInterval) == 0x00009C, "Member 'FSnfVendingMachineShopComponentSetting::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineShopComponentSetting, OcclusionCollisionChannel) == 0x0000A0, "Member 'FSnfVendingMachineShopComponentSetting::OcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineShopComponentSetting, EnableChangeRoom) == 0x0000A1, "Member 'FSnfVendingMachineShopComponentSetting::EnableChangeRoom' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineShopComponentSetting, bDebugDraw) == 0x0000A2, "Member 'FSnfVendingMachineShopComponentSetting::bDebugDraw' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndingCreditsData
// 0x0068 (0x0070 - 0x0008)
struct FSnfEndingCreditsData final : public FTableRowBase
{
public:
	ESnfEndingCreditsDataType                     Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text1;                                             // 0x0010(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Text2;                                             // 0x0028(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Text3;                                             // 0x0040(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ESnfEndingCreditsSpaceSizeType                SpaceSizeType;                                     // 0x0058(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfEndingCreditsTextureType                  TextureType;                                       // 0x0059(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TextureOpacity;                                    // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrollSpeed;                                       // 0x0060(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HideTime;                                          // 0x0064(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShowTime;                                          // 0x0068(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfEndingCreditsData) == 0x000008, "Wrong alignment on FSnfEndingCreditsData");
static_assert(sizeof(FSnfEndingCreditsData) == 0x000070, "Wrong size on FSnfEndingCreditsData");
static_assert(offsetof(FSnfEndingCreditsData, Type) == 0x000008, "Member 'FSnfEndingCreditsData::Type' has a wrong offset!");
static_assert(offsetof(FSnfEndingCreditsData, Text1) == 0x000010, "Member 'FSnfEndingCreditsData::Text1' has a wrong offset!");
static_assert(offsetof(FSnfEndingCreditsData, Text2) == 0x000028, "Member 'FSnfEndingCreditsData::Text2' has a wrong offset!");
static_assert(offsetof(FSnfEndingCreditsData, Text3) == 0x000040, "Member 'FSnfEndingCreditsData::Text3' has a wrong offset!");
static_assert(offsetof(FSnfEndingCreditsData, SpaceSizeType) == 0x000058, "Member 'FSnfEndingCreditsData::SpaceSizeType' has a wrong offset!");
static_assert(offsetof(FSnfEndingCreditsData, TextureType) == 0x000059, "Member 'FSnfEndingCreditsData::TextureType' has a wrong offset!");
static_assert(offsetof(FSnfEndingCreditsData, TextureOpacity) == 0x00005C, "Member 'FSnfEndingCreditsData::TextureOpacity' has a wrong offset!");
static_assert(offsetof(FSnfEndingCreditsData, ScrollSpeed) == 0x000060, "Member 'FSnfEndingCreditsData::ScrollSpeed' has a wrong offset!");
static_assert(offsetof(FSnfEndingCreditsData, HideTime) == 0x000064, "Member 'FSnfEndingCreditsData::HideTime' has a wrong offset!");
static_assert(offsetof(FSnfEndingCreditsData, ShowTime) == 0x000068, "Member 'FSnfEndingCreditsData::ShowTime' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessAction
// 0x0010 (0x0010 - 0x0000)
struct FSnfEndlessAction final
{
public:
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessAction) == 0x000004, "Wrong alignment on FSnfEndlessAction");
static_assert(sizeof(FSnfEndlessAction) == 0x000010, "Wrong size on FSnfEndlessAction");
static_assert(offsetof(FSnfEndlessAction, TargetActor) == 0x000000, "Member 'FSnfEndlessAction::TargetActor' has a wrong offset!");
static_assert(offsetof(FSnfEndlessAction, ActionName) == 0x000008, "Member 'FSnfEndlessAction::ActionName' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameEverActivitySave
// 0x002C (0x002C - 0x0000)
struct FSnfGameEverActivitySave final
{
public:
	class FName                                   ActivityCatalog;                                   // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivityFlag;                                      // 0x0008(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SetLocation;                                       // 0x0010(0x000C)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetTime;                                           // 0x001C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckDistance2D;                                   // 0x0020(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CheckTime;                                         // 0x0024(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckWithInSide;                                   // 0x0028(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGameEverActivitySave) == 0x000004, "Wrong alignment on FSnfGameEverActivitySave");
static_assert(sizeof(FSnfGameEverActivitySave) == 0x00002C, "Wrong size on FSnfGameEverActivitySave");
static_assert(offsetof(FSnfGameEverActivitySave, ActivityCatalog) == 0x000000, "Member 'FSnfGameEverActivitySave::ActivityCatalog' has a wrong offset!");
static_assert(offsetof(FSnfGameEverActivitySave, ActivityFlag) == 0x000008, "Member 'FSnfGameEverActivitySave::ActivityFlag' has a wrong offset!");
static_assert(offsetof(FSnfGameEverActivitySave, SetLocation) == 0x000010, "Member 'FSnfGameEverActivitySave::SetLocation' has a wrong offset!");
static_assert(offsetof(FSnfGameEverActivitySave, SetTime) == 0x00001C, "Member 'FSnfGameEverActivitySave::SetTime' has a wrong offset!");
static_assert(offsetof(FSnfGameEverActivitySave, CheckDistance2D) == 0x000020, "Member 'FSnfGameEverActivitySave::CheckDistance2D' has a wrong offset!");
static_assert(offsetof(FSnfGameEverActivitySave, CheckTime) == 0x000024, "Member 'FSnfGameEverActivitySave::CheckTime' has a wrong offset!");
static_assert(offsetof(FSnfGameEverActivitySave, CheckWithInSide) == 0x000028, "Member 'FSnfGameEverActivitySave::CheckWithInSide' has a wrong offset!");

// ScriptStruct Snowfall.SnfPhotoModePlayerFacialInfo
// 0x0020 (0x0020 - 0x0000)
struct FSnfPhotoModePlayerFacialInfo final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfPhotoModePlayerFacialInfo) == 0x000008, "Wrong alignment on FSnfPhotoModePlayerFacialInfo");
static_assert(sizeof(FSnfPhotoModePlayerFacialInfo) == 0x000020, "Wrong size on FSnfPhotoModePlayerFacialInfo");
static_assert(offsetof(FSnfPhotoModePlayerFacialInfo, Title) == 0x000000, "Member 'FSnfPhotoModePlayerFacialInfo::Title' has a wrong offset!");
static_assert(offsetof(FSnfPhotoModePlayerFacialInfo, Index) == 0x000018, "Member 'FSnfPhotoModePlayerFacialInfo::Index' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessChallengeDesignInfo
// 0x0030 (0x0038 - 0x0008)
struct FSnfEndlessChallengeDesignInfo final : public FTableRowBase
{
public:
	ESnfEndlessObjectiveType                      ObjectiveType;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfEndlessTaskType                           TaskType;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfEndlessChallengeValueType                 ValueType;                                         // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdditionAnim;                                     // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ItemClass;                                         // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessChallengeDesignInfo) == 0x000008, "Wrong alignment on FSnfEndlessChallengeDesignInfo");
static_assert(sizeof(FSnfEndlessChallengeDesignInfo) == 0x000038, "Wrong size on FSnfEndlessChallengeDesignInfo");
static_assert(offsetof(FSnfEndlessChallengeDesignInfo, ObjectiveType) == 0x000008, "Member 'FSnfEndlessChallengeDesignInfo::ObjectiveType' has a wrong offset!");
static_assert(offsetof(FSnfEndlessChallengeDesignInfo, TaskType) == 0x000009, "Member 'FSnfEndlessChallengeDesignInfo::TaskType' has a wrong offset!");
static_assert(offsetof(FSnfEndlessChallengeDesignInfo, ValueType) == 0x00000A, "Member 'FSnfEndlessChallengeDesignInfo::ValueType' has a wrong offset!");
static_assert(offsetof(FSnfEndlessChallengeDesignInfo, bAdditionAnim) == 0x00000B, "Member 'FSnfEndlessChallengeDesignInfo::bAdditionAnim' has a wrong offset!");
static_assert(offsetof(FSnfEndlessChallengeDesignInfo, ItemClass) == 0x000010, "Member 'FSnfEndlessChallengeDesignInfo::ItemClass' has a wrong offset!");

// ScriptStruct Snowfall.SnfPhotoModeSaveFigureParameter
// 0x0018 (0x0018 - 0x0000)
struct FSnfPhotoModeSaveFigureParameter final
{
public:
	ESnfFigureType                                Type;                                              // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0004(0x000C)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0010(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0014(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPhotoModeSaveFigureParameter) == 0x000004, "Wrong alignment on FSnfPhotoModeSaveFigureParameter");
static_assert(sizeof(FSnfPhotoModeSaveFigureParameter) == 0x000018, "Wrong size on FSnfPhotoModeSaveFigureParameter");
static_assert(offsetof(FSnfPhotoModeSaveFigureParameter, Type) == 0x000000, "Member 'FSnfPhotoModeSaveFigureParameter::Type' has a wrong offset!");
static_assert(offsetof(FSnfPhotoModeSaveFigureParameter, Location) == 0x000004, "Member 'FSnfPhotoModeSaveFigureParameter::Location' has a wrong offset!");
static_assert(offsetof(FSnfPhotoModeSaveFigureParameter, Yaw) == 0x000010, "Member 'FSnfPhotoModeSaveFigureParameter::Yaw' has a wrong offset!");
static_assert(offsetof(FSnfPhotoModeSaveFigureParameter, Scale) == 0x000014, "Member 'FSnfPhotoModeSaveFigureParameter::Scale' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessChallengeTextSettingInfo
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FSnfEndlessChallengeTextSettingInfo final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfEndlessChallengeTextSettingInfo) == 0x000008, "Wrong alignment on FSnfEndlessChallengeTextSettingInfo");
static_assert(sizeof(FSnfEndlessChallengeTextSettingInfo) == 0x000040, "Wrong size on FSnfEndlessChallengeTextSettingInfo");

// ScriptStruct Snowfall.SnfSimpleFadeParam
// 0x0028 (0x0028 - 0x0000)
struct FSnfSimpleFadeParam final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTime;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendRate;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FadeColor;                                         // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   BlendFunc;                                         // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepFade;                                         // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfSimpleFadeParam) == 0x000004, "Wrong alignment on FSnfSimpleFadeParam");
static_assert(sizeof(FSnfSimpleFadeParam) == 0x000028, "Wrong size on FSnfSimpleFadeParam");
static_assert(offsetof(FSnfSimpleFadeParam, BlendTime) == 0x000000, "Member 'FSnfSimpleFadeParam::BlendTime' has a wrong offset!");
static_assert(offsetof(FSnfSimpleFadeParam, PlayTime) == 0x000004, "Member 'FSnfSimpleFadeParam::PlayTime' has a wrong offset!");
static_assert(offsetof(FSnfSimpleFadeParam, BlendRate) == 0x000008, "Member 'FSnfSimpleFadeParam::BlendRate' has a wrong offset!");
static_assert(offsetof(FSnfSimpleFadeParam, FadeColor) == 0x00000C, "Member 'FSnfSimpleFadeParam::FadeColor' has a wrong offset!");
static_assert(offsetof(FSnfSimpleFadeParam, BlendFunc) == 0x00001C, "Member 'FSnfSimpleFadeParam::BlendFunc' has a wrong offset!");
static_assert(offsetof(FSnfSimpleFadeParam, BlendExp) == 0x000020, "Member 'FSnfSimpleFadeParam::BlendExp' has a wrong offset!");
static_assert(offsetof(FSnfSimpleFadeParam, bKeepFade) == 0x000024, "Member 'FSnfSimpleFadeParam::bKeepFade' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActivityTask
// 0x0078 (0x0078 - 0x0000)
struct alignas(0x08) FSnfGameActivityTask final
{
public:
	uint8                                         Pad_0[0x78];                                       // 0x0000(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGameActivityTask) == 0x000008, "Wrong alignment on FSnfGameActivityTask");
static_assert(sizeof(FSnfGameActivityTask) == 0x000078, "Wrong size on FSnfGameActivityTask");

// ScriptStruct Snowfall.SnfEndlessChallengeCreateItemInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FSnfEndlessChallengeCreateItemInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfEndlessChallengeCreateItemInfo) == 0x000008, "Wrong alignment on FSnfEndlessChallengeCreateItemInfo");
static_assert(sizeof(FSnfEndlessChallengeCreateItemInfo) == 0x000018, "Wrong size on FSnfEndlessChallengeCreateItemInfo");

// ScriptStruct Snowfall.SnfEndlessCheckTargetTask
// 0x0018 (0x0018 - 0x0000)
struct FSnfEndlessCheckTargetTask final
{
public:
	ESnfEndlessTaskType                           TaskType;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         TargetActors;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessCheckTargetTask) == 0x000008, "Wrong alignment on FSnfEndlessCheckTargetTask");
static_assert(sizeof(FSnfEndlessCheckTargetTask) == 0x000018, "Wrong size on FSnfEndlessCheckTargetTask");
static_assert(offsetof(FSnfEndlessCheckTargetTask, TaskType) == 0x000000, "Member 'FSnfEndlessCheckTargetTask::TaskType' has a wrong offset!");
static_assert(offsetof(FSnfEndlessCheckTargetTask, TargetActors) == 0x000008, "Member 'FSnfEndlessCheckTargetTask::TargetActors' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActivityRequestCastTypeC
// 0x0020 (0x0020 - 0x0000)
struct FSnfGameActivityRequestCastTypeC final
{
public:
	class ASnfJobActor*                           JobActor;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkId_A;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkId_B;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkId_C;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameActivityRequestCastTypeC) == 0x000008, "Wrong alignment on FSnfGameActivityRequestCastTypeC");
static_assert(sizeof(FSnfGameActivityRequestCastTypeC) == 0x000020, "Wrong size on FSnfGameActivityRequestCastTypeC");
static_assert(offsetof(FSnfGameActivityRequestCastTypeC, JobActor) == 0x000000, "Member 'FSnfGameActivityRequestCastTypeC::JobActor' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCastTypeC, TalkId_A) == 0x000008, "Member 'FSnfGameActivityRequestCastTypeC::TalkId_A' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCastTypeC, TalkId_B) == 0x000010, "Member 'FSnfGameActivityRequestCastTypeC::TalkId_B' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCastTypeC, TalkId_C) == 0x000018, "Member 'FSnfGameActivityRequestCastTypeC::TalkId_C' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActivityRequestCastTypeA
// 0x0010 (0x0010 - 0x0000)
struct FSnfGameActivityRequestCastTypeA final
{
public:
	class ASnfJobActor*                           JobActor;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkID;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameActivityRequestCastTypeA) == 0x000008, "Wrong alignment on FSnfGameActivityRequestCastTypeA");
static_assert(sizeof(FSnfGameActivityRequestCastTypeA) == 0x000010, "Wrong size on FSnfGameActivityRequestCastTypeA");
static_assert(offsetof(FSnfGameActivityRequestCastTypeA, JobActor) == 0x000000, "Member 'FSnfGameActivityRequestCastTypeA::JobActor' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCastTypeA, TalkID) == 0x000008, "Member 'FSnfGameActivityRequestCastTypeA::TalkID' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActivityRequestEnemyGroupB
// 0x0010 (0x0010 - 0x0000)
struct FSnfGameActivityRequestEnemyGroupB final
{
public:
	TArray<class ASnfJobActor*>                   Enemies;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameActivityRequestEnemyGroupB) == 0x000008, "Wrong alignment on FSnfGameActivityRequestEnemyGroupB");
static_assert(sizeof(FSnfGameActivityRequestEnemyGroupB) == 0x000010, "Wrong size on FSnfGameActivityRequestEnemyGroupB");
static_assert(offsetof(FSnfGameActivityRequestEnemyGroupB, Enemies) == 0x000000, "Member 'FSnfGameActivityRequestEnemyGroupB::Enemies' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActivityRequestWhereIsMamaParam
// 0x00A0 (0x00A0 - 0x0000)
struct FSnfGameActivityRequestWhereIsMamaParam final
{
public:
	struct FSnfGameActivityRequestCastTypeC       ChildCast;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfGameActivityRequestCastTypeA       Child2Cast;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfGameActivityRequestCastTypeC       MamaCast;                                          // 0x0030(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	ETalkCastType                                 Mama2TalkCastType;                                 // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HidingPointMarker;                                 // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         KegareActors;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 MamaIntaractActor;                                 // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LookActor;                                         // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSnfGameActivityRequestEnemyGroupB     EnemyGroupA;                                       // 0x0080(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRotator                               MomRot;                                            // 0x0090(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGameActivityRequestWhereIsMamaParam) == 0x000008, "Wrong alignment on FSnfGameActivityRequestWhereIsMamaParam");
static_assert(sizeof(FSnfGameActivityRequestWhereIsMamaParam) == 0x0000A0, "Wrong size on FSnfGameActivityRequestWhereIsMamaParam");
static_assert(offsetof(FSnfGameActivityRequestWhereIsMamaParam, ChildCast) == 0x000000, "Member 'FSnfGameActivityRequestWhereIsMamaParam::ChildCast' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestWhereIsMamaParam, Child2Cast) == 0x000020, "Member 'FSnfGameActivityRequestWhereIsMamaParam::Child2Cast' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestWhereIsMamaParam, MamaCast) == 0x000030, "Member 'FSnfGameActivityRequestWhereIsMamaParam::MamaCast' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestWhereIsMamaParam, Mama2TalkCastType) == 0x000050, "Member 'FSnfGameActivityRequestWhereIsMamaParam::Mama2TalkCastType' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestWhereIsMamaParam, HidingPointMarker) == 0x000058, "Member 'FSnfGameActivityRequestWhereIsMamaParam::HidingPointMarker' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestWhereIsMamaParam, KegareActors) == 0x000060, "Member 'FSnfGameActivityRequestWhereIsMamaParam::KegareActors' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestWhereIsMamaParam, MamaIntaractActor) == 0x000070, "Member 'FSnfGameActivityRequestWhereIsMamaParam::MamaIntaractActor' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestWhereIsMamaParam, LookActor) == 0x000078, "Member 'FSnfGameActivityRequestWhereIsMamaParam::LookActor' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestWhereIsMamaParam, EnemyGroupA) == 0x000080, "Member 'FSnfGameActivityRequestWhereIsMamaParam::EnemyGroupA' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestWhereIsMamaParam, MomRot) == 0x000090, "Member 'FSnfGameActivityRequestWhereIsMamaParam::MomRot' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessCheckActorSet
// 0x0010 (0x0010 - 0x0000)
struct FSnfEndlessCheckActorSet final
{
public:
	TArray<class AActor*>                         TargetActors;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessCheckActorSet) == 0x000008, "Wrong alignment on FSnfEndlessCheckActorSet");
static_assert(sizeof(FSnfEndlessCheckActorSet) == 0x000010, "Wrong size on FSnfEndlessCheckActorSet");
static_assert(offsetof(FSnfEndlessCheckActorSet, TargetActors) == 0x000000, "Member 'FSnfEndlessCheckActorSet::TargetActors' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessEndingCreditsData
// 0x0040 (0x0048 - 0x0008)
struct FSnfEndlessEndingCreditsData final : public FTableRowBase
{
public:
	ESnfEndlessEndingCreditsDataType              Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text1;                                             // 0x0010(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Text2;                                             // 0x0028(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ESnfEndlessEndingCreditsTextureType           TextureType;                                       // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PageShowTime;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessEndingCreditsData) == 0x000008, "Wrong alignment on FSnfEndlessEndingCreditsData");
static_assert(sizeof(FSnfEndlessEndingCreditsData) == 0x000048, "Wrong size on FSnfEndlessEndingCreditsData");
static_assert(offsetof(FSnfEndlessEndingCreditsData, Type) == 0x000008, "Member 'FSnfEndlessEndingCreditsData::Type' has a wrong offset!");
static_assert(offsetof(FSnfEndlessEndingCreditsData, Text1) == 0x000010, "Member 'FSnfEndlessEndingCreditsData::Text1' has a wrong offset!");
static_assert(offsetof(FSnfEndlessEndingCreditsData, Text2) == 0x000028, "Member 'FSnfEndlessEndingCreditsData::Text2' has a wrong offset!");
static_assert(offsetof(FSnfEndlessEndingCreditsData, TextureType) == 0x000040, "Member 'FSnfEndlessEndingCreditsData::TextureType' has a wrong offset!");
static_assert(offsetof(FSnfEndlessEndingCreditsData, PageShowTime) == 0x000044, "Member 'FSnfEndlessEndingCreditsData::PageShowTime' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameTimerEventItem
// 0x0030 (0x0030 - 0x0000)
struct FSnfGameTimerEventItem final
{
public:
	class FName                                   KeyId;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CatalogId;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Step;                                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timer;                                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTime;                                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlay;                                            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStop;                                            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDraw;                                            // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEvent;                                           // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLockTravel;                                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDead;                                            // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDeadAction;                                      // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInvisible;                                       // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  EntryActor;                                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameTimerEventItem) == 0x000004, "Wrong alignment on FSnfGameTimerEventItem");
static_assert(sizeof(FSnfGameTimerEventItem) == 0x000030, "Wrong size on FSnfGameTimerEventItem");
static_assert(offsetof(FSnfGameTimerEventItem, KeyId) == 0x000000, "Member 'FSnfGameTimerEventItem::KeyId' has a wrong offset!");
static_assert(offsetof(FSnfGameTimerEventItem, CatalogId) == 0x000008, "Member 'FSnfGameTimerEventItem::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfGameTimerEventItem, Step) == 0x000010, "Member 'FSnfGameTimerEventItem::Step' has a wrong offset!");
static_assert(offsetof(FSnfGameTimerEventItem, Timer) == 0x000014, "Member 'FSnfGameTimerEventItem::Timer' has a wrong offset!");
static_assert(offsetof(FSnfGameTimerEventItem, PlayTime) == 0x000018, "Member 'FSnfGameTimerEventItem::PlayTime' has a wrong offset!");
static_assert(offsetof(FSnfGameTimerEventItem, FadeTime) == 0x00001C, "Member 'FSnfGameTimerEventItem::FadeTime' has a wrong offset!");
static_assert(offsetof(FSnfGameTimerEventItem, IsPlay) == 0x000020, "Member 'FSnfGameTimerEventItem::IsPlay' has a wrong offset!");
static_assert(offsetof(FSnfGameTimerEventItem, IsStop) == 0x000021, "Member 'FSnfGameTimerEventItem::IsStop' has a wrong offset!");
static_assert(offsetof(FSnfGameTimerEventItem, IsDraw) == 0x000022, "Member 'FSnfGameTimerEventItem::IsDraw' has a wrong offset!");
static_assert(offsetof(FSnfGameTimerEventItem, IsEvent) == 0x000023, "Member 'FSnfGameTimerEventItem::IsEvent' has a wrong offset!");
static_assert(offsetof(FSnfGameTimerEventItem, IsLockTravel) == 0x000024, "Member 'FSnfGameTimerEventItem::IsLockTravel' has a wrong offset!");
static_assert(offsetof(FSnfGameTimerEventItem, IsDead) == 0x000025, "Member 'FSnfGameTimerEventItem::IsDead' has a wrong offset!");
static_assert(offsetof(FSnfGameTimerEventItem, IsDeadAction) == 0x000026, "Member 'FSnfGameTimerEventItem::IsDeadAction' has a wrong offset!");
static_assert(offsetof(FSnfGameTimerEventItem, IsInvisible) == 0x000027, "Member 'FSnfGameTimerEventItem::IsInvisible' has a wrong offset!");
static_assert(offsetof(FSnfGameTimerEventItem, EntryActor) == 0x000028, "Member 'FSnfGameTimerEventItem::EntryActor' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessSearchLogItem
// 0x00A0 (0x00A8 - 0x0008)
struct FSnfEndlessSearchLogItem final : public FTableRowBase
{
public:
	TArray<struct FSnfEndlessSearchParam>         FoodList;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessSearchParam>         CashList;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessSearchParam>         PartsList;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessSearchParam>         EnemyList;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessSearchParam>         YureiList;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessSearchParam>         YokaiList;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessSearchParam>         Blacklist;                                         // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessSearchParam>         CoinPotList;                                       // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessSearchParam>         CatList;                                           // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessSearchParam>         ReaperList;                                        // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessSearchLogItem) == 0x000008, "Wrong alignment on FSnfEndlessSearchLogItem");
static_assert(sizeof(FSnfEndlessSearchLogItem) == 0x0000A8, "Wrong size on FSnfEndlessSearchLogItem");
static_assert(offsetof(FSnfEndlessSearchLogItem, FoodList) == 0x000008, "Member 'FSnfEndlessSearchLogItem::FoodList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearchLogItem, CashList) == 0x000018, "Member 'FSnfEndlessSearchLogItem::CashList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearchLogItem, PartsList) == 0x000028, "Member 'FSnfEndlessSearchLogItem::PartsList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearchLogItem, EnemyList) == 0x000038, "Member 'FSnfEndlessSearchLogItem::EnemyList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearchLogItem, YureiList) == 0x000048, "Member 'FSnfEndlessSearchLogItem::YureiList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearchLogItem, YokaiList) == 0x000058, "Member 'FSnfEndlessSearchLogItem::YokaiList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearchLogItem, Blacklist) == 0x000068, "Member 'FSnfEndlessSearchLogItem::Blacklist' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearchLogItem, CoinPotList) == 0x000078, "Member 'FSnfEndlessSearchLogItem::CoinPotList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearchLogItem, CatList) == 0x000088, "Member 'FSnfEndlessSearchLogItem::CatList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearchLogItem, ReaperList) == 0x000098, "Member 'FSnfEndlessSearchLogItem::ReaperList' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessSearchLog
// 0x02C8 (0x02D0 - 0x0008)
struct FSnfEndlessSearchLog final : public FTableRowBase
{
public:
	bool                                          IsChange;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NewTime;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OldTime;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSnfEndlessSearchLogItem               AddList;                                           // 0x0030(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSnfEndlessSearchLogItem               DelList;                                           // 0x00D8(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSnfEndlessSearchLogItem               NewLogList;                                        // 0x0180(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSnfEndlessSearchLogItem               OldLogList;                                        // 0x0228(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessSearchLog) == 0x000008, "Wrong alignment on FSnfEndlessSearchLog");
static_assert(sizeof(FSnfEndlessSearchLog) == 0x0002D0, "Wrong size on FSnfEndlessSearchLog");
static_assert(offsetof(FSnfEndlessSearchLog, IsChange) == 0x000008, "Member 'FSnfEndlessSearchLog::IsChange' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearchLog, NewTime) == 0x000010, "Member 'FSnfEndlessSearchLog::NewTime' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearchLog, OldTime) == 0x000020, "Member 'FSnfEndlessSearchLog::OldTime' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearchLog, AddList) == 0x000030, "Member 'FSnfEndlessSearchLog::AddList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearchLog, DelList) == 0x0000D8, "Member 'FSnfEndlessSearchLog::DelList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearchLog, NewLogList) == 0x000180, "Member 'FSnfEndlessSearchLog::NewLogList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSearchLog, OldLogList) == 0x000228, "Member 'FSnfEndlessSearchLog::OldLogList' has a wrong offset!");

// ScriptStruct Snowfall.TourouLayout
// 0x0010 (0x0010 - 0x0000)
struct FTourouLayout final
{
public:
	TArray<struct FTransform>                     Contents;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTourouLayout) == 0x000008, "Wrong alignment on FTourouLayout");
static_assert(sizeof(FTourouLayout) == 0x000010, "Wrong size on FTourouLayout");
static_assert(offsetof(FTourouLayout, Contents) == 0x000000, "Member 'FTourouLayout::Contents' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameCategoryParameter
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FSnfGameCategoryParameter final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGameCategoryParameter) == 0x000004, "Wrong alignment on FSnfGameCategoryParameter");
static_assert(sizeof(FSnfGameCategoryParameter) == 0x00000C, "Wrong size on FSnfGameCategoryParameter");

// ScriptStruct Snowfall.SnfGameActivityCtrlItem
// 0x0020 (0x0020 - 0x0000)
struct FSnfGameActivityCtrlItem final
{
public:
	class FName                                   ActivityCatalog;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHide;                                            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class AActor>>          HideCtrlActorList;                                 // 0x0010(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameActivityCtrlItem) == 0x000008, "Wrong alignment on FSnfGameActivityCtrlItem");
static_assert(sizeof(FSnfGameActivityCtrlItem) == 0x000020, "Wrong size on FSnfGameActivityCtrlItem");
static_assert(offsetof(FSnfGameActivityCtrlItem, ActivityCatalog) == 0x000000, "Member 'FSnfGameActivityCtrlItem::ActivityCatalog' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityCtrlItem, IsHide) == 0x000008, "Member 'FSnfGameActivityCtrlItem::IsHide' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityCtrlItem, HideCtrlActorList) == 0x000010, "Member 'FSnfGameActivityCtrlItem::HideCtrlActorList' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessAchiveInfo
// 0x0048 (0x0050 - 0x0008)
struct FSnfEndlessAchiveInfo final : public FTableRowBase
{
public:
	class FName                                   ChallengeName;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StatName;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0018(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   Reward;                                            // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialCoin;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialBow;                                        // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialTalisman;                                   // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CarryCoin;                                         // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CarryMeal;                                         // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BNetTelemetryId;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessAchiveInfo) == 0x000008, "Wrong alignment on FSnfEndlessAchiveInfo");
static_assert(sizeof(FSnfEndlessAchiveInfo) == 0x000050, "Wrong size on FSnfEndlessAchiveInfo");
static_assert(offsetof(FSnfEndlessAchiveInfo, ChallengeName) == 0x000008, "Member 'FSnfEndlessAchiveInfo::ChallengeName' has a wrong offset!");
static_assert(offsetof(FSnfEndlessAchiveInfo, StatName) == 0x000010, "Member 'FSnfEndlessAchiveInfo::StatName' has a wrong offset!");
static_assert(offsetof(FSnfEndlessAchiveInfo, Title) == 0x000018, "Member 'FSnfEndlessAchiveInfo::Title' has a wrong offset!");
static_assert(offsetof(FSnfEndlessAchiveInfo, Reward) == 0x000030, "Member 'FSnfEndlessAchiveInfo::Reward' has a wrong offset!");
static_assert(offsetof(FSnfEndlessAchiveInfo, InitialCoin) == 0x000038, "Member 'FSnfEndlessAchiveInfo::InitialCoin' has a wrong offset!");
static_assert(offsetof(FSnfEndlessAchiveInfo, InitialBow) == 0x00003C, "Member 'FSnfEndlessAchiveInfo::InitialBow' has a wrong offset!");
static_assert(offsetof(FSnfEndlessAchiveInfo, InitialTalisman) == 0x000040, "Member 'FSnfEndlessAchiveInfo::InitialTalisman' has a wrong offset!");
static_assert(offsetof(FSnfEndlessAchiveInfo, CarryCoin) == 0x000044, "Member 'FSnfEndlessAchiveInfo::CarryCoin' has a wrong offset!");
static_assert(offsetof(FSnfEndlessAchiveInfo, CarryMeal) == 0x000048, "Member 'FSnfEndlessAchiveInfo::CarryMeal' has a wrong offset!");
static_assert(offsetof(FSnfEndlessAchiveInfo, BNetTelemetryId) == 0x00004C, "Member 'FSnfEndlessAchiveInfo::BNetTelemetryId' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessRosaryPowerInfo
// 0x0050 (0x0058 - 0x0008)
struct FSnfEndlessRosaryPowerInfo final : public FTableRowBase
{
public:
	ESnfSkillParam                                Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfEndlessRosaryRandomType                   RandomType;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MainType;                                          // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DownCost;                                          // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DownParam;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Weight;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Pow;                                               // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostMin;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostMax;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParamMin;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParamMax;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrawMin;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrawMax;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seed;                                              // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Caption;                                           // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   Comment;                                           // 0x0050(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessRosaryPowerInfo) == 0x000008, "Wrong alignment on FSnfEndlessRosaryPowerInfo");
static_assert(sizeof(FSnfEndlessRosaryPowerInfo) == 0x000058, "Wrong size on FSnfEndlessRosaryPowerInfo");
static_assert(offsetof(FSnfEndlessRosaryPowerInfo, Type) == 0x000008, "Member 'FSnfEndlessRosaryPowerInfo::Type' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryPowerInfo, RandomType) == 0x000009, "Member 'FSnfEndlessRosaryPowerInfo::RandomType' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryPowerInfo, MainType) == 0x00000A, "Member 'FSnfEndlessRosaryPowerInfo::MainType' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryPowerInfo, DownCost) == 0x00000B, "Member 'FSnfEndlessRosaryPowerInfo::DownCost' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryPowerInfo, DownParam) == 0x00000C, "Member 'FSnfEndlessRosaryPowerInfo::DownParam' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryPowerInfo, Weight) == 0x000010, "Member 'FSnfEndlessRosaryPowerInfo::Weight' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryPowerInfo, Pow) == 0x000014, "Member 'FSnfEndlessRosaryPowerInfo::Pow' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryPowerInfo, CostMin) == 0x000018, "Member 'FSnfEndlessRosaryPowerInfo::CostMin' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryPowerInfo, CostMax) == 0x00001C, "Member 'FSnfEndlessRosaryPowerInfo::CostMax' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryPowerInfo, ParamMin) == 0x000020, "Member 'FSnfEndlessRosaryPowerInfo::ParamMin' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryPowerInfo, ParamMax) == 0x000024, "Member 'FSnfEndlessRosaryPowerInfo::ParamMax' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryPowerInfo, DrawMin) == 0x000028, "Member 'FSnfEndlessRosaryPowerInfo::DrawMin' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryPowerInfo, DrawMax) == 0x00002C, "Member 'FSnfEndlessRosaryPowerInfo::DrawMax' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryPowerInfo, Seed) == 0x000030, "Member 'FSnfEndlessRosaryPowerInfo::Seed' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryPowerInfo, Caption) == 0x000038, "Member 'FSnfEndlessRosaryPowerInfo::Caption' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryPowerInfo, Comment) == 0x000050, "Member 'FSnfEndlessRosaryPowerInfo::Comment' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActivityStep
// 0x0180 (0x0188 - 0x0008)
struct FSnfGameActivityStep final : public FTableRowBase
{
public:
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Prev;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Draw;                                              // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Save;                                              // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          End;                                               // 0x0026(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfGameActivityMarkType                      MarkType;                                          // 0x0027(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfGameActivityCheck                         Check;                                             // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfGameCastType                              Target;                                            // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfGameCastType                              MarkTarget;                                        // 0x003A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckFlag;                                         // 0x003B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CheckCount;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CheckIndex;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckLength;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CheckName;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CheckClass;                                        // 0x0050(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              CheckTable;                                        // 0x0078(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  CheckTags;                                         // 0x00A0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FName>                           CheckNameList;                                     // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          CheckStepOr;                                       // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CheckStepList;                                     // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 CheckNotStepList;                                  // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ESnfGameCastType>                      CheckBeginList;                                    // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ESnfGameCastType>                      CheckCastList;                                     // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ESnfGameCastType>                      CheckCastNoFadeList;                               // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<ESnfGameCastType>                      CheckCastListForFade;                              // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FSnfGameActivityAction>         PreCheckActions;                                   // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfGameActivityAction>         BeginActions;                                      // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfGameActivityAction>         EndActions;                                        // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfGameActivityAction>         CancelActions;                                     // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   PSNActivityTaskId;                                 // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BNetTelemetryId;                                   // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGameActivityStep) == 0x000008, "Wrong alignment on FSnfGameActivityStep");
static_assert(sizeof(FSnfGameActivityStep) == 0x000188, "Wrong size on FSnfGameActivityStep");
static_assert(offsetof(FSnfGameActivityStep, Title) == 0x000008, "Member 'FSnfGameActivityStep::Title' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, Prev) == 0x000020, "Member 'FSnfGameActivityStep::Prev' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, Draw) == 0x000024, "Member 'FSnfGameActivityStep::Draw' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, Save) == 0x000025, "Member 'FSnfGameActivityStep::Save' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, End) == 0x000026, "Member 'FSnfGameActivityStep::End' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, MarkType) == 0x000027, "Member 'FSnfGameActivityStep::MarkType' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, Comment) == 0x000028, "Member 'FSnfGameActivityStep::Comment' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, Check) == 0x000038, "Member 'FSnfGameActivityStep::Check' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, Target) == 0x000039, "Member 'FSnfGameActivityStep::Target' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, MarkTarget) == 0x00003A, "Member 'FSnfGameActivityStep::MarkTarget' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, CheckFlag) == 0x00003B, "Member 'FSnfGameActivityStep::CheckFlag' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, CheckCount) == 0x00003C, "Member 'FSnfGameActivityStep::CheckCount' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, CheckIndex) == 0x000040, "Member 'FSnfGameActivityStep::CheckIndex' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, CheckLength) == 0x000044, "Member 'FSnfGameActivityStep::CheckLength' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, CheckName) == 0x000048, "Member 'FSnfGameActivityStep::CheckName' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, CheckClass) == 0x000050, "Member 'FSnfGameActivityStep::CheckClass' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, CheckTable) == 0x000078, "Member 'FSnfGameActivityStep::CheckTable' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, CheckTags) == 0x0000A0, "Member 'FSnfGameActivityStep::CheckTags' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, CheckNameList) == 0x0000C0, "Member 'FSnfGameActivityStep::CheckNameList' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, CheckStepOr) == 0x0000D0, "Member 'FSnfGameActivityStep::CheckStepOr' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, CheckStepList) == 0x0000D8, "Member 'FSnfGameActivityStep::CheckStepList' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, CheckNotStepList) == 0x0000E8, "Member 'FSnfGameActivityStep::CheckNotStepList' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, CheckBeginList) == 0x0000F8, "Member 'FSnfGameActivityStep::CheckBeginList' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, CheckCastList) == 0x000108, "Member 'FSnfGameActivityStep::CheckCastList' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, CheckCastNoFadeList) == 0x000118, "Member 'FSnfGameActivityStep::CheckCastNoFadeList' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, CheckCastListForFade) == 0x000128, "Member 'FSnfGameActivityStep::CheckCastListForFade' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, PreCheckActions) == 0x000138, "Member 'FSnfGameActivityStep::PreCheckActions' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, BeginActions) == 0x000148, "Member 'FSnfGameActivityStep::BeginActions' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, EndActions) == 0x000158, "Member 'FSnfGameActivityStep::EndActions' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, CancelActions) == 0x000168, "Member 'FSnfGameActivityStep::CancelActions' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, PSNActivityTaskId) == 0x000178, "Member 'FSnfGameActivityStep::PSNActivityTaskId' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityStep, BNetTelemetryId) == 0x000180, "Member 'FSnfGameActivityStep::BNetTelemetryId' has a wrong offset!");

// ScriptStruct Snowfall.SnfVendingMachineReplaceSetting
// 0x0010 (0x0010 - 0x0000)
struct FSnfVendingMachineReplaceSetting final
{
public:
	class UStaticMesh*                            OldMachineMesh;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            NewMachineMesh;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfVendingMachineReplaceSetting) == 0x000008, "Wrong alignment on FSnfVendingMachineReplaceSetting");
static_assert(sizeof(FSnfVendingMachineReplaceSetting) == 0x000010, "Wrong size on FSnfVendingMachineReplaceSetting");
static_assert(offsetof(FSnfVendingMachineReplaceSetting, OldMachineMesh) == 0x000000, "Member 'FSnfVendingMachineReplaceSetting::OldMachineMesh' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineReplaceSetting, NewMachineMesh) == 0x000008, "Member 'FSnfVendingMachineReplaceSetting::NewMachineMesh' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessRosaryParam
// 0x0058 (0x0058 - 0x0000)
struct FSnfEndlessRosaryParam final
{
public:
	TMap<ESnfSkillParam, float>                   Param;                                             // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         Parts;                                             // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfEndlessRosaryParam) == 0x000008, "Wrong alignment on FSnfEndlessRosaryParam");
static_assert(sizeof(FSnfEndlessRosaryParam) == 0x000058, "Wrong size on FSnfEndlessRosaryParam");
static_assert(offsetof(FSnfEndlessRosaryParam, Param) == 0x000000, "Member 'FSnfEndlessRosaryParam::Param' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryParam, Parts) == 0x000050, "Member 'FSnfEndlessRosaryParam::Parts' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessRosaryInfo
// 0x0048 (0x0050 - 0x0008)
struct FSnfEndlessRosaryInfo final : public FTableRowBase
{
public:
	ESnfEndlessRosaryType                         Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CatalogId;                                         // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnlockLevel;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessRosaryParam>         Params;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         ModelId;                                           // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BNetTelemetryId;                                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Tags;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, AdvancedDisplay, NativeAccessSpecifierPublic)
	class FName                                   Comment;                                           // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessRosaryInfo) == 0x000008, "Wrong alignment on FSnfEndlessRosaryInfo");
static_assert(sizeof(FSnfEndlessRosaryInfo) == 0x000050, "Wrong size on FSnfEndlessRosaryInfo");
static_assert(offsetof(FSnfEndlessRosaryInfo, Type) == 0x000008, "Member 'FSnfEndlessRosaryInfo::Type' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryInfo, CatalogId) == 0x00000C, "Member 'FSnfEndlessRosaryInfo::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryInfo, UnlockLevel) == 0x000014, "Member 'FSnfEndlessRosaryInfo::UnlockLevel' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryInfo, Params) == 0x000018, "Member 'FSnfEndlessRosaryInfo::Params' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryInfo, ModelId) == 0x000028, "Member 'FSnfEndlessRosaryInfo::ModelId' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryInfo, Level) == 0x00002C, "Member 'FSnfEndlessRosaryInfo::Level' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryInfo, BNetTelemetryId) == 0x000030, "Member 'FSnfEndlessRosaryInfo::BNetTelemetryId' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryInfo, Tags) == 0x000038, "Member 'FSnfEndlessRosaryInfo::Tags' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRosaryInfo, Comment) == 0x000048, "Member 'FSnfEndlessRosaryInfo::Comment' has a wrong offset!");

// ScriptStruct Snowfall.SnfOmikujiTextureData
// 0x0118 (0x0118 - 0x0000)
struct FSnfOmikujiTextureData final
{
public:
	TSoftObjectPtr<class UTexture2D>              ResultF1TexturePath;                               // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ResultF2TexturePath;                               // 0x0028(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ResultF3TexturePath;                               // 0x0050(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ResultF4TexturePath;                               // 0x0078(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ResultB1TexturePath;                               // 0x00A0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ResultB3TexturePath;                               // 0x00C8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ResultB4TexturePath;                               // 0x00F0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfOmikujiTextureData) == 0x000008, "Wrong alignment on FSnfOmikujiTextureData");
static_assert(sizeof(FSnfOmikujiTextureData) == 0x000118, "Wrong size on FSnfOmikujiTextureData");
static_assert(offsetof(FSnfOmikujiTextureData, ResultF1TexturePath) == 0x000000, "Member 'FSnfOmikujiTextureData::ResultF1TexturePath' has a wrong offset!");
static_assert(offsetof(FSnfOmikujiTextureData, ResultF2TexturePath) == 0x000028, "Member 'FSnfOmikujiTextureData::ResultF2TexturePath' has a wrong offset!");
static_assert(offsetof(FSnfOmikujiTextureData, ResultF3TexturePath) == 0x000050, "Member 'FSnfOmikujiTextureData::ResultF3TexturePath' has a wrong offset!");
static_assert(offsetof(FSnfOmikujiTextureData, ResultF4TexturePath) == 0x000078, "Member 'FSnfOmikujiTextureData::ResultF4TexturePath' has a wrong offset!");
static_assert(offsetof(FSnfOmikujiTextureData, ResultB1TexturePath) == 0x0000A0, "Member 'FSnfOmikujiTextureData::ResultB1TexturePath' has a wrong offset!");
static_assert(offsetof(FSnfOmikujiTextureData, ResultB3TexturePath) == 0x0000C8, "Member 'FSnfOmikujiTextureData::ResultB3TexturePath' has a wrong offset!");
static_assert(offsetof(FSnfOmikujiTextureData, ResultB4TexturePath) == 0x0000F0, "Member 'FSnfOmikujiTextureData::ResultB4TexturePath' has a wrong offset!");

// ScriptStruct Snowfall.SnfTransferTelephoneEffectFloatValue
// 0x0008 (0x0008 - 0x0000)
struct FSnfTransferTelephoneEffectFloatValue final
{
public:
	float                                         Default;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Peak;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTransferTelephoneEffectFloatValue) == 0x000004, "Wrong alignment on FSnfTransferTelephoneEffectFloatValue");
static_assert(sizeof(FSnfTransferTelephoneEffectFloatValue) == 0x000008, "Wrong size on FSnfTransferTelephoneEffectFloatValue");
static_assert(offsetof(FSnfTransferTelephoneEffectFloatValue, Default) == 0x000000, "Member 'FSnfTransferTelephoneEffectFloatValue::Default' has a wrong offset!");
static_assert(offsetof(FSnfTransferTelephoneEffectFloatValue, Peak) == 0x000004, "Member 'FSnfTransferTelephoneEffectFloatValue::Peak' has a wrong offset!");

// ScriptStruct Snowfall.SnfBuddySaveData
// 0x000C (0x000C - 0x0000)
struct FSnfBuddySaveData final
{
public:
	uint32                                        Flag;                                              // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        UniqueReadFlag;                                    // 0x0004(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastPlayTime;                                      // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfBuddySaveData) == 0x000004, "Wrong alignment on FSnfBuddySaveData");
static_assert(sizeof(FSnfBuddySaveData) == 0x00000C, "Wrong size on FSnfBuddySaveData");
static_assert(offsetof(FSnfBuddySaveData, Flag) == 0x000000, "Member 'FSnfBuddySaveData::Flag' has a wrong offset!");
static_assert(offsetof(FSnfBuddySaveData, UniqueReadFlag) == 0x000004, "Member 'FSnfBuddySaveData::UniqueReadFlag' has a wrong offset!");
static_assert(offsetof(FSnfBuddySaveData, LastPlayTime) == 0x000008, "Member 'FSnfBuddySaveData::LastPlayTime' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessSkillInfo
// 0x0078 (0x0080 - 0x0008)
struct FSnfEndlessSkillInfo final : public FTableRowBase
{
public:
	class FName                                   CatalogId;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfEndlessSkillType                          Type;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfEndlessSkillType                          LockSkill;                                         // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LockLevel;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Point;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ESnfSkillParam, float>                   Param;                                             // 0x0020(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         BNetTelemetryId;                                   // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Comment;                                           // 0x0074(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfEndlessSkillInfo) == 0x000008, "Wrong alignment on FSnfEndlessSkillInfo");
static_assert(sizeof(FSnfEndlessSkillInfo) == 0x000080, "Wrong size on FSnfEndlessSkillInfo");
static_assert(offsetof(FSnfEndlessSkillInfo, CatalogId) == 0x000008, "Member 'FSnfEndlessSkillInfo::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSkillInfo, Type) == 0x000010, "Member 'FSnfEndlessSkillInfo::Type' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSkillInfo, LockSkill) == 0x000011, "Member 'FSnfEndlessSkillInfo::LockSkill' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSkillInfo, LockLevel) == 0x000014, "Member 'FSnfEndlessSkillInfo::LockLevel' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSkillInfo, Point) == 0x000018, "Member 'FSnfEndlessSkillInfo::Point' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSkillInfo, Param) == 0x000020, "Member 'FSnfEndlessSkillInfo::Param' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSkillInfo, BNetTelemetryId) == 0x000070, "Member 'FSnfEndlessSkillInfo::BNetTelemetryId' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSkillInfo, Comment) == 0x000074, "Member 'FSnfEndlessSkillInfo::Comment' has a wrong offset!");

// ScriptStruct Snowfall.EndlessGoalAction
// 0x0010 (0x0010 - 0x0000)
struct FEndlessGoalAction final
{
public:
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndlessGoalAction) == 0x000004, "Wrong alignment on FEndlessGoalAction");
static_assert(sizeof(FEndlessGoalAction) == 0x000010, "Wrong size on FEndlessGoalAction");
static_assert(offsetof(FEndlessGoalAction, TargetActor) == 0x000000, "Member 'FEndlessGoalAction::TargetActor' has a wrong offset!");
static_assert(offsetof(FEndlessGoalAction, ActionName) == 0x000008, "Member 'FEndlessGoalAction::ActionName' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameBuddyCatalogTalkParam
// 0x0010 (0x0010 - 0x0000)
struct FSnfGameBuddyCatalogTalkParam final
{
public:
	TArray<class FName>                           TalkIds;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameBuddyCatalogTalkParam) == 0x000008, "Wrong alignment on FSnfGameBuddyCatalogTalkParam");
static_assert(sizeof(FSnfGameBuddyCatalogTalkParam) == 0x000010, "Wrong size on FSnfGameBuddyCatalogTalkParam");
static_assert(offsetof(FSnfGameBuddyCatalogTalkParam, TalkIds) == 0x000000, "Member 'FSnfGameBuddyCatalogTalkParam::TalkIds' has a wrong offset!");

// ScriptStruct Snowfall.EndlessHellStartAction
// 0x0018 (0x0018 - 0x0000)
struct FEndlessHellStartAction final
{
public:
	TArray<class FName>                           ActivityActionList;                                // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndlessHellStartAction) == 0x000008, "Wrong alignment on FEndlessHellStartAction");
static_assert(sizeof(FEndlessHellStartAction) == 0x000018, "Wrong size on FEndlessHellStartAction");
static_assert(offsetof(FEndlessHellStartAction, ActivityActionList) == 0x000000, "Member 'FEndlessHellStartAction::ActivityActionList' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessMenuRosarySet
// 0x00C8 (0x00C8 - 0x0000)
struct FSnfEndlessMenuRosarySet final
{
public:
	struct FLinearColor                           ColorBg;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorIcon;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorMark;                                         // 0x0020(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorBar;                                          // 0x0030(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorLine;                                         // 0x0040(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             TextureMark;                                       // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorTitleText;                                    // 0x0058(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorLevel;                                        // 0x0068(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorNowText;                                      // 0x0078(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorNextText;                                     // 0x0088(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorArrowText;                                    // 0x0098(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorTokenIcon;                                    // 0x00A8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorTokenText;                                    // 0x00B8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessMenuRosarySet) == 0x000008, "Wrong alignment on FSnfEndlessMenuRosarySet");
static_assert(sizeof(FSnfEndlessMenuRosarySet) == 0x0000C8, "Wrong size on FSnfEndlessMenuRosarySet");
static_assert(offsetof(FSnfEndlessMenuRosarySet, ColorBg) == 0x000000, "Member 'FSnfEndlessMenuRosarySet::ColorBg' has a wrong offset!");
static_assert(offsetof(FSnfEndlessMenuRosarySet, ColorIcon) == 0x000010, "Member 'FSnfEndlessMenuRosarySet::ColorIcon' has a wrong offset!");
static_assert(offsetof(FSnfEndlessMenuRosarySet, ColorMark) == 0x000020, "Member 'FSnfEndlessMenuRosarySet::ColorMark' has a wrong offset!");
static_assert(offsetof(FSnfEndlessMenuRosarySet, ColorBar) == 0x000030, "Member 'FSnfEndlessMenuRosarySet::ColorBar' has a wrong offset!");
static_assert(offsetof(FSnfEndlessMenuRosarySet, ColorLine) == 0x000040, "Member 'FSnfEndlessMenuRosarySet::ColorLine' has a wrong offset!");
static_assert(offsetof(FSnfEndlessMenuRosarySet, TextureMark) == 0x000050, "Member 'FSnfEndlessMenuRosarySet::TextureMark' has a wrong offset!");
static_assert(offsetof(FSnfEndlessMenuRosarySet, ColorTitleText) == 0x000058, "Member 'FSnfEndlessMenuRosarySet::ColorTitleText' has a wrong offset!");
static_assert(offsetof(FSnfEndlessMenuRosarySet, ColorLevel) == 0x000068, "Member 'FSnfEndlessMenuRosarySet::ColorLevel' has a wrong offset!");
static_assert(offsetof(FSnfEndlessMenuRosarySet, ColorNowText) == 0x000078, "Member 'FSnfEndlessMenuRosarySet::ColorNowText' has a wrong offset!");
static_assert(offsetof(FSnfEndlessMenuRosarySet, ColorNextText) == 0x000088, "Member 'FSnfEndlessMenuRosarySet::ColorNextText' has a wrong offset!");
static_assert(offsetof(FSnfEndlessMenuRosarySet, ColorArrowText) == 0x000098, "Member 'FSnfEndlessMenuRosarySet::ColorArrowText' has a wrong offset!");
static_assert(offsetof(FSnfEndlessMenuRosarySet, ColorTokenIcon) == 0x0000A8, "Member 'FSnfEndlessMenuRosarySet::ColorTokenIcon' has a wrong offset!");
static_assert(offsetof(FSnfEndlessMenuRosarySet, ColorTokenText) == 0x0000B8, "Member 'FSnfEndlessMenuRosarySet::ColorTokenText' has a wrong offset!");

// ScriptStruct Snowfall.SnfPhotoModeCameraStampParameter
// 0x0050 (0x0050 - 0x0000)
struct FSnfPhotoModeCameraStampParameter final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Texture;                                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPhotoModeCameraStampParameter) == 0x000008, "Wrong alignment on FSnfPhotoModeCameraStampParameter");
static_assert(sizeof(FSnfPhotoModeCameraStampParameter) == 0x000050, "Wrong size on FSnfPhotoModeCameraStampParameter");
static_assert(offsetof(FSnfPhotoModeCameraStampParameter, Texture) == 0x000048, "Member 'FSnfPhotoModeCameraStampParameter::Texture' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameBuddyCategoryTalkParam
// 0x0018 (0x0018 - 0x0000)
struct FSnfGameBuddyCategoryTalkParam final
{
public:
	class FName                                   FirstTalkId;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TalkIds;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameBuddyCategoryTalkParam) == 0x000008, "Wrong alignment on FSnfGameBuddyCategoryTalkParam");
static_assert(sizeof(FSnfGameBuddyCategoryTalkParam) == 0x000018, "Wrong size on FSnfGameBuddyCategoryTalkParam");
static_assert(offsetof(FSnfGameBuddyCategoryTalkParam, FirstTalkId) == 0x000000, "Member 'FSnfGameBuddyCategoryTalkParam::FirstTalkId' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyCategoryTalkParam, TalkIds) == 0x000008, "Member 'FSnfGameBuddyCategoryTalkParam::TalkIds' has a wrong offset!");

// ScriptStruct Snowfall.BuddyTalkSequenceConditions
// 0x0008 (0x0008 - 0x0000)
struct FBuddyTalkSequenceConditions final
{
public:
	int32                                         Min;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MAX;                                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuddyTalkSequenceConditions) == 0x000004, "Wrong alignment on FBuddyTalkSequenceConditions");
static_assert(sizeof(FBuddyTalkSequenceConditions) == 0x000008, "Wrong size on FBuddyTalkSequenceConditions");
static_assert(offsetof(FBuddyTalkSequenceConditions, Min) == 0x000000, "Member 'FBuddyTalkSequenceConditions::Min' has a wrong offset!");
static_assert(offsetof(FBuddyTalkSequenceConditions, MAX) == 0x000004, "Member 'FBuddyTalkSequenceConditions::MAX' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameBuddyCategoryInfo
// 0x00C8 (0x00D0 - 0x0008)
struct FSnfGameBuddyCategoryInfo final : public FTableRowBase
{
public:
	class FString                                 DevComment;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuddyEnableType                              EnableType;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOneTime;                                          // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataTable>              TalkTablePath;                                     // 0x0020(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              TalkTablePath2;                                    // 0x0048(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBuddyTalkSequenceConditions           GameSequence;                                      // 0x0070(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EBuddyPlayType                                PlayType;                                          // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EBuddyPhase, struct FSnfGameBuddyCategoryTalkParam> PhaseMap;                                          // 0x0080(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameBuddyCategoryInfo) == 0x000008, "Wrong alignment on FSnfGameBuddyCategoryInfo");
static_assert(sizeof(FSnfGameBuddyCategoryInfo) == 0x0000D0, "Wrong size on FSnfGameBuddyCategoryInfo");
static_assert(offsetof(FSnfGameBuddyCategoryInfo, DevComment) == 0x000008, "Member 'FSnfGameBuddyCategoryInfo::DevComment' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyCategoryInfo, EnableType) == 0x000018, "Member 'FSnfGameBuddyCategoryInfo::EnableType' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyCategoryInfo, bOneTime) == 0x000019, "Member 'FSnfGameBuddyCategoryInfo::bOneTime' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyCategoryInfo, TalkTablePath) == 0x000020, "Member 'FSnfGameBuddyCategoryInfo::TalkTablePath' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyCategoryInfo, TalkTablePath2) == 0x000048, "Member 'FSnfGameBuddyCategoryInfo::TalkTablePath2' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyCategoryInfo, GameSequence) == 0x000070, "Member 'FSnfGameBuddyCategoryInfo::GameSequence' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyCategoryInfo, PlayType) == 0x000078, "Member 'FSnfGameBuddyCategoryInfo::PlayType' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyCategoryInfo, PhaseMap) == 0x000080, "Member 'FSnfGameBuddyCategoryInfo::PhaseMap' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessRandomRosaryActorList
// 0x0020 (0x0020 - 0x0000)
struct FSnfEndlessRandomRosaryActorList final
{
public:
	TArray<TWeakObjectPtr<class ASnfEndlessRandomRosaryActor>> RandomRosaryActors;                                // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UStaticMeshComponent*>           PlaceStaticMeshComponents;                         // 0x0010(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessRandomRosaryActorList) == 0x000008, "Wrong alignment on FSnfEndlessRandomRosaryActorList");
static_assert(sizeof(FSnfEndlessRandomRosaryActorList) == 0x000020, "Wrong size on FSnfEndlessRandomRosaryActorList");
static_assert(offsetof(FSnfEndlessRandomRosaryActorList, RandomRosaryActors) == 0x000000, "Member 'FSnfEndlessRandomRosaryActorList::RandomRosaryActors' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRandomRosaryActorList, PlaceStaticMeshComponents) == 0x000010, "Member 'FSnfEndlessRandomRosaryActorList::PlaceStaticMeshComponents' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkShopSelectBuffAction
// 0x0010 (0x0010 - 0x0000)
struct FSnfTalkShopSelectBuffAction final
{
public:
	int32                                         Money;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USnfTalkShopBuffDataAsset*              BuffDataAsset;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalkShopSelectBuffAction) == 0x000008, "Wrong alignment on FSnfTalkShopSelectBuffAction");
static_assert(sizeof(FSnfTalkShopSelectBuffAction) == 0x000010, "Wrong size on FSnfTalkShopSelectBuffAction");
static_assert(offsetof(FSnfTalkShopSelectBuffAction, Money) == 0x000000, "Member 'FSnfTalkShopSelectBuffAction::Money' has a wrong offset!");
static_assert(offsetof(FSnfTalkShopSelectBuffAction, BuffDataAsset) == 0x000008, "Member 'FSnfTalkShopSelectBuffAction::BuffDataAsset' has a wrong offset!");

// ScriptStruct Snowfall.EndlessResultItemRecordInfo
// 0x0020 (0x0020 - 0x0000)
struct FEndlessResultItemRecordInfo final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	EEndlessResultItemType                        ItemType;                                          // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndlessResultItemRecordInfo) == 0x000008, "Wrong alignment on FEndlessResultItemRecordInfo");
static_assert(sizeof(FEndlessResultItemRecordInfo) == 0x000020, "Wrong size on FEndlessResultItemRecordInfo");
static_assert(offsetof(FEndlessResultItemRecordInfo, Title) == 0x000000, "Member 'FEndlessResultItemRecordInfo::Title' has a wrong offset!");
static_assert(offsetof(FEndlessResultItemRecordInfo, ItemType) == 0x000018, "Member 'FEndlessResultItemRecordInfo::ItemType' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameBuddyMergeTable
// 0x0010 (0x0010 - 0x0000)
struct FSnfGameBuddyMergeTable final
{
public:
	class UDataTable*                             SourceTable;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             DestinationTable;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameBuddyMergeTable) == 0x000008, "Wrong alignment on FSnfGameBuddyMergeTable");
static_assert(sizeof(FSnfGameBuddyMergeTable) == 0x000010, "Wrong size on FSnfGameBuddyMergeTable");
static_assert(offsetof(FSnfGameBuddyMergeTable, SourceTable) == 0x000000, "Member 'FSnfGameBuddyMergeTable::SourceTable' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyMergeTable, DestinationTable) == 0x000008, "Member 'FSnfGameBuddyMergeTable::DestinationTable' has a wrong offset!");

// ScriptStruct Snowfall.EndlessResultPageInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FEndlessResultPageInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndlessResultPageInfo) == 0x000008, "Wrong alignment on FEndlessResultPageInfo");
static_assert(sizeof(FEndlessResultPageInfo) == 0x000028, "Wrong size on FEndlessResultPageInfo");

// ScriptStruct Snowfall.SnfTakeDamagePropsActorDamagePointSetting
// 0x0140 (0x0140 - 0x0000)
struct FSnfTakeDamagePropsActorDamagePointSetting final
{
public:
	int32                                         PointID;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBrokenDelete;                                     // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0xB];                                        // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         HPMax;                                             // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackCountToBreakPoint;                           // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      BrokenRatePlayList;                                // 0x0048(0x0050)(Edit, NativeAccessSpecifierPublic)
	class UStaticMesh*                            OverrideStaticMesh;                                // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  OverrideMaterials;                                 // 0x00A0(0x0050)(Edit, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     OverrideFXActor;                                   // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CollisionOffset;                                   // 0x0100(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CollisionExtentOffset;                             // 0x0130(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfTakeDamagePropsActorDamagePointSetting) == 0x000010, "Wrong alignment on FSnfTakeDamagePropsActorDamagePointSetting");
static_assert(sizeof(FSnfTakeDamagePropsActorDamagePointSetting) == 0x000140, "Wrong size on FSnfTakeDamagePropsActorDamagePointSetting");
static_assert(offsetof(FSnfTakeDamagePropsActorDamagePointSetting, PointID) == 0x000000, "Member 'FSnfTakeDamagePropsActorDamagePointSetting::PointID' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorDamagePointSetting, bBrokenDelete) == 0x000004, "Member 'FSnfTakeDamagePropsActorDamagePointSetting::bBrokenDelete' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorDamagePointSetting, Transform) == 0x000010, "Member 'FSnfTakeDamagePropsActorDamagePointSetting::Transform' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorDamagePointSetting, HPMax) == 0x000040, "Member 'FSnfTakeDamagePropsActorDamagePointSetting::HPMax' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorDamagePointSetting, AttackCountToBreakPoint) == 0x000044, "Member 'FSnfTakeDamagePropsActorDamagePointSetting::AttackCountToBreakPoint' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorDamagePointSetting, BrokenRatePlayList) == 0x000048, "Member 'FSnfTakeDamagePropsActorDamagePointSetting::BrokenRatePlayList' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorDamagePointSetting, OverrideStaticMesh) == 0x000098, "Member 'FSnfTakeDamagePropsActorDamagePointSetting::OverrideStaticMesh' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorDamagePointSetting, OverrideMaterials) == 0x0000A0, "Member 'FSnfTakeDamagePropsActorDamagePointSetting::OverrideMaterials' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorDamagePointSetting, OverrideFXActor) == 0x0000F0, "Member 'FSnfTakeDamagePropsActorDamagePointSetting::OverrideFXActor' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorDamagePointSetting, CollisionOffset) == 0x000100, "Member 'FSnfTakeDamagePropsActorDamagePointSetting::CollisionOffset' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorDamagePointSetting, CollisionExtentOffset) == 0x000130, "Member 'FSnfTakeDamagePropsActorDamagePointSetting::CollisionExtentOffset' has a wrong offset!");

// ScriptStruct Snowfall.EndlessShopAnimationContainer
// 0x0120 (0x0120 - 0x0000)
struct FEndlessShopAnimationContainer final
{
public:
	TSoftObjectPtr<class UAnimMontage>            AnimMOInitialIdle;                                 // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            AnimMOStartInteracted;                             // 0x0028(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            AnimMOEndInteracted;                               // 0x0050(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            AnimMOAction;                                      // 0x0078(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            AnimMOStartReaction;                               // 0x00A0(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            AnimMOEndReaction;                                 // 0x00C8(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             SuppliedTransformOffset;                           // 0x00F0(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndlessShopAnimationContainer) == 0x000010, "Wrong alignment on FEndlessShopAnimationContainer");
static_assert(sizeof(FEndlessShopAnimationContainer) == 0x000120, "Wrong size on FEndlessShopAnimationContainer");
static_assert(offsetof(FEndlessShopAnimationContainer, AnimMOInitialIdle) == 0x000000, "Member 'FEndlessShopAnimationContainer::AnimMOInitialIdle' has a wrong offset!");
static_assert(offsetof(FEndlessShopAnimationContainer, AnimMOStartInteracted) == 0x000028, "Member 'FEndlessShopAnimationContainer::AnimMOStartInteracted' has a wrong offset!");
static_assert(offsetof(FEndlessShopAnimationContainer, AnimMOEndInteracted) == 0x000050, "Member 'FEndlessShopAnimationContainer::AnimMOEndInteracted' has a wrong offset!");
static_assert(offsetof(FEndlessShopAnimationContainer, AnimMOAction) == 0x000078, "Member 'FEndlessShopAnimationContainer::AnimMOAction' has a wrong offset!");
static_assert(offsetof(FEndlessShopAnimationContainer, AnimMOStartReaction) == 0x0000A0, "Member 'FEndlessShopAnimationContainer::AnimMOStartReaction' has a wrong offset!");
static_assert(offsetof(FEndlessShopAnimationContainer, AnimMOEndReaction) == 0x0000C8, "Member 'FEndlessShopAnimationContainer::AnimMOEndReaction' has a wrong offset!");
static_assert(offsetof(FEndlessShopAnimationContainer, SuppliedTransformOffset) == 0x0000F0, "Member 'FEndlessShopAnimationContainer::SuppliedTransformOffset' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponLauncherFixedPointParam
// 0x001C (0x001C - 0x0000)
struct FSnfWeaponLauncherFixedPointParam final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAimHomingTarget;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AimBoneName;                                       // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeviation;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeviationTime;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfWeaponOrbitCalcType                       CalcType;                                          // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LimitAngle;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponLauncherFixedPointParam) == 0x000004, "Wrong alignment on FSnfWeaponLauncherFixedPointParam");
static_assert(sizeof(FSnfWeaponLauncherFixedPointParam) == 0x00001C, "Wrong size on FSnfWeaponLauncherFixedPointParam");
static_assert(offsetof(FSnfWeaponLauncherFixedPointParam, bEnable) == 0x000000, "Member 'FSnfWeaponLauncherFixedPointParam::bEnable' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherFixedPointParam, bAimHomingTarget) == 0x000001, "Member 'FSnfWeaponLauncherFixedPointParam::bAimHomingTarget' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherFixedPointParam, AimBoneName) == 0x000004, "Member 'FSnfWeaponLauncherFixedPointParam::AimBoneName' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherFixedPointParam, bDeviation) == 0x00000C, "Member 'FSnfWeaponLauncherFixedPointParam::bDeviation' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherFixedPointParam, DeviationTime) == 0x000010, "Member 'FSnfWeaponLauncherFixedPointParam::DeviationTime' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherFixedPointParam, CalcType) == 0x000014, "Member 'FSnfWeaponLauncherFixedPointParam::CalcType' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherFixedPointParam, LimitAngle) == 0x000018, "Member 'FSnfWeaponLauncherFixedPointParam::LimitAngle' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessStrokeCatHealInfo
// 0x0008 (0x0008 - 0x0000)
struct FSnfEndlessStrokeCatHealInfo final
{
public:
	float                                         StartHealDelaySeconds;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealDurationSeconds;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessStrokeCatHealInfo) == 0x000004, "Wrong alignment on FSnfEndlessStrokeCatHealInfo");
static_assert(sizeof(FSnfEndlessStrokeCatHealInfo) == 0x000008, "Wrong size on FSnfEndlessStrokeCatHealInfo");
static_assert(offsetof(FSnfEndlessStrokeCatHealInfo, StartHealDelaySeconds) == 0x000000, "Member 'FSnfEndlessStrokeCatHealInfo::StartHealDelaySeconds' has a wrong offset!");
static_assert(offsetof(FSnfEndlessStrokeCatHealInfo, HealDurationSeconds) == 0x000004, "Member 'FSnfEndlessStrokeCatHealInfo::HealDurationSeconds' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessTokenChangeItem
// 0x0020 (0x0028 - 0x0008)
struct FSnfEndlessTokenChangeItem final : public FTableRowBase
{
public:
	int32                                         Buy;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cell;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Unlock;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessTokenChangeItem) == 0x000008, "Wrong alignment on FSnfEndlessTokenChangeItem");
static_assert(sizeof(FSnfEndlessTokenChangeItem) == 0x000028, "Wrong size on FSnfEndlessTokenChangeItem");
static_assert(offsetof(FSnfEndlessTokenChangeItem, Buy) == 0x000008, "Member 'FSnfEndlessTokenChangeItem::Buy' has a wrong offset!");
static_assert(offsetof(FSnfEndlessTokenChangeItem, Cell) == 0x00000C, "Member 'FSnfEndlessTokenChangeItem::Cell' has a wrong offset!");
static_assert(offsetof(FSnfEndlessTokenChangeItem, Unlock) == 0x000010, "Member 'FSnfEndlessTokenChangeItem::Unlock' has a wrong offset!");
static_assert(offsetof(FSnfEndlessTokenChangeItem, Comment) == 0x000018, "Member 'FSnfEndlessTokenChangeItem::Comment' has a wrong offset!");

// ScriptStruct Snowfall.SnfFigureBoxShape
// 0x0030 (0x0030 - 0x0000)
struct FSnfFigureBoxShape final
{
public:
	struct FTransform                             BoxTransform;                                      // 0x0000(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfFigureBoxShape) == 0x000010, "Wrong alignment on FSnfFigureBoxShape");
static_assert(sizeof(FSnfFigureBoxShape) == 0x000030, "Wrong size on FSnfFigureBoxShape");
static_assert(offsetof(FSnfFigureBoxShape, BoxTransform) == 0x000000, "Member 'FSnfFigureBoxShape::BoxTransform' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessThreadTypeInfo
// 0x0030 (0x0030 - 0x0000)
struct FSnfEndlessThreadTypeInfo final
{
public:
	int32                                         OverrideNumThread;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             OverrideStaticMesh;                                // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessThreadTypeInfo) == 0x000008, "Wrong alignment on FSnfEndlessThreadTypeInfo");
static_assert(sizeof(FSnfEndlessThreadTypeInfo) == 0x000030, "Wrong size on FSnfEndlessThreadTypeInfo");
static_assert(offsetof(FSnfEndlessThreadTypeInfo, OverrideNumThread) == 0x000000, "Member 'FSnfEndlessThreadTypeInfo::OverrideNumThread' has a wrong offset!");
static_assert(offsetof(FSnfEndlessThreadTypeInfo, OverrideStaticMesh) == 0x000008, "Member 'FSnfEndlessThreadTypeInfo::OverrideStaticMesh' has a wrong offset!");

// ScriptStruct Snowfall.SnfYureiTableRow
// 0x0018 (0x0020 - 0x0008)
struct FSnfYureiTableRow final : public FTableRowBase
{
public:
	float                                         KKPower;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DevComment;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfYureiTableRow) == 0x000008, "Wrong alignment on FSnfYureiTableRow");
static_assert(sizeof(FSnfYureiTableRow) == 0x000020, "Wrong size on FSnfYureiTableRow");
static_assert(offsetof(FSnfYureiTableRow, KKPower) == 0x000008, "Member 'FSnfYureiTableRow::KKPower' has a wrong offset!");
static_assert(offsetof(FSnfYureiTableRow, DevComment) == 0x000010, "Member 'FSnfYureiTableRow::DevComment' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessRandomRosaryPutInfo
// 0x0001 (0x0001 - 0x0000)
struct FSnfEndlessRandomRosaryPutInfo final
{
public:
	ESnfEndlessClearRankType                      RosaryRank;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessRandomRosaryPutInfo) == 0x000001, "Wrong alignment on FSnfEndlessRandomRosaryPutInfo");
static_assert(sizeof(FSnfEndlessRandomRosaryPutInfo) == 0x000001, "Wrong size on FSnfEndlessRandomRosaryPutInfo");
static_assert(offsetof(FSnfEndlessRandomRosaryPutInfo, RosaryRank) == 0x000000, "Member 'FSnfEndlessRandomRosaryPutInfo::RosaryRank' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessRandomRosaryPutInfoList
// 0x0010 (0x0010 - 0x0000)
struct FSnfEndlessRandomRosaryPutInfoList final
{
public:
	TArray<struct FSnfEndlessRandomRosaryPutInfo> InfoList;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessRandomRosaryPutInfoList) == 0x000008, "Wrong alignment on FSnfEndlessRandomRosaryPutInfoList");
static_assert(sizeof(FSnfEndlessRandomRosaryPutInfoList) == 0x000010, "Wrong size on FSnfEndlessRandomRosaryPutInfoList");
static_assert(offsetof(FSnfEndlessRandomRosaryPutInfoList, InfoList) == 0x000000, "Member 'FSnfEndlessRandomRosaryPutInfoList::InfoList' has a wrong offset!");

// ScriptStruct Snowfall.SnfPSNActivitySaveRecord
// 0x00B0 (0x00B0 - 0x0000)
struct FSnfPSNActivitySaveRecord
{
public:
	TSet<class FName>                             InProgressChildIds;                                // 0x0000(0x0050)(SaveGame, NativeAccessSpecifierPublic)
	TSet<class FName>                             CompletedChildIds;                                 // 0x0050(0x0050)(SaveGame, NativeAccessSpecifierPublic)
	struct FDateTime                              LastModified;                                      // 0x00A0(0x0008)(ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumCompletedTask;                                  // 0x00A8(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfPSNActivitySaveRecordState                State;                                             // 0x00AC(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPSNActivitySaveRecord) == 0x000008, "Wrong alignment on FSnfPSNActivitySaveRecord");
static_assert(sizeof(FSnfPSNActivitySaveRecord) == 0x0000B0, "Wrong size on FSnfPSNActivitySaveRecord");
static_assert(offsetof(FSnfPSNActivitySaveRecord, InProgressChildIds) == 0x000000, "Member 'FSnfPSNActivitySaveRecord::InProgressChildIds' has a wrong offset!");
static_assert(offsetof(FSnfPSNActivitySaveRecord, CompletedChildIds) == 0x000050, "Member 'FSnfPSNActivitySaveRecord::CompletedChildIds' has a wrong offset!");
static_assert(offsetof(FSnfPSNActivitySaveRecord, LastModified) == 0x0000A0, "Member 'FSnfPSNActivitySaveRecord::LastModified' has a wrong offset!");
static_assert(offsetof(FSnfPSNActivitySaveRecord, NumCompletedTask) == 0x0000A8, "Member 'FSnfPSNActivitySaveRecord::NumCompletedTask' has a wrong offset!");
static_assert(offsetof(FSnfPSNActivitySaveRecord, State) == 0x0000AC, "Member 'FSnfPSNActivitySaveRecord::State' has a wrong offset!");

// ScriptStruct Snowfall.SnfPSNActivityCollectibleSaveRecord
// 0x0050 (0x0100 - 0x00B0)
struct FSnfPSNActivityCollectibleSaveRecord final : public FSnfPSNActivitySaveRecord
{
public:
	TSet<class FName>                             UnavailableTaskIds;                                // 0x00B0(0x0050)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPSNActivityCollectibleSaveRecord) == 0x000008, "Wrong alignment on FSnfPSNActivityCollectibleSaveRecord");
static_assert(sizeof(FSnfPSNActivityCollectibleSaveRecord) == 0x000100, "Wrong size on FSnfPSNActivityCollectibleSaveRecord");
static_assert(offsetof(FSnfPSNActivityCollectibleSaveRecord, UnavailableTaskIds) == 0x0000B0, "Member 'FSnfPSNActivityCollectibleSaveRecord::UnavailableTaskIds' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessPickupTaskCountInfo
// 0x0008 (0x0008 - 0x0000)
struct FSnfEndlessPickupTaskCountInfo final
{
public:
	int32                                         PickupCount;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weighting;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessPickupTaskCountInfo) == 0x000004, "Wrong alignment on FSnfEndlessPickupTaskCountInfo");
static_assert(sizeof(FSnfEndlessPickupTaskCountInfo) == 0x000008, "Wrong size on FSnfEndlessPickupTaskCountInfo");
static_assert(offsetof(FSnfEndlessPickupTaskCountInfo, PickupCount) == 0x000000, "Member 'FSnfEndlessPickupTaskCountInfo::PickupCount' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPickupTaskCountInfo, Weighting) == 0x000004, "Member 'FSnfEndlessPickupTaskCountInfo::Weighting' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessAllReport
// 0x0188 (0x0188 - 0x0000)
struct alignas(0x08) FSnfEndlessAllReport final
{
public:
	uint8                                         Pad_0[0x188];                                      // 0x0000(0x0188)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfEndlessAllReport) == 0x000008, "Wrong alignment on FSnfEndlessAllReport");
static_assert(sizeof(FSnfEndlessAllReport) == 0x000188, "Wrong size on FSnfEndlessAllReport");

// ScriptStruct Snowfall.SnfEndlessResetReport
// 0x0078 (0x0078 - 0x0000)
struct alignas(0x08) FSnfEndlessResetReport final
{
public:
	uint8                                         Pad_0[0x78];                                       // 0x0000(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfEndlessResetReport) == 0x000008, "Wrong alignment on FSnfEndlessResetReport");
static_assert(sizeof(FSnfEndlessResetReport) == 0x000078, "Wrong size on FSnfEndlessResetReport");

// ScriptStruct Snowfall.SnfEndlessResultChangeData
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FSnfEndlessResultChangeData final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfEndlessResultChangeData) == 0x000004, "Wrong alignment on FSnfEndlessResultChangeData");
static_assert(sizeof(FSnfEndlessResultChangeData) == 0x000014, "Wrong size on FSnfEndlessResultChangeData");

// ScriptStruct Snowfall.SnfTakeDamagePropsActorSoundSetting
// 0x0038 (0x0038 - 0x0000)
struct FSnfTakeDamagePropsActorSoundSetting final
{
public:
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityMin;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityMax;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitTime;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RTPCName;                                          // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcculusionRefreshInterval;                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkChangeRoomType                             ChangeRoomType;                                    // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ImpulseWhen1KgDroppedFrom1m;                       // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfTakeDamagePropsActorSoundSetting) == 0x000008, "Wrong alignment on FSnfTakeDamagePropsActorSoundSetting");
static_assert(sizeof(FSnfTakeDamagePropsActorSoundSetting) == 0x000038, "Wrong size on FSnfTakeDamagePropsActorSoundSetting");
static_assert(offsetof(FSnfTakeDamagePropsActorSoundSetting, AudioEvent) == 0x000000, "Member 'FSnfTakeDamagePropsActorSoundSetting::AudioEvent' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorSoundSetting, VelocityMin) == 0x000008, "Member 'FSnfTakeDamagePropsActorSoundSetting::VelocityMin' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorSoundSetting, VelocityMax) == 0x00000C, "Member 'FSnfTakeDamagePropsActorSoundSetting::VelocityMax' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorSoundSetting, WaitTime) == 0x000010, "Member 'FSnfTakeDamagePropsActorSoundSetting::WaitTime' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorSoundSetting, RTPCName) == 0x000018, "Member 'FSnfTakeDamagePropsActorSoundSetting::RTPCName' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorSoundSetting, OcculusionRefreshInterval) == 0x000028, "Member 'FSnfTakeDamagePropsActorSoundSetting::OcculusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorSoundSetting, ChangeRoomType) == 0x00002C, "Member 'FSnfTakeDamagePropsActorSoundSetting::ChangeRoomType' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorSoundSetting, ImpulseWhen1KgDroppedFrom1m) == 0x000030, "Member 'FSnfTakeDamagePropsActorSoundSetting::ImpulseWhen1KgDroppedFrom1m' has a wrong offset!");

// ScriptStruct Snowfall.SnfTakeDamagePropsPartsSetting
// 0x0078 (0x0080 - 0x0008)
struct FSnfTakeDamagePropsPartsSetting final : public FTableRowBase
{
public:
	class UStaticMesh*                            TargetMesh;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ESnfTakeDamagePropsActorSoundType, struct FSnfTakeDamagePropsActorSoundSetting> SoundSettings;                                     // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
	float                                         ScrapeXRangeMin;                                   // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrapeXRangeMax;                                   // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrapeYRangeMin;                                   // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrapeYRangeMax;                                   // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrapeTimeRange;                                   // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrapeAngleRange;                                  // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrapeAngleSizeRange;                              // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfTakeDamagePropsPartsSetting) == 0x000008, "Wrong alignment on FSnfTakeDamagePropsPartsSetting");
static_assert(sizeof(FSnfTakeDamagePropsPartsSetting) == 0x000080, "Wrong size on FSnfTakeDamagePropsPartsSetting");
static_assert(offsetof(FSnfTakeDamagePropsPartsSetting, TargetMesh) == 0x000008, "Member 'FSnfTakeDamagePropsPartsSetting::TargetMesh' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsPartsSetting, SoundSettings) == 0x000010, "Member 'FSnfTakeDamagePropsPartsSetting::SoundSettings' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsPartsSetting, ScrapeXRangeMin) == 0x000060, "Member 'FSnfTakeDamagePropsPartsSetting::ScrapeXRangeMin' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsPartsSetting, ScrapeXRangeMax) == 0x000064, "Member 'FSnfTakeDamagePropsPartsSetting::ScrapeXRangeMax' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsPartsSetting, ScrapeYRangeMin) == 0x000068, "Member 'FSnfTakeDamagePropsPartsSetting::ScrapeYRangeMin' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsPartsSetting, ScrapeYRangeMax) == 0x00006C, "Member 'FSnfTakeDamagePropsPartsSetting::ScrapeYRangeMax' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsPartsSetting, ScrapeTimeRange) == 0x000070, "Member 'FSnfTakeDamagePropsPartsSetting::ScrapeTimeRange' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsPartsSetting, ScrapeAngleRange) == 0x000074, "Member 'FSnfTakeDamagePropsPartsSetting::ScrapeAngleRange' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsPartsSetting, ScrapeAngleSizeRange) == 0x000078, "Member 'FSnfTakeDamagePropsPartsSetting::ScrapeAngleSizeRange' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogStoneItem
// 0x000C (0x000C - 0x0000)
struct FSnfCatalogStoneItem final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCatalogStoneItem) == 0x000004, "Wrong alignment on FSnfCatalogStoneItem");
static_assert(sizeof(FSnfCatalogStoneItem) == 0x00000C, "Wrong size on FSnfCatalogStoneItem");
static_assert(offsetof(FSnfCatalogStoneItem, ID) == 0x000000, "Member 'FSnfCatalogStoneItem::ID' has a wrong offset!");
static_assert(offsetof(FSnfCatalogStoneItem, Index) == 0x000008, "Member 'FSnfCatalogStoneItem::Index' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogYureiItem
// 0x0058 (0x0058 - 0x0000)
struct FSnfCatalogYureiItem final
{
public:
	int32                                         Total;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      FlagList;                                          // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCatalogYureiItem) == 0x000008, "Wrong alignment on FSnfCatalogYureiItem");
static_assert(sizeof(FSnfCatalogYureiItem) == 0x000058, "Wrong size on FSnfCatalogYureiItem");
static_assert(offsetof(FSnfCatalogYureiItem, Total) == 0x000000, "Member 'FSnfCatalogYureiItem::Total' has a wrong offset!");
static_assert(offsetof(FSnfCatalogYureiItem, Count) == 0x000004, "Member 'FSnfCatalogYureiItem::Count' has a wrong offset!");
static_assert(offsetof(FSnfCatalogYureiItem, FlagList) == 0x000008, "Member 'FSnfCatalogYureiItem::FlagList' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogDensityItem
// 0x0044 (0x0044 - 0x0000)
struct FSnfCatalogDensityItem final
{
public:
	class FName                                   UniqueId;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FlagId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepBegin;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepEnd;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Density;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SizeIn;                                            // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SizeOut;                                           // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBox;                                             // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCatalogDensityItem) == 0x000004, "Wrong alignment on FSnfCatalogDensityItem");
static_assert(sizeof(FSnfCatalogDensityItem) == 0x000044, "Wrong size on FSnfCatalogDensityItem");
static_assert(offsetof(FSnfCatalogDensityItem, UniqueId) == 0x000000, "Member 'FSnfCatalogDensityItem::UniqueId' has a wrong offset!");
static_assert(offsetof(FSnfCatalogDensityItem, FlagId) == 0x000008, "Member 'FSnfCatalogDensityItem::FlagId' has a wrong offset!");
static_assert(offsetof(FSnfCatalogDensityItem, StepBegin) == 0x000010, "Member 'FSnfCatalogDensityItem::StepBegin' has a wrong offset!");
static_assert(offsetof(FSnfCatalogDensityItem, StepEnd) == 0x000014, "Member 'FSnfCatalogDensityItem::StepEnd' has a wrong offset!");
static_assert(offsetof(FSnfCatalogDensityItem, Density) == 0x000018, "Member 'FSnfCatalogDensityItem::Density' has a wrong offset!");
static_assert(offsetof(FSnfCatalogDensityItem, Location) == 0x00001C, "Member 'FSnfCatalogDensityItem::Location' has a wrong offset!");
static_assert(offsetof(FSnfCatalogDensityItem, SizeIn) == 0x000028, "Member 'FSnfCatalogDensityItem::SizeIn' has a wrong offset!");
static_assert(offsetof(FSnfCatalogDensityItem, SizeOut) == 0x000034, "Member 'FSnfCatalogDensityItem::SizeOut' has a wrong offset!");
static_assert(offsetof(FSnfCatalogDensityItem, IsBox) == 0x000040, "Member 'FSnfCatalogDensityItem::IsBox' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogShrineActivityItem
// 0x002C (0x002C - 0x0000)
struct FSnfCatalogShrineActivityItem final
{
public:
	class FName                                   ActivityId;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActivityLocation;                                  // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OpenActivityId;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenActivityStep;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCatalogShrineActivityItem) == 0x000004, "Wrong alignment on FSnfCatalogShrineActivityItem");
static_assert(sizeof(FSnfCatalogShrineActivityItem) == 0x00002C, "Wrong size on FSnfCatalogShrineActivityItem");
static_assert(offsetof(FSnfCatalogShrineActivityItem, ActivityId) == 0x000000, "Member 'FSnfCatalogShrineActivityItem::ActivityId' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrineActivityItem, ActivityLocation) == 0x000008, "Member 'FSnfCatalogShrineActivityItem::ActivityLocation' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrineActivityItem, RelativeLocation) == 0x000014, "Member 'FSnfCatalogShrineActivityItem::RelativeLocation' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrineActivityItem, OpenActivityId) == 0x000020, "Member 'FSnfCatalogShrineActivityItem::OpenActivityId' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrineActivityItem, OpenActivityStep) == 0x000028, "Member 'FSnfCatalogShrineActivityItem::OpenActivityStep' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogShrineItem
// 0x0028 (0x0028 - 0x0000)
struct FSnfCatalogShrineItem final
{
public:
	bool                                          AutoOpen;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           FlagList;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfCatalogShrineActivityItem>  FlagInfo;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCatalogShrineItem) == 0x000008, "Wrong alignment on FSnfCatalogShrineItem");
static_assert(sizeof(FSnfCatalogShrineItem) == 0x000028, "Wrong size on FSnfCatalogShrineItem");
static_assert(offsetof(FSnfCatalogShrineItem, AutoOpen) == 0x000000, "Member 'FSnfCatalogShrineItem::AutoOpen' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrineItem, FlagList) == 0x000008, "Member 'FSnfCatalogShrineItem::FlagList' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrineItem, FlagInfo) == 0x000018, "Member 'FSnfCatalogShrineItem::FlagInfo' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogShrine
// 0x01D8 (0x02F8 - 0x0120)
struct FSnfCatalogShrine final : public FSnfCatalogItem
{
public:
	class FName                                   OpenShrineId;                                      // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenSequenceId;                                    // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenPriority;                                      // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HideBeforeOpen;                                    // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NotOpenUiEvent;                                    // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsManualFastTravelData;                            // 0x0132(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_133[0x1];                                      // 0x0133(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FastTravelLocation;                                // 0x0134(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               FastTravelRotation;                                // 0x0140(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   RewardId;                                          // 0x014C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBox>                           AreaList;                                          // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfCatalogDensityItem>         HaveDensity;                                       // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSnfCatalogYureiItem                   HaveYurei;                                         // 0x0178(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSnfCatalogShrineItem> HaveActivity;                                      // 0x01D0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSnfCatalogShrineItem> DensityActivity;                                   // 0x0220(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FSnfCatalogStoneItem>           HaveStoneList;                                     // 0x0270(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           OpenActivityList;                                  // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ToriiList;                                         // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSnfCatalogShrineSetting               Setting;                                           // 0x02A0(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCatalogShrine) == 0x000008, "Wrong alignment on FSnfCatalogShrine");
static_assert(sizeof(FSnfCatalogShrine) == 0x0002F8, "Wrong size on FSnfCatalogShrine");
static_assert(offsetof(FSnfCatalogShrine, OpenShrineId) == 0x000120, "Member 'FSnfCatalogShrine::OpenShrineId' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrine, OpenSequenceId) == 0x000128, "Member 'FSnfCatalogShrine::OpenSequenceId' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrine, OpenPriority) == 0x00012C, "Member 'FSnfCatalogShrine::OpenPriority' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrine, HideBeforeOpen) == 0x000130, "Member 'FSnfCatalogShrine::HideBeforeOpen' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrine, NotOpenUiEvent) == 0x000131, "Member 'FSnfCatalogShrine::NotOpenUiEvent' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrine, IsManualFastTravelData) == 0x000132, "Member 'FSnfCatalogShrine::IsManualFastTravelData' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrine, FastTravelLocation) == 0x000134, "Member 'FSnfCatalogShrine::FastTravelLocation' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrine, FastTravelRotation) == 0x000140, "Member 'FSnfCatalogShrine::FastTravelRotation' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrine, RewardId) == 0x00014C, "Member 'FSnfCatalogShrine::RewardId' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrine, AreaList) == 0x000158, "Member 'FSnfCatalogShrine::AreaList' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrine, HaveDensity) == 0x000168, "Member 'FSnfCatalogShrine::HaveDensity' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrine, HaveYurei) == 0x000178, "Member 'FSnfCatalogShrine::HaveYurei' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrine, HaveActivity) == 0x0001D0, "Member 'FSnfCatalogShrine::HaveActivity' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrine, DensityActivity) == 0x000220, "Member 'FSnfCatalogShrine::DensityActivity' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrine, HaveStoneList) == 0x000270, "Member 'FSnfCatalogShrine::HaveStoneList' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrine, OpenActivityList) == 0x000280, "Member 'FSnfCatalogShrine::OpenActivityList' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrine, ToriiList) == 0x000290, "Member 'FSnfCatalogShrine::ToriiList' has a wrong offset!");
static_assert(offsetof(FSnfCatalogShrine, Setting) == 0x0002A0, "Member 'FSnfCatalogShrine::Setting' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessStats
// 0x00A0 (0x00A0 - 0x0000)
struct FSnfEndlessStats final
{
public:
	TArray<float>                                 AddList;                                           // 0x0000(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<int32>                                 CountList;                                         // 0x0010(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<int32>                                 MaxList;                                           // 0x0020(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      NameList;                                          // 0x0030(0x0050)(SaveGame, NativeAccessSpecifierPublic)
	TArray<class FName>                           RescuedCatIdList;                                  // 0x0080(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<int32>                                 UseRosary;                                         // 0x0090(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessStats) == 0x000008, "Wrong alignment on FSnfEndlessStats");
static_assert(sizeof(FSnfEndlessStats) == 0x0000A0, "Wrong size on FSnfEndlessStats");
static_assert(offsetof(FSnfEndlessStats, AddList) == 0x000000, "Member 'FSnfEndlessStats::AddList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessStats, CountList) == 0x000010, "Member 'FSnfEndlessStats::CountList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessStats, MaxList) == 0x000020, "Member 'FSnfEndlessStats::MaxList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessStats, NameList) == 0x000030, "Member 'FSnfEndlessStats::NameList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessStats, RescuedCatIdList) == 0x000080, "Member 'FSnfEndlessStats::RescuedCatIdList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessStats, UseRosary) == 0x000090, "Member 'FSnfEndlessStats::UseRosary' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessPlayerParam
// 0x0090 (0x0090 - 0x0000)
struct FSnfEndlessPlayerParam final
{
public:
	TArray<float>                                 KilledTimerList;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PurgedCoreFarTimerList;                            // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                PrePlayerLocation;                                 // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PrePlayerBattleMode;                               // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSetupedObjectiveUI;                              // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PreKuchisakeBlackScene;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PreDefensiveBattleScene;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            TaskTimeSecondsMap;                                // 0x0040(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessPlayerParam) == 0x000008, "Wrong alignment on FSnfEndlessPlayerParam");
static_assert(sizeof(FSnfEndlessPlayerParam) == 0x000090, "Wrong size on FSnfEndlessPlayerParam");
static_assert(offsetof(FSnfEndlessPlayerParam, KilledTimerList) == 0x000000, "Member 'FSnfEndlessPlayerParam::KilledTimerList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPlayerParam, PurgedCoreFarTimerList) == 0x000010, "Member 'FSnfEndlessPlayerParam::PurgedCoreFarTimerList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPlayerParam, PrePlayerLocation) == 0x000020, "Member 'FSnfEndlessPlayerParam::PrePlayerLocation' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPlayerParam, PrePlayerBattleMode) == 0x00002C, "Member 'FSnfEndlessPlayerParam::PrePlayerBattleMode' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPlayerParam, IsSetupedObjectiveUI) == 0x00002D, "Member 'FSnfEndlessPlayerParam::IsSetupedObjectiveUI' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPlayerParam, PreKuchisakeBlackScene) == 0x000030, "Member 'FSnfEndlessPlayerParam::PreKuchisakeBlackScene' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPlayerParam, PreDefensiveBattleScene) == 0x000038, "Member 'FSnfEndlessPlayerParam::PreDefensiveBattleScene' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPlayerParam, TaskTimeSecondsMap) == 0x000040, "Member 'FSnfEndlessPlayerParam::TaskTimeSecondsMap' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessParam
// 0x00E0 (0x00E0 - 0x0000)
struct FSnfEndlessParam final
{
public:
	int32                                         Token;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Parts;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartToken;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartLevel;                                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartExp;                                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearFlag;                                         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ClearTarget;                                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountTarget;                                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TextTarget;                                        // 0x0020(0x0018)(NativeAccessSpecifierPublic)
	int32                                         RemainingTimeTarget;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitTimeTarget;                                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSnfEndlessPlayerParam                 PlayerParam;                                       // 0x0040(0x0090)(NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessTaskStatus>          TaskStatusList;                                    // 0x00D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessParam) == 0x000008, "Wrong alignment on FSnfEndlessParam");
static_assert(sizeof(FSnfEndlessParam) == 0x0000E0, "Wrong size on FSnfEndlessParam");
static_assert(offsetof(FSnfEndlessParam, Token) == 0x000000, "Member 'FSnfEndlessParam::Token' has a wrong offset!");
static_assert(offsetof(FSnfEndlessParam, Parts) == 0x000004, "Member 'FSnfEndlessParam::Parts' has a wrong offset!");
static_assert(offsetof(FSnfEndlessParam, StartToken) == 0x000008, "Member 'FSnfEndlessParam::StartToken' has a wrong offset!");
static_assert(offsetof(FSnfEndlessParam, StartLevel) == 0x00000C, "Member 'FSnfEndlessParam::StartLevel' has a wrong offset!");
static_assert(offsetof(FSnfEndlessParam, StartExp) == 0x000010, "Member 'FSnfEndlessParam::StartExp' has a wrong offset!");
static_assert(offsetof(FSnfEndlessParam, ClearFlag) == 0x000014, "Member 'FSnfEndlessParam::ClearFlag' has a wrong offset!");
static_assert(offsetof(FSnfEndlessParam, ClearTarget) == 0x000018, "Member 'FSnfEndlessParam::ClearTarget' has a wrong offset!");
static_assert(offsetof(FSnfEndlessParam, CountTarget) == 0x00001C, "Member 'FSnfEndlessParam::CountTarget' has a wrong offset!");
static_assert(offsetof(FSnfEndlessParam, TextTarget) == 0x000020, "Member 'FSnfEndlessParam::TextTarget' has a wrong offset!");
static_assert(offsetof(FSnfEndlessParam, RemainingTimeTarget) == 0x000038, "Member 'FSnfEndlessParam::RemainingTimeTarget' has a wrong offset!");
static_assert(offsetof(FSnfEndlessParam, LimitTimeTarget) == 0x00003C, "Member 'FSnfEndlessParam::LimitTimeTarget' has a wrong offset!");
static_assert(offsetof(FSnfEndlessParam, PlayerParam) == 0x000040, "Member 'FSnfEndlessParam::PlayerParam' has a wrong offset!");
static_assert(offsetof(FSnfEndlessParam, TaskStatusList) == 0x0000D0, "Member 'FSnfEndlessParam::TaskStatusList' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogSpiritPhoto
// 0x0008 (0x0128 - 0x0120)
struct FSnfCatalogSpiritPhoto final : public FSnfCatalogItem
{
public:
	class FName                                   EvilTalkId;                                        // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCatalogSpiritPhoto) == 0x000008, "Wrong alignment on FSnfCatalogSpiritPhoto");
static_assert(sizeof(FSnfCatalogSpiritPhoto) == 0x000128, "Wrong size on FSnfCatalogSpiritPhoto");
static_assert(offsetof(FSnfCatalogSpiritPhoto, EvilTalkId) == 0x000120, "Member 'FSnfCatalogSpiritPhoto::EvilTalkId' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponLauncherBurstParam
// 0x0008 (0x0008 - 0x0000)
struct FSnfWeaponLauncherBurstParam final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IntervalTime;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponLauncherBurstParam) == 0x000004, "Wrong alignment on FSnfWeaponLauncherBurstParam");
static_assert(sizeof(FSnfWeaponLauncherBurstParam) == 0x000008, "Wrong size on FSnfWeaponLauncherBurstParam");
static_assert(offsetof(FSnfWeaponLauncherBurstParam, bEnable) == 0x000000, "Member 'FSnfWeaponLauncherBurstParam::bEnable' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherBurstParam, IntervalTime) == 0x000004, "Member 'FSnfWeaponLauncherBurstParam::IntervalTime' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessRandomRosaryParam
// 0x0020 (0x0020 - 0x0000)
struct FSnfEndlessRandomRosaryParam final
{
public:
	ESnfSkillParam                                ParamType;                                         // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParamId;                                           // 0x0004(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x000C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param;                                             // 0x0010(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cost;                                              // 0x0014(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Select;                                            // 0x0018(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Draw;                                              // 0x001C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessRandomRosaryParam) == 0x000004, "Wrong alignment on FSnfEndlessRandomRosaryParam");
static_assert(sizeof(FSnfEndlessRandomRosaryParam) == 0x000020, "Wrong size on FSnfEndlessRandomRosaryParam");
static_assert(offsetof(FSnfEndlessRandomRosaryParam, ParamType) == 0x000000, "Member 'FSnfEndlessRandomRosaryParam::ParamType' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRandomRosaryParam, ParamId) == 0x000004, "Member 'FSnfEndlessRandomRosaryParam::ParamId' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRandomRosaryParam, Rate) == 0x00000C, "Member 'FSnfEndlessRandomRosaryParam::Rate' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRandomRosaryParam, Param) == 0x000010, "Member 'FSnfEndlessRandomRosaryParam::Param' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRandomRosaryParam, Cost) == 0x000014, "Member 'FSnfEndlessRandomRosaryParam::Cost' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRandomRosaryParam, Select) == 0x000018, "Member 'FSnfEndlessRandomRosaryParam::Select' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRandomRosaryParam, Draw) == 0x00001C, "Member 'FSnfEndlessRandomRosaryParam::Draw' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessRandomRosaryInfo
// 0x0060 (0x0060 - 0x0000)
struct FSnfEndlessRandomRosaryInfo final
{
public:
	int32                                         Cost;                                              // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Power;                                             // 0x0004(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Star;                                              // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfEndlessRosaryRandomType                   RandomType;                                        // 0x000C(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ESnfSkillParam, struct FSnfEndlessRandomRosaryParam> Params;                                            // 0x0010(0x0050)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessRandomRosaryInfo) == 0x000008, "Wrong alignment on FSnfEndlessRandomRosaryInfo");
static_assert(sizeof(FSnfEndlessRandomRosaryInfo) == 0x000060, "Wrong size on FSnfEndlessRandomRosaryInfo");
static_assert(offsetof(FSnfEndlessRandomRosaryInfo, Cost) == 0x000000, "Member 'FSnfEndlessRandomRosaryInfo::Cost' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRandomRosaryInfo, Power) == 0x000004, "Member 'FSnfEndlessRandomRosaryInfo::Power' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRandomRosaryInfo, Star) == 0x000008, "Member 'FSnfEndlessRandomRosaryInfo::Star' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRandomRosaryInfo, RandomType) == 0x00000C, "Member 'FSnfEndlessRandomRosaryInfo::RandomType' has a wrong offset!");
static_assert(offsetof(FSnfEndlessRandomRosaryInfo, Params) == 0x000010, "Member 'FSnfEndlessRandomRosaryInfo::Params' has a wrong offset!");

// ScriptStruct Snowfall.SnfAnimalGuideSetting
// 0x0008 (0x0008 - 0x0000)
struct FSnfAnimalGuideSetting final
{
public:
	float                                         MoveStopRange;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveRestartRange;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAnimalGuideSetting) == 0x000004, "Wrong alignment on FSnfAnimalGuideSetting");
static_assert(sizeof(FSnfAnimalGuideSetting) == 0x000008, "Wrong size on FSnfAnimalGuideSetting");
static_assert(offsetof(FSnfAnimalGuideSetting, MoveStopRange) == 0x000000, "Member 'FSnfAnimalGuideSetting::MoveStopRange' has a wrong offset!");
static_assert(offsetof(FSnfAnimalGuideSetting, MoveRestartRange) == 0x000004, "Member 'FSnfAnimalGuideSetting::MoveRestartRange' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameAutoSupplyParam
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FSnfGameAutoSupplyParam final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGameAutoSupplyParam) == 0x000008, "Wrong alignment on FSnfGameAutoSupplyParam");
static_assert(sizeof(FSnfGameAutoSupplyParam) == 0x000050, "Wrong size on FSnfGameAutoSupplyParam");

// ScriptStruct Snowfall.SnfCatalogJizo
// 0x0008 (0x0128 - 0x0120)
struct FSnfCatalogJizo final : public FSnfCatalogItem
{
public:
	class FName                                   RewardId;                                          // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCatalogJizo) == 0x000008, "Wrong alignment on FSnfCatalogJizo");
static_assert(sizeof(FSnfCatalogJizo) == 0x000128, "Wrong size on FSnfCatalogJizo");
static_assert(offsetof(FSnfCatalogJizo, RewardId) == 0x000120, "Member 'FSnfCatalogJizo::RewardId' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessPresetInfo
// 0x0018 (0x0018 - 0x0000)
struct FSnfEndlessPresetInfo final
{
public:
	class FName                                   PresetId;                                          // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayCount;                                         // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoalCount;                                         // 0x000C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeadCount;                                         // 0x0010(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TaskClearCount;                                    // 0x0014(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessPresetInfo) == 0x000004, "Wrong alignment on FSnfEndlessPresetInfo");
static_assert(sizeof(FSnfEndlessPresetInfo) == 0x000018, "Wrong size on FSnfEndlessPresetInfo");
static_assert(offsetof(FSnfEndlessPresetInfo, PresetId) == 0x000000, "Member 'FSnfEndlessPresetInfo::PresetId' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPresetInfo, PlayCount) == 0x000008, "Member 'FSnfEndlessPresetInfo::PlayCount' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPresetInfo, GoalCount) == 0x00000C, "Member 'FSnfEndlessPresetInfo::GoalCount' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPresetInfo, DeadCount) == 0x000010, "Member 'FSnfEndlessPresetInfo::DeadCount' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPresetInfo, TaskClearCount) == 0x000014, "Member 'FSnfEndlessPresetInfo::TaskClearCount' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessSaveResultInfo
// 0x0090 (0x0090 - 0x0000)
struct FSnfEndlessSaveResultInfo final
{
public:
	int32                                         Data;                                              // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Floor;                                             // 0x0004(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayDead;                                          // 0x000C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayCount;                                         // 0x0010(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTime;                                          // 0x0014(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxChain;                                          // 0x0018(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClearTask;                                         // 0x001C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillEnemy;                                         // 0x0020(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyPoint;                                        // 0x0024(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageCount;                                       // 0x0028(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuardCount;                                        // 0x002C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GetSkillRate;                                      // 0x0030(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloorSearchRate;                                   // 0x0034(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetToken;                                          // 0x0038(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseToken;                                          // 0x003C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LostToken;                                         // 0x0040(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetParts;                                          // 0x0044(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseParts;                                          // 0x0048(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EatMeal;                                           // 0x004C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetRandom;                                         // 0x0050(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemoveRandom;                                      // 0x0054(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetYurei;                                          // 0x0058(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetYokai;                                          // 0x005C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SaveCat;                                           // 0x0060(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StrokeCat;                                         // 0x0064(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetPartsRosary;                                    // 0x0068(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BestRosary;                                        // 0x006C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BestTalisman;                                      // 0x0070(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackValue;                                       // 0x0074(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageValue;                                       // 0x0078(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankS;                                             // 0x007C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankA;                                             // 0x0080(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankB;                                             // 0x0084(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankC;                                             // 0x0088(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankD;                                             // 0x008C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessSaveResultInfo) == 0x000004, "Wrong alignment on FSnfEndlessSaveResultInfo");
static_assert(sizeof(FSnfEndlessSaveResultInfo) == 0x000090, "Wrong size on FSnfEndlessSaveResultInfo");
static_assert(offsetof(FSnfEndlessSaveResultInfo, Data) == 0x000000, "Member 'FSnfEndlessSaveResultInfo::Data' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, Floor) == 0x000004, "Member 'FSnfEndlessSaveResultInfo::Floor' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, Level) == 0x000008, "Member 'FSnfEndlessSaveResultInfo::Level' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, PlayDead) == 0x00000C, "Member 'FSnfEndlessSaveResultInfo::PlayDead' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, PlayCount) == 0x000010, "Member 'FSnfEndlessSaveResultInfo::PlayCount' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, PlayTime) == 0x000014, "Member 'FSnfEndlessSaveResultInfo::PlayTime' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, MaxChain) == 0x000018, "Member 'FSnfEndlessSaveResultInfo::MaxChain' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, ClearTask) == 0x00001C, "Member 'FSnfEndlessSaveResultInfo::ClearTask' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, KillEnemy) == 0x000020, "Member 'FSnfEndlessSaveResultInfo::KillEnemy' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, EnemyPoint) == 0x000024, "Member 'FSnfEndlessSaveResultInfo::EnemyPoint' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, DamageCount) == 0x000028, "Member 'FSnfEndlessSaveResultInfo::DamageCount' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, GuardCount) == 0x00002C, "Member 'FSnfEndlessSaveResultInfo::GuardCount' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, GetSkillRate) == 0x000030, "Member 'FSnfEndlessSaveResultInfo::GetSkillRate' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, FloorSearchRate) == 0x000034, "Member 'FSnfEndlessSaveResultInfo::FloorSearchRate' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, GetToken) == 0x000038, "Member 'FSnfEndlessSaveResultInfo::GetToken' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, UseToken) == 0x00003C, "Member 'FSnfEndlessSaveResultInfo::UseToken' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, LostToken) == 0x000040, "Member 'FSnfEndlessSaveResultInfo::LostToken' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, GetParts) == 0x000044, "Member 'FSnfEndlessSaveResultInfo::GetParts' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, UseParts) == 0x000048, "Member 'FSnfEndlessSaveResultInfo::UseParts' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, EatMeal) == 0x00004C, "Member 'FSnfEndlessSaveResultInfo::EatMeal' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, GetRandom) == 0x000050, "Member 'FSnfEndlessSaveResultInfo::GetRandom' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, RemoveRandom) == 0x000054, "Member 'FSnfEndlessSaveResultInfo::RemoveRandom' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, GetYurei) == 0x000058, "Member 'FSnfEndlessSaveResultInfo::GetYurei' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, GetYokai) == 0x00005C, "Member 'FSnfEndlessSaveResultInfo::GetYokai' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, SaveCat) == 0x000060, "Member 'FSnfEndlessSaveResultInfo::SaveCat' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, StrokeCat) == 0x000064, "Member 'FSnfEndlessSaveResultInfo::StrokeCat' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, GetPartsRosary) == 0x000068, "Member 'FSnfEndlessSaveResultInfo::GetPartsRosary' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, BestRosary) == 0x00006C, "Member 'FSnfEndlessSaveResultInfo::BestRosary' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, BestTalisman) == 0x000070, "Member 'FSnfEndlessSaveResultInfo::BestTalisman' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, AttackValue) == 0x000074, "Member 'FSnfEndlessSaveResultInfo::AttackValue' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, DamageValue) == 0x000078, "Member 'FSnfEndlessSaveResultInfo::DamageValue' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, RankS) == 0x00007C, "Member 'FSnfEndlessSaveResultInfo::RankS' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, RankA) == 0x000080, "Member 'FSnfEndlessSaveResultInfo::RankA' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, RankB) == 0x000084, "Member 'FSnfEndlessSaveResultInfo::RankB' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, RankC) == 0x000088, "Member 'FSnfEndlessSaveResultInfo::RankC' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveResultInfo, RankD) == 0x00008C, "Member 'FSnfEndlessSaveResultInfo::RankD' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessSaveInfo
// 0x0268 (0x0268 - 0x0000)
struct FSnfEndlessSaveInfo final
{
public:
	ESnfEndlessClearRankType                      PrevRank;                                          // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PrevDead;                                          // 0x0004(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedInit;                                          // 0x0008(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDead;                                            // 0x0009(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCalcDead;                                        // 0x000A(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAllClear;                                        // 0x000B(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TeleportStartTag;                                  // 0x000C(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  PutRosaryFlagList;                                 // 0x0018(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	struct FSnfEndlessSaveResultInfo              NowTotalResult;                                    // 0x0028(0x0090)(SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfEndlessSaveResultInfo              PrevTotalResult;                                   // 0x00B8(0x0090)(SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfEndlessSaveResultInfo              BestTotalResult;                                   // 0x0148(0x0090)(SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfEndlessSaveResultInfo              NowAllResult;                                      // 0x01D8(0x0090)(SaveGame, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessSaveInfo) == 0x000008, "Wrong alignment on FSnfEndlessSaveInfo");
static_assert(sizeof(FSnfEndlessSaveInfo) == 0x000268, "Wrong size on FSnfEndlessSaveInfo");
static_assert(offsetof(FSnfEndlessSaveInfo, PrevRank) == 0x000000, "Member 'FSnfEndlessSaveInfo::PrevRank' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveInfo, PrevDead) == 0x000004, "Member 'FSnfEndlessSaveInfo::PrevDead' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveInfo, NeedInit) == 0x000008, "Member 'FSnfEndlessSaveInfo::NeedInit' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveInfo, IsDead) == 0x000009, "Member 'FSnfEndlessSaveInfo::IsDead' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveInfo, IsCalcDead) == 0x00000A, "Member 'FSnfEndlessSaveInfo::IsCalcDead' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveInfo, IsAllClear) == 0x00000B, "Member 'FSnfEndlessSaveInfo::IsAllClear' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveInfo, TeleportStartTag) == 0x00000C, "Member 'FSnfEndlessSaveInfo::TeleportStartTag' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveInfo, PutRosaryFlagList) == 0x000018, "Member 'FSnfEndlessSaveInfo::PutRosaryFlagList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveInfo, NowTotalResult) == 0x000028, "Member 'FSnfEndlessSaveInfo::NowTotalResult' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveInfo, PrevTotalResult) == 0x0000B8, "Member 'FSnfEndlessSaveInfo::PrevTotalResult' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveInfo, BestTotalResult) == 0x000148, "Member 'FSnfEndlessSaveInfo::BestTotalResult' has a wrong offset!");
static_assert(offsetof(FSnfEndlessSaveInfo, NowAllResult) == 0x0001D8, "Member 'FSnfEndlessSaveInfo::NowAllResult' has a wrong offset!");

// ScriptStruct Snowfall.SnfYureiPileMovemnet
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x04) FSnfYureiPileMovemnet final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfYureiPileMovemnet) == 0x000004, "Wrong alignment on FSnfYureiPileMovemnet");
static_assert(sizeof(FSnfYureiPileMovemnet) == 0x000030, "Wrong size on FSnfYureiPileMovemnet");

// ScriptStruct Snowfall.SnfEndlessObjectiveItem
// 0x0038 (0x0040 - 0x0008)
struct FSnfEndlessObjectiveItem final : public FTableRowBase
{
public:
	ESnfEndlessObjectiveType                      Objective;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   QuizText;                                          // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessObjectiveItem) == 0x000008, "Wrong alignment on FSnfEndlessObjectiveItem");
static_assert(sizeof(FSnfEndlessObjectiveItem) == 0x000040, "Wrong size on FSnfEndlessObjectiveItem");
static_assert(offsetof(FSnfEndlessObjectiveItem, Objective) == 0x000008, "Member 'FSnfEndlessObjectiveItem::Objective' has a wrong offset!");
static_assert(offsetof(FSnfEndlessObjectiveItem, Title) == 0x000010, "Member 'FSnfEndlessObjectiveItem::Title' has a wrong offset!");
static_assert(offsetof(FSnfEndlessObjectiveItem, QuizText) == 0x000028, "Member 'FSnfEndlessObjectiveItem::QuizText' has a wrong offset!");

// ScriptStruct Snowfall.SnfSkeltalGimmickEvent
// 0x0018 (0x0018 - 0x0000)
struct FSnfSkeltalGimmickEvent final
{
public:
	class UAnimationAsset*                        AnimAsset;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimRate;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AnimLoop;                                          // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PlayList;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfSkeltalGimmickEvent) == 0x000008, "Wrong alignment on FSnfSkeltalGimmickEvent");
static_assert(sizeof(FSnfSkeltalGimmickEvent) == 0x000018, "Wrong size on FSnfSkeltalGimmickEvent");
static_assert(offsetof(FSnfSkeltalGimmickEvent, AnimAsset) == 0x000000, "Member 'FSnfSkeltalGimmickEvent::AnimAsset' has a wrong offset!");
static_assert(offsetof(FSnfSkeltalGimmickEvent, AnimRate) == 0x000008, "Member 'FSnfSkeltalGimmickEvent::AnimRate' has a wrong offset!");
static_assert(offsetof(FSnfSkeltalGimmickEvent, AnimLoop) == 0x00000C, "Member 'FSnfSkeltalGimmickEvent::AnimLoop' has a wrong offset!");
static_assert(offsetof(FSnfSkeltalGimmickEvent, PlayList) == 0x000010, "Member 'FSnfSkeltalGimmickEvent::PlayList' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessPreset
// 0x00A0 (0x00A8 - 0x0008)
struct FSnfEndlessPreset final : public FTableRowBase
{
public:
	int32                                         ThemeId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfEndlessGroupType                          Group;                                             // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LayoutId;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfEndlessObjectiveType                      Objective;                                         // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RewardExp;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PickupWeight;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSnfEndlessTask>                TaskList;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   MapName;                                           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  MapLevel;                                          // 0x0038(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  LayoutLevel;                                       // 0x0060(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessPreset) == 0x000008, "Wrong alignment on FSnfEndlessPreset");
static_assert(sizeof(FSnfEndlessPreset) == 0x0000A8, "Wrong size on FSnfEndlessPreset");
static_assert(offsetof(FSnfEndlessPreset, ThemeId) == 0x000008, "Member 'FSnfEndlessPreset::ThemeId' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPreset, Group) == 0x00000C, "Member 'FSnfEndlessPreset::Group' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPreset, LayoutId) == 0x000010, "Member 'FSnfEndlessPreset::LayoutId' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPreset, Objective) == 0x000014, "Member 'FSnfEndlessPreset::Objective' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPreset, RewardExp) == 0x000018, "Member 'FSnfEndlessPreset::RewardExp' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPreset, PickupWeight) == 0x00001C, "Member 'FSnfEndlessPreset::PickupWeight' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPreset, TaskList) == 0x000020, "Member 'FSnfEndlessPreset::TaskList' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPreset, MapName) == 0x000030, "Member 'FSnfEndlessPreset::MapName' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPreset, MapLevel) == 0x000038, "Member 'FSnfEndlessPreset::MapLevel' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPreset, LayoutLevel) == 0x000060, "Member 'FSnfEndlessPreset::LayoutLevel' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPreset, Tags) == 0x000088, "Member 'FSnfEndlessPreset::Tags' has a wrong offset!");
static_assert(offsetof(FSnfEndlessPreset, Comment) == 0x000098, "Member 'FSnfEndlessPreset::Comment' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogPhoto
// 0x0020 (0x0140 - 0x0120)
struct FSnfCatalogPhoto : public FSnfCatalogItem
{
public:
	float                                         ImageRatioW;                                       // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImageRatioH;                                       // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCatalogPhoto) == 0x000008, "Wrong alignment on FSnfCatalogPhoto");
static_assert(sizeof(FSnfCatalogPhoto) == 0x000140, "Wrong size on FSnfCatalogPhoto");
static_assert(offsetof(FSnfCatalogPhoto, ImageRatioW) == 0x000120, "Member 'FSnfCatalogPhoto::ImageRatioW' has a wrong offset!");
static_assert(offsetof(FSnfCatalogPhoto, ImageRatioH) == 0x000124, "Member 'FSnfCatalogPhoto::ImageRatioH' has a wrong offset!");
static_assert(offsetof(FSnfCatalogPhoto, Color) == 0x000128, "Member 'FSnfCatalogPhoto::Color' has a wrong offset!");
static_assert(offsetof(FSnfCatalogPhoto, Scale) == 0x000138, "Member 'FSnfCatalogPhoto::Scale' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogPhotoFrame
// 0x0008 (0x0148 - 0x0140)
struct FSnfCatalogPhotoFrame final : public FSnfCatalogPhoto
{
public:
	ESnfCameraFrameType                           FrameType;                                         // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCatalogPhotoFrame) == 0x000008, "Wrong alignment on FSnfCatalogPhotoFrame");
static_assert(sizeof(FSnfCatalogPhotoFrame) == 0x000148, "Wrong size on FSnfCatalogPhotoFrame");
static_assert(offsetof(FSnfCatalogPhotoFrame, FrameType) == 0x000140, "Member 'FSnfCatalogPhotoFrame::FrameType' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessFloor
// 0x0038 (0x0040 - 0x0008)
struct FSnfEndlessFloor final : public FTableRowBase
{
public:
	int32                                         ThemeId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfEndlessGroupType                          Group;                                             // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PresetId;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawResult;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AreaCount;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinMin;                                           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinMax;                                           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CoinTotal;                                         // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEndlessFloor) == 0x000008, "Wrong alignment on FSnfEndlessFloor");
static_assert(sizeof(FSnfEndlessFloor) == 0x000040, "Wrong size on FSnfEndlessFloor");
static_assert(offsetof(FSnfEndlessFloor, ThemeId) == 0x000008, "Member 'FSnfEndlessFloor::ThemeId' has a wrong offset!");
static_assert(offsetof(FSnfEndlessFloor, Group) == 0x00000C, "Member 'FSnfEndlessFloor::Group' has a wrong offset!");
static_assert(offsetof(FSnfEndlessFloor, PresetId) == 0x000010, "Member 'FSnfEndlessFloor::PresetId' has a wrong offset!");
static_assert(offsetof(FSnfEndlessFloor, DrawResult) == 0x000018, "Member 'FSnfEndlessFloor::DrawResult' has a wrong offset!");
static_assert(offsetof(FSnfEndlessFloor, Comment) == 0x000020, "Member 'FSnfEndlessFloor::Comment' has a wrong offset!");
static_assert(offsetof(FSnfEndlessFloor, AreaCount) == 0x000030, "Member 'FSnfEndlessFloor::AreaCount' has a wrong offset!");
static_assert(offsetof(FSnfEndlessFloor, CoinMin) == 0x000034, "Member 'FSnfEndlessFloor::CoinMin' has a wrong offset!");
static_assert(offsetof(FSnfEndlessFloor, CoinMax) == 0x000038, "Member 'FSnfEndlessFloor::CoinMax' has a wrong offset!");
static_assert(offsetof(FSnfEndlessFloor, CoinTotal) == 0x00003C, "Member 'FSnfEndlessFloor::CoinTotal' has a wrong offset!");

// ScriptStruct Snowfall.SnfEndlessActorList
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSnfEndlessActorList final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfEndlessActorList) == 0x000008, "Wrong alignment on FSnfEndlessActorList");
static_assert(sizeof(FSnfEndlessActorList) == 0x000010, "Wrong size on FSnfEndlessActorList");

// ScriptStruct Snowfall.SnfEnemyFreezeMaterialWeaponParam
// 0x0018 (0x0018 - 0x0000)
struct FSnfEnemyFreezeMaterialWeaponParam final
{
public:
	uint8                                         SlotIndex;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 MaterialIndex;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEnemyFreezeMaterialWeaponParam) == 0x000008, "Wrong alignment on FSnfEnemyFreezeMaterialWeaponParam");
static_assert(sizeof(FSnfEnemyFreezeMaterialWeaponParam) == 0x000018, "Wrong size on FSnfEnemyFreezeMaterialWeaponParam");
static_assert(offsetof(FSnfEnemyFreezeMaterialWeaponParam, SlotIndex) == 0x000000, "Member 'FSnfEnemyFreezeMaterialWeaponParam::SlotIndex' has a wrong offset!");
static_assert(offsetof(FSnfEnemyFreezeMaterialWeaponParam, MaterialIndex) == 0x000008, "Member 'FSnfEnemyFreezeMaterialWeaponParam::MaterialIndex' has a wrong offset!");

// ScriptStruct Snowfall.SnfEnemyStateActive
// 0x0010 (0x0010 - 0x0000)
struct FSnfEnemyStateActive final
{
public:
	class FName                                   MachineName;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEnemyStateActive) == 0x000004, "Wrong alignment on FSnfEnemyStateActive");
static_assert(sizeof(FSnfEnemyStateActive) == 0x000010, "Wrong size on FSnfEnemyStateActive");
static_assert(offsetof(FSnfEnemyStateActive, MachineName) == 0x000000, "Member 'FSnfEnemyStateActive::MachineName' has a wrong offset!");
static_assert(offsetof(FSnfEnemyStateActive, StateName) == 0x000008, "Member 'FSnfEnemyStateActive::StateName' has a wrong offset!");

// ScriptStruct Snowfall.SnfQualityPresetTAA
// 0x0004 (0x0004 - 0x0000)
struct FSnfQualityPresetTAA final
{
public:
	float                                         ScreenPercentage;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfQualityPresetTAA) == 0x000004, "Wrong alignment on FSnfQualityPresetTAA");
static_assert(sizeof(FSnfQualityPresetTAA) == 0x000004, "Wrong size on FSnfQualityPresetTAA");
static_assert(offsetof(FSnfQualityPresetTAA, ScreenPercentage) == 0x000000, "Member 'FSnfQualityPresetTAA::ScreenPercentage' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameCharacterList
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSnfGameCharacterList final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGameCharacterList) == 0x000008, "Wrong alignment on FSnfGameCharacterList");
static_assert(sizeof(FSnfGameCharacterList) == 0x000010, "Wrong size on FSnfGameCharacterList");

// ScriptStruct Snowfall.SnfSoundVolumeInfo
// 0x0048 (0x0050 - 0x0008)
struct FSnfSoundVolumeInfo final : public FTableRowBase
{
public:
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAkAudioEvent*>                  EnterAkEventList;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAkAudioEvent*>                  LeaveAkEventList;                                  // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAkAudioEvent*>                  EnterAkEventRandom;                                // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         CallTimeForEnter;                                  // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallTimeForLeave;                                  // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfSoundVolumeInfo) == 0x000008, "Wrong alignment on FSnfSoundVolumeInfo");
static_assert(sizeof(FSnfSoundVolumeInfo) == 0x000050, "Wrong size on FSnfSoundVolumeInfo");
static_assert(offsetof(FSnfSoundVolumeInfo, Comment) == 0x000008, "Member 'FSnfSoundVolumeInfo::Comment' has a wrong offset!");
static_assert(offsetof(FSnfSoundVolumeInfo, EnterAkEventList) == 0x000018, "Member 'FSnfSoundVolumeInfo::EnterAkEventList' has a wrong offset!");
static_assert(offsetof(FSnfSoundVolumeInfo, LeaveAkEventList) == 0x000028, "Member 'FSnfSoundVolumeInfo::LeaveAkEventList' has a wrong offset!");
static_assert(offsetof(FSnfSoundVolumeInfo, EnterAkEventRandom) == 0x000038, "Member 'FSnfSoundVolumeInfo::EnterAkEventRandom' has a wrong offset!");
static_assert(offsetof(FSnfSoundVolumeInfo, CallTimeForEnter) == 0x000048, "Member 'FSnfSoundVolumeInfo::CallTimeForEnter' has a wrong offset!");
static_assert(offsetof(FSnfSoundVolumeInfo, CallTimeForLeave) == 0x00004C, "Member 'FSnfSoundVolumeInfo::CallTimeForLeave' has a wrong offset!");

// ScriptStruct Snowfall.SnfAimParam
// 0x0028 (0x0028 - 0x0000)
struct FSnfAimParam final
{
public:
	bool                                          bUpdateTick;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotSpeed;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetPos;                                         // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RotBoneName;                                       // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableStrafe;                                     // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfAimParam) == 0x000004, "Wrong alignment on FSnfAimParam");
static_assert(sizeof(FSnfAimParam) == 0x000028, "Wrong size on FSnfAimParam");
static_assert(offsetof(FSnfAimParam, bUpdateTick) == 0x000000, "Member 'FSnfAimParam::bUpdateTick' has a wrong offset!");
static_assert(offsetof(FSnfAimParam, RotSpeed) == 0x000004, "Member 'FSnfAimParam::RotSpeed' has a wrong offset!");
static_assert(offsetof(FSnfAimParam, TargetActor) == 0x000008, "Member 'FSnfAimParam::TargetActor' has a wrong offset!");
static_assert(offsetof(FSnfAimParam, TargetPos) == 0x000010, "Member 'FSnfAimParam::TargetPos' has a wrong offset!");
static_assert(offsetof(FSnfAimParam, RotBoneName) == 0x00001C, "Member 'FSnfAimParam::RotBoneName' has a wrong offset!");
static_assert(offsetof(FSnfAimParam, bEnableStrafe) == 0x000024, "Member 'FSnfAimParam::bEnableStrafe' has a wrong offset!");

// ScriptStruct Snowfall.SnfShrineActorActivityInfo
// 0x0018 (0x0018 - 0x0000)
struct FSnfShrineActorActivityInfo final
{
public:
	class FName                                   CatalogName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0008(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TutrialID;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfShrineActorActivityInfo) == 0x000004, "Wrong alignment on FSnfShrineActorActivityInfo");
static_assert(sizeof(FSnfShrineActorActivityInfo) == 0x000018, "Wrong size on FSnfShrineActorActivityInfo");
static_assert(offsetof(FSnfShrineActorActivityInfo, CatalogName) == 0x000000, "Member 'FSnfShrineActorActivityInfo::CatalogName' has a wrong offset!");
static_assert(offsetof(FSnfShrineActorActivityInfo, GameplayTag) == 0x000008, "Member 'FSnfShrineActorActivityInfo::GameplayTag' has a wrong offset!");
static_assert(offsetof(FSnfShrineActorActivityInfo, TutrialID) == 0x000010, "Member 'FSnfShrineActorActivityInfo::TutrialID' has a wrong offset!");

// ScriptStruct Snowfall.SnfMrbtFindRateParam
// 0x001C (0x001C - 0x0000)
struct FSnfMrbtFindRateParam final
{
public:
	float                                         FastNoticeRange;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerHiding;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerWalking;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerRunning;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerCrouching;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerJumping;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroupBattle;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMrbtFindRateParam) == 0x000004, "Wrong alignment on FSnfMrbtFindRateParam");
static_assert(sizeof(FSnfMrbtFindRateParam) == 0x00001C, "Wrong size on FSnfMrbtFindRateParam");
static_assert(offsetof(FSnfMrbtFindRateParam, FastNoticeRange) == 0x000000, "Member 'FSnfMrbtFindRateParam::FastNoticeRange' has a wrong offset!");
static_assert(offsetof(FSnfMrbtFindRateParam, PlayerHiding) == 0x000004, "Member 'FSnfMrbtFindRateParam::PlayerHiding' has a wrong offset!");
static_assert(offsetof(FSnfMrbtFindRateParam, PlayerWalking) == 0x000008, "Member 'FSnfMrbtFindRateParam::PlayerWalking' has a wrong offset!");
static_assert(offsetof(FSnfMrbtFindRateParam, PlayerRunning) == 0x00000C, "Member 'FSnfMrbtFindRateParam::PlayerRunning' has a wrong offset!");
static_assert(offsetof(FSnfMrbtFindRateParam, PlayerCrouching) == 0x000010, "Member 'FSnfMrbtFindRateParam::PlayerCrouching' has a wrong offset!");
static_assert(offsetof(FSnfMrbtFindRateParam, PlayerJumping) == 0x000014, "Member 'FSnfMrbtFindRateParam::PlayerJumping' has a wrong offset!");
static_assert(offsetof(FSnfMrbtFindRateParam, GroupBattle) == 0x000018, "Member 'FSnfMrbtFindRateParam::GroupBattle' has a wrong offset!");

// ScriptStruct Snowfall.SnfQualityPresetGlobalIllumination
// 0x000C (0x000C - 0x0000)
struct FSnfQualityPresetGlobalIllumination final
{
public:
	uint8                                         Index;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSSGIEnabled;                                      // 0x0001(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SSGIQuality;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmbientOcclusionLevels;                            // 0x0008(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfQualityPresetGlobalIllumination) == 0x000004, "Wrong alignment on FSnfQualityPresetGlobalIllumination");
static_assert(sizeof(FSnfQualityPresetGlobalIllumination) == 0x00000C, "Wrong size on FSnfQualityPresetGlobalIllumination");
static_assert(offsetof(FSnfQualityPresetGlobalIllumination, Index) == 0x000000, "Member 'FSnfQualityPresetGlobalIllumination::Index' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetGlobalIllumination, bSSGIEnabled) == 0x000001, "Member 'FSnfQualityPresetGlobalIllumination::bSSGIEnabled' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetGlobalIllumination, SSGIQuality) == 0x000004, "Member 'FSnfQualityPresetGlobalIllumination::SSGIQuality' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetGlobalIllumination, AmbientOcclusionLevels) == 0x000008, "Member 'FSnfQualityPresetGlobalIllumination::AmbientOcclusionLevels' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogActivityStepMark
// 0x0040 (0x0040 - 0x0000)
struct FSnfCatalogActivityStepMark final
{
public:
	class FText                                   MarkText;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	ESnfGameActivityMarkType                      MarkType;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           MarkFlag;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FVector4>                       MarkLocation;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCatalogActivityStepMark) == 0x000008, "Wrong alignment on FSnfCatalogActivityStepMark");
static_assert(sizeof(FSnfCatalogActivityStepMark) == 0x000040, "Wrong size on FSnfCatalogActivityStepMark");
static_assert(offsetof(FSnfCatalogActivityStepMark, MarkText) == 0x000000, "Member 'FSnfCatalogActivityStepMark::MarkText' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivityStepMark, MarkType) == 0x000018, "Member 'FSnfCatalogActivityStepMark::MarkType' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivityStepMark, MarkFlag) == 0x000020, "Member 'FSnfCatalogActivityStepMark::MarkFlag' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivityStepMark, MarkLocation) == 0x000030, "Member 'FSnfCatalogActivityStepMark::MarkLocation' has a wrong offset!");

// ScriptStruct Snowfall.SnfSupplyCrowdParam
// 0x0024 (0x0024 - 0x0000)
struct alignas(0x04) FSnfSupplyCrowdParam final
{
public:
	uint8                                         Pad_0[0x24];                                       // 0x0000(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfSupplyCrowdParam) == 0x000004, "Wrong alignment on FSnfSupplyCrowdParam");
static_assert(sizeof(FSnfSupplyCrowdParam) == 0x000024, "Wrong size on FSnfSupplyCrowdParam");

// ScriptStruct Snowfall.SnfMrbtMoveData
// 0x0048 (0x0048 - 0x0000)
struct FSnfMrbtMoveData final
{
public:
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ProjectNaviPos;                                    // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlayerNaviPos;                                     // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MovePos;                                           // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        PathPoints;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         PathLength;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseNavi;                                          // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNaviPartial;                                      // 0x0045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfMrbtMoveData) == 0x000008, "Wrong alignment on FSnfMrbtMoveData");
static_assert(sizeof(FSnfMrbtMoveData) == 0x000048, "Wrong size on FSnfMrbtMoveData");
static_assert(offsetof(FSnfMrbtMoveData, TargetActor) == 0x000000, "Member 'FSnfMrbtMoveData::TargetActor' has a wrong offset!");
static_assert(offsetof(FSnfMrbtMoveData, ProjectNaviPos) == 0x000008, "Member 'FSnfMrbtMoveData::ProjectNaviPos' has a wrong offset!");
static_assert(offsetof(FSnfMrbtMoveData, PlayerNaviPos) == 0x000014, "Member 'FSnfMrbtMoveData::PlayerNaviPos' has a wrong offset!");
static_assert(offsetof(FSnfMrbtMoveData, MovePos) == 0x000020, "Member 'FSnfMrbtMoveData::MovePos' has a wrong offset!");
static_assert(offsetof(FSnfMrbtMoveData, PathPoints) == 0x000030, "Member 'FSnfMrbtMoveData::PathPoints' has a wrong offset!");
static_assert(offsetof(FSnfMrbtMoveData, PathLength) == 0x000040, "Member 'FSnfMrbtMoveData::PathLength' has a wrong offset!");
static_assert(offsetof(FSnfMrbtMoveData, bUseNavi) == 0x000044, "Member 'FSnfMrbtMoveData::bUseNavi' has a wrong offset!");
static_assert(offsetof(FSnfMrbtMoveData, bNaviPartial) == 0x000045, "Member 'FSnfMrbtMoveData::bNaviPartial' has a wrong offset!");

// ScriptStruct Snowfall.SnfMrbtTeleportData
// 0x0024 (0x0024 - 0x0000)
struct FSnfMrbtTeleportData final
{
public:
	struct FVector                                TargetPos;                                         // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartPos;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecTeleport;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TeleportTime;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NowTime;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMrbtTeleportData) == 0x000004, "Wrong alignment on FSnfMrbtTeleportData");
static_assert(sizeof(FSnfMrbtTeleportData) == 0x000024, "Wrong size on FSnfMrbtTeleportData");
static_assert(offsetof(FSnfMrbtTeleportData, TargetPos) == 0x000000, "Member 'FSnfMrbtTeleportData::TargetPos' has a wrong offset!");
static_assert(offsetof(FSnfMrbtTeleportData, StartPos) == 0x00000C, "Member 'FSnfMrbtTeleportData::StartPos' has a wrong offset!");
static_assert(offsetof(FSnfMrbtTeleportData, bExecTeleport) == 0x000018, "Member 'FSnfMrbtTeleportData::bExecTeleport' has a wrong offset!");
static_assert(offsetof(FSnfMrbtTeleportData, TeleportTime) == 0x00001C, "Member 'FSnfMrbtTeleportData::TeleportTime' has a wrong offset!");
static_assert(offsetof(FSnfMrbtTeleportData, NowTime) == 0x000020, "Member 'FSnfMrbtTeleportData::NowTime' has a wrong offset!");

// ScriptStruct Snowfall.SnfCcBodyPartKitLayer
// 0x0010 (0x0010 - 0x0000)
struct FSnfCcBodyPartKitLayer final
{
public:
	TArray<class USnfCcBodyPartKit*>              Kits;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCcBodyPartKitLayer) == 0x000008, "Wrong alignment on FSnfCcBodyPartKitLayer");
static_assert(sizeof(FSnfCcBodyPartKitLayer) == 0x000010, "Wrong size on FSnfCcBodyPartKitLayer");
static_assert(offsetof(FSnfCcBodyPartKitLayer, Kits) == 0x000000, "Member 'FSnfCcBodyPartKitLayer::Kits' has a wrong offset!");

// ScriptStruct Snowfall.SnfCcNpcKit
// 0x0028 (0x0028 - 0x0000)
struct FSnfCcNpcKit final
{
public:
	float                                         SkeletonTypeRandomWeight[0x2];                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSnfCcBodyPartKitLayer>         BodyPartKitLayers;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsOverwriteHead;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOverwriteTops;                                   // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOverwriteBottoms;                                // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOverwriteGloves;                                 // 0x001B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOverwriteShoes;                                  // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOverwriteHair;                                   // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOverwriteAccessory1;                             // 0x001E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOverwriteAccessory2;                             // 0x001F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOverwriteMask;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCcNpcKit) == 0x000008, "Wrong alignment on FSnfCcNpcKit");
static_assert(sizeof(FSnfCcNpcKit) == 0x000028, "Wrong size on FSnfCcNpcKit");
static_assert(offsetof(FSnfCcNpcKit, SkeletonTypeRandomWeight) == 0x000000, "Member 'FSnfCcNpcKit::SkeletonTypeRandomWeight' has a wrong offset!");
static_assert(offsetof(FSnfCcNpcKit, BodyPartKitLayers) == 0x000008, "Member 'FSnfCcNpcKit::BodyPartKitLayers' has a wrong offset!");
static_assert(offsetof(FSnfCcNpcKit, IsOverwriteHead) == 0x000018, "Member 'FSnfCcNpcKit::IsOverwriteHead' has a wrong offset!");
static_assert(offsetof(FSnfCcNpcKit, IsOverwriteTops) == 0x000019, "Member 'FSnfCcNpcKit::IsOverwriteTops' has a wrong offset!");
static_assert(offsetof(FSnfCcNpcKit, IsOverwriteBottoms) == 0x00001A, "Member 'FSnfCcNpcKit::IsOverwriteBottoms' has a wrong offset!");
static_assert(offsetof(FSnfCcNpcKit, IsOverwriteGloves) == 0x00001B, "Member 'FSnfCcNpcKit::IsOverwriteGloves' has a wrong offset!");
static_assert(offsetof(FSnfCcNpcKit, IsOverwriteShoes) == 0x00001C, "Member 'FSnfCcNpcKit::IsOverwriteShoes' has a wrong offset!");
static_assert(offsetof(FSnfCcNpcKit, IsOverwriteHair) == 0x00001D, "Member 'FSnfCcNpcKit::IsOverwriteHair' has a wrong offset!");
static_assert(offsetof(FSnfCcNpcKit, IsOverwriteAccessory1) == 0x00001E, "Member 'FSnfCcNpcKit::IsOverwriteAccessory1' has a wrong offset!");
static_assert(offsetof(FSnfCcNpcKit, IsOverwriteAccessory2) == 0x00001F, "Member 'FSnfCcNpcKit::IsOverwriteAccessory2' has a wrong offset!");
static_assert(offsetof(FSnfCcNpcKit, IsOverwriteMask) == 0x000020, "Member 'FSnfCcNpcKit::IsOverwriteMask' has a wrong offset!");

// ScriptStruct Snowfall.SnfMrbtWarpParam
// 0x0058 (0x0058 - 0x0000)
struct FSnfMrbtWarpParam final
{
public:
	struct FVector                                TargetPos;                                         // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartPos;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ControlPoint1;                                     // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ControlPoint2;                                     // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartingRightVec;                                  // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecWarp;                                         // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReqWarp;                                          // 0x003D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrepare;                                          // 0x003E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeginAnimAfterWarp;                               // 0x003F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedWarp;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttackWarp;                                       // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WarpTime;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NowTime;                                           // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoolTime;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AfterWarpTime;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMrbtWarpParam) == 0x000004, "Wrong alignment on FSnfMrbtWarpParam");
static_assert(sizeof(FSnfMrbtWarpParam) == 0x000058, "Wrong size on FSnfMrbtWarpParam");
static_assert(offsetof(FSnfMrbtWarpParam, TargetPos) == 0x000000, "Member 'FSnfMrbtWarpParam::TargetPos' has a wrong offset!");
static_assert(offsetof(FSnfMrbtWarpParam, StartPos) == 0x00000C, "Member 'FSnfMrbtWarpParam::StartPos' has a wrong offset!");
static_assert(offsetof(FSnfMrbtWarpParam, ControlPoint1) == 0x000018, "Member 'FSnfMrbtWarpParam::ControlPoint1' has a wrong offset!");
static_assert(offsetof(FSnfMrbtWarpParam, ControlPoint2) == 0x000024, "Member 'FSnfMrbtWarpParam::ControlPoint2' has a wrong offset!");
static_assert(offsetof(FSnfMrbtWarpParam, StartingRightVec) == 0x000030, "Member 'FSnfMrbtWarpParam::StartingRightVec' has a wrong offset!");
static_assert(offsetof(FSnfMrbtWarpParam, bExecWarp) == 0x00003C, "Member 'FSnfMrbtWarpParam::bExecWarp' has a wrong offset!");
static_assert(offsetof(FSnfMrbtWarpParam, bReqWarp) == 0x00003D, "Member 'FSnfMrbtWarpParam::bReqWarp' has a wrong offset!");
static_assert(offsetof(FSnfMrbtWarpParam, bPrepare) == 0x00003E, "Member 'FSnfMrbtWarpParam::bPrepare' has a wrong offset!");
static_assert(offsetof(FSnfMrbtWarpParam, bBeginAnimAfterWarp) == 0x00003F, "Member 'FSnfMrbtWarpParam::bBeginAnimAfterWarp' has a wrong offset!");
static_assert(offsetof(FSnfMrbtWarpParam, bNeedWarp) == 0x000040, "Member 'FSnfMrbtWarpParam::bNeedWarp' has a wrong offset!");
static_assert(offsetof(FSnfMrbtWarpParam, bAttackWarp) == 0x000041, "Member 'FSnfMrbtWarpParam::bAttackWarp' has a wrong offset!");
static_assert(offsetof(FSnfMrbtWarpParam, WarpTime) == 0x000044, "Member 'FSnfMrbtWarpParam::WarpTime' has a wrong offset!");
static_assert(offsetof(FSnfMrbtWarpParam, NowTime) == 0x000048, "Member 'FSnfMrbtWarpParam::NowTime' has a wrong offset!");
static_assert(offsetof(FSnfMrbtWarpParam, CoolTime) == 0x00004C, "Member 'FSnfMrbtWarpParam::CoolTime' has a wrong offset!");
static_assert(offsetof(FSnfMrbtWarpParam, DelayTime) == 0x000050, "Member 'FSnfMrbtWarpParam::DelayTime' has a wrong offset!");
static_assert(offsetof(FSnfMrbtWarpParam, AfterWarpTime) == 0x000054, "Member 'FSnfMrbtWarpParam::AfterWarpTime' has a wrong offset!");

// ScriptStruct Snowfall.SnfMrbtBeginAnim
// 0x0050 (0x0050 - 0x0000)
struct FSnfMrbtBeginAnim final
{
public:
	TSoftObjectPtr<class UAnimSequenceBase>       BeginAnimAsset;                                    // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequenceBase>       BeginEndAnimAsset;                                 // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMrbtBeginAnim) == 0x000008, "Wrong alignment on FSnfMrbtBeginAnim");
static_assert(sizeof(FSnfMrbtBeginAnim) == 0x000050, "Wrong size on FSnfMrbtBeginAnim");
static_assert(offsetof(FSnfMrbtBeginAnim, BeginAnimAsset) == 0x000000, "Member 'FSnfMrbtBeginAnim::BeginAnimAsset' has a wrong offset!");
static_assert(offsetof(FSnfMrbtBeginAnim, BeginEndAnimAsset) == 0x000028, "Member 'FSnfMrbtBeginAnim::BeginEndAnimAsset' has a wrong offset!");

// ScriptStruct Snowfall.SnfCameraInfo
// 0x0028 (0x0030 - 0x0008)
struct FSnfCameraInfo final : public FTableRowBase
{
public:
	struct FVector                                Offset;                                            // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSpeed;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutSpeed;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchUpOffset;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchDownOffset;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LagSpeed;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCameraInfo) == 0x000008, "Wrong alignment on FSnfCameraInfo");
static_assert(sizeof(FSnfCameraInfo) == 0x000030, "Wrong size on FSnfCameraInfo");
static_assert(offsetof(FSnfCameraInfo, Offset) == 0x000008, "Member 'FSnfCameraInfo::Offset' has a wrong offset!");
static_assert(offsetof(FSnfCameraInfo, Yaw) == 0x000014, "Member 'FSnfCameraInfo::Yaw' has a wrong offset!");
static_assert(offsetof(FSnfCameraInfo, InSpeed) == 0x000018, "Member 'FSnfCameraInfo::InSpeed' has a wrong offset!");
static_assert(offsetof(FSnfCameraInfo, OutSpeed) == 0x00001C, "Member 'FSnfCameraInfo::OutSpeed' has a wrong offset!");
static_assert(offsetof(FSnfCameraInfo, PitchUpOffset) == 0x000020, "Member 'FSnfCameraInfo::PitchUpOffset' has a wrong offset!");
static_assert(offsetof(FSnfCameraInfo, PitchDownOffset) == 0x000024, "Member 'FSnfCameraInfo::PitchDownOffset' has a wrong offset!");
static_assert(offsetof(FSnfCameraInfo, LagSpeed) == 0x000028, "Member 'FSnfCameraInfo::LagSpeed' has a wrong offset!");

// ScriptStruct Snowfall.SnfGimmickActorChildLightSetting
// 0x0040 (0x0040 - 0x0000)
struct FSnfGimmickActorChildLightSetting final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class ASnfLightBase>              LightClass;                                        // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLightChannelSetting;                           // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGimmickActorChildLightSetting) == 0x000010, "Wrong alignment on FSnfGimmickActorChildLightSetting");
static_assert(sizeof(FSnfGimmickActorChildLightSetting) == 0x000040, "Wrong size on FSnfGimmickActorChildLightSetting");
static_assert(offsetof(FSnfGimmickActorChildLightSetting, Transform) == 0x000000, "Member 'FSnfGimmickActorChildLightSetting::Transform' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorChildLightSetting, LightClass) == 0x000030, "Member 'FSnfGimmickActorChildLightSetting::LightClass' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorChildLightSetting, bUseLightChannelSetting) == 0x000038, "Member 'FSnfGimmickActorChildLightSetting::bUseLightChannelSetting' has a wrong offset!");

// ScriptStruct Snowfall.SnfEnemyAmmoParam
// 0x0018 (0x0018 - 0x0000)
struct FSnfEnemyAmmoParam final
{
public:
	TSubclassOf<class ASnfWeaponAmmo>             AmmoClass;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedRate;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityRate;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShotSocketName;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEnemyAmmoParam) == 0x000008, "Wrong alignment on FSnfEnemyAmmoParam");
static_assert(sizeof(FSnfEnemyAmmoParam) == 0x000018, "Wrong size on FSnfEnemyAmmoParam");
static_assert(offsetof(FSnfEnemyAmmoParam, AmmoClass) == 0x000000, "Member 'FSnfEnemyAmmoParam::AmmoClass' has a wrong offset!");
static_assert(offsetof(FSnfEnemyAmmoParam, SpeedRate) == 0x000008, "Member 'FSnfEnemyAmmoParam::SpeedRate' has a wrong offset!");
static_assert(offsetof(FSnfEnemyAmmoParam, GravityRate) == 0x00000C, "Member 'FSnfEnemyAmmoParam::GravityRate' has a wrong offset!");
static_assert(offsetof(FSnfEnemyAmmoParam, ShotSocketName) == 0x000010, "Member 'FSnfEnemyAmmoParam::ShotSocketName' has a wrong offset!");

// ScriptStruct Snowfall.SnfQualityPresetTextureStreaming
// 0x0008 (0x0008 - 0x0000)
struct FSnfQualityPresetTextureStreaming final
{
public:
	uint8                                         Index;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PoolSize;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfQualityPresetTextureStreaming) == 0x000004, "Wrong alignment on FSnfQualityPresetTextureStreaming");
static_assert(sizeof(FSnfQualityPresetTextureStreaming) == 0x000008, "Wrong size on FSnfQualityPresetTextureStreaming");
static_assert(offsetof(FSnfQualityPresetTextureStreaming, Index) == 0x000000, "Member 'FSnfQualityPresetTextureStreaming::Index' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetTextureStreaming, PoolSize) == 0x000004, "Member 'FSnfQualityPresetTextureStreaming::PoolSize' has a wrong offset!");

// ScriptStruct Snowfall.Em1600BlockInfo
// 0x0014 (0x0014 - 0x0000)
struct FEm1600BlockInfo final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size2D;                                            // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEm1600BlockInfo) == 0x000004, "Wrong alignment on FEm1600BlockInfo");
static_assert(sizeof(FEm1600BlockInfo) == 0x000014, "Wrong size on FEm1600BlockInfo");
static_assert(offsetof(FEm1600BlockInfo, Offset) == 0x000000, "Member 'FEm1600BlockInfo::Offset' has a wrong offset!");
static_assert(offsetof(FEm1600BlockInfo, Size2D) == 0x00000C, "Member 'FEm1600BlockInfo::Size2D' has a wrong offset!");

// ScriptStruct Snowfall.Em1000HairAttackSetting
// 0x0008 (0x0008 - 0x0000)
struct FEm1000HairAttackSetting final
{
public:
	int32                                         HairIndex;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEm1000HairAttackSetting) == 0x000004, "Wrong alignment on FEm1000HairAttackSetting");
static_assert(sizeof(FEm1000HairAttackSetting) == 0x000008, "Wrong size on FEm1000HairAttackSetting");
static_assert(offsetof(FEm1000HairAttackSetting, HairIndex) == 0x000000, "Member 'FEm1000HairAttackSetting::HairIndex' has a wrong offset!");
static_assert(offsetof(FEm1000HairAttackSetting, DelayTime) == 0x000004, "Member 'FEm1000HairAttackSetting::DelayTime' has a wrong offset!");

// ScriptStruct Snowfall.SnfEnemyBounds
// 0x0024 (0x0024 - 0x0000)
struct FSnfEnemyBounds final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEnemyBounds) == 0x000004, "Wrong alignment on FSnfEnemyBounds");
static_assert(sizeof(FSnfEnemyBounds) == 0x000024, "Wrong size on FSnfEnemyBounds");
static_assert(offsetof(FSnfEnemyBounds, Origin) == 0x000000, "Member 'FSnfEnemyBounds::Origin' has a wrong offset!");
static_assert(offsetof(FSnfEnemyBounds, Rotator) == 0x00000C, "Member 'FSnfEnemyBounds::Rotator' has a wrong offset!");
static_assert(offsetof(FSnfEnemyBounds, BoxExtent) == 0x000018, "Member 'FSnfEnemyBounds::BoxExtent' has a wrong offset!");

// ScriptStruct Snowfall.SnfGimmickActorSoundSetting
// 0x0018 (0x0018 - 0x0000)
struct FSnfGimmickActorSoundSetting final
{
public:
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallDelayTime;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CallFrontAnimationRateOffset;                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGimmickActorSoundSetting) == 0x000008, "Wrong alignment on FSnfGimmickActorSoundSetting");
static_assert(sizeof(FSnfGimmickActorSoundSetting) == 0x000018, "Wrong size on FSnfGimmickActorSoundSetting");
static_assert(offsetof(FSnfGimmickActorSoundSetting, AudioEvent) == 0x000000, "Member 'FSnfGimmickActorSoundSetting::AudioEvent' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorSoundSetting, CallDelayTime) == 0x000008, "Member 'FSnfGimmickActorSoundSetting::CallDelayTime' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorSoundSetting, CallFrontAnimationRateOffset) == 0x00000C, "Member 'FSnfGimmickActorSoundSetting::CallFrontAnimationRateOffset' has a wrong offset!");

// ScriptStruct Snowfall.SnfBTTaskEnemyAnimStateName
// 0x0010 (0x0010 - 0x0000)
struct FSnfBTTaskEnemyAnimStateName final
{
public:
	class FName                                   MachineName;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfBTTaskEnemyAnimStateName) == 0x000004, "Wrong alignment on FSnfBTTaskEnemyAnimStateName");
static_assert(sizeof(FSnfBTTaskEnemyAnimStateName) == 0x000010, "Wrong size on FSnfBTTaskEnemyAnimStateName");
static_assert(offsetof(FSnfBTTaskEnemyAnimStateName, MachineName) == 0x000000, "Member 'FSnfBTTaskEnemyAnimStateName::MachineName' has a wrong offset!");
static_assert(offsetof(FSnfBTTaskEnemyAnimStateName, StateName) == 0x000008, "Member 'FSnfBTTaskEnemyAnimStateName::StateName' has a wrong offset!");

// ScriptStruct Snowfall.SnfCoverSegment
// 0x0028 (0x0028 - 0x0000)
struct FSnfCoverSegment final
{
public:
	int32                                         Length;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Edge0;                                             // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Edge1;                                             // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCoverSegment) == 0x000004, "Wrong alignment on FSnfCoverSegment");
static_assert(sizeof(FSnfCoverSegment) == 0x000028, "Wrong size on FSnfCoverSegment");
static_assert(offsetof(FSnfCoverSegment, Length) == 0x000000, "Member 'FSnfCoverSegment::Length' has a wrong offset!");
static_assert(offsetof(FSnfCoverSegment, Edge0) == 0x000004, "Member 'FSnfCoverSegment::Edge0' has a wrong offset!");
static_assert(offsetof(FSnfCoverSegment, Edge1) == 0x000010, "Member 'FSnfCoverSegment::Edge1' has a wrong offset!");
static_assert(offsetof(FSnfCoverSegment, Normal) == 0x00001C, "Member 'FSnfCoverSegment::Normal' has a wrong offset!");

// ScriptStruct Snowfall.SnfGimmickActorChildItemSetting
// 0x0080 (0x0080 - 0x0000)
struct FSnfGimmickActorChildItemSetting final
{
public:
	TSubclassOf<class ASnfItemPickupBase>         ItemActor;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttachPartsIndex;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocktName;                                         // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TransformOffset;                                   // 0x0020(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideItem;                                     // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideCatalogId;                                // 0x0051(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    CatalogId;                                         // 0x0058(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FTngInventoryItem>              ItemList;                                          // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ConnectPartsIndex;                                 // 0x0078(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConnectPartsActivated;                            // 0x007C(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGimmickActorChildItemSetting) == 0x000010, "Wrong alignment on FSnfGimmickActorChildItemSetting");
static_assert(sizeof(FSnfGimmickActorChildItemSetting) == 0x000080, "Wrong size on FSnfGimmickActorChildItemSetting");
static_assert(offsetof(FSnfGimmickActorChildItemSetting, ItemActor) == 0x000000, "Member 'FSnfGimmickActorChildItemSetting::ItemActor' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorChildItemSetting, AttachPartsIndex) == 0x000008, "Member 'FSnfGimmickActorChildItemSetting::AttachPartsIndex' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorChildItemSetting, SocktName) == 0x00000C, "Member 'FSnfGimmickActorChildItemSetting::SocktName' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorChildItemSetting, TransformOffset) == 0x000020, "Member 'FSnfGimmickActorChildItemSetting::TransformOffset' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorChildItemSetting, bOverrideItem) == 0x000050, "Member 'FSnfGimmickActorChildItemSetting::bOverrideItem' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorChildItemSetting, bOverrideCatalogId) == 0x000051, "Member 'FSnfGimmickActorChildItemSetting::bOverrideCatalogId' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorChildItemSetting, CatalogId) == 0x000058, "Member 'FSnfGimmickActorChildItemSetting::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorChildItemSetting, ItemList) == 0x000068, "Member 'FSnfGimmickActorChildItemSetting::ItemList' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorChildItemSetting, ConnectPartsIndex) == 0x000078, "Member 'FSnfGimmickActorChildItemSetting::ConnectPartsIndex' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorChildItemSetting, bConnectPartsActivated) == 0x00007C, "Member 'FSnfGimmickActorChildItemSetting::bConnectPartsActivated' has a wrong offset!");

// ScriptStruct Snowfall.SnfCoverEdge
// 0x0014 (0x0014 - 0x0000)
struct FSnfCoverEdge final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Segment0;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Segment1;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCoverEdge) == 0x000004, "Wrong alignment on FSnfCoverEdge");
static_assert(sizeof(FSnfCoverEdge) == 0x000014, "Wrong size on FSnfCoverEdge");
static_assert(offsetof(FSnfCoverEdge, Point) == 0x000000, "Member 'FSnfCoverEdge::Point' has a wrong offset!");
static_assert(offsetof(FSnfCoverEdge, Segment0) == 0x00000C, "Member 'FSnfCoverEdge::Segment0' has a wrong offset!");
static_assert(offsetof(FSnfCoverEdge, Segment1) == 0x000010, "Member 'FSnfCoverEdge::Segment1' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponInformation
// 0x0038 (0x0038 - 0x0000)
struct FSnfWeaponInformation final
{
public:
	class FName                                   CatalogId;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfSkillParam                                UseReferenceParam;                                 // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     CreateWeaponClass;                                 // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     WeaponClass;                                       // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EquipSlotName;                                     // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponInformation) == 0x000008, "Wrong alignment on FSnfWeaponInformation");
static_assert(sizeof(FSnfWeaponInformation) == 0x000038, "Wrong size on FSnfWeaponInformation");
static_assert(offsetof(FSnfWeaponInformation, CatalogId) == 0x000000, "Member 'FSnfWeaponInformation::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfWeaponInformation, UseReferenceParam) == 0x000008, "Member 'FSnfWeaponInformation::UseReferenceParam' has a wrong offset!");
static_assert(offsetof(FSnfWeaponInformation, CreateWeaponClass) == 0x000010, "Member 'FSnfWeaponInformation::CreateWeaponClass' has a wrong offset!");
static_assert(offsetof(FSnfWeaponInformation, WeaponClass) == 0x000018, "Member 'FSnfWeaponInformation::WeaponClass' has a wrong offset!");
static_assert(offsetof(FSnfWeaponInformation, EquipSlotName) == 0x000020, "Member 'FSnfWeaponInformation::EquipSlotName' has a wrong offset!");
static_assert(offsetof(FSnfWeaponInformation, Tags) == 0x000028, "Member 'FSnfWeaponInformation::Tags' has a wrong offset!");

// ScriptStruct Snowfall.SnfEnvQueryDebugDrawAttribute
// 0x0024 (0x0024 - 0x0000)
struct FSnfEnvQueryDebugDrawAttribute final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEnvQueryDebugDrawAttribute) == 0x000004, "Wrong alignment on FSnfEnvQueryDebugDrawAttribute");
static_assert(sizeof(FSnfEnvQueryDebugDrawAttribute) == 0x000024, "Wrong size on FSnfEnvQueryDebugDrawAttribute");
static_assert(offsetof(FSnfEnvQueryDebugDrawAttribute, Radius) == 0x000000, "Member 'FSnfEnvQueryDebugDrawAttribute::Radius' has a wrong offset!");
static_assert(offsetof(FSnfEnvQueryDebugDrawAttribute, Height) == 0x000004, "Member 'FSnfEnvQueryDebugDrawAttribute::Height' has a wrong offset!");
static_assert(offsetof(FSnfEnvQueryDebugDrawAttribute, Color) == 0x000008, "Member 'FSnfEnvQueryDebugDrawAttribute::Color' has a wrong offset!");
static_assert(offsetof(FSnfEnvQueryDebugDrawAttribute, Offset) == 0x00000C, "Member 'FSnfEnvQueryDebugDrawAttribute::Offset' has a wrong offset!");
static_assert(offsetof(FSnfEnvQueryDebugDrawAttribute, Rotation) == 0x000018, "Member 'FSnfEnvQueryDebugDrawAttribute::Rotation' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameEnvPostProcessMaterial
// 0x0010 (0x0010 - 0x0000)
struct FSnfGameEnvPostProcessMaterial final
{
public:
	float                                         BlendWeight;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MaterialInstanceDynamic;                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameEnvPostProcessMaterial) == 0x000008, "Wrong alignment on FSnfGameEnvPostProcessMaterial");
static_assert(sizeof(FSnfGameEnvPostProcessMaterial) == 0x000010, "Wrong size on FSnfGameEnvPostProcessMaterial");
static_assert(offsetof(FSnfGameEnvPostProcessMaterial, BlendWeight) == 0x000000, "Member 'FSnfGameEnvPostProcessMaterial::BlendWeight' has a wrong offset!");
static_assert(offsetof(FSnfGameEnvPostProcessMaterial, MaterialInstanceDynamic) == 0x000008, "Member 'FSnfGameEnvPostProcessMaterial::MaterialInstanceDynamic' has a wrong offset!");

// ScriptStruct Snowfall.SnfQualityPresetConsoleGeneral
// 0x002C (0x002C - 0x0000)
struct FSnfQualityPresetConsoleGeneral final
{
public:
	uint8                                         Index;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxFPS;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVsync;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DynamicResOperationMode;                           // 0x000C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicResFrameTimeBudget;                         // 0x0010(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenPercentage;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TemporalAAUpsampling;                              // 0x0018(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TemporalAAAlgorithm;                               // 0x001C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FidelityFXFSRPrimaryUpscale;                       // 0x0020(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MipMapLODBias;                                     // 0x0024(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Flags;                                             // 0x0028(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfQualityPresetConsoleGeneral) == 0x000004, "Wrong alignment on FSnfQualityPresetConsoleGeneral");
static_assert(sizeof(FSnfQualityPresetConsoleGeneral) == 0x00002C, "Wrong size on FSnfQualityPresetConsoleGeneral");
static_assert(offsetof(FSnfQualityPresetConsoleGeneral, Index) == 0x000000, "Member 'FSnfQualityPresetConsoleGeneral::Index' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetConsoleGeneral, MaxFPS) == 0x000004, "Member 'FSnfQualityPresetConsoleGeneral::MaxFPS' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetConsoleGeneral, bVsync) == 0x000008, "Member 'FSnfQualityPresetConsoleGeneral::bVsync' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetConsoleGeneral, DynamicResOperationMode) == 0x00000C, "Member 'FSnfQualityPresetConsoleGeneral::DynamicResOperationMode' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetConsoleGeneral, DynamicResFrameTimeBudget) == 0x000010, "Member 'FSnfQualityPresetConsoleGeneral::DynamicResFrameTimeBudget' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetConsoleGeneral, ScreenPercentage) == 0x000014, "Member 'FSnfQualityPresetConsoleGeneral::ScreenPercentage' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetConsoleGeneral, TemporalAAUpsampling) == 0x000018, "Member 'FSnfQualityPresetConsoleGeneral::TemporalAAUpsampling' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetConsoleGeneral, TemporalAAAlgorithm) == 0x00001C, "Member 'FSnfQualityPresetConsoleGeneral::TemporalAAAlgorithm' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetConsoleGeneral, FidelityFXFSRPrimaryUpscale) == 0x000020, "Member 'FSnfQualityPresetConsoleGeneral::FidelityFXFSRPrimaryUpscale' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetConsoleGeneral, MipMapLODBias) == 0x000024, "Member 'FSnfQualityPresetConsoleGeneral::MipMapLODBias' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetConsoleGeneral, Flags) == 0x000028, "Member 'FSnfQualityPresetConsoleGeneral::Flags' has a wrong offset!");

// ScriptStruct Snowfall.SnfEnvVFXContainerVFXInfo
// 0x0010 (0x0010 - 0x0000)
struct FSnfEnvVFXContainerVFXInfo final
{
public:
	class UParticleSystemComponent*               Component;                                         // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0008(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEnvVFXContainerVFXInfo) == 0x000008, "Wrong alignment on FSnfEnvVFXContainerVFXInfo");
static_assert(sizeof(FSnfEnvVFXContainerVFXInfo) == 0x000010, "Wrong size on FSnfEnvVFXContainerVFXInfo");
static_assert(offsetof(FSnfEnvVFXContainerVFXInfo, Component) == 0x000000, "Member 'FSnfEnvVFXContainerVFXInfo::Component' has a wrong offset!");
static_assert(offsetof(FSnfEnvVFXContainerVFXInfo, NiagaraComponent) == 0x000008, "Member 'FSnfEnvVFXContainerVFXInfo::NiagaraComponent' has a wrong offset!");

// ScriptStruct Snowfall.SnfEnvVFXContainerBuildInfo
// 0x0090 (0x0090 - 0x0000)
struct FSnfEnvVFXContainerBuildInfo final
{
public:
	class UParticleSystem*                        ParticleSystem;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraSystem;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            FxMesh;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Offset;                                            // 0x0020(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             AudioOffset;                                       // 0x0060(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEnvVFXContainerBuildInfo) == 0x000010, "Wrong alignment on FSnfEnvVFXContainerBuildInfo");
static_assert(sizeof(FSnfEnvVFXContainerBuildInfo) == 0x000090, "Wrong size on FSnfEnvVFXContainerBuildInfo");
static_assert(offsetof(FSnfEnvVFXContainerBuildInfo, ParticleSystem) == 0x000000, "Member 'FSnfEnvVFXContainerBuildInfo::ParticleSystem' has a wrong offset!");
static_assert(offsetof(FSnfEnvVFXContainerBuildInfo, NiagaraSystem) == 0x000008, "Member 'FSnfEnvVFXContainerBuildInfo::NiagaraSystem' has a wrong offset!");
static_assert(offsetof(FSnfEnvVFXContainerBuildInfo, FxMesh) == 0x000010, "Member 'FSnfEnvVFXContainerBuildInfo::FxMesh' has a wrong offset!");
static_assert(offsetof(FSnfEnvVFXContainerBuildInfo, Offset) == 0x000020, "Member 'FSnfEnvVFXContainerBuildInfo::Offset' has a wrong offset!");
static_assert(offsetof(FSnfEnvVFXContainerBuildInfo, AudioEvent) == 0x000050, "Member 'FSnfEnvVFXContainerBuildInfo::AudioEvent' has a wrong offset!");
static_assert(offsetof(FSnfEnvVFXContainerBuildInfo, AudioOffset) == 0x000060, "Member 'FSnfEnvVFXContainerBuildInfo::AudioOffset' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameInteractActorMultipleAction
// 0x00B8 (0x00B8 - 0x0000)
struct FSnfGameInteractActorMultipleAction final
{
public:
	TMap<class FName, class UObject*>             InteractActionList;                                // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
	float                                         InteractActionDelay;                               // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UObject*>             ScanActionList;                                    // 0x0058(0x0050)(Edit, NativeAccessSpecifierPublic)
	float                                         ScanActionDelay;                                   // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0xC];                                       // 0x00AC(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGameInteractActorMultipleAction) == 0x000008, "Wrong alignment on FSnfGameInteractActorMultipleAction");
static_assert(sizeof(FSnfGameInteractActorMultipleAction) == 0x0000B8, "Wrong size on FSnfGameInteractActorMultipleAction");
static_assert(offsetof(FSnfGameInteractActorMultipleAction, InteractActionList) == 0x000000, "Member 'FSnfGameInteractActorMultipleAction::InteractActionList' has a wrong offset!");
static_assert(offsetof(FSnfGameInteractActorMultipleAction, InteractActionDelay) == 0x000050, "Member 'FSnfGameInteractActorMultipleAction::InteractActionDelay' has a wrong offset!");
static_assert(offsetof(FSnfGameInteractActorMultipleAction, ScanActionList) == 0x000058, "Member 'FSnfGameInteractActorMultipleAction::ScanActionList' has a wrong offset!");
static_assert(offsetof(FSnfGameInteractActorMultipleAction, ScanActionDelay) == 0x0000A8, "Member 'FSnfGameInteractActorMultipleAction::ScanActionDelay' has a wrong offset!");

// ScriptStruct Snowfall.SnfScanTarget
// 0x0060 (0x0060 - 0x0000)
struct FSnfScanTarget final
{
public:
	class FName                                   FlagId;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CatalogId;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timer;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EffectOffset;                                      // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EffectScale;                                       // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASnfFXPropsActor>        FxProps;                                           // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapName;                                           // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInside;                                          // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDynamic;                                         // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWayPoint;                                        // 0x005A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsActive;                                          // 0x005B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEffect;                                          // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfScanTarget) == 0x000004, "Wrong alignment on FSnfScanTarget");
static_assert(sizeof(FSnfScanTarget) == 0x000060, "Wrong size on FSnfScanTarget");
static_assert(offsetof(FSnfScanTarget, FlagId) == 0x000000, "Member 'FSnfScanTarget::FlagId' has a wrong offset!");
static_assert(offsetof(FSnfScanTarget, CatalogId) == 0x000008, "Member 'FSnfScanTarget::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfScanTarget, Type) == 0x000010, "Member 'FSnfScanTarget::Type' has a wrong offset!");
static_assert(offsetof(FSnfScanTarget, Length) == 0x000014, "Member 'FSnfScanTarget::Length' has a wrong offset!");
static_assert(offsetof(FSnfScanTarget, Size) == 0x000018, "Member 'FSnfScanTarget::Size' has a wrong offset!");
static_assert(offsetof(FSnfScanTarget, Yaw) == 0x00001C, "Member 'FSnfScanTarget::Yaw' has a wrong offset!");
static_assert(offsetof(FSnfScanTarget, Timer) == 0x000020, "Member 'FSnfScanTarget::Timer' has a wrong offset!");
static_assert(offsetof(FSnfScanTarget, Location) == 0x000024, "Member 'FSnfScanTarget::Location' has a wrong offset!");
static_assert(offsetof(FSnfScanTarget, EffectOffset) == 0x000030, "Member 'FSnfScanTarget::EffectOffset' has a wrong offset!");
static_assert(offsetof(FSnfScanTarget, EffectScale) == 0x00003C, "Member 'FSnfScanTarget::EffectScale' has a wrong offset!");
static_assert(offsetof(FSnfScanTarget, FxProps) == 0x000048, "Member 'FSnfScanTarget::FxProps' has a wrong offset!");
static_assert(offsetof(FSnfScanTarget, MapName) == 0x000050, "Member 'FSnfScanTarget::MapName' has a wrong offset!");
static_assert(offsetof(FSnfScanTarget, IsInside) == 0x000058, "Member 'FSnfScanTarget::IsInside' has a wrong offset!");
static_assert(offsetof(FSnfScanTarget, IsDynamic) == 0x000059, "Member 'FSnfScanTarget::IsDynamic' has a wrong offset!");
static_assert(offsetof(FSnfScanTarget, IsWayPoint) == 0x00005A, "Member 'FSnfScanTarget::IsWayPoint' has a wrong offset!");
static_assert(offsetof(FSnfScanTarget, IsActive) == 0x00005B, "Member 'FSnfScanTarget::IsActive' has a wrong offset!");
static_assert(offsetof(FSnfScanTarget, IsEffect) == 0x00005C, "Member 'FSnfScanTarget::IsEffect' has a wrong offset!");

// ScriptStruct Snowfall.SnfEnvVFXContainerPlotInfo
// 0x0028 (0x0030 - 0x0008)
struct FSnfEnvVFXContainerPlotInfo final : public FTableRowBase
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ParticleSystem;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticlePriority;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            FxMesh;                                            // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEnvVFXContainerPlotInfo) == 0x000008, "Wrong alignment on FSnfEnvVFXContainerPlotInfo");
static_assert(sizeof(FSnfEnvVFXContainerPlotInfo) == 0x000030, "Wrong size on FSnfEnvVFXContainerPlotInfo");
static_assert(offsetof(FSnfEnvVFXContainerPlotInfo, Mesh) == 0x000008, "Member 'FSnfEnvVFXContainerPlotInfo::Mesh' has a wrong offset!");
static_assert(offsetof(FSnfEnvVFXContainerPlotInfo, ParticleSystem) == 0x000010, "Member 'FSnfEnvVFXContainerPlotInfo::ParticleSystem' has a wrong offset!");
static_assert(offsetof(FSnfEnvVFXContainerPlotInfo, ParticlePriority) == 0x000018, "Member 'FSnfEnvVFXContainerPlotInfo::ParticlePriority' has a wrong offset!");
static_assert(offsetof(FSnfEnvVFXContainerPlotInfo, FxMesh) == 0x000020, "Member 'FSnfEnvVFXContainerPlotInfo::FxMesh' has a wrong offset!");
static_assert(offsetof(FSnfEnvVFXContainerPlotInfo, AudioEvent) == 0x000028, "Member 'FSnfEnvVFXContainerPlotInfo::AudioEvent' has a wrong offset!");

// ScriptStruct Snowfall.SnfPSNActivityProgressTaskCommand
// 0x000C (0x000C - 0x0000)
struct FSnfPSNActivityProgressTaskCommand final
{
public:
	class FName                                   PSNActivityId;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfPSNActivityProgressCommand                Command;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteEndIfOnlyStarted;                          // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfPSNActivityProgressTaskCommand) == 0x000004, "Wrong alignment on FSnfPSNActivityProgressTaskCommand");
static_assert(sizeof(FSnfPSNActivityProgressTaskCommand) == 0x00000C, "Wrong size on FSnfPSNActivityProgressTaskCommand");
static_assert(offsetof(FSnfPSNActivityProgressTaskCommand, PSNActivityId) == 0x000000, "Member 'FSnfPSNActivityProgressTaskCommand::PSNActivityId' has a wrong offset!");
static_assert(offsetof(FSnfPSNActivityProgressTaskCommand, Command) == 0x000008, "Member 'FSnfPSNActivityProgressTaskCommand::Command' has a wrong offset!");
static_assert(offsetof(FSnfPSNActivityProgressTaskCommand, bExecuteEndIfOnlyStarted) == 0x000009, "Member 'FSnfPSNActivityProgressTaskCommand::bExecuteEndIfOnlyStarted' has a wrong offset!");

// ScriptStruct Snowfall.SnfPSNActivityProgressTask
// 0x0030 (0x0038 - 0x0008)
struct FSnfPSNActivityProgressTask final : public FTableRowBase
{
public:
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSnfPSNActivityProgressTaskCommand> StepBeginCommands;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfPSNActivityProgressTaskCommand> StepEndCommands;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPSNActivityProgressTask) == 0x000008, "Wrong alignment on FSnfPSNActivityProgressTask");
static_assert(sizeof(FSnfPSNActivityProgressTask) == 0x000038, "Wrong size on FSnfPSNActivityProgressTask");
static_assert(offsetof(FSnfPSNActivityProgressTask, Comment) == 0x000008, "Member 'FSnfPSNActivityProgressTask::Comment' has a wrong offset!");
static_assert(offsetof(FSnfPSNActivityProgressTask, StepBeginCommands) == 0x000018, "Member 'FSnfPSNActivityProgressTask::StepBeginCommands' has a wrong offset!");
static_assert(offsetof(FSnfPSNActivityProgressTask, StepEndCommands) == 0x000028, "Member 'FSnfPSNActivityProgressTask::StepEndCommands' has a wrong offset!");

// ScriptStruct Snowfall.SnfEscalatorActorDynamicMaterialComponent
// 0x0018 (0x0018 - 0x0000)
struct FSnfEscalatorActorDynamicMaterialComponent final
{
public:
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScalarValue;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiplicationStepSpeed;                          // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfEscalatorActorDynamicMaterialComponent) == 0x000008, "Wrong alignment on FSnfEscalatorActorDynamicMaterialComponent");
static_assert(sizeof(FSnfEscalatorActorDynamicMaterialComponent) == 0x000018, "Wrong size on FSnfEscalatorActorDynamicMaterialComponent");
static_assert(offsetof(FSnfEscalatorActorDynamicMaterialComponent, DynamicMaterial) == 0x000000, "Member 'FSnfEscalatorActorDynamicMaterialComponent::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(FSnfEscalatorActorDynamicMaterialComponent, ParameterName) == 0x000008, "Member 'FSnfEscalatorActorDynamicMaterialComponent::ParameterName' has a wrong offset!");
static_assert(offsetof(FSnfEscalatorActorDynamicMaterialComponent, ScalarValue) == 0x000010, "Member 'FSnfEscalatorActorDynamicMaterialComponent::ScalarValue' has a wrong offset!");
static_assert(offsetof(FSnfEscalatorActorDynamicMaterialComponent, bMultiplicationStepSpeed) == 0x000014, "Member 'FSnfEscalatorActorDynamicMaterialComponent::bMultiplicationStepSpeed' has a wrong offset!");

// ScriptStruct Snowfall.SnfEscalatorActorFrameComponent
// 0x0018 (0x0018 - 0x0000)
struct FSnfEscalatorActorFrameComponent final
{
public:
	class USnfStaticMeshComponent*                MeshComponent;                                     // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSnfEscalatorActorDynamicMaterialComponent> DynamicMaterialComponents;                         // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEscalatorActorFrameComponent) == 0x000008, "Wrong alignment on FSnfEscalatorActorFrameComponent");
static_assert(sizeof(FSnfEscalatorActorFrameComponent) == 0x000018, "Wrong size on FSnfEscalatorActorFrameComponent");
static_assert(offsetof(FSnfEscalatorActorFrameComponent, MeshComponent) == 0x000000, "Member 'FSnfEscalatorActorFrameComponent::MeshComponent' has a wrong offset!");
static_assert(offsetof(FSnfEscalatorActorFrameComponent, DynamicMaterialComponents) == 0x000008, "Member 'FSnfEscalatorActorFrameComponent::DynamicMaterialComponents' has a wrong offset!");

// ScriptStruct Snowfall.SnfWalkwayLocation
// 0x000C (0x000C - 0x0000)
struct FSnfWalkwayLocation final
{
public:
	TWeakObjectPtr<class AActor>                  Walkway;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Key;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWalkwayLocation) == 0x000004, "Wrong alignment on FSnfWalkwayLocation");
static_assert(sizeof(FSnfWalkwayLocation) == 0x00000C, "Wrong size on FSnfWalkwayLocation");
static_assert(offsetof(FSnfWalkwayLocation, Walkway) == 0x000000, "Member 'FSnfWalkwayLocation::Walkway' has a wrong offset!");
static_assert(offsetof(FSnfWalkwayLocation, Key) == 0x000008, "Member 'FSnfWalkwayLocation::Key' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameBitMap
// 0x0050 (0x0050 - 0x0000)
struct FSnfGameBitMap final
{
public:
	TMap<class FName, int64>                      Values;                                            // 0x0000(0x0050)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameBitMap) == 0x000008, "Wrong alignment on FSnfGameBitMap");
static_assert(sizeof(FSnfGameBitMap) == 0x000050, "Wrong size on FSnfGameBitMap");
static_assert(offsetof(FSnfGameBitMap, Values) == 0x000000, "Member 'FSnfGameBitMap::Values' has a wrong offset!");

// ScriptStruct Snowfall.SnfEscalatorActorStepCollisionComponent
// 0x0010 (0x0010 - 0x0000)
struct FSnfEscalatorActorStepCollisionComponent final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USnfBoxComponent*                       StepCollisionComponent;                            // 0x0008(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEscalatorActorStepCollisionComponent) == 0x000008, "Wrong alignment on FSnfEscalatorActorStepCollisionComponent");
static_assert(sizeof(FSnfEscalatorActorStepCollisionComponent) == 0x000010, "Wrong size on FSnfEscalatorActorStepCollisionComponent");
static_assert(offsetof(FSnfEscalatorActorStepCollisionComponent, StepCollisionComponent) == 0x000008, "Member 'FSnfEscalatorActorStepCollisionComponent::StepCollisionComponent' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameEnvRayTracingParams
// 0x0010 (0x0010 - 0x0000)
struct FSnfGameEnvRayTracingParams final
{
public:
	bool                                          EnableRayTracingReflections;                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableRayTracingShadows;                           // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableGameEnvRayTracingReflections;                // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableGameEnvRayTracingShadows;                    // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCutScene;                                        // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PermitToChangeWeather;                             // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableCutSceneRayTracingReflections;               // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableCutSceneRayTracingShadows;                   // 0x0007(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CutSceneRayTracingReflectionsDirty;                // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CutSceneRayTracingShadowsDirty;                    // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrevDynamicResPercentage;                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameEnvRayTracingParams) == 0x000004, "Wrong alignment on FSnfGameEnvRayTracingParams");
static_assert(sizeof(FSnfGameEnvRayTracingParams) == 0x000010, "Wrong size on FSnfGameEnvRayTracingParams");
static_assert(offsetof(FSnfGameEnvRayTracingParams, EnableRayTracingReflections) == 0x000000, "Member 'FSnfGameEnvRayTracingParams::EnableRayTracingReflections' has a wrong offset!");
static_assert(offsetof(FSnfGameEnvRayTracingParams, EnableRayTracingShadows) == 0x000001, "Member 'FSnfGameEnvRayTracingParams::EnableRayTracingShadows' has a wrong offset!");
static_assert(offsetof(FSnfGameEnvRayTracingParams, EnableGameEnvRayTracingReflections) == 0x000002, "Member 'FSnfGameEnvRayTracingParams::EnableGameEnvRayTracingReflections' has a wrong offset!");
static_assert(offsetof(FSnfGameEnvRayTracingParams, EnableGameEnvRayTracingShadows) == 0x000003, "Member 'FSnfGameEnvRayTracingParams::EnableGameEnvRayTracingShadows' has a wrong offset!");
static_assert(offsetof(FSnfGameEnvRayTracingParams, IsCutScene) == 0x000004, "Member 'FSnfGameEnvRayTracingParams::IsCutScene' has a wrong offset!");
static_assert(offsetof(FSnfGameEnvRayTracingParams, PermitToChangeWeather) == 0x000005, "Member 'FSnfGameEnvRayTracingParams::PermitToChangeWeather' has a wrong offset!");
static_assert(offsetof(FSnfGameEnvRayTracingParams, EnableCutSceneRayTracingReflections) == 0x000006, "Member 'FSnfGameEnvRayTracingParams::EnableCutSceneRayTracingReflections' has a wrong offset!");
static_assert(offsetof(FSnfGameEnvRayTracingParams, EnableCutSceneRayTracingShadows) == 0x000007, "Member 'FSnfGameEnvRayTracingParams::EnableCutSceneRayTracingShadows' has a wrong offset!");
static_assert(offsetof(FSnfGameEnvRayTracingParams, CutSceneRayTracingReflectionsDirty) == 0x000008, "Member 'FSnfGameEnvRayTracingParams::CutSceneRayTracingReflectionsDirty' has a wrong offset!");
static_assert(offsetof(FSnfGameEnvRayTracingParams, CutSceneRayTracingShadowsDirty) == 0x000009, "Member 'FSnfGameEnvRayTracingParams::CutSceneRayTracingShadowsDirty' has a wrong offset!");
static_assert(offsetof(FSnfGameEnvRayTracingParams, PrevDynamicResPercentage) == 0x00000C, "Member 'FSnfGameEnvRayTracingParams::PrevDynamicResPercentage' has a wrong offset!");

// ScriptStruct Snowfall.SnfEscalatorActorStepSetting
// 0x0060 (0x0060 - 0x0000)
struct FSnfEscalatorActorStepSetting final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0030(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x003C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               StartRotation;                                     // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               EndRotation;                                       // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEscalatorActorStepSetting) == 0x000010, "Wrong alignment on FSnfEscalatorActorStepSetting");
static_assert(sizeof(FSnfEscalatorActorStepSetting) == 0x000060, "Wrong size on FSnfEscalatorActorStepSetting");
static_assert(offsetof(FSnfEscalatorActorStepSetting, Transform) == 0x000000, "Member 'FSnfEscalatorActorStepSetting::Transform' has a wrong offset!");
static_assert(offsetof(FSnfEscalatorActorStepSetting, StartLocation) == 0x000030, "Member 'FSnfEscalatorActorStepSetting::StartLocation' has a wrong offset!");
static_assert(offsetof(FSnfEscalatorActorStepSetting, EndLocation) == 0x00003C, "Member 'FSnfEscalatorActorStepSetting::EndLocation' has a wrong offset!");
static_assert(offsetof(FSnfEscalatorActorStepSetting, StartRotation) == 0x000048, "Member 'FSnfEscalatorActorStepSetting::StartRotation' has a wrong offset!");
static_assert(offsetof(FSnfEscalatorActorStepSetting, EndRotation) == 0x000054, "Member 'FSnfEscalatorActorStepSetting::EndRotation' has a wrong offset!");

// ScriptStruct Snowfall.SnfEscalatorActorDynamicMaterialSetting
// 0x001C (0x001C - 0x0000)
struct FSnfEscalatorActorDynamicMaterialSetting final
{
public:
	class FName                                   MaterialSlotName;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialParameterName;                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GoUpScalarValue;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GoDownScalarValue;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiplicationStepSpeed;                          // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfEscalatorActorDynamicMaterialSetting) == 0x000004, "Wrong alignment on FSnfEscalatorActorDynamicMaterialSetting");
static_assert(sizeof(FSnfEscalatorActorDynamicMaterialSetting) == 0x00001C, "Wrong size on FSnfEscalatorActorDynamicMaterialSetting");
static_assert(offsetof(FSnfEscalatorActorDynamicMaterialSetting, MaterialSlotName) == 0x000000, "Member 'FSnfEscalatorActorDynamicMaterialSetting::MaterialSlotName' has a wrong offset!");
static_assert(offsetof(FSnfEscalatorActorDynamicMaterialSetting, MaterialParameterName) == 0x000008, "Member 'FSnfEscalatorActorDynamicMaterialSetting::MaterialParameterName' has a wrong offset!");
static_assert(offsetof(FSnfEscalatorActorDynamicMaterialSetting, GoUpScalarValue) == 0x000010, "Member 'FSnfEscalatorActorDynamicMaterialSetting::GoUpScalarValue' has a wrong offset!");
static_assert(offsetof(FSnfEscalatorActorDynamicMaterialSetting, GoDownScalarValue) == 0x000014, "Member 'FSnfEscalatorActorDynamicMaterialSetting::GoDownScalarValue' has a wrong offset!");
static_assert(offsetof(FSnfEscalatorActorDynamicMaterialSetting, bMultiplicationStepSpeed) == 0x000018, "Member 'FSnfEscalatorActorDynamicMaterialSetting::bMultiplicationStepSpeed' has a wrong offset!");

// ScriptStruct Snowfall.SnfEscalatorActorFrameSetting
// 0x00B0 (0x00B0 - 0x0000)
struct FSnfEscalatorActorFrameSetting final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  Materials;                                         // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0060(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfEscalatorActorDynamicMaterialSetting> DynamicMaterialSettingList;                        // 0x0090(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TranslucencySortPriority;                          // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0xC];                                       // 0x00A4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfEscalatorActorFrameSetting) == 0x000010, "Wrong alignment on FSnfEscalatorActorFrameSetting");
static_assert(sizeof(FSnfEscalatorActorFrameSetting) == 0x0000B0, "Wrong size on FSnfEscalatorActorFrameSetting");
static_assert(offsetof(FSnfEscalatorActorFrameSetting, StaticMesh) == 0x000000, "Member 'FSnfEscalatorActorFrameSetting::StaticMesh' has a wrong offset!");
static_assert(offsetof(FSnfEscalatorActorFrameSetting, Materials) == 0x000008, "Member 'FSnfEscalatorActorFrameSetting::Materials' has a wrong offset!");
static_assert(offsetof(FSnfEscalatorActorFrameSetting, Transform) == 0x000060, "Member 'FSnfEscalatorActorFrameSetting::Transform' has a wrong offset!");
static_assert(offsetof(FSnfEscalatorActorFrameSetting, DynamicMaterialSettingList) == 0x000090, "Member 'FSnfEscalatorActorFrameSetting::DynamicMaterialSettingList' has a wrong offset!");
static_assert(offsetof(FSnfEscalatorActorFrameSetting, TranslucencySortPriority) == 0x0000A0, "Member 'FSnfEscalatorActorFrameSetting::TranslucencySortPriority' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameSceneInfo
// 0x01B0 (0x01B8 - 0x0008)
struct FSnfGameSceneInfo final : public FTableRowBase
{
public:
	class FName                                   ID;                                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CatalogName;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UDataTable*>          ItemList;                                          // 0x0018(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, class UDataAsset*>          DataList;                                          // 0x0068(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           EnterEnvPlayNameList;                              // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           FoggyEnvList;                                      // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           LeaveEnvPlayNameList;                              // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAkAudioEvent*>                  EnterAkEventList;                                  // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAkAudioEvent*>                  LeaveAkEventList;                                  // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAkAudioEvent*>                  EnterAkEventRandom;                                // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsLoadingAk;                                       // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IndoorGameDensityThreshold;                        // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param1;                                            // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param2;                                            // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ESnfPlayerFlag, bool>                    SetPlayerFlag;                                     // 0x0138(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FName>                           OpenQuestList;                                     // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           OpenArchiveList;                                   // 0x0198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           CalcWildList;                                      // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameSceneInfo) == 0x000008, "Wrong alignment on FSnfGameSceneInfo");
static_assert(sizeof(FSnfGameSceneInfo) == 0x0001B8, "Wrong size on FSnfGameSceneInfo");
static_assert(offsetof(FSnfGameSceneInfo, ID) == 0x000008, "Member 'FSnfGameSceneInfo::ID' has a wrong offset!");
static_assert(offsetof(FSnfGameSceneInfo, CatalogName) == 0x000010, "Member 'FSnfGameSceneInfo::CatalogName' has a wrong offset!");
static_assert(offsetof(FSnfGameSceneInfo, ItemList) == 0x000018, "Member 'FSnfGameSceneInfo::ItemList' has a wrong offset!");
static_assert(offsetof(FSnfGameSceneInfo, DataList) == 0x000068, "Member 'FSnfGameSceneInfo::DataList' has a wrong offset!");
static_assert(offsetof(FSnfGameSceneInfo, Tags) == 0x0000B8, "Member 'FSnfGameSceneInfo::Tags' has a wrong offset!");
static_assert(offsetof(FSnfGameSceneInfo, EnterEnvPlayNameList) == 0x0000C8, "Member 'FSnfGameSceneInfo::EnterEnvPlayNameList' has a wrong offset!");
static_assert(offsetof(FSnfGameSceneInfo, FoggyEnvList) == 0x0000D8, "Member 'FSnfGameSceneInfo::FoggyEnvList' has a wrong offset!");
static_assert(offsetof(FSnfGameSceneInfo, LeaveEnvPlayNameList) == 0x0000E8, "Member 'FSnfGameSceneInfo::LeaveEnvPlayNameList' has a wrong offset!");
static_assert(offsetof(FSnfGameSceneInfo, EnterAkEventList) == 0x0000F8, "Member 'FSnfGameSceneInfo::EnterAkEventList' has a wrong offset!");
static_assert(offsetof(FSnfGameSceneInfo, LeaveAkEventList) == 0x000108, "Member 'FSnfGameSceneInfo::LeaveAkEventList' has a wrong offset!");
static_assert(offsetof(FSnfGameSceneInfo, EnterAkEventRandom) == 0x000118, "Member 'FSnfGameSceneInfo::EnterAkEventRandom' has a wrong offset!");
static_assert(offsetof(FSnfGameSceneInfo, IsLoadingAk) == 0x000128, "Member 'FSnfGameSceneInfo::IsLoadingAk' has a wrong offset!");
static_assert(offsetof(FSnfGameSceneInfo, IndoorGameDensityThreshold) == 0x00012C, "Member 'FSnfGameSceneInfo::IndoorGameDensityThreshold' has a wrong offset!");
static_assert(offsetof(FSnfGameSceneInfo, Param1) == 0x000130, "Member 'FSnfGameSceneInfo::Param1' has a wrong offset!");
static_assert(offsetof(FSnfGameSceneInfo, Param2) == 0x000134, "Member 'FSnfGameSceneInfo::Param2' has a wrong offset!");
static_assert(offsetof(FSnfGameSceneInfo, SetPlayerFlag) == 0x000138, "Member 'FSnfGameSceneInfo::SetPlayerFlag' has a wrong offset!");
static_assert(offsetof(FSnfGameSceneInfo, OpenQuestList) == 0x000188, "Member 'FSnfGameSceneInfo::OpenQuestList' has a wrong offset!");
static_assert(offsetof(FSnfGameSceneInfo, OpenArchiveList) == 0x000198, "Member 'FSnfGameSceneInfo::OpenArchiveList' has a wrong offset!");
static_assert(offsetof(FSnfGameSceneInfo, CalcWildList) == 0x0001A8, "Member 'FSnfGameSceneInfo::CalcWildList' has a wrong offset!");

// ScriptStruct Snowfall.SnfEtherSuctionParam
// 0x0054 (0x0054 - 0x0000)
struct FSnfEtherSuctionParam final
{
public:
	float                                         InitialSpeed;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSpeed;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTime;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTime;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopTime;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecelSpeed;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopDecelSpeed;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecelVelocityLimit;                                // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopDecelVelocityLimit;                            // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AroundBaseAngle;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LostHesitationTime;                                // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LHandSocketName;                                   // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LForearmSocketName;                                // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AutoAbsorbTargetSocketName;                        // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AbsorbOffset;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachDistance;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnDelayTime;                                    // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteractDelayTime;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEtherSuctionParam) == 0x000004, "Wrong alignment on FSnfEtherSuctionParam");
static_assert(sizeof(FSnfEtherSuctionParam) == 0x000054, "Wrong size on FSnfEtherSuctionParam");
static_assert(offsetof(FSnfEtherSuctionParam, InitialSpeed) == 0x000000, "Member 'FSnfEtherSuctionParam::InitialSpeed' has a wrong offset!");
static_assert(offsetof(FSnfEtherSuctionParam, LimitSpeed) == 0x000004, "Member 'FSnfEtherSuctionParam::LimitSpeed' has a wrong offset!");
static_assert(offsetof(FSnfEtherSuctionParam, MinTime) == 0x000008, "Member 'FSnfEtherSuctionParam::MinTime' has a wrong offset!");
static_assert(offsetof(FSnfEtherSuctionParam, MaxTime) == 0x00000C, "Member 'FSnfEtherSuctionParam::MaxTime' has a wrong offset!");
static_assert(offsetof(FSnfEtherSuctionParam, StopTime) == 0x000010, "Member 'FSnfEtherSuctionParam::StopTime' has a wrong offset!");
static_assert(offsetof(FSnfEtherSuctionParam, DecelSpeed) == 0x000014, "Member 'FSnfEtherSuctionParam::DecelSpeed' has a wrong offset!");
static_assert(offsetof(FSnfEtherSuctionParam, StopDecelSpeed) == 0x000018, "Member 'FSnfEtherSuctionParam::StopDecelSpeed' has a wrong offset!");
static_assert(offsetof(FSnfEtherSuctionParam, DecelVelocityLimit) == 0x00001C, "Member 'FSnfEtherSuctionParam::DecelVelocityLimit' has a wrong offset!");
static_assert(offsetof(FSnfEtherSuctionParam, StopDecelVelocityLimit) == 0x000020, "Member 'FSnfEtherSuctionParam::StopDecelVelocityLimit' has a wrong offset!");
static_assert(offsetof(FSnfEtherSuctionParam, AroundBaseAngle) == 0x000024, "Member 'FSnfEtherSuctionParam::AroundBaseAngle' has a wrong offset!");
static_assert(offsetof(FSnfEtherSuctionParam, LostHesitationTime) == 0x000028, "Member 'FSnfEtherSuctionParam::LostHesitationTime' has a wrong offset!");
static_assert(offsetof(FSnfEtherSuctionParam, LHandSocketName) == 0x00002C, "Member 'FSnfEtherSuctionParam::LHandSocketName' has a wrong offset!");
static_assert(offsetof(FSnfEtherSuctionParam, LForearmSocketName) == 0x000034, "Member 'FSnfEtherSuctionParam::LForearmSocketName' has a wrong offset!");
static_assert(offsetof(FSnfEtherSuctionParam, AutoAbsorbTargetSocketName) == 0x00003C, "Member 'FSnfEtherSuctionParam::AutoAbsorbTargetSocketName' has a wrong offset!");
static_assert(offsetof(FSnfEtherSuctionParam, AbsorbOffset) == 0x000044, "Member 'FSnfEtherSuctionParam::AbsorbOffset' has a wrong offset!");
static_assert(offsetof(FSnfEtherSuctionParam, ReachDistance) == 0x000048, "Member 'FSnfEtherSuctionParam::ReachDistance' has a wrong offset!");
static_assert(offsetof(FSnfEtherSuctionParam, SpawnDelayTime) == 0x00004C, "Member 'FSnfEtherSuctionParam::SpawnDelayTime' has a wrong offset!");
static_assert(offsetof(FSnfEtherSuctionParam, InteractDelayTime) == 0x000050, "Member 'FSnfEtherSuctionParam::InteractDelayTime' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponSpendEsp
// 0x0008 (0x0008 - 0x0000)
struct FSnfWeaponSpendEsp final
{
public:
	ESnfEtherType                                 EspType;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EspCount;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponSpendEsp) == 0x000004, "Wrong alignment on FSnfWeaponSpendEsp");
static_assert(sizeof(FSnfWeaponSpendEsp) == 0x000008, "Wrong size on FSnfWeaponSpendEsp");
static_assert(offsetof(FSnfWeaponSpendEsp, EspType) == 0x000000, "Member 'FSnfWeaponSpendEsp::EspType' has a wrong offset!");
static_assert(offsetof(FSnfWeaponSpendEsp, EspCount) == 0x000004, "Member 'FSnfWeaponSpendEsp::EspCount' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameSpawnItem
// 0x0018 (0x0018 - 0x0000)
struct FSnfGameSpawnItem final
{
public:
	TSubclassOf<class UObject>                    Class;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountMin;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountMax;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandValue;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGameSpawnItem) == 0x000008, "Wrong alignment on FSnfGameSpawnItem");
static_assert(sizeof(FSnfGameSpawnItem) == 0x000018, "Wrong size on FSnfGameSpawnItem");
static_assert(offsetof(FSnfGameSpawnItem, Class) == 0x000000, "Member 'FSnfGameSpawnItem::Class' has a wrong offset!");
static_assert(offsetof(FSnfGameSpawnItem, CountMin) == 0x000008, "Member 'FSnfGameSpawnItem::CountMin' has a wrong offset!");
static_assert(offsetof(FSnfGameSpawnItem, CountMax) == 0x00000C, "Member 'FSnfGameSpawnItem::CountMax' has a wrong offset!");
static_assert(offsetof(FSnfGameSpawnItem, RandValue) == 0x000010, "Member 'FSnfGameSpawnItem::RandValue' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameSpawnGroup
// 0x0030 (0x0030 - 0x0000)
struct FSnfGameSpawnGroup final
{
public:
	TArray<struct FSnfGameSpawnItem>              ItemList;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RandValue;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameSpawnGroup) == 0x000008, "Wrong alignment on FSnfGameSpawnGroup");
static_assert(sizeof(FSnfGameSpawnGroup) == 0x000030, "Wrong size on FSnfGameSpawnGroup");
static_assert(offsetof(FSnfGameSpawnGroup, ItemList) == 0x000000, "Member 'FSnfGameSpawnGroup::ItemList' has a wrong offset!");
static_assert(offsetof(FSnfGameSpawnGroup, RandValue) == 0x000010, "Member 'FSnfGameSpawnGroup::RandValue' has a wrong offset!");
static_assert(offsetof(FSnfGameSpawnGroup, Title) == 0x000018, "Member 'FSnfGameSpawnGroup::Title' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameSpawnTable
// 0x0028 (0x0030 - 0x0008)
struct FSnfGameSpawnTable final : public FTableRowBase
{
public:
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FSnfGameSpawnGroup>             GroupList;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameSpawnTable) == 0x000008, "Wrong alignment on FSnfGameSpawnTable");
static_assert(sizeof(FSnfGameSpawnTable) == 0x000030, "Wrong size on FSnfGameSpawnTable");
static_assert(offsetof(FSnfGameSpawnTable, Title) == 0x000008, "Member 'FSnfGameSpawnTable::Title' has a wrong offset!");
static_assert(offsetof(FSnfGameSpawnTable, GroupList) == 0x000020, "Member 'FSnfGameSpawnTable::GroupList' has a wrong offset!");

// ScriptStruct Snowfall.SnfEtherParamInformation
// 0x0018 (0x0018 - 0x0000)
struct FSnfEtherParamInformation final
{
public:
	class FName                                   CatalogId;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    ItemEtherClass;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     PickupItemClass;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEtherParamInformation) == 0x000008, "Wrong alignment on FSnfEtherParamInformation");
static_assert(sizeof(FSnfEtherParamInformation) == 0x000018, "Wrong size on FSnfEtherParamInformation");
static_assert(offsetof(FSnfEtherParamInformation, CatalogId) == 0x000000, "Member 'FSnfEtherParamInformation::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfEtherParamInformation, ItemEtherClass) == 0x000008, "Member 'FSnfEtherParamInformation::ItemEtherClass' has a wrong offset!");
static_assert(offsetof(FSnfEtherParamInformation, PickupItemClass) == 0x000010, "Member 'FSnfEtherParamInformation::PickupItemClass' has a wrong offset!");

// ScriptStruct Snowfall.SnfEtherInformation
// 0x0038 (0x0038 - 0x0000)
struct FSnfEtherInformation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTngInventoryItem                      Item;                                              // 0x0018(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserParam;                                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfEtherInformation) == 0x000008, "Wrong alignment on FSnfEtherInformation");
static_assert(sizeof(FSnfEtherInformation) == 0x000038, "Wrong size on FSnfEtherInformation");
static_assert(offsetof(FSnfEtherInformation, Location) == 0x000000, "Member 'FSnfEtherInformation::Location' has a wrong offset!");
static_assert(offsetof(FSnfEtherInformation, ActorClass) == 0x000010, "Member 'FSnfEtherInformation::ActorClass' has a wrong offset!");
static_assert(offsetof(FSnfEtherInformation, Item) == 0x000018, "Member 'FSnfEtherInformation::Item' has a wrong offset!");
static_assert(offsetof(FSnfEtherInformation, Actor) == 0x000028, "Member 'FSnfEtherInformation::Actor' has a wrong offset!");
static_assert(offsetof(FSnfEtherInformation, UserParam) == 0x000030, "Member 'FSnfEtherInformation::UserParam' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameJobSaveSection
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSnfGameJobSaveSection final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGameJobSaveSection) == 0x000008, "Wrong alignment on FSnfGameJobSaveSection");
static_assert(sizeof(FSnfGameJobSaveSection) == 0x000020, "Wrong size on FSnfGameJobSaveSection");

// ScriptStruct Snowfall.SnfEtherRecycleActor
// 0x0010 (0x0010 - 0x0000)
struct FSnfEtherRecycleActor final
{
public:
	bool                                          bUsing;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEtherRecycleActor) == 0x000008, "Wrong alignment on FSnfEtherRecycleActor");
static_assert(sizeof(FSnfEtherRecycleActor) == 0x000010, "Wrong size on FSnfEtherRecycleActor");
static_assert(offsetof(FSnfEtherRecycleActor, bUsing) == 0x000000, "Member 'FSnfEtherRecycleActor::bUsing' has a wrong offset!");
static_assert(offsetof(FSnfEtherRecycleActor, Actor) == 0x000008, "Member 'FSnfEtherRecycleActor::Actor' has a wrong offset!");

// ScriptStruct Snowfall.MapContainEtherRecycleActor
// 0x0010 (0x0010 - 0x0000)
struct FMapContainEtherRecycleActor final
{
public:
	TArray<struct FSnfEtherRecycleActor>          Actors;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapContainEtherRecycleActor) == 0x000008, "Wrong alignment on FMapContainEtherRecycleActor");
static_assert(sizeof(FMapContainEtherRecycleActor) == 0x000010, "Wrong size on FMapContainEtherRecycleActor");
static_assert(offsetof(FMapContainEtherRecycleActor, Actors) == 0x000000, "Member 'FMapContainEtherRecycleActor::Actors' has a wrong offset!");

// ScriptStruct Snowfall.SnfIndicateInfo
// 0x0020 (0x0020 - 0x0000)
struct FSnfIndicateInfo final
{
public:
	class FName                                   FlagId;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  IndicateActor;                                     // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceToPlayer;                                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfIndicateInfo) == 0x000004, "Wrong alignment on FSnfIndicateInfo");
static_assert(sizeof(FSnfIndicateInfo) == 0x000020, "Wrong size on FSnfIndicateInfo");
static_assert(offsetof(FSnfIndicateInfo, FlagId) == 0x000000, "Member 'FSnfIndicateInfo::FlagId' has a wrong offset!");
static_assert(offsetof(FSnfIndicateInfo, Location) == 0x000008, "Member 'FSnfIndicateInfo::Location' has a wrong offset!");
static_assert(offsetof(FSnfIndicateInfo, IndicateActor) == 0x000014, "Member 'FSnfIndicateInfo::IndicateActor' has a wrong offset!");
static_assert(offsetof(FSnfIndicateInfo, DistanceToPlayer) == 0x00001C, "Member 'FSnfIndicateInfo::DistanceToPlayer' has a wrong offset!");

// ScriptStruct Snowfall.SnfQualityPresetTSR
// 0x000C (0x000C - 0x0000)
struct FSnfQualityPresetTSR final
{
public:
	uint8                                         Index;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0001(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TemporalAAAlgorithm;                               // 0x0004(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenPercentage;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfQualityPresetTSR) == 0x000004, "Wrong alignment on FSnfQualityPresetTSR");
static_assert(sizeof(FSnfQualityPresetTSR) == 0x00000C, "Wrong size on FSnfQualityPresetTSR");
static_assert(offsetof(FSnfQualityPresetTSR, Index) == 0x000000, "Member 'FSnfQualityPresetTSR::Index' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetTSR, bEnabled) == 0x000001, "Member 'FSnfQualityPresetTSR::bEnabled' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetTSR, TemporalAAAlgorithm) == 0x000004, "Member 'FSnfQualityPresetTSR::TemporalAAAlgorithm' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetTSR, ScreenPercentage) == 0x000008, "Member 'FSnfQualityPresetTSR::ScreenPercentage' has a wrong offset!");

// ScriptStruct Snowfall.SnfFacadeProps
// 0x0050 (0x0050 - 0x0000)
struct FSnfFacadeProps final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialIndex;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfFacadeProps) == 0x000010, "Wrong alignment on FSnfFacadeProps");
static_assert(sizeof(FSnfFacadeProps) == 0x000050, "Wrong size on FSnfFacadeProps");
static_assert(offsetof(FSnfFacadeProps, Mesh) == 0x000000, "Member 'FSnfFacadeProps::Mesh' has a wrong offset!");
static_assert(offsetof(FSnfFacadeProps, Material) == 0x000008, "Member 'FSnfFacadeProps::Material' has a wrong offset!");
static_assert(offsetof(FSnfFacadeProps, MaterialIndex) == 0x000010, "Member 'FSnfFacadeProps::MaterialIndex' has a wrong offset!");
static_assert(offsetof(FSnfFacadeProps, Transform) == 0x000020, "Member 'FSnfFacadeProps::Transform' has a wrong offset!");

// ScriptStruct Snowfall.SnfPropsGimmickLightLensFlareInfo
// 0x0070 (0x0070 - 0x0000)
struct FSnfPropsGimmickLightLensFlareInfo final
{
public:
	int32                                         SocketIndex;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            LensFlareMesh;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  LensFlareMaterail;                                 // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0060(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfPropsGimmickLightLensFlareInfo) == 0x000008, "Wrong alignment on FSnfPropsGimmickLightLensFlareInfo");
static_assert(sizeof(FSnfPropsGimmickLightLensFlareInfo) == 0x000070, "Wrong size on FSnfPropsGimmickLightLensFlareInfo");
static_assert(offsetof(FSnfPropsGimmickLightLensFlareInfo, SocketIndex) == 0x000000, "Member 'FSnfPropsGimmickLightLensFlareInfo::SocketIndex' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickLightLensFlareInfo, LensFlareMesh) == 0x000008, "Member 'FSnfPropsGimmickLightLensFlareInfo::LensFlareMesh' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickLightLensFlareInfo, LensFlareMaterail) == 0x000010, "Member 'FSnfPropsGimmickLightLensFlareInfo::LensFlareMaterail' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickLightLensFlareInfo, Scale) == 0x000060, "Member 'FSnfPropsGimmickLightLensFlareInfo::Scale' has a wrong offset!");

// ScriptStruct Snowfall.SnfPropsGimmickLightLensFlareSetting
// 0x0028 (0x0030 - 0x0008)
struct FSnfPropsGimmickLightLensFlareSetting final : public FTableRowBase
{
public:
	class UStaticMesh*                            TargetLightMesh;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSnfPropsGimmickLightLensFlareInfo> LensFlareInfo;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfPropsGimmickLightLensFlareInfo> FearLensFlareInfo;                                 // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPropsGimmickLightLensFlareSetting) == 0x000008, "Wrong alignment on FSnfPropsGimmickLightLensFlareSetting");
static_assert(sizeof(FSnfPropsGimmickLightLensFlareSetting) == 0x000030, "Wrong size on FSnfPropsGimmickLightLensFlareSetting");
static_assert(offsetof(FSnfPropsGimmickLightLensFlareSetting, TargetLightMesh) == 0x000008, "Member 'FSnfPropsGimmickLightLensFlareSetting::TargetLightMesh' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickLightLensFlareSetting, LensFlareInfo) == 0x000010, "Member 'FSnfPropsGimmickLightLensFlareSetting::LensFlareInfo' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickLightLensFlareSetting, FearLensFlareInfo) == 0x000020, "Member 'FSnfPropsGimmickLightLensFlareSetting::FearLensFlareInfo' has a wrong offset!");

// ScriptStruct Snowfall.SnfFacadeDeco
// 0x0050 (0x0050 - 0x0000)
struct FSnfFacadeDeco final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialIndex;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfFacadeDeco) == 0x000010, "Wrong alignment on FSnfFacadeDeco");
static_assert(sizeof(FSnfFacadeDeco) == 0x000050, "Wrong size on FSnfFacadeDeco");
static_assert(offsetof(FSnfFacadeDeco, Mesh) == 0x000000, "Member 'FSnfFacadeDeco::Mesh' has a wrong offset!");
static_assert(offsetof(FSnfFacadeDeco, Material) == 0x000008, "Member 'FSnfFacadeDeco::Material' has a wrong offset!");
static_assert(offsetof(FSnfFacadeDeco, MaterialIndex) == 0x000010, "Member 'FSnfFacadeDeco::MaterialIndex' has a wrong offset!");
static_assert(offsetof(FSnfFacadeDeco, Transform) == 0x000020, "Member 'FSnfFacadeDeco::Transform' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponTalismanForecastPlayList
// 0x0068 (0x0068 - 0x0000)
struct FSnfWeaponTalismanForecastPlayList final
{
public:
	class FName                                   ParalysisArea;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CoreDamageArea;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CoreDamageAreaLv1;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CoreDamageAreaLv2;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CoreDamageAreaLv3;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NoiseArea;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NoiseAreaLv1;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NoiseAreaLv2;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NoiseAreaLv3;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BlindfoldArea;                                     // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   JumpArea;                                          // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EtherArea;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AreaEnd;                                           // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponTalismanForecastPlayList) == 0x000004, "Wrong alignment on FSnfWeaponTalismanForecastPlayList");
static_assert(sizeof(FSnfWeaponTalismanForecastPlayList) == 0x000068, "Wrong size on FSnfWeaponTalismanForecastPlayList");
static_assert(offsetof(FSnfWeaponTalismanForecastPlayList, ParalysisArea) == 0x000000, "Member 'FSnfWeaponTalismanForecastPlayList::ParalysisArea' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTalismanForecastPlayList, CoreDamageArea) == 0x000008, "Member 'FSnfWeaponTalismanForecastPlayList::CoreDamageArea' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTalismanForecastPlayList, CoreDamageAreaLv1) == 0x000010, "Member 'FSnfWeaponTalismanForecastPlayList::CoreDamageAreaLv1' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTalismanForecastPlayList, CoreDamageAreaLv2) == 0x000018, "Member 'FSnfWeaponTalismanForecastPlayList::CoreDamageAreaLv2' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTalismanForecastPlayList, CoreDamageAreaLv3) == 0x000020, "Member 'FSnfWeaponTalismanForecastPlayList::CoreDamageAreaLv3' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTalismanForecastPlayList, NoiseArea) == 0x000028, "Member 'FSnfWeaponTalismanForecastPlayList::NoiseArea' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTalismanForecastPlayList, NoiseAreaLv1) == 0x000030, "Member 'FSnfWeaponTalismanForecastPlayList::NoiseAreaLv1' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTalismanForecastPlayList, NoiseAreaLv2) == 0x000038, "Member 'FSnfWeaponTalismanForecastPlayList::NoiseAreaLv2' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTalismanForecastPlayList, NoiseAreaLv3) == 0x000040, "Member 'FSnfWeaponTalismanForecastPlayList::NoiseAreaLv3' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTalismanForecastPlayList, BlindfoldArea) == 0x000048, "Member 'FSnfWeaponTalismanForecastPlayList::BlindfoldArea' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTalismanForecastPlayList, JumpArea) == 0x000050, "Member 'FSnfWeaponTalismanForecastPlayList::JumpArea' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTalismanForecastPlayList, EtherArea) == 0x000058, "Member 'FSnfWeaponTalismanForecastPlayList::EtherArea' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTalismanForecastPlayList, AreaEnd) == 0x000060, "Member 'FSnfWeaponTalismanForecastPlayList::AreaEnd' has a wrong offset!");

// ScriptStruct Snowfall.SnfGamePopupControlInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FSnfGamePopupControlInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGamePopupControlInfo) == 0x000004, "Wrong alignment on FSnfGamePopupControlInfo");
static_assert(sizeof(FSnfGamePopupControlInfo) == 0x000010, "Wrong size on FSnfGamePopupControlInfo");

// ScriptStruct Snowfall.SnfDynamicStreamInfo
// 0x00D8 (0x00E0 - 0x0008)
struct FSnfDynamicStreamInfo final : public FTableRowBase
{
public:
	class FName                                   OwnerName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OwnerLevelPath;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DynamicStreamLevelPath;                            // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LevelTransform;                                    // 0x0030(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsParentDisabled;                                  // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UniqueTag;                                         // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FacadeTransform;                                   // 0x0080(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SearchId;                                          // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        EntryPoints;                                       // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ExitPoints;                                        // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfDynamicStreamInfo) == 0x000010, "Wrong alignment on FSnfDynamicStreamInfo");
static_assert(sizeof(FSnfDynamicStreamInfo) == 0x0000E0, "Wrong size on FSnfDynamicStreamInfo");
static_assert(offsetof(FSnfDynamicStreamInfo, OwnerName) == 0x000008, "Member 'FSnfDynamicStreamInfo::OwnerName' has a wrong offset!");
static_assert(offsetof(FSnfDynamicStreamInfo, OwnerLevelPath) == 0x000010, "Member 'FSnfDynamicStreamInfo::OwnerLevelPath' has a wrong offset!");
static_assert(offsetof(FSnfDynamicStreamInfo, DynamicStreamLevelPath) == 0x000018, "Member 'FSnfDynamicStreamInfo::DynamicStreamLevelPath' has a wrong offset!");
static_assert(offsetof(FSnfDynamicStreamInfo, LevelTransform) == 0x000030, "Member 'FSnfDynamicStreamInfo::LevelTransform' has a wrong offset!");
static_assert(offsetof(FSnfDynamicStreamInfo, IsParentDisabled) == 0x000060, "Member 'FSnfDynamicStreamInfo::IsParentDisabled' has a wrong offset!");
static_assert(offsetof(FSnfDynamicStreamInfo, UniqueTag) == 0x000068, "Member 'FSnfDynamicStreamInfo::UniqueTag' has a wrong offset!");
static_assert(offsetof(FSnfDynamicStreamInfo, FacadeTransform) == 0x000080, "Member 'FSnfDynamicStreamInfo::FacadeTransform' has a wrong offset!");
static_assert(offsetof(FSnfDynamicStreamInfo, SearchId) == 0x0000B0, "Member 'FSnfDynamicStreamInfo::SearchId' has a wrong offset!");
static_assert(offsetof(FSnfDynamicStreamInfo, EntryPoints) == 0x0000B8, "Member 'FSnfDynamicStreamInfo::EntryPoints' has a wrong offset!");
static_assert(offsetof(FSnfDynamicStreamInfo, ExitPoints) == 0x0000C8, "Member 'FSnfDynamicStreamInfo::ExitPoints' has a wrong offset!");

// ScriptStruct Snowfall.SnfFastTravelStreamingSetting
// 0x0014 (0x0014 - 0x0000)
struct FSnfFastTravelStreamingSetting final
{
public:
	float                                         ActorsUpdateTimeLimit;                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnregisterComponentsTimeLimit;                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentsRegistrationGranularity;                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentsUnregistrationGranularity;               // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxDistanceMeter;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfFastTravelStreamingSetting) == 0x000004, "Wrong alignment on FSnfFastTravelStreamingSetting");
static_assert(sizeof(FSnfFastTravelStreamingSetting) == 0x000014, "Wrong size on FSnfFastTravelStreamingSetting");
static_assert(offsetof(FSnfFastTravelStreamingSetting, ActorsUpdateTimeLimit) == 0x000000, "Member 'FSnfFastTravelStreamingSetting::ActorsUpdateTimeLimit' has a wrong offset!");
static_assert(offsetof(FSnfFastTravelStreamingSetting, UnregisterComponentsTimeLimit) == 0x000004, "Member 'FSnfFastTravelStreamingSetting::UnregisterComponentsTimeLimit' has a wrong offset!");
static_assert(offsetof(FSnfFastTravelStreamingSetting, ComponentsRegistrationGranularity) == 0x000008, "Member 'FSnfFastTravelStreamingSetting::ComponentsRegistrationGranularity' has a wrong offset!");
static_assert(offsetof(FSnfFastTravelStreamingSetting, ComponentsUnregistrationGranularity) == 0x00000C, "Member 'FSnfFastTravelStreamingSetting::ComponentsUnregistrationGranularity' has a wrong offset!");
static_assert(offsetof(FSnfFastTravelStreamingSetting, MaxDistanceMeter) == 0x000010, "Member 'FSnfFastTravelStreamingSetting::MaxDistanceMeter' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkExTypeActionInfo
// 0x0020 (0x0020 - 0x0000)
struct FSnfTalkExTypeActionInfo final
{
public:
	EFSnfTalkExTypeActionTiming                   Timing;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CheckTalkId;                                       // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TypeAction;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalkExTypeActionInfo) == 0x000008, "Wrong alignment on FSnfTalkExTypeActionInfo");
static_assert(sizeof(FSnfTalkExTypeActionInfo) == 0x000020, "Wrong size on FSnfTalkExTypeActionInfo");
static_assert(offsetof(FSnfTalkExTypeActionInfo, Timing) == 0x000000, "Member 'FSnfTalkExTypeActionInfo::Timing' has a wrong offset!");
static_assert(offsetof(FSnfTalkExTypeActionInfo, CheckTalkId) == 0x000004, "Member 'FSnfTalkExTypeActionInfo::CheckTalkId' has a wrong offset!");
static_assert(offsetof(FSnfTalkExTypeActionInfo, TargetActor) == 0x000010, "Member 'FSnfTalkExTypeActionInfo::TargetActor' has a wrong offset!");
static_assert(offsetof(FSnfTalkExTypeActionInfo, TypeAction) == 0x000018, "Member 'FSnfTalkExTypeActionInfo::TypeAction' has a wrong offset!");

// ScriptStruct Snowfall.SnfFocusSlot
// 0x00C8 (0x00C8 - 0x0000)
struct FSnfFocusSlot final
{
public:
	class USnfFocusData*                          Item;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnable;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0xBF];                                       // 0x0009(0x00BF)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfFocusSlot) == 0x000008, "Wrong alignment on FSnfFocusSlot");
static_assert(sizeof(FSnfFocusSlot) == 0x0000C8, "Wrong size on FSnfFocusSlot");
static_assert(offsetof(FSnfFocusSlot, Item) == 0x000000, "Member 'FSnfFocusSlot::Item' has a wrong offset!");
static_assert(offsetof(FSnfFocusSlot, IsEnable) == 0x000008, "Member 'FSnfFocusSlot::IsEnable' has a wrong offset!");

// ScriptStruct Snowfall.SnfFocusSave
// 0x0050 (0x0050 - 0x0000)
struct FSnfFocusSave final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USceneComponent>         Component;                                         // 0x0008(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SaveTimer;                                         // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeleteTimer;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dot;                                               // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Tags;                                              // 0x0030(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfFocusSave) == 0x000008, "Wrong alignment on FSnfFocusSave");
static_assert(sizeof(FSnfFocusSave) == 0x000050, "Wrong size on FSnfFocusSave");
static_assert(offsetof(FSnfFocusSave, Name) == 0x000000, "Member 'FSnfFocusSave::Name' has a wrong offset!");
static_assert(offsetof(FSnfFocusSave, Component) == 0x000008, "Member 'FSnfFocusSave::Component' has a wrong offset!");
static_assert(offsetof(FSnfFocusSave, Location) == 0x000010, "Member 'FSnfFocusSave::Location' has a wrong offset!");
static_assert(offsetof(FSnfFocusSave, SaveTimer) == 0x00001C, "Member 'FSnfFocusSave::SaveTimer' has a wrong offset!");
static_assert(offsetof(FSnfFocusSave, DeleteTimer) == 0x000020, "Member 'FSnfFocusSave::DeleteTimer' has a wrong offset!");
static_assert(offsetof(FSnfFocusSave, Length) == 0x000024, "Member 'FSnfFocusSave::Length' has a wrong offset!");
static_assert(offsetof(FSnfFocusSave, Dot) == 0x000028, "Member 'FSnfFocusSave::Dot' has a wrong offset!");
static_assert(offsetof(FSnfFocusSave, Tags) == 0x000030, "Member 'FSnfFocusSave::Tags' has a wrong offset!");

// ScriptStruct Snowfall.SnfSaisenActorWishInfo
// 0x0048 (0x0048 - 0x0000)
struct FSnfSaisenActorWishInfo final
{
public:
	int32                                         Money;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanSearch;                                         // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SearchJizoLength;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealLifeValue;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanPlayful;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanAllUniqueItems;                                 // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanClearEnemy;                                     // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CanClearEnemySequence;                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanClearHyakki;                                    // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CanClearHyakkiSequence;                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    SpawnId;                                           // 0x0020(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SpawnValueRateMin;                                 // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnValueRateMax;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeelItemMin;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeelItemMax;                                       // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanGiveSharedItems;                               // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfSaisenActorWishInfo) == 0x000008, "Wrong alignment on FSnfSaisenActorWishInfo");
static_assert(sizeof(FSnfSaisenActorWishInfo) == 0x000048, "Wrong size on FSnfSaisenActorWishInfo");
static_assert(offsetof(FSnfSaisenActorWishInfo, Money) == 0x000000, "Member 'FSnfSaisenActorWishInfo::Money' has a wrong offset!");
static_assert(offsetof(FSnfSaisenActorWishInfo, CanSearch) == 0x000004, "Member 'FSnfSaisenActorWishInfo::CanSearch' has a wrong offset!");
static_assert(offsetof(FSnfSaisenActorWishInfo, SearchJizoLength) == 0x000008, "Member 'FSnfSaisenActorWishInfo::SearchJizoLength' has a wrong offset!");
static_assert(offsetof(FSnfSaisenActorWishInfo, HealLifeValue) == 0x00000C, "Member 'FSnfSaisenActorWishInfo::HealLifeValue' has a wrong offset!");
static_assert(offsetof(FSnfSaisenActorWishInfo, CanPlayful) == 0x000010, "Member 'FSnfSaisenActorWishInfo::CanPlayful' has a wrong offset!");
static_assert(offsetof(FSnfSaisenActorWishInfo, CanAllUniqueItems) == 0x000011, "Member 'FSnfSaisenActorWishInfo::CanAllUniqueItems' has a wrong offset!");
static_assert(offsetof(FSnfSaisenActorWishInfo, CanClearEnemy) == 0x000012, "Member 'FSnfSaisenActorWishInfo::CanClearEnemy' has a wrong offset!");
static_assert(offsetof(FSnfSaisenActorWishInfo, CanClearEnemySequence) == 0x000014, "Member 'FSnfSaisenActorWishInfo::CanClearEnemySequence' has a wrong offset!");
static_assert(offsetof(FSnfSaisenActorWishInfo, CanClearHyakki) == 0x000018, "Member 'FSnfSaisenActorWishInfo::CanClearHyakki' has a wrong offset!");
static_assert(offsetof(FSnfSaisenActorWishInfo, CanClearHyakkiSequence) == 0x00001C, "Member 'FSnfSaisenActorWishInfo::CanClearHyakkiSequence' has a wrong offset!");
static_assert(offsetof(FSnfSaisenActorWishInfo, SpawnId) == 0x000020, "Member 'FSnfSaisenActorWishInfo::SpawnId' has a wrong offset!");
static_assert(offsetof(FSnfSaisenActorWishInfo, SpawnValueRateMin) == 0x000030, "Member 'FSnfSaisenActorWishInfo::SpawnValueRateMin' has a wrong offset!");
static_assert(offsetof(FSnfSaisenActorWishInfo, SpawnValueRateMax) == 0x000034, "Member 'FSnfSaisenActorWishInfo::SpawnValueRateMax' has a wrong offset!");
static_assert(offsetof(FSnfSaisenActorWishInfo, HeelItemMin) == 0x000038, "Member 'FSnfSaisenActorWishInfo::HeelItemMin' has a wrong offset!");
static_assert(offsetof(FSnfSaisenActorWishInfo, HeelItemMax) == 0x00003C, "Member 'FSnfSaisenActorWishInfo::HeelItemMax' has a wrong offset!");
static_assert(offsetof(FSnfSaisenActorWishInfo, bCanGiveSharedItems) == 0x000040, "Member 'FSnfSaisenActorWishInfo::bCanGiveSharedItems' has a wrong offset!");

// ScriptStruct Snowfall.FootstepThreshold
// 0x0018 (0x0018 - 0x0000)
struct FFootstepThreshold final
{
public:
	float                                         TakeOff_ToeGravity;                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TakeOff_FootGravity;                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Landing_ToeGravity;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Landing_FootGravity;                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ground_ToeGravity;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ground_FootGravity;                                // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootstepThreshold) == 0x000004, "Wrong alignment on FFootstepThreshold");
static_assert(sizeof(FFootstepThreshold) == 0x000018, "Wrong size on FFootstepThreshold");
static_assert(offsetof(FFootstepThreshold, TakeOff_ToeGravity) == 0x000000, "Member 'FFootstepThreshold::TakeOff_ToeGravity' has a wrong offset!");
static_assert(offsetof(FFootstepThreshold, TakeOff_FootGravity) == 0x000004, "Member 'FFootstepThreshold::TakeOff_FootGravity' has a wrong offset!");
static_assert(offsetof(FFootstepThreshold, Landing_ToeGravity) == 0x000008, "Member 'FFootstepThreshold::Landing_ToeGravity' has a wrong offset!");
static_assert(offsetof(FFootstepThreshold, Landing_FootGravity) == 0x00000C, "Member 'FFootstepThreshold::Landing_FootGravity' has a wrong offset!");
static_assert(offsetof(FFootstepThreshold, Ground_ToeGravity) == 0x000010, "Member 'FFootstepThreshold::Ground_ToeGravity' has a wrong offset!");
static_assert(offsetof(FFootstepThreshold, Ground_FootGravity) == 0x000014, "Member 'FFootstepThreshold::Ground_FootGravity' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponHandSpectrumChargeData
// 0x0004 (0x0004 - 0x0000)
struct FSnfWeaponHandSpectrumChargeData final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponHandSpectrumChargeData) == 0x000004, "Wrong alignment on FSnfWeaponHandSpectrumChargeData");
static_assert(sizeof(FSnfWeaponHandSpectrumChargeData) == 0x000004, "Wrong size on FSnfWeaponHandSpectrumChargeData");
static_assert(offsetof(FSnfWeaponHandSpectrumChargeData, Duration) == 0x000000, "Member 'FSnfWeaponHandSpectrumChargeData::Duration' has a wrong offset!");

// ScriptStruct Snowfall.FootstepEvaluateJointName
// 0x0020 (0x0020 - 0x0000)
struct FFootstepEvaluateJointName final
{
public:
	class FName                                   ToeName;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FootName;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShinName;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ThighName;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootstepEvaluateJointName) == 0x000004, "Wrong alignment on FFootstepEvaluateJointName");
static_assert(sizeof(FFootstepEvaluateJointName) == 0x000020, "Wrong size on FFootstepEvaluateJointName");
static_assert(offsetof(FFootstepEvaluateJointName, ToeName) == 0x000000, "Member 'FFootstepEvaluateJointName::ToeName' has a wrong offset!");
static_assert(offsetof(FFootstepEvaluateJointName, FootName) == 0x000008, "Member 'FFootstepEvaluateJointName::FootName' has a wrong offset!");
static_assert(offsetof(FFootstepEvaluateJointName, ShinName) == 0x000010, "Member 'FFootstepEvaluateJointName::ShinName' has a wrong offset!");
static_assert(offsetof(FFootstepEvaluateJointName, ThighName) == 0x000018, "Member 'FFootstepEvaluateJointName::ThighName' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameJobInfoItem
// 0x0168 (0x0170 - 0x0008)
struct FSnfGameJobInfoItem final : public FTableRowBase
{
public:
	class FName                                   FlagId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CatalogId;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AreaId;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BeginActive;                                       // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Yaw;                                               // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupNo;                                           // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SupplyNo;                                          // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SupplySection;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BeginActivityId;                                   // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfGameActivityState                         BeginActivityState;                                // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EndActivityId;                                     // 0x0064(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfGameActivityState                         EndActivityState;                                  // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LiberationActivityId;                              // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInside;                                          // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InsideLocation;                                    // 0x007C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutsideLocation;                                   // 0x0088(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NameTags;                                          // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameTags;                                          // 0x00A8(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   ClassName;                                         // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PathName;                                          // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapName;                                           // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  Actor;                                             // 0x00E0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASnfJobActor>            OwnerActor;                                        // 0x0108(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USnfJobComponent>        OwnerComponent;                                    // 0x0110(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequestRole;                                       // 0x0118(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    RequestCatalog;                                    // 0x0138(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ForceClearLengthCheck;                             // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           MainTalkList;                                      // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           AutoTalkList;                                      // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameJobInfoItem) == 0x000008, "Wrong alignment on FSnfGameJobInfoItem");
static_assert(sizeof(FSnfGameJobInfoItem) == 0x000170, "Wrong size on FSnfGameJobInfoItem");
static_assert(offsetof(FSnfGameJobInfoItem, FlagId) == 0x000008, "Member 'FSnfGameJobInfoItem::FlagId' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, CatalogId) == 0x000010, "Member 'FSnfGameJobInfoItem::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, AreaId) == 0x000018, "Member 'FSnfGameJobInfoItem::AreaId' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, Location) == 0x000020, "Member 'FSnfGameJobInfoItem::Location' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, Rotation) == 0x00002C, "Member 'FSnfGameJobInfoItem::Rotation' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, Count) == 0x000038, "Member 'FSnfGameJobInfoItem::Count' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, BeginActive) == 0x00003C, "Member 'FSnfGameJobInfoItem::BeginActive' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, Yaw) == 0x000040, "Member 'FSnfGameJobInfoItem::Yaw' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, GroupNo) == 0x000044, "Member 'FSnfGameJobInfoItem::GroupNo' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, SupplyNo) == 0x000048, "Member 'FSnfGameJobInfoItem::SupplyNo' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, SupplySection) == 0x000050, "Member 'FSnfGameJobInfoItem::SupplySection' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, BeginActivityId) == 0x000058, "Member 'FSnfGameJobInfoItem::BeginActivityId' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, BeginActivityState) == 0x000060, "Member 'FSnfGameJobInfoItem::BeginActivityState' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, EndActivityId) == 0x000064, "Member 'FSnfGameJobInfoItem::EndActivityId' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, EndActivityState) == 0x00006C, "Member 'FSnfGameJobInfoItem::EndActivityState' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, LiberationActivityId) == 0x000070, "Member 'FSnfGameJobInfoItem::LiberationActivityId' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, IsInside) == 0x000078, "Member 'FSnfGameJobInfoItem::IsInside' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, InsideLocation) == 0x00007C, "Member 'FSnfGameJobInfoItem::InsideLocation' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, OutsideLocation) == 0x000088, "Member 'FSnfGameJobInfoItem::OutsideLocation' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, NameTags) == 0x000098, "Member 'FSnfGameJobInfoItem::NameTags' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, GameTags) == 0x0000A8, "Member 'FSnfGameJobInfoItem::GameTags' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, ClassName) == 0x0000C8, "Member 'FSnfGameJobInfoItem::ClassName' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, PathName) == 0x0000D0, "Member 'FSnfGameJobInfoItem::PathName' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, MapName) == 0x0000D8, "Member 'FSnfGameJobInfoItem::MapName' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, Actor) == 0x0000E0, "Member 'FSnfGameJobInfoItem::Actor' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, OwnerActor) == 0x000108, "Member 'FSnfGameJobInfoItem::OwnerActor' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, OwnerComponent) == 0x000110, "Member 'FSnfGameJobInfoItem::OwnerComponent' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, RequestRole) == 0x000118, "Member 'FSnfGameJobInfoItem::RequestRole' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, RequestCatalog) == 0x000138, "Member 'FSnfGameJobInfoItem::RequestCatalog' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, ForceClearLengthCheck) == 0x000148, "Member 'FSnfGameJobInfoItem::ForceClearLengthCheck' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, MainTalkList) == 0x000150, "Member 'FSnfGameJobInfoItem::MainTalkList' has a wrong offset!");
static_assert(offsetof(FSnfGameJobInfoItem, AutoTalkList) == 0x000160, "Member 'FSnfGameJobInfoItem::AutoTalkList' has a wrong offset!");

// ScriptStruct Snowfall.SnfFootstepEffect
// 0x0020 (0x0020 - 0x0000)
struct FSnfFootstepEffect final
{
public:
	class UParticleSystem*                        Particle;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          Sound;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetThreshold;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          WetSound;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfFootstepEffect) == 0x000008, "Wrong alignment on FSnfFootstepEffect");
static_assert(sizeof(FSnfFootstepEffect) == 0x000020, "Wrong size on FSnfFootstepEffect");
static_assert(offsetof(FSnfFootstepEffect, Particle) == 0x000000, "Member 'FSnfFootstepEffect::Particle' has a wrong offset!");
static_assert(offsetof(FSnfFootstepEffect, Sound) == 0x000008, "Member 'FSnfFootstepEffect::Sound' has a wrong offset!");
static_assert(offsetof(FSnfFootstepEffect, WetThreshold) == 0x000010, "Member 'FSnfFootstepEffect::WetThreshold' has a wrong offset!");
static_assert(offsetof(FSnfFootstepEffect, WetSound) == 0x000018, "Member 'FSnfFootstepEffect::WetSound' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponHandSpectrumDiffusionInformation
// 0x0080 (0x0080 - 0x0000)
struct FSnfWeaponHandSpectrumDiffusionInformation final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Quat;                                              // 0x0020(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bStartHoming;                                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HomingStartLocation;                               // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HomingStartDirection;                              // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               Particle;                                          // 0x0050(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndMove;                                          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContinuousMove;                                   // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x26];                                      // 0x005A(0x0026)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfWeaponHandSpectrumDiffusionInformation) == 0x000010, "Wrong alignment on FSnfWeaponHandSpectrumDiffusionInformation");
static_assert(sizeof(FSnfWeaponHandSpectrumDiffusionInformation) == 0x000080, "Wrong size on FSnfWeaponHandSpectrumDiffusionInformation");
static_assert(offsetof(FSnfWeaponHandSpectrumDiffusionInformation, Direction) == 0x000000, "Member 'FSnfWeaponHandSpectrumDiffusionInformation::Direction' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumDiffusionInformation, Location) == 0x00000C, "Member 'FSnfWeaponHandSpectrumDiffusionInformation::Location' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumDiffusionInformation, Quat) == 0x000020, "Member 'FSnfWeaponHandSpectrumDiffusionInformation::Quat' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumDiffusionInformation, bStartHoming) == 0x000030, "Member 'FSnfWeaponHandSpectrumDiffusionInformation::bStartHoming' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumDiffusionInformation, HomingStartLocation) == 0x000034, "Member 'FSnfWeaponHandSpectrumDiffusionInformation::HomingStartLocation' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumDiffusionInformation, HomingStartDirection) == 0x000040, "Member 'FSnfWeaponHandSpectrumDiffusionInformation::HomingStartDirection' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumDiffusionInformation, Particle) == 0x000050, "Member 'FSnfWeaponHandSpectrumDiffusionInformation::Particle' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumDiffusionInformation, bEndMove) == 0x000058, "Member 'FSnfWeaponHandSpectrumDiffusionInformation::bEndMove' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumDiffusionInformation, bContinuousMove) == 0x000059, "Member 'FSnfWeaponHandSpectrumDiffusionInformation::bContinuousMove' has a wrong offset!");

// ScriptStruct Snowfall.SnfOuterFXPropsInfo
// 0x0028 (0x0028 - 0x0000)
struct FSnfOuterFXPropsInfo final
{
public:
	TWeakObjectPtr<class AActor>                  OuterFXProps;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayListOnPlay;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayListOverlapBegin;                              // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayListOverlapEnd;                                // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayListDelay;                                     // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfOuterFXPropsInfo) == 0x000004, "Wrong alignment on FSnfOuterFXPropsInfo");
static_assert(sizeof(FSnfOuterFXPropsInfo) == 0x000028, "Wrong size on FSnfOuterFXPropsInfo");
static_assert(offsetof(FSnfOuterFXPropsInfo, OuterFXProps) == 0x000000, "Member 'FSnfOuterFXPropsInfo::OuterFXProps' has a wrong offset!");
static_assert(offsetof(FSnfOuterFXPropsInfo, PlayListOnPlay) == 0x000008, "Member 'FSnfOuterFXPropsInfo::PlayListOnPlay' has a wrong offset!");
static_assert(offsetof(FSnfOuterFXPropsInfo, PlayListOverlapBegin) == 0x000010, "Member 'FSnfOuterFXPropsInfo::PlayListOverlapBegin' has a wrong offset!");
static_assert(offsetof(FSnfOuterFXPropsInfo, PlayListOverlapEnd) == 0x000018, "Member 'FSnfOuterFXPropsInfo::PlayListOverlapEnd' has a wrong offset!");
static_assert(offsetof(FSnfOuterFXPropsInfo, PlayListDelay) == 0x000020, "Member 'FSnfOuterFXPropsInfo::PlayListDelay' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameBuddyEventInfo
// 0x0030 (0x0038 - 0x0008)
struct FSnfGameBuddyEventInfo final : public FTableRowBase
{
public:
	TArray<class FName>                           TalkIds;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EventPercentage;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalTime;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysAtFirst;                                    // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DevComment;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameBuddyEventInfo) == 0x000008, "Wrong alignment on FSnfGameBuddyEventInfo");
static_assert(sizeof(FSnfGameBuddyEventInfo) == 0x000038, "Wrong size on FSnfGameBuddyEventInfo");
static_assert(offsetof(FSnfGameBuddyEventInfo, TalkIds) == 0x000008, "Member 'FSnfGameBuddyEventInfo::TalkIds' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyEventInfo, MaxCount) == 0x000018, "Member 'FSnfGameBuddyEventInfo::MaxCount' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyEventInfo, EventPercentage) == 0x00001C, "Member 'FSnfGameBuddyEventInfo::EventPercentage' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyEventInfo, IntervalTime) == 0x000020, "Member 'FSnfGameBuddyEventInfo::IntervalTime' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyEventInfo, bAlwaysAtFirst) == 0x000024, "Member 'FSnfGameBuddyEventInfo::bAlwaysAtFirst' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyEventInfo, DevComment) == 0x000028, "Member 'FSnfGameBuddyEventInfo::DevComment' has a wrong offset!");

// ScriptStruct Snowfall.SnfFXPropsSlomoAnimationInfo
// 0x0028 (0x0028 - 0x0000)
struct FSnfFXPropsSlomoAnimationInfo final
{
public:
	class UCurveFloat*                            Curve;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstantValue;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoopRangeStart;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopRangeEnd;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0xC];                                       // 0x001C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfFXPropsSlomoAnimationInfo) == 0x000008, "Wrong alignment on FSnfFXPropsSlomoAnimationInfo");
static_assert(sizeof(FSnfFXPropsSlomoAnimationInfo) == 0x000028, "Wrong size on FSnfFXPropsSlomoAnimationInfo");
static_assert(offsetof(FSnfFXPropsSlomoAnimationInfo, Curve) == 0x000000, "Member 'FSnfFXPropsSlomoAnimationInfo::Curve' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsSlomoAnimationInfo, ConstantValue) == 0x000008, "Member 'FSnfFXPropsSlomoAnimationInfo::ConstantValue' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsSlomoAnimationInfo, Duration) == 0x00000C, "Member 'FSnfFXPropsSlomoAnimationInfo::Duration' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsSlomoAnimationInfo, Loop) == 0x000010, "Member 'FSnfFXPropsSlomoAnimationInfo::Loop' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsSlomoAnimationInfo, LoopRangeStart) == 0x000014, "Member 'FSnfFXPropsSlomoAnimationInfo::LoopRangeStart' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsSlomoAnimationInfo, LoopRangeEnd) == 0x000018, "Member 'FSnfFXPropsSlomoAnimationInfo::LoopRangeEnd' has a wrong offset!");

// ScriptStruct Snowfall.SnfFXPropsRelayInfo
// 0x0030 (0x0030 - 0x0000)
struct FSnfFXPropsRelayInfo final
{
public:
	class ASnfFXPropsActor*                       Target;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayListName;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActivityControlMode;                               // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Activity;                                          // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivityActionName;                                // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetTime;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfFXPropsRelayInfo) == 0x000008, "Wrong alignment on FSnfFXPropsRelayInfo");
static_assert(sizeof(FSnfFXPropsRelayInfo) == 0x000030, "Wrong size on FSnfFXPropsRelayInfo");
static_assert(offsetof(FSnfFXPropsRelayInfo, Target) == 0x000000, "Member 'FSnfFXPropsRelayInfo::Target' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsRelayInfo, PlayListName) == 0x000008, "Member 'FSnfFXPropsRelayInfo::PlayListName' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsRelayInfo, ActivityControlMode) == 0x000010, "Member 'FSnfFXPropsRelayInfo::ActivityControlMode' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsRelayInfo, Activity) == 0x000018, "Member 'FSnfFXPropsRelayInfo::Activity' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsRelayInfo, ActivityActionName) == 0x000020, "Member 'FSnfFXPropsRelayInfo::ActivityActionName' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsRelayInfo, TargetTime) == 0x000028, "Member 'FSnfFXPropsRelayInfo::TargetTime' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkSequenceConditions
// 0x0008 (0x0008 - 0x0000)
struct FSnfTalkSequenceConditions final
{
public:
	int32                                         Min;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MAX;                                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalkSequenceConditions) == 0x000004, "Wrong alignment on FSnfTalkSequenceConditions");
static_assert(sizeof(FSnfTalkSequenceConditions) == 0x000008, "Wrong size on FSnfTalkSequenceConditions");
static_assert(offsetof(FSnfTalkSequenceConditions, Min) == 0x000000, "Member 'FSnfTalkSequenceConditions::Min' has a wrong offset!");
static_assert(offsetof(FSnfTalkSequenceConditions, MAX) == 0x000004, "Member 'FSnfTalkSequenceConditions::MAX' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkContinueInfo
// 0x0060 (0x0068 - 0x0008)
struct FSnfTalkContinueInfo final : public FTableRowBase
{
public:
	class FString                                 DevComment;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrefaceTalkId;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              TalkTablePath;                                     // 0x0020(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSnfTalkSequenceConditions             SequenceConditions;                                // 0x0048(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SafeTime;                                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RetryIntervalTime;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReadTalkIdlist;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalkContinueInfo) == 0x000008, "Wrong alignment on FSnfTalkContinueInfo");
static_assert(sizeof(FSnfTalkContinueInfo) == 0x000068, "Wrong size on FSnfTalkContinueInfo");
static_assert(offsetof(FSnfTalkContinueInfo, DevComment) == 0x000008, "Member 'FSnfTalkContinueInfo::DevComment' has a wrong offset!");
static_assert(offsetof(FSnfTalkContinueInfo, PrefaceTalkId) == 0x000018, "Member 'FSnfTalkContinueInfo::PrefaceTalkId' has a wrong offset!");
static_assert(offsetof(FSnfTalkContinueInfo, TalkTablePath) == 0x000020, "Member 'FSnfTalkContinueInfo::TalkTablePath' has a wrong offset!");
static_assert(offsetof(FSnfTalkContinueInfo, SequenceConditions) == 0x000048, "Member 'FSnfTalkContinueInfo::SequenceConditions' has a wrong offset!");
static_assert(offsetof(FSnfTalkContinueInfo, SafeTime) == 0x000050, "Member 'FSnfTalkContinueInfo::SafeTime' has a wrong offset!");
static_assert(offsetof(FSnfTalkContinueInfo, RetryIntervalTime) == 0x000054, "Member 'FSnfTalkContinueInfo::RetryIntervalTime' has a wrong offset!");
static_assert(offsetof(FSnfTalkContinueInfo, ReadTalkIdlist) == 0x000058, "Member 'FSnfTalkContinueInfo::ReadTalkIdlist' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkShopBuffData
// 0x0018 (0x0018 - 0x0000)
struct FSnfTalkShopBuffData final
{
public:
	ESnfTalkShopBuffType                          Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    DataTble;                                          // 0x0008(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalkShopBuffData) == 0x000008, "Wrong alignment on FSnfTalkShopBuffData");
static_assert(sizeof(FSnfTalkShopBuffData) == 0x000018, "Wrong size on FSnfTalkShopBuffData");
static_assert(offsetof(FSnfTalkShopBuffData, Type) == 0x000000, "Member 'FSnfTalkShopBuffData::Type' has a wrong offset!");
static_assert(offsetof(FSnfTalkShopBuffData, DataTble) == 0x000008, "Member 'FSnfTalkShopBuffData::DataTble' has a wrong offset!");

// ScriptStruct Snowfall.SnfFXPropsForceFeedbackInfo
// 0x0028 (0x0028 - 0x0000)
struct FSnfFXPropsForceFeedbackInfo final
{
public:
	class UForceFeedbackEffect*                   ForceFeedback;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Looping;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreTimeDelation;                                // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayWhilePaused;                                   // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Tag;                                               // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntensityMultiplier;                               // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackAttenuation*              AttenuationSettings;                               // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfFXPropsForceFeedbackInfo) == 0x000008, "Wrong alignment on FSnfFXPropsForceFeedbackInfo");
static_assert(sizeof(FSnfFXPropsForceFeedbackInfo) == 0x000028, "Wrong size on FSnfFXPropsForceFeedbackInfo");
static_assert(offsetof(FSnfFXPropsForceFeedbackInfo, ForceFeedback) == 0x000000, "Member 'FSnfFXPropsForceFeedbackInfo::ForceFeedback' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsForceFeedbackInfo, Looping) == 0x000008, "Member 'FSnfFXPropsForceFeedbackInfo::Looping' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsForceFeedbackInfo, IgnoreTimeDelation) == 0x000009, "Member 'FSnfFXPropsForceFeedbackInfo::IgnoreTimeDelation' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsForceFeedbackInfo, PlayWhilePaused) == 0x00000A, "Member 'FSnfFXPropsForceFeedbackInfo::PlayWhilePaused' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsForceFeedbackInfo, Tag) == 0x00000C, "Member 'FSnfFXPropsForceFeedbackInfo::Tag' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsForceFeedbackInfo, IntensityMultiplier) == 0x000014, "Member 'FSnfFXPropsForceFeedbackInfo::IntensityMultiplier' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsForceFeedbackInfo, AttenuationSettings) == 0x000018, "Member 'FSnfFXPropsForceFeedbackInfo::AttenuationSettings' has a wrong offset!");

// ScriptStruct Snowfall.SnfPrisonAreaBox
// 0x0070 (0x0070 - 0x0000)
struct FSnfPrisonAreaBox final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0030(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x34];                                      // 0x003C(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfPrisonAreaBox) == 0x000010, "Wrong alignment on FSnfPrisonAreaBox");
static_assert(sizeof(FSnfPrisonAreaBox) == 0x000070, "Wrong size on FSnfPrisonAreaBox");
static_assert(offsetof(FSnfPrisonAreaBox, Transform) == 0x000000, "Member 'FSnfPrisonAreaBox::Transform' has a wrong offset!");
static_assert(offsetof(FSnfPrisonAreaBox, BoxExtent) == 0x000030, "Member 'FSnfPrisonAreaBox::BoxExtent' has a wrong offset!");

// ScriptStruct Snowfall.SnfFXPropsParanormalPositionInfo
// 0x0020 (0x0020 - 0x0000)
struct FSnfFXPropsParanormalPositionInfo final
{
public:
	class UCurveFloat*                            Curve;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoopRangeStart;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopRangeEnd;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfFXPropsParanormalPositionInfo) == 0x000008, "Wrong alignment on FSnfFXPropsParanormalPositionInfo");
static_assert(sizeof(FSnfFXPropsParanormalPositionInfo) == 0x000020, "Wrong size on FSnfFXPropsParanormalPositionInfo");
static_assert(offsetof(FSnfFXPropsParanormalPositionInfo, Curve) == 0x000000, "Member 'FSnfFXPropsParanormalPositionInfo::Curve' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParanormalPositionInfo, Duration) == 0x000008, "Member 'FSnfFXPropsParanormalPositionInfo::Duration' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParanormalPositionInfo, Loop) == 0x00000C, "Member 'FSnfFXPropsParanormalPositionInfo::Loop' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParanormalPositionInfo, LoopRangeStart) == 0x000010, "Member 'FSnfFXPropsParanormalPositionInfo::LoopRangeStart' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParanormalPositionInfo, LoopRangeEnd) == 0x000014, "Member 'FSnfFXPropsParanormalPositionInfo::LoopRangeEnd' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameBuddyTalkInfo
// 0x00E0 (0x00E8 - 0x0008)
struct FSnfGameBuddyTalkInfo final : public FTableRowBase
{
public:
	EBuddyTalkType                                Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuddyEnableType                              EnableType;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FirstTalkId;                                       // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TalkIds;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           UniqueTalkIds;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActAloneTalkIds;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EBuddyFloatType, float>                  ConditionFloatMap;                                 // 0x0048(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EBuddyIntegerType, int32>                ConditionIntegerMap;                               // 0x0098(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameBuddyTalkInfo) == 0x000008, "Wrong alignment on FSnfGameBuddyTalkInfo");
static_assert(sizeof(FSnfGameBuddyTalkInfo) == 0x0000E8, "Wrong size on FSnfGameBuddyTalkInfo");
static_assert(offsetof(FSnfGameBuddyTalkInfo, Type) == 0x000008, "Member 'FSnfGameBuddyTalkInfo::Type' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyTalkInfo, EnableType) == 0x000009, "Member 'FSnfGameBuddyTalkInfo::EnableType' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyTalkInfo, FirstTalkId) == 0x00000C, "Member 'FSnfGameBuddyTalkInfo::FirstTalkId' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyTalkInfo, TalkIds) == 0x000018, "Member 'FSnfGameBuddyTalkInfo::TalkIds' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyTalkInfo, UniqueTalkIds) == 0x000028, "Member 'FSnfGameBuddyTalkInfo::UniqueTalkIds' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyTalkInfo, ActAloneTalkIds) == 0x000038, "Member 'FSnfGameBuddyTalkInfo::ActAloneTalkIds' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyTalkInfo, ConditionFloatMap) == 0x000048, "Member 'FSnfGameBuddyTalkInfo::ConditionFloatMap' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyTalkInfo, ConditionIntegerMap) == 0x000098, "Member 'FSnfGameBuddyTalkInfo::ConditionIntegerMap' has a wrong offset!");

// ScriptStruct Snowfall.SnfToriiActorKegareEffectSetting
// 0x0014 (0x0014 - 0x0000)
struct FSnfToriiActorKegareEffectSetting final
{
public:
	struct FVector                                ActorScale;                                        // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KegareStartPlayList;                               // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfToriiActorKegareEffectSetting) == 0x000004, "Wrong alignment on FSnfToriiActorKegareEffectSetting");
static_assert(sizeof(FSnfToriiActorKegareEffectSetting) == 0x000014, "Wrong size on FSnfToriiActorKegareEffectSetting");
static_assert(offsetof(FSnfToriiActorKegareEffectSetting, ActorScale) == 0x000000, "Member 'FSnfToriiActorKegareEffectSetting::ActorScale' has a wrong offset!");
static_assert(offsetof(FSnfToriiActorKegareEffectSetting, KegareStartPlayList) == 0x00000C, "Member 'FSnfToriiActorKegareEffectSetting::KegareStartPlayList' has a wrong offset!");

// ScriptStruct Snowfall.SnfFXPropsTriggerInfo
// 0x001C (0x001C - 0x0000)
struct FSnfFXPropsTriggerInfo final
{
public:
	TWeakObjectPtr<class ATriggerBase>            Trigger;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayListName;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndPlaylistName;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DoOnce;                                            // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfFXPropsTriggerInfo) == 0x000004, "Wrong alignment on FSnfFXPropsTriggerInfo");
static_assert(sizeof(FSnfFXPropsTriggerInfo) == 0x00001C, "Wrong size on FSnfFXPropsTriggerInfo");
static_assert(offsetof(FSnfFXPropsTriggerInfo, Trigger) == 0x000000, "Member 'FSnfFXPropsTriggerInfo::Trigger' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsTriggerInfo, PlayListName) == 0x000008, "Member 'FSnfFXPropsTriggerInfo::PlayListName' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsTriggerInfo, EndPlaylistName) == 0x000010, "Member 'FSnfFXPropsTriggerInfo::EndPlaylistName' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsTriggerInfo, DoOnce) == 0x000018, "Member 'FSnfFXPropsTriggerInfo::DoOnce' has a wrong offset!");

// ScriptStruct Snowfall.SnfFXPropsGameEnvInfo
// 0x0010 (0x0010 - 0x0000)
struct FSnfFXPropsGameEnvInfo final
{
public:
	bool                                          ChangeEnvPreset;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EnvPresetName;                                     // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfGameWeatherType                           Weather;                                           // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfFXPropsGameEnvInfo) == 0x000004, "Wrong alignment on FSnfFXPropsGameEnvInfo");
static_assert(sizeof(FSnfFXPropsGameEnvInfo) == 0x000010, "Wrong size on FSnfFXPropsGameEnvInfo");
static_assert(offsetof(FSnfFXPropsGameEnvInfo, ChangeEnvPreset) == 0x000000, "Member 'FSnfFXPropsGameEnvInfo::ChangeEnvPreset' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsGameEnvInfo, EnvPresetName) == 0x000004, "Member 'FSnfFXPropsGameEnvInfo::EnvPresetName' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsGameEnvInfo, Weather) == 0x00000C, "Member 'FSnfFXPropsGameEnvInfo::Weather' has a wrong offset!");

// ScriptStruct Snowfall.SnfPeopleActionAnim
// 0x0038 (0x0038 - 0x0000)
struct FSnfPeopleActionAnim final
{
public:
	class UAnimSequenceBase*                      AnimSequence;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                        AnimBlendSpace;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AnimBlendSpaceAxis;                                // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopDuration;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInDuration;                                   // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutDuration;                                  // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DoesOverwriteMontageBlendTime;                     // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MontageSectionName;                                // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPeopleActionAnim) == 0x000008, "Wrong alignment on FSnfPeopleActionAnim");
static_assert(sizeof(FSnfPeopleActionAnim) == 0x000038, "Wrong size on FSnfPeopleActionAnim");
static_assert(offsetof(FSnfPeopleActionAnim, AnimSequence) == 0x000000, "Member 'FSnfPeopleActionAnim::AnimSequence' has a wrong offset!");
static_assert(offsetof(FSnfPeopleActionAnim, AnimBlendSpace) == 0x000008, "Member 'FSnfPeopleActionAnim::AnimBlendSpace' has a wrong offset!");
static_assert(offsetof(FSnfPeopleActionAnim, AnimBlendSpaceAxis) == 0x000010, "Member 'FSnfPeopleActionAnim::AnimBlendSpaceAxis' has a wrong offset!");
static_assert(offsetof(FSnfPeopleActionAnim, LoopDuration) == 0x00001C, "Member 'FSnfPeopleActionAnim::LoopDuration' has a wrong offset!");
static_assert(offsetof(FSnfPeopleActionAnim, PlayRate) == 0x000020, "Member 'FSnfPeopleActionAnim::PlayRate' has a wrong offset!");
static_assert(offsetof(FSnfPeopleActionAnim, BlendInDuration) == 0x000024, "Member 'FSnfPeopleActionAnim::BlendInDuration' has a wrong offset!");
static_assert(offsetof(FSnfPeopleActionAnim, BlendOutDuration) == 0x000028, "Member 'FSnfPeopleActionAnim::BlendOutDuration' has a wrong offset!");
static_assert(offsetof(FSnfPeopleActionAnim, DoesOverwriteMontageBlendTime) == 0x00002C, "Member 'FSnfPeopleActionAnim::DoesOverwriteMontageBlendTime' has a wrong offset!");
static_assert(offsetof(FSnfPeopleActionAnim, MontageSectionName) == 0x000030, "Member 'FSnfPeopleActionAnim::MontageSectionName' has a wrong offset!");

// ScriptStruct Snowfall.SnfFXPropsMPCInfo
// 0x0008 (0x0008 - 0x0000)
struct FSnfFXPropsMPCInfo final
{
public:
	class UMaterialParameterCollection*           MPC;                                               // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfFXPropsMPCInfo) == 0x000008, "Wrong alignment on FSnfFXPropsMPCInfo");
static_assert(sizeof(FSnfFXPropsMPCInfo) == 0x000008, "Wrong size on FSnfFXPropsMPCInfo");
static_assert(offsetof(FSnfFXPropsMPCInfo, MPC) == 0x000000, "Member 'FSnfFXPropsMPCInfo::MPC' has a wrong offset!");

// ScriptStruct Snowfall.SnfFXPropsDecalMaterialInfo
// 0x0080 (0x0080 - 0x0000)
struct FSnfFXPropsDecalMaterialInfo final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           LinkedParamArray;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Size;                                              // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Offset;                                            // 0x0030(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     AdditionalPoints;                                  // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SortOrder;                                         // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfFXPropsDecalMaterialInfo) == 0x000010, "Wrong alignment on FSnfFXPropsDecalMaterialInfo");
static_assert(sizeof(FSnfFXPropsDecalMaterialInfo) == 0x000080, "Wrong size on FSnfFXPropsDecalMaterialInfo");
static_assert(offsetof(FSnfFXPropsDecalMaterialInfo, Material) == 0x000000, "Member 'FSnfFXPropsDecalMaterialInfo::Material' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsDecalMaterialInfo, LinkedParamArray) == 0x000008, "Member 'FSnfFXPropsDecalMaterialInfo::LinkedParamArray' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsDecalMaterialInfo, Size) == 0x000018, "Member 'FSnfFXPropsDecalMaterialInfo::Size' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsDecalMaterialInfo, Offset) == 0x000030, "Member 'FSnfFXPropsDecalMaterialInfo::Offset' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsDecalMaterialInfo, AdditionalPoints) == 0x000060, "Member 'FSnfFXPropsDecalMaterialInfo::AdditionalPoints' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsDecalMaterialInfo, SortOrder) == 0x000070, "Member 'FSnfFXPropsDecalMaterialInfo::SortOrder' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkSeparationInfo
// 0x0008 (0x0010 - 0x0008)
struct FSnfTalkSeparationInfo final : public FTableRowBase
{
public:
	class FName                                   ChangeTalkId;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalkSeparationInfo) == 0x000008, "Wrong alignment on FSnfTalkSeparationInfo");
static_assert(sizeof(FSnfTalkSeparationInfo) == 0x000010, "Wrong size on FSnfTalkSeparationInfo");
static_assert(offsetof(FSnfTalkSeparationInfo, ChangeTalkId) == 0x000008, "Member 'FSnfTalkSeparationInfo::ChangeTalkId' has a wrong offset!");

// ScriptStruct Snowfall.SnfFXPropsDefaultScalarParam
// 0x000C (0x000C - 0x0000)
struct FSnfFXPropsDefaultScalarParam final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfFXPropsDefaultScalarParam) == 0x000004, "Wrong alignment on FSnfFXPropsDefaultScalarParam");
static_assert(sizeof(FSnfFXPropsDefaultScalarParam) == 0x00000C, "Wrong size on FSnfFXPropsDefaultScalarParam");
static_assert(offsetof(FSnfFXPropsDefaultScalarParam, Name) == 0x000000, "Member 'FSnfFXPropsDefaultScalarParam::Name' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsDefaultScalarParam, Value) == 0x000008, "Member 'FSnfFXPropsDefaultScalarParam::Value' has a wrong offset!");

// ScriptStruct Snowfall.SnfFXPropsDefaultVectorParam
// 0x0018 (0x0018 - 0x0000)
struct FSnfFXPropsDefaultVectorParam final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfFXPropsDefaultVectorParam) == 0x000004, "Wrong alignment on FSnfFXPropsDefaultVectorParam");
static_assert(sizeof(FSnfFXPropsDefaultVectorParam) == 0x000018, "Wrong size on FSnfFXPropsDefaultVectorParam");
static_assert(offsetof(FSnfFXPropsDefaultVectorParam, Name) == 0x000000, "Member 'FSnfFXPropsDefaultVectorParam::Name' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsDefaultVectorParam, Value) == 0x000008, "Member 'FSnfFXPropsDefaultVectorParam::Value' has a wrong offset!");

// ScriptStruct Snowfall.SnfFXPropsPostMaterialInfo
// 0x0038 (0x0038 - 0x0000)
struct FSnfFXPropsPostMaterialInfo final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           LinkedParamArray;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfFXPropsDefaultScalarParam>  DefaultScalarParams;                               // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfFXPropsDefaultVectorParam>  DefaultVectorParams;                               // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfFXPropsPostMaterialInfo) == 0x000008, "Wrong alignment on FSnfFXPropsPostMaterialInfo");
static_assert(sizeof(FSnfFXPropsPostMaterialInfo) == 0x000038, "Wrong size on FSnfFXPropsPostMaterialInfo");
static_assert(offsetof(FSnfFXPropsPostMaterialInfo, Material) == 0x000000, "Member 'FSnfFXPropsPostMaterialInfo::Material' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsPostMaterialInfo, LinkedParamArray) == 0x000008, "Member 'FSnfFXPropsPostMaterialInfo::LinkedParamArray' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsPostMaterialInfo, DefaultScalarParams) == 0x000018, "Member 'FSnfFXPropsPostMaterialInfo::DefaultScalarParams' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsPostMaterialInfo, DefaultVectorParams) == 0x000028, "Member 'FSnfFXPropsPostMaterialInfo::DefaultVectorParams' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponEm1900WaterSpreadData
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x10) FSnfWeaponEm1900WaterSpreadData final
{
public:
	class UChildActorComponent*                   FxPropChild;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChildActorComponent*                   HitFxPropChild;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnfWeaponCollisionShape_Arc*           Collision;                                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UAkComponent>            SpreadSoundComponent;                              // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x40];                                      // 0x0020(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfWeaponEm1900WaterSpreadData) == 0x000010, "Wrong alignment on FSnfWeaponEm1900WaterSpreadData");
static_assert(sizeof(FSnfWeaponEm1900WaterSpreadData) == 0x000060, "Wrong size on FSnfWeaponEm1900WaterSpreadData");
static_assert(offsetof(FSnfWeaponEm1900WaterSpreadData, FxPropChild) == 0x000000, "Member 'FSnfWeaponEm1900WaterSpreadData::FxPropChild' has a wrong offset!");
static_assert(offsetof(FSnfWeaponEm1900WaterSpreadData, HitFxPropChild) == 0x000008, "Member 'FSnfWeaponEm1900WaterSpreadData::HitFxPropChild' has a wrong offset!");
static_assert(offsetof(FSnfWeaponEm1900WaterSpreadData, Collision) == 0x000010, "Member 'FSnfWeaponEm1900WaterSpreadData::Collision' has a wrong offset!");
static_assert(offsetof(FSnfWeaponEm1900WaterSpreadData, SpreadSoundComponent) == 0x000018, "Member 'FSnfWeaponEm1900WaterSpreadData::SpreadSoundComponent' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkAnotherNameTable
// 0x0030 (0x0038 - 0x0008)
struct FSnfTalkAnotherNameTable final : public FTableRowBase
{
public:
	class FText                                   DrawText;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ETalkAnotherName                              Type;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DevComment;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalkAnotherNameTable) == 0x000008, "Wrong alignment on FSnfTalkAnotherNameTable");
static_assert(sizeof(FSnfTalkAnotherNameTable) == 0x000038, "Wrong size on FSnfTalkAnotherNameTable");
static_assert(offsetof(FSnfTalkAnotherNameTable, DrawText) == 0x000008, "Member 'FSnfTalkAnotherNameTable::DrawText' has a wrong offset!");
static_assert(offsetof(FSnfTalkAnotherNameTable, Type) == 0x000020, "Member 'FSnfTalkAnotherNameTable::Type' has a wrong offset!");
static_assert(offsetof(FSnfTalkAnotherNameTable, DevComment) == 0x000028, "Member 'FSnfTalkAnotherNameTable::DevComment' has a wrong offset!");

// ScriptStruct Snowfall.SnfFXPropsMaterialOverrideInfo
// 0x0068 (0x0068 - 0x0000)
struct FSnfFXPropsMaterialOverrideInfo final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialIndex;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotName;                                          // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LinkedParamArray;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 AdditionalIndices;                                 // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           AdditionalSlots;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfFXPropsDefaultScalarParam>  DefaultScalarParams;                               // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfFXPropsDefaultVectorParam>  DefaultVectorParams;                               // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfFXPropsMaterialOverrideInfo) == 0x000008, "Wrong alignment on FSnfFXPropsMaterialOverrideInfo");
static_assert(sizeof(FSnfFXPropsMaterialOverrideInfo) == 0x000068, "Wrong size on FSnfFXPropsMaterialOverrideInfo");
static_assert(offsetof(FSnfFXPropsMaterialOverrideInfo, Material) == 0x000000, "Member 'FSnfFXPropsMaterialOverrideInfo::Material' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsMaterialOverrideInfo, MaterialIndex) == 0x000008, "Member 'FSnfFXPropsMaterialOverrideInfo::MaterialIndex' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsMaterialOverrideInfo, SlotName) == 0x00000C, "Member 'FSnfFXPropsMaterialOverrideInfo::SlotName' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsMaterialOverrideInfo, LinkedParamArray) == 0x000018, "Member 'FSnfFXPropsMaterialOverrideInfo::LinkedParamArray' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsMaterialOverrideInfo, AdditionalIndices) == 0x000028, "Member 'FSnfFXPropsMaterialOverrideInfo::AdditionalIndices' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsMaterialOverrideInfo, AdditionalSlots) == 0x000038, "Member 'FSnfFXPropsMaterialOverrideInfo::AdditionalSlots' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsMaterialOverrideInfo, DefaultScalarParams) == 0x000048, "Member 'FSnfFXPropsMaterialOverrideInfo::DefaultScalarParams' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsMaterialOverrideInfo, DefaultVectorParams) == 0x000058, "Member 'FSnfFXPropsMaterialOverrideInfo::DefaultVectorParams' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkUnknownCastNameInfo
// 0x0008 (0x0010 - 0x0008)
struct FSnfTalkUnknownCastNameInfo final : public FTableRowBase
{
public:
	ETalkAnotherName                              AnotherNameType;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverSequenceId;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalkUnknownCastNameInfo) == 0x000008, "Wrong alignment on FSnfTalkUnknownCastNameInfo");
static_assert(sizeof(FSnfTalkUnknownCastNameInfo) == 0x000010, "Wrong size on FSnfTalkUnknownCastNameInfo");
static_assert(offsetof(FSnfTalkUnknownCastNameInfo, AnotherNameType) == 0x000008, "Member 'FSnfTalkUnknownCastNameInfo::AnotherNameType' has a wrong offset!");
static_assert(offsetof(FSnfTalkUnknownCastNameInfo, OverSequenceId) == 0x00000C, "Member 'FSnfTalkUnknownCastNameInfo::OverSequenceId' has a wrong offset!");

// ScriptStruct Snowfall.SnfFXPropsMaterialAnim
// 0x0050 (0x0050 - 0x0000)
struct FSnfFXPropsMaterialAnim final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DefaultVectorValue;                                // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetByDefaultValueWhenAnimationStoped;            // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetByDefaultValueWhenAnimationStart;             // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VectorMode;                                        // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParamScale;                                        // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Curve;                                             // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           VectorCurve;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoopRangeStart;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopRangeEnd;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetIndex;                                       // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfFXPropsMaterialAnim) == 0x000008, "Wrong alignment on FSnfFXPropsMaterialAnim");
static_assert(sizeof(FSnfFXPropsMaterialAnim) == 0x000050, "Wrong size on FSnfFXPropsMaterialAnim");
static_assert(offsetof(FSnfFXPropsMaterialAnim, SlotIndex) == 0x000000, "Member 'FSnfFXPropsMaterialAnim::SlotIndex' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsMaterialAnim, DefaultValue) == 0x000004, "Member 'FSnfFXPropsMaterialAnim::DefaultValue' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsMaterialAnim, DefaultVectorValue) == 0x000008, "Member 'FSnfFXPropsMaterialAnim::DefaultVectorValue' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsMaterialAnim, ResetByDefaultValueWhenAnimationStoped) == 0x000014, "Member 'FSnfFXPropsMaterialAnim::ResetByDefaultValueWhenAnimationStoped' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsMaterialAnim, ResetByDefaultValueWhenAnimationStart) == 0x000015, "Member 'FSnfFXPropsMaterialAnim::ResetByDefaultValueWhenAnimationStart' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsMaterialAnim, VectorMode) == 0x000016, "Member 'FSnfFXPropsMaterialAnim::VectorMode' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsMaterialAnim, Duration) == 0x000018, "Member 'FSnfFXPropsMaterialAnim::Duration' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsMaterialAnim, ParamScale) == 0x00001C, "Member 'FSnfFXPropsMaterialAnim::ParamScale' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsMaterialAnim, Curve) == 0x000020, "Member 'FSnfFXPropsMaterialAnim::Curve' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsMaterialAnim, VectorCurve) == 0x000028, "Member 'FSnfFXPropsMaterialAnim::VectorCurve' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsMaterialAnim, ParamName) == 0x000030, "Member 'FSnfFXPropsMaterialAnim::ParamName' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsMaterialAnim, Loop) == 0x000038, "Member 'FSnfFXPropsMaterialAnim::Loop' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsMaterialAnim, LoopRangeStart) == 0x00003C, "Member 'FSnfFXPropsMaterialAnim::LoopRangeStart' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsMaterialAnim, LoopRangeEnd) == 0x000040, "Member 'FSnfFXPropsMaterialAnim::LoopRangeEnd' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsMaterialAnim, OffsetIndex) == 0x000044, "Member 'FSnfFXPropsMaterialAnim::OffsetIndex' has a wrong offset!");

// ScriptStruct Snowfall.SnfFXPropsSoundBuildInfo
// 0x0060 (0x0060 - 0x0000)
struct FSnfFXPropsSoundBuildInfo final
{
public:
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkChangeRoomType                             ChangeRoomType;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionRefreshInterval;                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlaybackOnOpen;                                    // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Offset;                                            // 0x0020(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ECollisionChannel                             OcclusionCollisionChannel;                         // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugDrawSound;                                    // 0x0051(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugDrawComponent;                                // 0x0052(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0xD];                                       // 0x0053(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfFXPropsSoundBuildInfo) == 0x000010, "Wrong alignment on FSnfFXPropsSoundBuildInfo");
static_assert(sizeof(FSnfFXPropsSoundBuildInfo) == 0x000060, "Wrong size on FSnfFXPropsSoundBuildInfo");
static_assert(offsetof(FSnfFXPropsSoundBuildInfo, AudioEvent) == 0x000000, "Member 'FSnfFXPropsSoundBuildInfo::AudioEvent' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsSoundBuildInfo, ChangeRoomType) == 0x000008, "Member 'FSnfFXPropsSoundBuildInfo::ChangeRoomType' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsSoundBuildInfo, OcclusionRefreshInterval) == 0x00000C, "Member 'FSnfFXPropsSoundBuildInfo::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsSoundBuildInfo, SocketName) == 0x000010, "Member 'FSnfFXPropsSoundBuildInfo::SocketName' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsSoundBuildInfo, PlaybackOnOpen) == 0x000018, "Member 'FSnfFXPropsSoundBuildInfo::PlaybackOnOpen' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsSoundBuildInfo, Offset) == 0x000020, "Member 'FSnfFXPropsSoundBuildInfo::Offset' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsSoundBuildInfo, OcclusionCollisionChannel) == 0x000050, "Member 'FSnfFXPropsSoundBuildInfo::OcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsSoundBuildInfo, DebugDrawSound) == 0x000051, "Member 'FSnfFXPropsSoundBuildInfo::DebugDrawSound' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsSoundBuildInfo, DebugDrawComponent) == 0x000052, "Member 'FSnfFXPropsSoundBuildInfo::DebugDrawComponent' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkIdAdditionInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSnfTalkIdAdditionInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfTalkIdAdditionInfo) == 0x000008, "Wrong alignment on FSnfTalkIdAdditionInfo");
static_assert(sizeof(FSnfTalkIdAdditionInfo) == 0x000020, "Wrong size on FSnfTalkIdAdditionInfo");

// ScriptStruct Snowfall.SnfFXPropsNiagara
// 0x0028 (0x0028 - 0x0000)
struct FSnfFXPropsNiagara final
{
public:
	class UNiagaraComponent*                      Component;                                         // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorParamName;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MeshParamName;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SplineParamName;                                   // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SplineLengthParamName;                             // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfFXPropsNiagara) == 0x000008, "Wrong alignment on FSnfFXPropsNiagara");
static_assert(sizeof(FSnfFXPropsNiagara) == 0x000028, "Wrong size on FSnfFXPropsNiagara");
static_assert(offsetof(FSnfFXPropsNiagara, Component) == 0x000000, "Member 'FSnfFXPropsNiagara::Component' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsNiagara, ActorParamName) == 0x000008, "Member 'FSnfFXPropsNiagara::ActorParamName' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsNiagara, MeshParamName) == 0x000010, "Member 'FSnfFXPropsNiagara::MeshParamName' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsNiagara, SplineParamName) == 0x000018, "Member 'FSnfFXPropsNiagara::SplineParamName' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsNiagara, SplineLengthParamName) == 0x000020, "Member 'FSnfFXPropsNiagara::SplineLengthParamName' has a wrong offset!");

// ScriptStruct Snowfall.SnfPlayerAudioEvent
// 0x0008 (0x0008 - 0x0000)
struct FSnfPlayerAudioEvent final
{
public:
	class UAkAudioEvent*                          LocalPlayerSE;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPlayerAudioEvent) == 0x000008, "Wrong alignment on FSnfPlayerAudioEvent");
static_assert(sizeof(FSnfPlayerAudioEvent) == 0x000008, "Wrong size on FSnfPlayerAudioEvent");
static_assert(offsetof(FSnfPlayerAudioEvent, LocalPlayerSE) == 0x000000, "Member 'FSnfPlayerAudioEvent::LocalPlayerSE' has a wrong offset!");

// ScriptStruct Snowfall.SnfFXPropsNiagaraBuildInfo
// 0x0070 (0x0070 - 0x0000)
struct FSnfFXPropsNiagaraBuildInfo final
{
public:
	class UNiagaraSystem*                         NiagaraSystem;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorParamName;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MeshParamName;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SplineParamName;                                   // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SplineLengthParamName;                             // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Offset;                                            // 0x0030(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          PlaybackOnOpen;                                    // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WorldRotate;                                       // 0x0061(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TranslucencySortPriority;                          // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfFXPropsNiagaraBuildInfo) == 0x000010, "Wrong alignment on FSnfFXPropsNiagaraBuildInfo");
static_assert(sizeof(FSnfFXPropsNiagaraBuildInfo) == 0x000070, "Wrong size on FSnfFXPropsNiagaraBuildInfo");
static_assert(offsetof(FSnfFXPropsNiagaraBuildInfo, NiagaraSystem) == 0x000000, "Member 'FSnfFXPropsNiagaraBuildInfo::NiagaraSystem' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsNiagaraBuildInfo, ActorParamName) == 0x000008, "Member 'FSnfFXPropsNiagaraBuildInfo::ActorParamName' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsNiagaraBuildInfo, MeshParamName) == 0x000010, "Member 'FSnfFXPropsNiagaraBuildInfo::MeshParamName' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsNiagaraBuildInfo, SplineParamName) == 0x000018, "Member 'FSnfFXPropsNiagaraBuildInfo::SplineParamName' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsNiagaraBuildInfo, SplineLengthParamName) == 0x000020, "Member 'FSnfFXPropsNiagaraBuildInfo::SplineLengthParamName' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsNiagaraBuildInfo, SocketName) == 0x000028, "Member 'FSnfFXPropsNiagaraBuildInfo::SocketName' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsNiagaraBuildInfo, Offset) == 0x000030, "Member 'FSnfFXPropsNiagaraBuildInfo::Offset' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsNiagaraBuildInfo, PlaybackOnOpen) == 0x000060, "Member 'FSnfFXPropsNiagaraBuildInfo::PlaybackOnOpen' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsNiagaraBuildInfo, WorldRotate) == 0x000061, "Member 'FSnfFXPropsNiagaraBuildInfo::WorldRotate' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsNiagaraBuildInfo, TranslucencySortPriority) == 0x000064, "Member 'FSnfFXPropsNiagaraBuildInfo::TranslucencySortPriority' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkUniqueMotion
// 0x0050 (0x0050 - 0x0000)
struct FSnfTalkUniqueMotion final
{
public:
	TSoftObjectPtr<class UAnimSequenceBase>       UniqueAnimSequence;                                // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequenceBase>       IdleAnimSequence;                                  // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalkUniqueMotion) == 0x000008, "Wrong alignment on FSnfTalkUniqueMotion");
static_assert(sizeof(FSnfTalkUniqueMotion) == 0x000050, "Wrong size on FSnfTalkUniqueMotion");
static_assert(offsetof(FSnfTalkUniqueMotion, UniqueAnimSequence) == 0x000000, "Member 'FSnfTalkUniqueMotion::UniqueAnimSequence' has a wrong offset!");
static_assert(offsetof(FSnfTalkUniqueMotion, IdleAnimSequence) == 0x000028, "Member 'FSnfTalkUniqueMotion::IdleAnimSequence' has a wrong offset!");

// ScriptStruct Snowfall.SnfFXPropsParticle
// 0x0070 (0x0070 - 0x0000)
struct FSnfFXPropsParticle final
{
public:
	class UParticleSystemComponent*               Component;                                         // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VanishTime;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorParamName;                                    // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WorldRotate;                                       // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0xB];                                       // 0x0015(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USnfFXPropsParticleSound*>       SoundEventsOnSpawn;                                // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USnfFXPropsParticleSound*>       SoundEventsOnBurst;                                // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USnfFXPropsParticleSound*>       SoundEventsOnCollide;                              // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USnfFXPropsParticleSound*>       SoundEventsOnDeath;                                // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USnfFXPropsParticleSound*>       SoundEventsOnVanish;                               // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfFXPropsParticle) == 0x000008, "Wrong alignment on FSnfFXPropsParticle");
static_assert(sizeof(FSnfFXPropsParticle) == 0x000070, "Wrong size on FSnfFXPropsParticle");
static_assert(offsetof(FSnfFXPropsParticle, Component) == 0x000000, "Member 'FSnfFXPropsParticle::Component' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticle, VanishTime) == 0x000008, "Member 'FSnfFXPropsParticle::VanishTime' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticle, ActorParamName) == 0x00000C, "Member 'FSnfFXPropsParticle::ActorParamName' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticle, WorldRotate) == 0x000014, "Member 'FSnfFXPropsParticle::WorldRotate' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticle, SoundEventsOnSpawn) == 0x000020, "Member 'FSnfFXPropsParticle::SoundEventsOnSpawn' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticle, SoundEventsOnBurst) == 0x000030, "Member 'FSnfFXPropsParticle::SoundEventsOnBurst' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticle, SoundEventsOnCollide) == 0x000040, "Member 'FSnfFXPropsParticle::SoundEventsOnCollide' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticle, SoundEventsOnDeath) == 0x000050, "Member 'FSnfFXPropsParticle::SoundEventsOnDeath' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticle, SoundEventsOnVanish) == 0x000060, "Member 'FSnfFXPropsParticle::SoundEventsOnVanish' has a wrong offset!");

// ScriptStruct Snowfall.SnfFXPropsParticleSoundBuildInfo
// 0x0060 (0x0060 - 0x0000)
struct FSnfFXPropsParticleSoundBuildInfo final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkChangeRoomType                             ChangeRoomType;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionRefreshInterval;                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Offset;                                            // 0x0020(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ECollisionChannel                             OcclusionCollisionChannel;                         // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugDrawSound;                                    // 0x0051(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugDrawComponent;                                // 0x0052(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0xD];                                       // 0x0053(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfFXPropsParticleSoundBuildInfo) == 0x000010, "Wrong alignment on FSnfFXPropsParticleSoundBuildInfo");
static_assert(sizeof(FSnfFXPropsParticleSoundBuildInfo) == 0x000060, "Wrong size on FSnfFXPropsParticleSoundBuildInfo");
static_assert(offsetof(FSnfFXPropsParticleSoundBuildInfo, EventName) == 0x000000, "Member 'FSnfFXPropsParticleSoundBuildInfo::EventName' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticleSoundBuildInfo, AudioEvent) == 0x000008, "Member 'FSnfFXPropsParticleSoundBuildInfo::AudioEvent' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticleSoundBuildInfo, ChangeRoomType) == 0x000010, "Member 'FSnfFXPropsParticleSoundBuildInfo::ChangeRoomType' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticleSoundBuildInfo, OcclusionRefreshInterval) == 0x000014, "Member 'FSnfFXPropsParticleSoundBuildInfo::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticleSoundBuildInfo, Offset) == 0x000020, "Member 'FSnfFXPropsParticleSoundBuildInfo::Offset' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticleSoundBuildInfo, OcclusionCollisionChannel) == 0x000050, "Member 'FSnfFXPropsParticleSoundBuildInfo::OcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticleSoundBuildInfo, DebugDrawSound) == 0x000051, "Member 'FSnfFXPropsParticleSoundBuildInfo::DebugDrawSound' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticleSoundBuildInfo, DebugDrawComponent) == 0x000052, "Member 'FSnfFXPropsParticleSoundBuildInfo::DebugDrawComponent' has a wrong offset!");

// ScriptStruct Snowfall.SnfFXPropsParticleBuildInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FSnfFXPropsParticleBuildInfo final
{
public:
	class UParticleSystem*                        ParticleSystem;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorParamName;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Offset;                                            // 0x0020(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VanishTime;                                        // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlaybackOnOpen;                                    // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WorldRotate;                                       // 0x0055(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSnfFXPropsParticleSoundBuildInfo> SoundEventsOnSpawn;                                // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfFXPropsParticleSoundBuildInfo> SoundEventsOnBurst;                                // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfFXPropsParticleSoundBuildInfo> SoundEventsOnCollide;                              // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfFXPropsParticleSoundBuildInfo> SoundEventsOnDeath;                                // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfFXPropsParticleSoundBuildInfo> SoundEventsOnVanish;                               // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfFXPropsParticleBuildInfo) == 0x000010, "Wrong alignment on FSnfFXPropsParticleBuildInfo");
static_assert(sizeof(FSnfFXPropsParticleBuildInfo) == 0x0000B0, "Wrong size on FSnfFXPropsParticleBuildInfo");
static_assert(offsetof(FSnfFXPropsParticleBuildInfo, ParticleSystem) == 0x000000, "Member 'FSnfFXPropsParticleBuildInfo::ParticleSystem' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticleBuildInfo, SocketName) == 0x000008, "Member 'FSnfFXPropsParticleBuildInfo::SocketName' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticleBuildInfo, ActorParamName) == 0x000010, "Member 'FSnfFXPropsParticleBuildInfo::ActorParamName' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticleBuildInfo, Offset) == 0x000020, "Member 'FSnfFXPropsParticleBuildInfo::Offset' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticleBuildInfo, VanishTime) == 0x000050, "Member 'FSnfFXPropsParticleBuildInfo::VanishTime' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticleBuildInfo, PlaybackOnOpen) == 0x000054, "Member 'FSnfFXPropsParticleBuildInfo::PlaybackOnOpen' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticleBuildInfo, WorldRotate) == 0x000055, "Member 'FSnfFXPropsParticleBuildInfo::WorldRotate' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticleBuildInfo, SoundEventsOnSpawn) == 0x000058, "Member 'FSnfFXPropsParticleBuildInfo::SoundEventsOnSpawn' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticleBuildInfo, SoundEventsOnBurst) == 0x000068, "Member 'FSnfFXPropsParticleBuildInfo::SoundEventsOnBurst' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticleBuildInfo, SoundEventsOnCollide) == 0x000078, "Member 'FSnfFXPropsParticleBuildInfo::SoundEventsOnCollide' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticleBuildInfo, SoundEventsOnDeath) == 0x000088, "Member 'FSnfFXPropsParticleBuildInfo::SoundEventsOnDeath' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsParticleBuildInfo, SoundEventsOnVanish) == 0x000098, "Member 'FSnfFXPropsParticleBuildInfo::SoundEventsOnVanish' has a wrong offset!");

// ScriptStruct Snowfall.SnfGimmickActorAddCollisionSetting
// 0x00B0 (0x00B0 - 0x0000)
struct FSnfGimmickActorAddCollisionSetting final
{
public:
	int32                                         AttachPartsIndex;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0040(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bManualResponceSetting;                            // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CollisionProfileName;                              // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ECollisionChannel, ECollisionResponse>   CollisionResponseList;                             // 0x0058(0x0050)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGimmickActorAddCollisionSetting) == 0x000010, "Wrong alignment on FSnfGimmickActorAddCollisionSetting");
static_assert(sizeof(FSnfGimmickActorAddCollisionSetting) == 0x0000B0, "Wrong size on FSnfGimmickActorAddCollisionSetting");
static_assert(offsetof(FSnfGimmickActorAddCollisionSetting, AttachPartsIndex) == 0x000000, "Member 'FSnfGimmickActorAddCollisionSetting::AttachPartsIndex' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorAddCollisionSetting, Transform) == 0x000010, "Member 'FSnfGimmickActorAddCollisionSetting::Transform' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorAddCollisionSetting, BoxExtent) == 0x000040, "Member 'FSnfGimmickActorAddCollisionSetting::BoxExtent' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorAddCollisionSetting, bManualResponceSetting) == 0x00004C, "Member 'FSnfGimmickActorAddCollisionSetting::bManualResponceSetting' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorAddCollisionSetting, CollisionProfileName) == 0x000050, "Member 'FSnfGimmickActorAddCollisionSetting::CollisionProfileName' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorAddCollisionSetting, CollisionResponseList) == 0x000058, "Member 'FSnfGimmickActorAddCollisionSetting::CollisionResponseList' has a wrong offset!");

// ScriptStruct Snowfall.SnfFXPropsPlayListItem
// 0x0550 (0x0550 - 0x0000)
struct FSnfFXPropsPlayListItem final
{
public:
	TMap<int32, EFXBehavior>                      FXList;                                            // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, struct FSnfFXPropsSoundBehavior>  SoundOnlyList;                                     // 0x0050(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, EFXBehavior>                      MaterialAnimList;                                  // 0x00A0(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, EFXBehavior>                      PostMaterialAnimList;                              // 0x00F0(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, EFXBehavior>                      LightMaterialAnimList;                             // 0x0140(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, EFXBehavior>                      DecalMaterialAnimList;                             // 0x0190(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, EFXBehavior>                      GameEnvList;                                       // 0x01E0(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, EFXBehavior>                      ParanormalPositionList;                            // 0x0230(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, EFXBehavior>                      ParticleAnimList;                                  // 0x0280(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, EFXBehavior>                      ForceFeedbackList;                                 // 0x02D0(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, EFXBehavior>                      RelayList;                                         // 0x0320(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, EFXBehavior>                      MPCAnimList;                                       // 0x0370(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, EFXBehavior>                      NiagaraList;                                       // 0x03C0(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, EFXBehavior>                      SlomoAnimationList;                                // 0x0410(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, EFXBehavior>                      NiagaraAnimList;                                   // 0x0460(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, EFXBehavior>                      SkelAnimList;                                      // 0x04B0(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, EFXBehavior>                      LoopSkelAnimList;                                  // 0x0500(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfFXPropsPlayListItem) == 0x000008, "Wrong alignment on FSnfFXPropsPlayListItem");
static_assert(sizeof(FSnfFXPropsPlayListItem) == 0x000550, "Wrong size on FSnfFXPropsPlayListItem");
static_assert(offsetof(FSnfFXPropsPlayListItem, FXList) == 0x000000, "Member 'FSnfFXPropsPlayListItem::FXList' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsPlayListItem, SoundOnlyList) == 0x000050, "Member 'FSnfFXPropsPlayListItem::SoundOnlyList' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsPlayListItem, MaterialAnimList) == 0x0000A0, "Member 'FSnfFXPropsPlayListItem::MaterialAnimList' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsPlayListItem, PostMaterialAnimList) == 0x0000F0, "Member 'FSnfFXPropsPlayListItem::PostMaterialAnimList' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsPlayListItem, LightMaterialAnimList) == 0x000140, "Member 'FSnfFXPropsPlayListItem::LightMaterialAnimList' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsPlayListItem, DecalMaterialAnimList) == 0x000190, "Member 'FSnfFXPropsPlayListItem::DecalMaterialAnimList' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsPlayListItem, GameEnvList) == 0x0001E0, "Member 'FSnfFXPropsPlayListItem::GameEnvList' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsPlayListItem, ParanormalPositionList) == 0x000230, "Member 'FSnfFXPropsPlayListItem::ParanormalPositionList' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsPlayListItem, ParticleAnimList) == 0x000280, "Member 'FSnfFXPropsPlayListItem::ParticleAnimList' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsPlayListItem, ForceFeedbackList) == 0x0002D0, "Member 'FSnfFXPropsPlayListItem::ForceFeedbackList' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsPlayListItem, RelayList) == 0x000320, "Member 'FSnfFXPropsPlayListItem::RelayList' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsPlayListItem, MPCAnimList) == 0x000370, "Member 'FSnfFXPropsPlayListItem::MPCAnimList' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsPlayListItem, NiagaraList) == 0x0003C0, "Member 'FSnfFXPropsPlayListItem::NiagaraList' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsPlayListItem, SlomoAnimationList) == 0x000410, "Member 'FSnfFXPropsPlayListItem::SlomoAnimationList' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsPlayListItem, NiagaraAnimList) == 0x000460, "Member 'FSnfFXPropsPlayListItem::NiagaraAnimList' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsPlayListItem, SkelAnimList) == 0x0004B0, "Member 'FSnfFXPropsPlayListItem::SkelAnimList' has a wrong offset!");
static_assert(offsetof(FSnfFXPropsPlayListItem, LoopSkelAnimList) == 0x000500, "Member 'FSnfFXPropsPlayListItem::LoopSkelAnimList' has a wrong offset!");

// ScriptStruct Snowfall.SnfSplineRandomResult
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FSnfSplineRandomResult final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfSplineRandomResult) == 0x000004, "Wrong alignment on FSnfSplineRandomResult");
static_assert(sizeof(FSnfSplineRandomResult) == 0x000020, "Wrong size on FSnfSplineRandomResult");

// ScriptStruct Snowfall.ASnfRelayParam
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FASnfRelayParam final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FASnfRelayParam) == 0x000008, "Wrong alignment on FASnfRelayParam");
static_assert(sizeof(FASnfRelayParam) == 0x000028, "Wrong size on FASnfRelayParam");

// ScriptStruct Snowfall.SnfGameActivityRequestCastTypeB
// 0x0018 (0x0018 - 0x0000)
struct FSnfGameActivityRequestCastTypeB final
{
public:
	class ASnfJobActor*                           JobActor;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkId_A;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkId_B;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameActivityRequestCastTypeB) == 0x000008, "Wrong alignment on FSnfGameActivityRequestCastTypeB");
static_assert(sizeof(FSnfGameActivityRequestCastTypeB) == 0x000018, "Wrong size on FSnfGameActivityRequestCastTypeB");
static_assert(offsetof(FSnfGameActivityRequestCastTypeB, JobActor) == 0x000000, "Member 'FSnfGameActivityRequestCastTypeB::JobActor' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCastTypeB, TalkId_A) == 0x000008, "Member 'FSnfGameActivityRequestCastTypeB::TalkId_A' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCastTypeB, TalkId_B) == 0x000010, "Member 'FSnfGameActivityRequestCastTypeB::TalkId_B' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActivityRequestCreviceManParam
// 0x0048 (0x0048 - 0x0000)
struct FSnfGameActivityRequestCreviceManParam final
{
public:
	struct FSnfGameActivityRequestCastTypeB       CreviceMan;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfGameActivityRequestEnemyGroupB     EnemyGroupA;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class AActor*                                 SearchMarker;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MissionStartTalkId;                                // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleStartTalkId;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InMusubiActor;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameActivityRequestCreviceManParam) == 0x000008, "Wrong alignment on FSnfGameActivityRequestCreviceManParam");
static_assert(sizeof(FSnfGameActivityRequestCreviceManParam) == 0x000048, "Wrong size on FSnfGameActivityRequestCreviceManParam");
static_assert(offsetof(FSnfGameActivityRequestCreviceManParam, CreviceMan) == 0x000000, "Member 'FSnfGameActivityRequestCreviceManParam::CreviceMan' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCreviceManParam, EnemyGroupA) == 0x000018, "Member 'FSnfGameActivityRequestCreviceManParam::EnemyGroupA' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCreviceManParam, SearchMarker) == 0x000028, "Member 'FSnfGameActivityRequestCreviceManParam::SearchMarker' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCreviceManParam, MissionStartTalkId) == 0x000030, "Member 'FSnfGameActivityRequestCreviceManParam::MissionStartTalkId' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCreviceManParam, BattleStartTalkId) == 0x000038, "Member 'FSnfGameActivityRequestCreviceManParam::BattleStartTalkId' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCreviceManParam, InMusubiActor) == 0x000040, "Member 'FSnfGameActivityRequestCreviceManParam::InMusubiActor' has a wrong offset!");

// ScriptStruct Snowfall.SnfGhostCageActorFXPropSetting
// 0x0040 (0x0040 - 0x0000)
struct FSnfGhostCageActorFXPropSetting final
{
public:
	TSubclassOf<class ASnfFXPropsActor>           FXPropClass;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGhostCageActorFXPropSetting) == 0x000010, "Wrong alignment on FSnfGhostCageActorFXPropSetting");
static_assert(sizeof(FSnfGhostCageActorFXPropSetting) == 0x000040, "Wrong size on FSnfGhostCageActorFXPropSetting");
static_assert(offsetof(FSnfGhostCageActorFXPropSetting, FXPropClass) == 0x000000, "Member 'FSnfGhostCageActorFXPropSetting::FXPropClass' has a wrong offset!");
static_assert(offsetof(FSnfGhostCageActorFXPropSetting, Transform) == 0x000010, "Member 'FSnfGhostCageActorFXPropSetting::Transform' has a wrong offset!");

// ScriptStruct Snowfall.SnfGimmickActorFearSetting
// 0x0020 (0x0020 - 0x0000)
struct FSnfGimmickActorFearSetting final
{
public:
	TArray<class UCurveFloat*>                    FearCurveList;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         FearDelayMin;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FearDelayMax;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FearSpeedMin;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FearSpeedMax;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGimmickActorFearSetting) == 0x000008, "Wrong alignment on FSnfGimmickActorFearSetting");
static_assert(sizeof(FSnfGimmickActorFearSetting) == 0x000020, "Wrong size on FSnfGimmickActorFearSetting");
static_assert(offsetof(FSnfGimmickActorFearSetting, FearCurveList) == 0x000000, "Member 'FSnfGimmickActorFearSetting::FearCurveList' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorFearSetting, FearDelayMin) == 0x000010, "Member 'FSnfGimmickActorFearSetting::FearDelayMin' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorFearSetting, FearDelayMax) == 0x000014, "Member 'FSnfGimmickActorFearSetting::FearDelayMax' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorFearSetting, FearSpeedMin) == 0x000018, "Member 'FSnfGimmickActorFearSetting::FearSpeedMin' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorFearSetting, FearSpeedMax) == 0x00001C, "Member 'FSnfGimmickActorFearSetting::FearSpeedMax' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponAimInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FSnfWeaponAimInfo final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USceneComponent>         Component;                                         // 0x0014(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0028(0x0088)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponAimInfo) == 0x000004, "Wrong alignment on FSnfWeaponAimInfo");
static_assert(sizeof(FSnfWeaponAimInfo) == 0x0000B0, "Wrong size on FSnfWeaponAimInfo");
static_assert(offsetof(FSnfWeaponAimInfo, Location) == 0x000000, "Member 'FSnfWeaponAimInfo::Location' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAimInfo, Actor) == 0x00000C, "Member 'FSnfWeaponAimInfo::Actor' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAimInfo, Component) == 0x000014, "Member 'FSnfWeaponAimInfo::Component' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAimInfo, Velocity) == 0x00001C, "Member 'FSnfWeaponAimInfo::Velocity' has a wrong offset!");
static_assert(offsetof(FSnfWeaponAimInfo, HitResult) == 0x000028, "Member 'FSnfWeaponAimInfo::HitResult' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponLaunchParam
// 0x00F0 (0x00F0 - 0x0000)
struct FSnfWeaponLaunchParam final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SpeedScale;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideGravityScale;                             // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GravityScale;                                      // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSnfWeaponAimInfo                      AimInfo;                                           // 0x000C(0x00B0)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bSpecifyLaunchTransform;                           // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LaunchLocation;                                    // 0x00C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LaunchDirection;                                   // 0x00CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaunchDelayTime;                                   // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FixedPointLocation;                                // 0x00DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCounter;                                          // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BurstCount;                                        // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponLaunchParam) == 0x000008, "Wrong alignment on FSnfWeaponLaunchParam");
static_assert(sizeof(FSnfWeaponLaunchParam) == 0x0000F0, "Wrong size on FSnfWeaponLaunchParam");
static_assert(offsetof(FSnfWeaponLaunchParam, OwnerActor) == 0x000000, "Member 'FSnfWeaponLaunchParam::OwnerActor' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLaunchParam, SpeedScale) == 0x000008, "Member 'FSnfWeaponLaunchParam::SpeedScale' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLaunchParam, bOverrideGravityScale) == 0x000009, "Member 'FSnfWeaponLaunchParam::bOverrideGravityScale' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLaunchParam, GravityScale) == 0x00000A, "Member 'FSnfWeaponLaunchParam::GravityScale' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLaunchParam, AimInfo) == 0x00000C, "Member 'FSnfWeaponLaunchParam::AimInfo' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLaunchParam, bSpecifyLaunchTransform) == 0x0000BC, "Member 'FSnfWeaponLaunchParam::bSpecifyLaunchTransform' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLaunchParam, LaunchLocation) == 0x0000C0, "Member 'FSnfWeaponLaunchParam::LaunchLocation' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLaunchParam, LaunchDirection) == 0x0000CC, "Member 'FSnfWeaponLaunchParam::LaunchDirection' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLaunchParam, LaunchDelayTime) == 0x0000D8, "Member 'FSnfWeaponLaunchParam::LaunchDelayTime' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLaunchParam, FixedPointLocation) == 0x0000DC, "Member 'FSnfWeaponLaunchParam::FixedPointLocation' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLaunchParam, bCounter) == 0x0000E8, "Member 'FSnfWeaponLaunchParam::bCounter' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLaunchParam, BurstCount) == 0x0000EC, "Member 'FSnfWeaponLaunchParam::BurstCount' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActivityRequestHumanFaceDogParam
// 0x00E0 (0x00E0 - 0x0000)
struct FSnfGameActivityRequestHumanFaceDogParam final
{
public:
	struct FSnfGameActivityRequestCastTypeB       OlderBrother;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfGameActivityRequestCastTypeC       YoungerBrother;                                    // 0x0018(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfGameActivityRequestCastTypeA> OtherDogs;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSnfGameActivityRequestCastTypeA       BeforeOlderBrother;                                // 0x0048(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfGameActivityRequestCastTypeA       EvilOlderBrother;                                  // 0x0058(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 YoungerBrotherMarker;                              // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 BattleAreaMarker;                                  // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSnfGameActivityRequestEnemyGroupB     EnemyGroupA;                                       // 0x0078(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   OlderBrotherBuzzTalkId;                            // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GoalTalkId;                                        // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BattleStartTalkId;                                 // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LookActor;                                         // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LookActor2;                                        // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InMusubiActor;                                     // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EvilStartFXPropsActor;                             // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EvilStartSoundActor;                               // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EvilEndSoundActor;                                 // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SaveCtrlActor;                                     // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EliminateActor;                                    // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameActivityRequestHumanFaceDogParam) == 0x000008, "Wrong alignment on FSnfGameActivityRequestHumanFaceDogParam");
static_assert(sizeof(FSnfGameActivityRequestHumanFaceDogParam) == 0x0000E0, "Wrong size on FSnfGameActivityRequestHumanFaceDogParam");
static_assert(offsetof(FSnfGameActivityRequestHumanFaceDogParam, OlderBrother) == 0x000000, "Member 'FSnfGameActivityRequestHumanFaceDogParam::OlderBrother' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHumanFaceDogParam, YoungerBrother) == 0x000018, "Member 'FSnfGameActivityRequestHumanFaceDogParam::YoungerBrother' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHumanFaceDogParam, OtherDogs) == 0x000038, "Member 'FSnfGameActivityRequestHumanFaceDogParam::OtherDogs' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHumanFaceDogParam, BeforeOlderBrother) == 0x000048, "Member 'FSnfGameActivityRequestHumanFaceDogParam::BeforeOlderBrother' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHumanFaceDogParam, EvilOlderBrother) == 0x000058, "Member 'FSnfGameActivityRequestHumanFaceDogParam::EvilOlderBrother' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHumanFaceDogParam, YoungerBrotherMarker) == 0x000068, "Member 'FSnfGameActivityRequestHumanFaceDogParam::YoungerBrotherMarker' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHumanFaceDogParam, BattleAreaMarker) == 0x000070, "Member 'FSnfGameActivityRequestHumanFaceDogParam::BattleAreaMarker' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHumanFaceDogParam, EnemyGroupA) == 0x000078, "Member 'FSnfGameActivityRequestHumanFaceDogParam::EnemyGroupA' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHumanFaceDogParam, OlderBrotherBuzzTalkId) == 0x000088, "Member 'FSnfGameActivityRequestHumanFaceDogParam::OlderBrotherBuzzTalkId' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHumanFaceDogParam, GoalTalkId) == 0x000090, "Member 'FSnfGameActivityRequestHumanFaceDogParam::GoalTalkId' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHumanFaceDogParam, BattleStartTalkId) == 0x000098, "Member 'FSnfGameActivityRequestHumanFaceDogParam::BattleStartTalkId' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHumanFaceDogParam, LookActor) == 0x0000A0, "Member 'FSnfGameActivityRequestHumanFaceDogParam::LookActor' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHumanFaceDogParam, LookActor2) == 0x0000A8, "Member 'FSnfGameActivityRequestHumanFaceDogParam::LookActor2' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHumanFaceDogParam, InMusubiActor) == 0x0000B0, "Member 'FSnfGameActivityRequestHumanFaceDogParam::InMusubiActor' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHumanFaceDogParam, EvilStartFXPropsActor) == 0x0000B8, "Member 'FSnfGameActivityRequestHumanFaceDogParam::EvilStartFXPropsActor' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHumanFaceDogParam, EvilStartSoundActor) == 0x0000C0, "Member 'FSnfGameActivityRequestHumanFaceDogParam::EvilStartSoundActor' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHumanFaceDogParam, EvilEndSoundActor) == 0x0000C8, "Member 'FSnfGameActivityRequestHumanFaceDogParam::EvilEndSoundActor' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHumanFaceDogParam, SaveCtrlActor) == 0x0000D0, "Member 'FSnfGameActivityRequestHumanFaceDogParam::SaveCtrlActor' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHumanFaceDogParam, EliminateActor) == 0x0000D8, "Member 'FSnfGameActivityRequestHumanFaceDogParam::EliminateActor' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameShopDataInfo
// 0x0108 (0x0110 - 0x0008)
struct FSnfGameShopDataInfo final : public FTableRowBase
{
public:
	TSubclassOf<class UTngItemObject>             PointItem;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UTngItemObject>>     BaseList;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UTngItemObject>>     SaveList;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class FText                                   ShopNameText;                                      // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>           OpenAk;                                            // 0x0048(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>           CloseAk;                                           // 0x0070(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>           GetItemAk;                                         // 0x0098(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>           NotGetItemAk;                                      // 0x00C0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>           SelectAk;                                          // 0x00E8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameShopDataInfo) == 0x000008, "Wrong alignment on FSnfGameShopDataInfo");
static_assert(sizeof(FSnfGameShopDataInfo) == 0x000110, "Wrong size on FSnfGameShopDataInfo");
static_assert(offsetof(FSnfGameShopDataInfo, PointItem) == 0x000008, "Member 'FSnfGameShopDataInfo::PointItem' has a wrong offset!");
static_assert(offsetof(FSnfGameShopDataInfo, BaseList) == 0x000010, "Member 'FSnfGameShopDataInfo::BaseList' has a wrong offset!");
static_assert(offsetof(FSnfGameShopDataInfo, SaveList) == 0x000020, "Member 'FSnfGameShopDataInfo::SaveList' has a wrong offset!");
static_assert(offsetof(FSnfGameShopDataInfo, ShopNameText) == 0x000030, "Member 'FSnfGameShopDataInfo::ShopNameText' has a wrong offset!");
static_assert(offsetof(FSnfGameShopDataInfo, OpenAk) == 0x000048, "Member 'FSnfGameShopDataInfo::OpenAk' has a wrong offset!");
static_assert(offsetof(FSnfGameShopDataInfo, CloseAk) == 0x000070, "Member 'FSnfGameShopDataInfo::CloseAk' has a wrong offset!");
static_assert(offsetof(FSnfGameShopDataInfo, GetItemAk) == 0x000098, "Member 'FSnfGameShopDataInfo::GetItemAk' has a wrong offset!");
static_assert(offsetof(FSnfGameShopDataInfo, NotGetItemAk) == 0x0000C0, "Member 'FSnfGameShopDataInfo::NotGetItemAk' has a wrong offset!");
static_assert(offsetof(FSnfGameShopDataInfo, SelectAk) == 0x0000E8, "Member 'FSnfGameShopDataInfo::SelectAk' has a wrong offset!");

// ScriptStruct Snowfall.SnfGimmickActorChildActorPositionParameterSetting
// 0x0014 (0x0014 - 0x0000)
struct FSnfGimmickActorChildActorPositionParameterSetting final
{
public:
	int32                                         PartsIndex;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialSlotName;                                  // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGimmickActorChildActorPositionParameterSetting) == 0x000004, "Wrong alignment on FSnfGimmickActorChildActorPositionParameterSetting");
static_assert(sizeof(FSnfGimmickActorChildActorPositionParameterSetting) == 0x000014, "Wrong size on FSnfGimmickActorChildActorPositionParameterSetting");
static_assert(offsetof(FSnfGimmickActorChildActorPositionParameterSetting, PartsIndex) == 0x000000, "Member 'FSnfGimmickActorChildActorPositionParameterSetting::PartsIndex' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorChildActorPositionParameterSetting, MaterialSlotName) == 0x000004, "Member 'FSnfGimmickActorChildActorPositionParameterSetting::MaterialSlotName' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorChildActorPositionParameterSetting, ParameterName) == 0x00000C, "Member 'FSnfGimmickActorChildActorPositionParameterSetting::ParameterName' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponBowDropData
// 0x001C (0x001C - 0x0000)
struct FSnfWeaponBowDropData final
{
public:
	int32                                         DropCount;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Durability;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageScale;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErrorScale;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeScale;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoAimSpeedScale;                                 // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalProbabilityScale;                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponBowDropData) == 0x000004, "Wrong alignment on FSnfWeaponBowDropData");
static_assert(sizeof(FSnfWeaponBowDropData) == 0x00001C, "Wrong size on FSnfWeaponBowDropData");
static_assert(offsetof(FSnfWeaponBowDropData, DropCount) == 0x000000, "Member 'FSnfWeaponBowDropData::DropCount' has a wrong offset!");
static_assert(offsetof(FSnfWeaponBowDropData, Durability) == 0x000004, "Member 'FSnfWeaponBowDropData::Durability' has a wrong offset!");
static_assert(offsetof(FSnfWeaponBowDropData, DamageScale) == 0x000008, "Member 'FSnfWeaponBowDropData::DamageScale' has a wrong offset!");
static_assert(offsetof(FSnfWeaponBowDropData, ErrorScale) == 0x00000C, "Member 'FSnfWeaponBowDropData::ErrorScale' has a wrong offset!");
static_assert(offsetof(FSnfWeaponBowDropData, RangeScale) == 0x000010, "Member 'FSnfWeaponBowDropData::RangeScale' has a wrong offset!");
static_assert(offsetof(FSnfWeaponBowDropData, AutoAimSpeedScale) == 0x000014, "Member 'FSnfWeaponBowDropData::AutoAimSpeedScale' has a wrong offset!");
static_assert(offsetof(FSnfWeaponBowDropData, CriticalProbabilityScale) == 0x000018, "Member 'FSnfWeaponBowDropData::CriticalProbabilityScale' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActivityRequestCastDoorTalk
// 0x0040 (0x0040 - 0x0000)
struct FSnfGameActivityRequestCastDoorTalk final
{
public:
	class AActor*                                 CastActor;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkId_A;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkId_B;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkId_C;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkId_D;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkId_E;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkId_F;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SelectTalkId;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameActivityRequestCastDoorTalk) == 0x000008, "Wrong alignment on FSnfGameActivityRequestCastDoorTalk");
static_assert(sizeof(FSnfGameActivityRequestCastDoorTalk) == 0x000040, "Wrong size on FSnfGameActivityRequestCastDoorTalk");
static_assert(offsetof(FSnfGameActivityRequestCastDoorTalk, CastActor) == 0x000000, "Member 'FSnfGameActivityRequestCastDoorTalk::CastActor' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCastDoorTalk, TalkId_A) == 0x000008, "Member 'FSnfGameActivityRequestCastDoorTalk::TalkId_A' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCastDoorTalk, TalkId_B) == 0x000010, "Member 'FSnfGameActivityRequestCastDoorTalk::TalkId_B' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCastDoorTalk, TalkId_C) == 0x000018, "Member 'FSnfGameActivityRequestCastDoorTalk::TalkId_C' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCastDoorTalk, TalkId_D) == 0x000020, "Member 'FSnfGameActivityRequestCastDoorTalk::TalkId_D' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCastDoorTalk, TalkId_E) == 0x000028, "Member 'FSnfGameActivityRequestCastDoorTalk::TalkId_E' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCastDoorTalk, TalkId_F) == 0x000030, "Member 'FSnfGameActivityRequestCastDoorTalk::TalkId_F' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestCastDoorTalk, SelectTalkId) == 0x000038, "Member 'FSnfGameActivityRequestCastDoorTalk::SelectTalkId' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActivityRequestNoPaperParam
// 0x00C0 (0x00C0 - 0x0000)
struct FSnfGameActivityRequestNoPaperParam final
{
public:
	struct FSnfGameActivityRequestCastTypeC       RequestCast;                                       // 0x0000(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfGameActivityRequestCastDoorTalk    DoorTalk;                                          // 0x0020(0x0040)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfGameActivityRequestCastTypeC       EvilSpirit;                                        // 0x0060(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfGameActivityRequestCastTypeA       RequestCast2;                                      // 0x0080(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ToiletPapers;                                      // 0x0090(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 ToiletMarker;                                      // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 StartMarker;                                       // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         Sounds;                                            // 0x00B0(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameActivityRequestNoPaperParam) == 0x000008, "Wrong alignment on FSnfGameActivityRequestNoPaperParam");
static_assert(sizeof(FSnfGameActivityRequestNoPaperParam) == 0x0000C0, "Wrong size on FSnfGameActivityRequestNoPaperParam");
static_assert(offsetof(FSnfGameActivityRequestNoPaperParam, RequestCast) == 0x000000, "Member 'FSnfGameActivityRequestNoPaperParam::RequestCast' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestNoPaperParam, DoorTalk) == 0x000020, "Member 'FSnfGameActivityRequestNoPaperParam::DoorTalk' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestNoPaperParam, EvilSpirit) == 0x000060, "Member 'FSnfGameActivityRequestNoPaperParam::EvilSpirit' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestNoPaperParam, RequestCast2) == 0x000080, "Member 'FSnfGameActivityRequestNoPaperParam::RequestCast2' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestNoPaperParam, ToiletPapers) == 0x000090, "Member 'FSnfGameActivityRequestNoPaperParam::ToiletPapers' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestNoPaperParam, ToiletMarker) == 0x0000A0, "Member 'FSnfGameActivityRequestNoPaperParam::ToiletMarker' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestNoPaperParam, StartMarker) == 0x0000A8, "Member 'FSnfGameActivityRequestNoPaperParam::StartMarker' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestNoPaperParam, Sounds) == 0x0000B0, "Member 'FSnfGameActivityRequestNoPaperParam::Sounds' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkSelectInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FSnfTalkSelectInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfTalkSelectInfo) == 0x000008, "Wrong alignment on FSnfTalkSelectInfo");
static_assert(sizeof(FSnfTalkSelectInfo) == 0x000018, "Wrong size on FSnfTalkSelectInfo");

// ScriptStruct Snowfall.SnfPlayerInfoBuff
// 0x0008 (0x0008 - 0x0000)
struct FSnfPlayerInfoBuff final
{
public:
	ESnfBuffType                                  BuffType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BuffTimer;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPlayerInfoBuff) == 0x000004, "Wrong alignment on FSnfPlayerInfoBuff");
static_assert(sizeof(FSnfPlayerInfoBuff) == 0x000008, "Wrong size on FSnfPlayerInfoBuff");
static_assert(offsetof(FSnfPlayerInfoBuff, BuffType) == 0x000000, "Member 'FSnfPlayerInfoBuff::BuffType' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfoBuff, BuffTimer) == 0x000004, "Member 'FSnfPlayerInfoBuff::BuffTimer' has a wrong offset!");

// ScriptStruct Snowfall.SnfPhotoModeSaveItemParameter
// 0x0008 (0x0008 - 0x0000)
struct FSnfPhotoModeSaveItemParameter final
{
public:
	int32                                         IValue;                                            // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FValue;                                            // 0x0004(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPhotoModeSaveItemParameter) == 0x000004, "Wrong alignment on FSnfPhotoModeSaveItemParameter");
static_assert(sizeof(FSnfPhotoModeSaveItemParameter) == 0x000008, "Wrong size on FSnfPhotoModeSaveItemParameter");
static_assert(offsetof(FSnfPhotoModeSaveItemParameter, IValue) == 0x000000, "Member 'FSnfPhotoModeSaveItemParameter::IValue' has a wrong offset!");
static_assert(offsetof(FSnfPhotoModeSaveItemParameter, FValue) == 0x000004, "Member 'FSnfPhotoModeSaveItemParameter::FValue' has a wrong offset!");

// ScriptStruct Snowfall.SnfPhotoModeSaveCameraStampParameter
// 0x0014 (0x0014 - 0x0000)
struct FSnfPhotoModeSaveCameraStampParameter final
{
public:
	ESnfCameraStampType                           Type;                                              // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Position;                                          // 0x0004(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotate;                                            // 0x000C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPhotoModeSaveCameraStampParameter) == 0x000004, "Wrong alignment on FSnfPhotoModeSaveCameraStampParameter");
static_assert(sizeof(FSnfPhotoModeSaveCameraStampParameter) == 0x000014, "Wrong size on FSnfPhotoModeSaveCameraStampParameter");
static_assert(offsetof(FSnfPhotoModeSaveCameraStampParameter, Type) == 0x000000, "Member 'FSnfPhotoModeSaveCameraStampParameter::Type' has a wrong offset!");
static_assert(offsetof(FSnfPhotoModeSaveCameraStampParameter, Position) == 0x000004, "Member 'FSnfPhotoModeSaveCameraStampParameter::Position' has a wrong offset!");
static_assert(offsetof(FSnfPhotoModeSaveCameraStampParameter, Rotate) == 0x00000C, "Member 'FSnfPhotoModeSaveCameraStampParameter::Rotate' has a wrong offset!");
static_assert(offsetof(FSnfPhotoModeSaveCameraStampParameter, Scale) == 0x000010, "Member 'FSnfPhotoModeSaveCameraStampParameter::Scale' has a wrong offset!");

// ScriptStruct Snowfall.SnfPhotoModeSaveSlot
// 0x0050 (0x0050 - 0x0000)
struct FSnfPhotoModeSaveSlot final
{
public:
	int32                                         Version;                                           // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              DateTime;                                          // 0x0008(0x0008)(ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSnfPhotoModeSaveItemParameter> ItemParams;                                        // 0x0010(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	int32                                         FilterId;                                          // 0x0020(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EmoteId;                                           // 0x0024(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfCameraFrameType                           CameraFrameType;                                   // 0x0028(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSnfPhotoModeSaveCameraStampParameter> CameraStampParams;                                 // 0x0030(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<struct FSnfPhotoModeSaveFigureParameter> FigureParams;                                      // 0x0040(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPhotoModeSaveSlot) == 0x000008, "Wrong alignment on FSnfPhotoModeSaveSlot");
static_assert(sizeof(FSnfPhotoModeSaveSlot) == 0x000050, "Wrong size on FSnfPhotoModeSaveSlot");
static_assert(offsetof(FSnfPhotoModeSaveSlot, Version) == 0x000000, "Member 'FSnfPhotoModeSaveSlot::Version' has a wrong offset!");
static_assert(offsetof(FSnfPhotoModeSaveSlot, DateTime) == 0x000008, "Member 'FSnfPhotoModeSaveSlot::DateTime' has a wrong offset!");
static_assert(offsetof(FSnfPhotoModeSaveSlot, ItemParams) == 0x000010, "Member 'FSnfPhotoModeSaveSlot::ItemParams' has a wrong offset!");
static_assert(offsetof(FSnfPhotoModeSaveSlot, FilterId) == 0x000020, "Member 'FSnfPhotoModeSaveSlot::FilterId' has a wrong offset!");
static_assert(offsetof(FSnfPhotoModeSaveSlot, EmoteId) == 0x000024, "Member 'FSnfPhotoModeSaveSlot::EmoteId' has a wrong offset!");
static_assert(offsetof(FSnfPhotoModeSaveSlot, CameraFrameType) == 0x000028, "Member 'FSnfPhotoModeSaveSlot::CameraFrameType' has a wrong offset!");
static_assert(offsetof(FSnfPhotoModeSaveSlot, CameraStampParams) == 0x000030, "Member 'FSnfPhotoModeSaveSlot::CameraStampParams' has a wrong offset!");
static_assert(offsetof(FSnfPhotoModeSaveSlot, FigureParams) == 0x000040, "Member 'FSnfPhotoModeSaveSlot::FigureParams' has a wrong offset!");

// ScriptStruct Snowfall.SnfPhotoModeSaveData
// 0x0010 (0x0010 - 0x0000)
struct FSnfPhotoModeSaveData final
{
public:
	TArray<struct FSnfPhotoModeSaveSlot>          Slots;                                             // 0x0000(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPhotoModeSaveData) == 0x000008, "Wrong alignment on FSnfPhotoModeSaveData");
static_assert(sizeof(FSnfPhotoModeSaveData) == 0x000010, "Wrong size on FSnfPhotoModeSaveData");
static_assert(offsetof(FSnfPhotoModeSaveData, Slots) == 0x000000, "Member 'FSnfPhotoModeSaveData::Slots' has a wrong offset!");

// ScriptStruct Snowfall.SnfPlayerInfo
// 0x02B0 (0x02B0 - 0x0000)
struct FSnfPlayerInfo final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Exp;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LiberationCount;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LiberationMax;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 FreeLiberationCount;                               // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<int32>                                 FreeLiberationAbsorb;                              // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<int32>                                 FreeLiberationMax;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	int32                                         LifeMax;                                           // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LifeSpecialMax;                                    // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquipWeapon;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquipTalisman;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 AmmoCount;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<int32>                                 AmmoMax;                                           // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<int32>                                 TalismanCount;                                     // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<bool>                                  TalismanFlag;                                      // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	int32                                         SubstituteUseCount;                                // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubstituteHaveCount;                               // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 SubstituteList;                                    // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<class FName>                           SubstituteIdList;                                  // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<bool>                                  RosaryFlag;                                        // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<int32>                                 RosaryEndlessLevel;                                // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<int32>                                 EquipRosary;                                       // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<struct FSnfPlayerInfoBuff>             BuffList;                                          // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<bool>                                  SkillFlag;                                         // 0x00F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<bool>                                  SkillOpen;                                         // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<bool>                                  SkillEndlessFlag;                                  // 0x0118(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<int64>                                 CostumeFlag;                                       // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<int32>                                 EquipCostume;                                      // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<int32>                                 EquipCostumeVariation;                             // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<bool>                                  SoundFlag;                                         // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<bool>                                  SoundFavorite;                                     // 0x0168(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	int32                                         SoundSelectType;                                   // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundRepeatType;                                   // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundShuffleType;                                  // 0x0180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  EmotionFlag;                                       // 0x0188(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<bool>                                  CameraFilterFlag;                                  // 0x0198(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<bool>                                  CameraFrameFlag;                                   // 0x01A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<bool>                                  CameraStampFlag;                                   // 0x01B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<bool>                                  FigureFlag;                                        // 0x01C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<bool>                                  PlayerFlag;                                        // 0x01D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<bool>                                  ConditionFlag;                                     // 0x01E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	int32                                         ItemShortcutIndex;                                 // 0x01F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ItemShortcutList;                                  // 0x0200(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActivitySystemCatalog;                             // 0x0210(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActivitySelectCatalog;                             // 0x0220(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActivityLogCatalog;                                // 0x0230(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActivityExchangeCatalog;                           // 0x0240(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	bool                                          MenuMapGrayOutFlag;                                // 0x0250(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  MenuMapFilterList;                                 // 0x0258(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	struct FSnfPhotoModeSaveData                  PhotoModeSaveData;                                 // 0x0268(0x0010)(SaveGame, NativeAccessSpecifierPublic)
	struct FVector                                SeparateLocation;                                  // 0x0278(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        LocationLog;                                       // 0x0288(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Tags;                                              // 0x02A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPlayerInfo) == 0x000008, "Wrong alignment on FSnfPlayerInfo");
static_assert(sizeof(FSnfPlayerInfo) == 0x0002B0, "Wrong size on FSnfPlayerInfo");
static_assert(offsetof(FSnfPlayerInfo, Level) == 0x000000, "Member 'FSnfPlayerInfo::Level' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, Exp) == 0x000004, "Member 'FSnfPlayerInfo::Exp' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, LiberationCount) == 0x000008, "Member 'FSnfPlayerInfo::LiberationCount' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, LiberationMax) == 0x00000C, "Member 'FSnfPlayerInfo::LiberationMax' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, FreeLiberationCount) == 0x000010, "Member 'FSnfPlayerInfo::FreeLiberationCount' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, FreeLiberationAbsorb) == 0x000020, "Member 'FSnfPlayerInfo::FreeLiberationAbsorb' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, FreeLiberationMax) == 0x000030, "Member 'FSnfPlayerInfo::FreeLiberationMax' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, LifeMax) == 0x000040, "Member 'FSnfPlayerInfo::LifeMax' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, LifeSpecialMax) == 0x000044, "Member 'FSnfPlayerInfo::LifeSpecialMax' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, EquipWeapon) == 0x000048, "Member 'FSnfPlayerInfo::EquipWeapon' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, EquipTalisman) == 0x00004C, "Member 'FSnfPlayerInfo::EquipTalisman' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, AmmoCount) == 0x000050, "Member 'FSnfPlayerInfo::AmmoCount' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, AmmoMax) == 0x000060, "Member 'FSnfPlayerInfo::AmmoMax' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, TalismanCount) == 0x000070, "Member 'FSnfPlayerInfo::TalismanCount' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, TalismanFlag) == 0x000080, "Member 'FSnfPlayerInfo::TalismanFlag' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, SubstituteUseCount) == 0x000090, "Member 'FSnfPlayerInfo::SubstituteUseCount' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, SubstituteHaveCount) == 0x000094, "Member 'FSnfPlayerInfo::SubstituteHaveCount' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, SubstituteList) == 0x000098, "Member 'FSnfPlayerInfo::SubstituteList' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, SubstituteIdList) == 0x0000A8, "Member 'FSnfPlayerInfo::SubstituteIdList' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, RosaryFlag) == 0x0000B8, "Member 'FSnfPlayerInfo::RosaryFlag' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, RosaryEndlessLevel) == 0x0000C8, "Member 'FSnfPlayerInfo::RosaryEndlessLevel' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, EquipRosary) == 0x0000D8, "Member 'FSnfPlayerInfo::EquipRosary' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, BuffList) == 0x0000E8, "Member 'FSnfPlayerInfo::BuffList' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, SkillFlag) == 0x0000F8, "Member 'FSnfPlayerInfo::SkillFlag' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, SkillOpen) == 0x000108, "Member 'FSnfPlayerInfo::SkillOpen' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, SkillEndlessFlag) == 0x000118, "Member 'FSnfPlayerInfo::SkillEndlessFlag' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, CostumeFlag) == 0x000128, "Member 'FSnfPlayerInfo::CostumeFlag' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, EquipCostume) == 0x000138, "Member 'FSnfPlayerInfo::EquipCostume' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, EquipCostumeVariation) == 0x000148, "Member 'FSnfPlayerInfo::EquipCostumeVariation' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, SoundFlag) == 0x000158, "Member 'FSnfPlayerInfo::SoundFlag' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, SoundFavorite) == 0x000168, "Member 'FSnfPlayerInfo::SoundFavorite' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, SoundSelectType) == 0x000178, "Member 'FSnfPlayerInfo::SoundSelectType' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, SoundRepeatType) == 0x00017C, "Member 'FSnfPlayerInfo::SoundRepeatType' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, SoundShuffleType) == 0x000180, "Member 'FSnfPlayerInfo::SoundShuffleType' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, EmotionFlag) == 0x000188, "Member 'FSnfPlayerInfo::EmotionFlag' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, CameraFilterFlag) == 0x000198, "Member 'FSnfPlayerInfo::CameraFilterFlag' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, CameraFrameFlag) == 0x0001A8, "Member 'FSnfPlayerInfo::CameraFrameFlag' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, CameraStampFlag) == 0x0001B8, "Member 'FSnfPlayerInfo::CameraStampFlag' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, FigureFlag) == 0x0001C8, "Member 'FSnfPlayerInfo::FigureFlag' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, PlayerFlag) == 0x0001D8, "Member 'FSnfPlayerInfo::PlayerFlag' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, ConditionFlag) == 0x0001E8, "Member 'FSnfPlayerInfo::ConditionFlag' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, ItemShortcutIndex) == 0x0001F8, "Member 'FSnfPlayerInfo::ItemShortcutIndex' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, ItemShortcutList) == 0x000200, "Member 'FSnfPlayerInfo::ItemShortcutList' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, ActivitySystemCatalog) == 0x000210, "Member 'FSnfPlayerInfo::ActivitySystemCatalog' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, ActivitySelectCatalog) == 0x000220, "Member 'FSnfPlayerInfo::ActivitySelectCatalog' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, ActivityLogCatalog) == 0x000230, "Member 'FSnfPlayerInfo::ActivityLogCatalog' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, ActivityExchangeCatalog) == 0x000240, "Member 'FSnfPlayerInfo::ActivityExchangeCatalog' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, MenuMapGrayOutFlag) == 0x000250, "Member 'FSnfPlayerInfo::MenuMapGrayOutFlag' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, MenuMapFilterList) == 0x000258, "Member 'FSnfPlayerInfo::MenuMapFilterList' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, PhotoModeSaveData) == 0x000268, "Member 'FSnfPlayerInfo::PhotoModeSaveData' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, SeparateLocation) == 0x000278, "Member 'FSnfPlayerInfo::SeparateLocation' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, LocationLog) == 0x000288, "Member 'FSnfPlayerInfo::LocationLog' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInfo, Tags) == 0x0002A0, "Member 'FSnfPlayerInfo::Tags' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActivityRequestBuzzTalkParam
// 0x0020 (0x0020 - 0x0000)
struct FSnfGameActivityRequestBuzzTalkParam final
{
public:
	TArray<class FName>                           TalkIds;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         StartLength;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopLength;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalTimeMin;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalTimeMax;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameActivityRequestBuzzTalkParam) == 0x000008, "Wrong alignment on FSnfGameActivityRequestBuzzTalkParam");
static_assert(sizeof(FSnfGameActivityRequestBuzzTalkParam) == 0x000020, "Wrong size on FSnfGameActivityRequestBuzzTalkParam");
static_assert(offsetof(FSnfGameActivityRequestBuzzTalkParam, TalkIds) == 0x000000, "Member 'FSnfGameActivityRequestBuzzTalkParam::TalkIds' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestBuzzTalkParam, StartLength) == 0x000010, "Member 'FSnfGameActivityRequestBuzzTalkParam::StartLength' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestBuzzTalkParam, StopLength) == 0x000014, "Member 'FSnfGameActivityRequestBuzzTalkParam::StopLength' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestBuzzTalkParam, IntervalTimeMin) == 0x000018, "Member 'FSnfGameActivityRequestBuzzTalkParam::IntervalTimeMin' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestBuzzTalkParam, IntervalTimeMax) == 0x00001C, "Member 'FSnfGameActivityRequestBuzzTalkParam::IntervalTimeMax' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActivityRequestHideAndSeekParam
// 0x0118 (0x0118 - 0x0000)
struct FSnfGameActivityRequestHideAndSeekParam final
{
public:
	struct FSnfGameActivityRequestCastTypeB       RequestCast;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfGameActivityRequestCastTypeC       GhostCast;                                         // 0x0018(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfGameActivityRequestCastTypeB       HidingCast;                                        // 0x0038(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfGameActivityRequestCastTypeA       Request2Cast;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfGameActivityRequestBuzzTalkParam   HidingBuzzTalk;                                    // 0x0060(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class AActor*                                 FindMarker;                                        // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HidingPointMarker;                                 // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SoundActor;                                        // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  HidingGimmickActor;                                // 0x0098(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSnfGameActivityRequestEnemyGroupA     EnemyGroupA;                                       // 0x00C0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSnfGameActivityRequestEnemyGroupA     EnemyGroupB;                                       // 0x00D8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSnfGameActivityRequestEnemyGroupA     EnemyGroupC;                                       // 0x00F0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class ASnfJobActor*                           YureiA;                                            // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASnfJobActor*                           YureiB;                                            // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameActivityRequestHideAndSeekParam) == 0x000008, "Wrong alignment on FSnfGameActivityRequestHideAndSeekParam");
static_assert(sizeof(FSnfGameActivityRequestHideAndSeekParam) == 0x000118, "Wrong size on FSnfGameActivityRequestHideAndSeekParam");
static_assert(offsetof(FSnfGameActivityRequestHideAndSeekParam, RequestCast) == 0x000000, "Member 'FSnfGameActivityRequestHideAndSeekParam::RequestCast' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHideAndSeekParam, GhostCast) == 0x000018, "Member 'FSnfGameActivityRequestHideAndSeekParam::GhostCast' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHideAndSeekParam, HidingCast) == 0x000038, "Member 'FSnfGameActivityRequestHideAndSeekParam::HidingCast' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHideAndSeekParam, Request2Cast) == 0x000050, "Member 'FSnfGameActivityRequestHideAndSeekParam::Request2Cast' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHideAndSeekParam, HidingBuzzTalk) == 0x000060, "Member 'FSnfGameActivityRequestHideAndSeekParam::HidingBuzzTalk' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHideAndSeekParam, FindMarker) == 0x000080, "Member 'FSnfGameActivityRequestHideAndSeekParam::FindMarker' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHideAndSeekParam, HidingPointMarker) == 0x000088, "Member 'FSnfGameActivityRequestHideAndSeekParam::HidingPointMarker' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHideAndSeekParam, SoundActor) == 0x000090, "Member 'FSnfGameActivityRequestHideAndSeekParam::SoundActor' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHideAndSeekParam, HidingGimmickActor) == 0x000098, "Member 'FSnfGameActivityRequestHideAndSeekParam::HidingGimmickActor' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHideAndSeekParam, EnemyGroupA) == 0x0000C0, "Member 'FSnfGameActivityRequestHideAndSeekParam::EnemyGroupA' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHideAndSeekParam, EnemyGroupB) == 0x0000D8, "Member 'FSnfGameActivityRequestHideAndSeekParam::EnemyGroupB' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHideAndSeekParam, EnemyGroupC) == 0x0000F0, "Member 'FSnfGameActivityRequestHideAndSeekParam::EnemyGroupC' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHideAndSeekParam, YureiA) == 0x000108, "Member 'FSnfGameActivityRequestHideAndSeekParam::YureiA' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityRequestHideAndSeekParam, YureiB) == 0x000110, "Member 'FSnfGameActivityRequestHideAndSeekParam::YureiB' has a wrong offset!");

// ScriptStruct Snowfall.SnfPhotoModePlayerParameter
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x10) FSnfPhotoModePlayerParameter final
{
public:
	uint8                                         Pad_0[0x90];                                       // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfPhotoModePlayerParameter) == 0x000010, "Wrong alignment on FSnfPhotoModePlayerParameter");
static_assert(sizeof(FSnfPhotoModePlayerParameter) == 0x000090, "Wrong size on FSnfPhotoModePlayerParameter");

// ScriptStruct Snowfall.SnfGameActivityRequestCastTypeZ
// 0x0008 (0x0008 - 0x0000)
struct FSnfGameActivityRequestCastTypeZ final
{
public:
	class ASnfJobActor*                           JobActor;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameActivityRequestCastTypeZ) == 0x000008, "Wrong alignment on FSnfGameActivityRequestCastTypeZ");
static_assert(sizeof(FSnfGameActivityRequestCastTypeZ) == 0x000008, "Wrong size on FSnfGameActivityRequestCastTypeZ");
static_assert(offsetof(FSnfGameActivityRequestCastTypeZ, JobActor) == 0x000000, "Member 'FSnfGameActivityRequestCastTypeZ::JobActor' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActivityCastGroup
// 0x0010 (0x0010 - 0x0000)
struct FSnfGameActivityCastGroup final
{
public:
	TArray<class AActor*>                         CastList;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameActivityCastGroup) == 0x000008, "Wrong alignment on FSnfGameActivityCastGroup");
static_assert(sizeof(FSnfGameActivityCastGroup) == 0x000010, "Wrong size on FSnfGameActivityCastGroup");
static_assert(offsetof(FSnfGameActivityCastGroup, CastList) == 0x000000, "Member 'FSnfGameActivityCastGroup::CastList' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActivityHyakkiItem
// 0x001C (0x001C - 0x0000)
struct FSnfGameActivityHyakkiItem final
{
public:
	class FName                                   CatalogId;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UniqueId;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleIndex;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  CtrlActor;                                         // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameActivityHyakkiItem) == 0x000004, "Wrong alignment on FSnfGameActivityHyakkiItem");
static_assert(sizeof(FSnfGameActivityHyakkiItem) == 0x00001C, "Wrong size on FSnfGameActivityHyakkiItem");
static_assert(offsetof(FSnfGameActivityHyakkiItem, CatalogId) == 0x000000, "Member 'FSnfGameActivityHyakkiItem::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityHyakkiItem, UniqueId) == 0x000008, "Member 'FSnfGameActivityHyakkiItem::UniqueId' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityHyakkiItem, BattleIndex) == 0x000010, "Member 'FSnfGameActivityHyakkiItem::BattleIndex' has a wrong offset!");
static_assert(offsetof(FSnfGameActivityHyakkiItem, CtrlActor) == 0x000014, "Member 'FSnfGameActivityHyakkiItem::CtrlActor' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActivitySaveItem
// 0x0008 (0x0008 - 0x0000)
struct FSnfGameActivitySaveItem final
{
public:
	float                                         Timer;                                             // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0004(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameActivitySaveItem) == 0x000004, "Wrong alignment on FSnfGameActivitySaveItem");
static_assert(sizeof(FSnfGameActivitySaveItem) == 0x000008, "Wrong size on FSnfGameActivitySaveItem");
static_assert(offsetof(FSnfGameActivitySaveItem, Timer) == 0x000000, "Member 'FSnfGameActivitySaveItem::Timer' has a wrong offset!");
static_assert(offsetof(FSnfGameActivitySaveItem, Length) == 0x000004, "Member 'FSnfGameActivitySaveItem::Length' has a wrong offset!");

// ScriptStruct Snowfall.SnfVendingMachineContentsSetting
// 0x0078 (0x0078 - 0x0000)
struct FSnfVendingMachineContentsSetting final
{
public:
	bool                                          bCheckMachineMesh;                                 // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            TargetMachineMesh;                                 // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckMaterial;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UMaterialInterface*>  TargetMachineMaterials;                            // 0x0018(0x0050)(Edit, NativeAccessSpecifierPublic)
	TArray<class UStaticMesh*>                    ContaintsMeshList;                                 // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfVendingMachineContentsSetting) == 0x000008, "Wrong alignment on FSnfVendingMachineContentsSetting");
static_assert(sizeof(FSnfVendingMachineContentsSetting) == 0x000078, "Wrong size on FSnfVendingMachineContentsSetting");
static_assert(offsetof(FSnfVendingMachineContentsSetting, bCheckMachineMesh) == 0x000000, "Member 'FSnfVendingMachineContentsSetting::bCheckMachineMesh' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineContentsSetting, TargetMachineMesh) == 0x000008, "Member 'FSnfVendingMachineContentsSetting::TargetMachineMesh' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineContentsSetting, bCheckMaterial) == 0x000010, "Member 'FSnfVendingMachineContentsSetting::bCheckMaterial' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineContentsSetting, TargetMachineMaterials) == 0x000018, "Member 'FSnfVendingMachineContentsSetting::TargetMachineMaterials' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineContentsSetting, ContaintsMeshList) == 0x000068, "Member 'FSnfVendingMachineContentsSetting::ContaintsMeshList' has a wrong offset!");

// ScriptStruct Snowfall.SnfBuddySearchSaveData
// 0x0004 (0x0004 - 0x0000)
struct FSnfBuddySearchSaveData final
{
public:
	int32                                         LastPlayTime;                                      // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfBuddySearchSaveData) == 0x000004, "Wrong alignment on FSnfBuddySearchSaveData");
static_assert(sizeof(FSnfBuddySearchSaveData) == 0x000004, "Wrong size on FSnfBuddySearchSaveData");
static_assert(offsetof(FSnfBuddySearchSaveData, LastPlayTime) == 0x000000, "Member 'FSnfBuddySearchSaveData::LastPlayTime' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameCategorySaveData
// 0x000C (0x000C - 0x0000)
struct FSnfGameCategorySaveData final
{
public:
	int32                                         LastPlayTime;                                      // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ReadFlag;                                          // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameCategorySaveData) == 0x000004, "Wrong alignment on FSnfGameCategorySaveData");
static_assert(sizeof(FSnfGameCategorySaveData) == 0x00000C, "Wrong size on FSnfGameCategorySaveData");
static_assert(offsetof(FSnfGameCategorySaveData, LastPlayTime) == 0x000000, "Member 'FSnfGameCategorySaveData::LastPlayTime' has a wrong offset!");
static_assert(offsetof(FSnfGameCategorySaveData, Count) == 0x000004, "Member 'FSnfGameCategorySaveData::Count' has a wrong offset!");
static_assert(offsetof(FSnfGameCategorySaveData, ReadFlag) == 0x000008, "Member 'FSnfGameCategorySaveData::ReadFlag' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameBuddySmallTalkInfo
// 0x0038 (0x0040 - 0x0008)
struct FSnfGameBuddySmallTalkInfo final : public FTableRowBase
{
public:
	class FString                                 DevComment;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBuddyTalkSequenceConditions           SequenceConditions;                                // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           TalkIds;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActionPercentage;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleTime;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGameBuddySmallTalkInfo) == 0x000008, "Wrong alignment on FSnfGameBuddySmallTalkInfo");
static_assert(sizeof(FSnfGameBuddySmallTalkInfo) == 0x000040, "Wrong size on FSnfGameBuddySmallTalkInfo");
static_assert(offsetof(FSnfGameBuddySmallTalkInfo, DevComment) == 0x000008, "Member 'FSnfGameBuddySmallTalkInfo::DevComment' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddySmallTalkInfo, SequenceConditions) == 0x000018, "Member 'FSnfGameBuddySmallTalkInfo::SequenceConditions' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddySmallTalkInfo, TalkIds) == 0x000020, "Member 'FSnfGameBuddySmallTalkInfo::TalkIds' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddySmallTalkInfo, MaxCount) == 0x000030, "Member 'FSnfGameBuddySmallTalkInfo::MaxCount' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddySmallTalkInfo, ActionPercentage) == 0x000034, "Member 'FSnfGameBuddySmallTalkInfo::ActionPercentage' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddySmallTalkInfo, IdleTime) == 0x000038, "Member 'FSnfGameBuddySmallTalkInfo::IdleTime' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkShopBuffItem
// 0x0010 (0x0010 - 0x0000)
struct FSnfTalkShopBuffItem final
{
public:
	TSubclassOf<class UTngItemObject>             ItemClass;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfTalkShopBuffItem) == 0x000008, "Wrong alignment on FSnfTalkShopBuffItem");
static_assert(sizeof(FSnfTalkShopBuffItem) == 0x000010, "Wrong size on FSnfTalkShopBuffItem");
static_assert(offsetof(FSnfTalkShopBuffItem, ItemClass) == 0x000000, "Member 'FSnfTalkShopBuffItem::ItemClass' has a wrong offset!");
static_assert(offsetof(FSnfTalkShopBuffItem, ItemNum) == 0x000008, "Member 'FSnfTalkShopBuffItem::ItemNum' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameBuddyCatalogInfo
// 0x0070 (0x0078 - 0x0008)
struct FSnfGameBuddyCatalogInfo final : public FTableRowBase
{
public:
	class FString                                 DevComment;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBuddyTalkSequenceConditions           GameSequence;                                      // 0x001C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EBuddyPhase, struct FSnfGameBuddyCatalogTalkParam> PhaseMap;                                          // 0x0028(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameBuddyCatalogInfo) == 0x000008, "Wrong alignment on FSnfGameBuddyCatalogInfo");
static_assert(sizeof(FSnfGameBuddyCatalogInfo) == 0x000078, "Wrong size on FSnfGameBuddyCatalogInfo");
static_assert(offsetof(FSnfGameBuddyCatalogInfo, DevComment) == 0x000008, "Member 'FSnfGameBuddyCatalogInfo::DevComment' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyCatalogInfo, bEnable) == 0x000018, "Member 'FSnfGameBuddyCatalogInfo::bEnable' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyCatalogInfo, GameSequence) == 0x00001C, "Member 'FSnfGameBuddyCatalogInfo::GameSequence' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyCatalogInfo, PhaseMap) == 0x000028, "Member 'FSnfGameBuddyCatalogInfo::PhaseMap' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameBuddyEventTable
// 0x0048 (0x0050 - 0x0008)
struct FSnfGameBuddyEventTable final : public FTableRowBase
{
public:
	bool                                          bEnable;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuddyPlayType                                PlayType;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FirstTalkId;                                       // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TalkIds;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EventPercentage;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBuddyTalkSequenceConditions           GameSequence;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         IntervalTime;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverwriteBuddyTalk;                               // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfBuddyExCheckType                          ExCheckType;                                       // 0x003D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DevComment;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameBuddyEventTable) == 0x000008, "Wrong alignment on FSnfGameBuddyEventTable");
static_assert(sizeof(FSnfGameBuddyEventTable) == 0x000050, "Wrong size on FSnfGameBuddyEventTable");
static_assert(offsetof(FSnfGameBuddyEventTable, bEnable) == 0x000008, "Member 'FSnfGameBuddyEventTable::bEnable' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyEventTable, PlayType) == 0x000009, "Member 'FSnfGameBuddyEventTable::PlayType' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyEventTable, FirstTalkId) == 0x00000C, "Member 'FSnfGameBuddyEventTable::FirstTalkId' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyEventTable, TalkIds) == 0x000018, "Member 'FSnfGameBuddyEventTable::TalkIds' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyEventTable, MaxCount) == 0x000028, "Member 'FSnfGameBuddyEventTable::MaxCount' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyEventTable, EventPercentage) == 0x00002C, "Member 'FSnfGameBuddyEventTable::EventPercentage' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyEventTable, GameSequence) == 0x000030, "Member 'FSnfGameBuddyEventTable::GameSequence' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyEventTable, IntervalTime) == 0x000038, "Member 'FSnfGameBuddyEventTable::IntervalTime' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyEventTable, bOverwriteBuddyTalk) == 0x00003C, "Member 'FSnfGameBuddyEventTable::bOverwriteBuddyTalk' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyEventTable, ExCheckType) == 0x00003D, "Member 'FSnfGameBuddyEventTable::ExCheckType' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyEventTable, DevComment) == 0x000040, "Member 'FSnfGameBuddyEventTable::DevComment' has a wrong offset!");

// ScriptStruct Snowfall.SnfPeopleIdleAnim
// 0x0020 (0x0020 - 0x0000)
struct FSnfPeopleIdleAnim final
{
public:
	class UAnimSequenceBase*                      AnimSequence;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInDuration;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutDuration;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DoesOverwriteMontageBlendTime;                     // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MontageSectionName;                                // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPeopleIdleAnim) == 0x000008, "Wrong alignment on FSnfPeopleIdleAnim");
static_assert(sizeof(FSnfPeopleIdleAnim) == 0x000020, "Wrong size on FSnfPeopleIdleAnim");
static_assert(offsetof(FSnfPeopleIdleAnim, AnimSequence) == 0x000000, "Member 'FSnfPeopleIdleAnim::AnimSequence' has a wrong offset!");
static_assert(offsetof(FSnfPeopleIdleAnim, PlayRate) == 0x000008, "Member 'FSnfPeopleIdleAnim::PlayRate' has a wrong offset!");
static_assert(offsetof(FSnfPeopleIdleAnim, BlendInDuration) == 0x00000C, "Member 'FSnfPeopleIdleAnim::BlendInDuration' has a wrong offset!");
static_assert(offsetof(FSnfPeopleIdleAnim, BlendOutDuration) == 0x000010, "Member 'FSnfPeopleIdleAnim::BlendOutDuration' has a wrong offset!");
static_assert(offsetof(FSnfPeopleIdleAnim, DoesOverwriteMontageBlendTime) == 0x000014, "Member 'FSnfPeopleIdleAnim::DoesOverwriteMontageBlendTime' has a wrong offset!");
static_assert(offsetof(FSnfPeopleIdleAnim, MontageSectionName) == 0x000018, "Member 'FSnfPeopleIdleAnim::MontageSectionName' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameBuddyTalkSequenceInfo
// 0x0030 (0x0038 - 0x0008)
struct FSnfGameBuddyTalkSequenceInfo final : public FTableRowBase
{
public:
	int32                                         SequenceId;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuddyPhase                                   BuddyPhase;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataTable>              BuddyTalkInfoTablePath;                            // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameBuddyTalkSequenceInfo) == 0x000008, "Wrong alignment on FSnfGameBuddyTalkSequenceInfo");
static_assert(sizeof(FSnfGameBuddyTalkSequenceInfo) == 0x000038, "Wrong size on FSnfGameBuddyTalkSequenceInfo");
static_assert(offsetof(FSnfGameBuddyTalkSequenceInfo, SequenceId) == 0x000008, "Member 'FSnfGameBuddyTalkSequenceInfo::SequenceId' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyTalkSequenceInfo, BuddyPhase) == 0x00000C, "Member 'FSnfGameBuddyTalkSequenceInfo::BuddyPhase' has a wrong offset!");
static_assert(offsetof(FSnfGameBuddyTalkSequenceInfo, BuddyTalkInfoTablePath) == 0x000010, "Member 'FSnfGameBuddyTalkSequenceInfo::BuddyTalkInfoTablePath' has a wrong offset!");

// ScriptStruct Snowfall.SnfFigureCapsuleShape
// 0x0020 (0x0020 - 0x0000)
struct FSnfFigureCapsuleShape final
{
public:
	float                                         HalfLength;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfFigureCapsuleShape) == 0x000004, "Wrong alignment on FSnfFigureCapsuleShape");
static_assert(sizeof(FSnfFigureCapsuleShape) == 0x000020, "Wrong size on FSnfFigureCapsuleShape");
static_assert(offsetof(FSnfFigureCapsuleShape, HalfLength) == 0x000000, "Member 'FSnfFigureCapsuleShape::HalfLength' has a wrong offset!");
static_assert(offsetof(FSnfFigureCapsuleShape, Radius) == 0x000004, "Member 'FSnfFigureCapsuleShape::Radius' has a wrong offset!");
static_assert(offsetof(FSnfFigureCapsuleShape, Center) == 0x000008, "Member 'FSnfFigureCapsuleShape::Center' has a wrong offset!");
static_assert(offsetof(FSnfFigureCapsuleShape, Rotation) == 0x000014, "Member 'FSnfFigureCapsuleShape::Rotation' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogFigure
// 0x0160 (0x0280 - 0x0120)
struct FSnfCatalogFigure final : public FSnfCatalogItem
{
public:
	ESnfFigureType                                FigureType;                                        // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             StaticMesh;                                        // 0x0128(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             StaticMeshCapsuleToyPreview;                       // 0x0150(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMesh;                                      // 0x0178(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequenceBase>       AnimSequence;                                      // 0x01A0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimSequencePosition;                              // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   FxPropsActor;                                      // 0x01D0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfFigureAttachType                          AttachType;                                        // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             AttachTransform;                                   // 0x0200(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   AttachPlayerBoneName;                              // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>           AkAudioEvent;                                      // 0x0238(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSnfFigureCapsuleShape>         CameraClippingThroughCapsules;                     // 0x0260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfFigureBoxShape>             CameraClippingThroughBoxes;                        // 0x0270(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCatalogFigure) == 0x000010, "Wrong alignment on FSnfCatalogFigure");
static_assert(sizeof(FSnfCatalogFigure) == 0x000280, "Wrong size on FSnfCatalogFigure");
static_assert(offsetof(FSnfCatalogFigure, FigureType) == 0x000120, "Member 'FSnfCatalogFigure::FigureType' has a wrong offset!");
static_assert(offsetof(FSnfCatalogFigure, StaticMesh) == 0x000128, "Member 'FSnfCatalogFigure::StaticMesh' has a wrong offset!");
static_assert(offsetof(FSnfCatalogFigure, StaticMeshCapsuleToyPreview) == 0x000150, "Member 'FSnfCatalogFigure::StaticMeshCapsuleToyPreview' has a wrong offset!");
static_assert(offsetof(FSnfCatalogFigure, SkeletalMesh) == 0x000178, "Member 'FSnfCatalogFigure::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FSnfCatalogFigure, AnimSequence) == 0x0001A0, "Member 'FSnfCatalogFigure::AnimSequence' has a wrong offset!");
static_assert(offsetof(FSnfCatalogFigure, AnimSequencePosition) == 0x0001C8, "Member 'FSnfCatalogFigure::AnimSequencePosition' has a wrong offset!");
static_assert(offsetof(FSnfCatalogFigure, FxPropsActor) == 0x0001D0, "Member 'FSnfCatalogFigure::FxPropsActor' has a wrong offset!");
static_assert(offsetof(FSnfCatalogFigure, AttachType) == 0x0001F8, "Member 'FSnfCatalogFigure::AttachType' has a wrong offset!");
static_assert(offsetof(FSnfCatalogFigure, AttachTransform) == 0x000200, "Member 'FSnfCatalogFigure::AttachTransform' has a wrong offset!");
static_assert(offsetof(FSnfCatalogFigure, AttachPlayerBoneName) == 0x000230, "Member 'FSnfCatalogFigure::AttachPlayerBoneName' has a wrong offset!");
static_assert(offsetof(FSnfCatalogFigure, AkAudioEvent) == 0x000238, "Member 'FSnfCatalogFigure::AkAudioEvent' has a wrong offset!");
static_assert(offsetof(FSnfCatalogFigure, CameraClippingThroughCapsules) == 0x000260, "Member 'FSnfCatalogFigure::CameraClippingThroughCapsules' has a wrong offset!");
static_assert(offsetof(FSnfCatalogFigure, CameraClippingThroughBoxes) == 0x000270, "Member 'FSnfCatalogFigure::CameraClippingThroughBoxes' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponChargeSetting
// 0x0018 (0x0018 - 0x0000)
struct FSnfWeaponChargeSetting final
{
public:
	float                                         ChargeDelayTime;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ChargeTimes;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponChargeSetting) == 0x000008, "Wrong alignment on FSnfWeaponChargeSetting");
static_assert(sizeof(FSnfWeaponChargeSetting) == 0x000018, "Wrong size on FSnfWeaponChargeSetting");
static_assert(offsetof(FSnfWeaponChargeSetting, ChargeDelayTime) == 0x000000, "Member 'FSnfWeaponChargeSetting::ChargeDelayTime' has a wrong offset!");
static_assert(offsetof(FSnfWeaponChargeSetting, ChargeTimes) == 0x000008, "Member 'FSnfWeaponChargeSetting::ChargeTimes' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogPhotoStamp
// 0x0008 (0x0148 - 0x0140)
struct FSnfCatalogPhotoStamp final : public FSnfCatalogPhoto
{
public:
	ESnfCameraStampType                           StampType;                                         // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCatalogPhotoStamp) == 0x000008, "Wrong alignment on FSnfCatalogPhotoStamp");
static_assert(sizeof(FSnfCatalogPhotoStamp) == 0x000148, "Wrong size on FSnfCatalogPhotoStamp");
static_assert(offsetof(FSnfCatalogPhotoStamp, StampType) == 0x000140, "Member 'FSnfCatalogPhotoStamp::StampType' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogExchange
// 0x0048 (0x0168 - 0x0120)
struct FSnfCatalogExchange final : public FSnfCatalogItem
{
public:
	class FName                                   ShopId;                                            // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           MissionList;                                       // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           RewardList;                                        // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SpecialItemList;                                   // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   BookId;                                            // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StoneIndex;                                        // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCatalogExchange) == 0x000008, "Wrong alignment on FSnfCatalogExchange");
static_assert(sizeof(FSnfCatalogExchange) == 0x000168, "Wrong size on FSnfCatalogExchange");
static_assert(offsetof(FSnfCatalogExchange, ShopId) == 0x000120, "Member 'FSnfCatalogExchange::ShopId' has a wrong offset!");
static_assert(offsetof(FSnfCatalogExchange, MissionList) == 0x000128, "Member 'FSnfCatalogExchange::MissionList' has a wrong offset!");
static_assert(offsetof(FSnfCatalogExchange, RewardList) == 0x000138, "Member 'FSnfCatalogExchange::RewardList' has a wrong offset!");
static_assert(offsetof(FSnfCatalogExchange, SpecialItemList) == 0x000148, "Member 'FSnfCatalogExchange::SpecialItemList' has a wrong offset!");
static_assert(offsetof(FSnfCatalogExchange, BookId) == 0x000158, "Member 'FSnfCatalogExchange::BookId' has a wrong offset!");
static_assert(offsetof(FSnfCatalogExchange, StoneIndex) == 0x000160, "Member 'FSnfCatalogExchange::StoneIndex' has a wrong offset!");

// ScriptStruct Snowfall.SnfSoundVolumeParam
// 0x0038 (0x0038 - 0x0000)
struct FSnfSoundVolumeParam final
{
public:
	class UDataTable*                             InfoTable;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x30];                                       // 0x0008(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfSoundVolumeParam) == 0x000008, "Wrong alignment on FSnfSoundVolumeParam");
static_assert(sizeof(FSnfSoundVolumeParam) == 0x000038, "Wrong size on FSnfSoundVolumeParam");
static_assert(offsetof(FSnfSoundVolumeParam, InfoTable) == 0x000000, "Member 'FSnfSoundVolumeParam::InfoTable' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogActivityStepTitle
// 0x0020 (0x0020 - 0x0000)
struct FSnfCatalogActivityStepTitle final
{
public:
	class FText                                   StepText;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	int32                                         BNetTelemetryId;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCatalogActivityStepTitle) == 0x000008, "Wrong alignment on FSnfCatalogActivityStepTitle");
static_assert(sizeof(FSnfCatalogActivityStepTitle) == 0x000020, "Wrong size on FSnfCatalogActivityStepTitle");
static_assert(offsetof(FSnfCatalogActivityStepTitle, StepText) == 0x000000, "Member 'FSnfCatalogActivityStepTitle::StepText' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivityStepTitle, BNetTelemetryId) == 0x000018, "Member 'FSnfCatalogActivityStepTitle::BNetTelemetryId' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogActivity
// 0x00E8 (0x0208 - 0x0120)
struct FSnfCatalogActivity final : public FSnfCatalogItem
{
public:
	class FName                                   ChapterId;                                         // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterId;                                       // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Actor;                                             // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsQuest;                                           // 0x0134(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMap;                                             // 0x0135(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDebug;                                           // 0x0136(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSave;                                            // 0x0137(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCollect;                                         // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsArchive;                                         // 0x0139(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReward;                                          // 0x013A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13B[0x1];                                      // 0x013B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RewardId;                                          // 0x013C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardYurei;                                       // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardStone;                                       // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClearPopup;                                        // 0x014C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoSave;                                          // 0x0154(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoOpen;                                          // 0x0155(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OpenCheckActor;                                    // 0x0156(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_157[0x1];                                      // 0x0157(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             ActivityTable;                                     // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FSnfCatalogActivityStepTitle> StepTitle;                                         // 0x0160(0x0050)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	TMap<int32, struct FSnfCatalogActivityStepMark> StepMark;                                          // 0x01B0(0x0050)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	class UDataTable*                             PSNActivityTable;                                  // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCatalogActivity) == 0x000008, "Wrong alignment on FSnfCatalogActivity");
static_assert(sizeof(FSnfCatalogActivity) == 0x000208, "Wrong size on FSnfCatalogActivity");
static_assert(offsetof(FSnfCatalogActivity, ChapterId) == 0x000120, "Member 'FSnfCatalogActivity::ChapterId' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivity, CharacterId) == 0x000128, "Member 'FSnfCatalogActivity::CharacterId' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivity, Actor) == 0x000130, "Member 'FSnfCatalogActivity::Actor' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivity, IsQuest) == 0x000134, "Member 'FSnfCatalogActivity::IsQuest' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivity, IsMap) == 0x000135, "Member 'FSnfCatalogActivity::IsMap' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivity, IsDebug) == 0x000136, "Member 'FSnfCatalogActivity::IsDebug' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivity, IsSave) == 0x000137, "Member 'FSnfCatalogActivity::IsSave' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivity, IsCollect) == 0x000138, "Member 'FSnfCatalogActivity::IsCollect' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivity, IsArchive) == 0x000139, "Member 'FSnfCatalogActivity::IsArchive' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivity, IsReward) == 0x00013A, "Member 'FSnfCatalogActivity::IsReward' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivity, RewardId) == 0x00013C, "Member 'FSnfCatalogActivity::RewardId' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivity, RewardYurei) == 0x000144, "Member 'FSnfCatalogActivity::RewardYurei' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivity, RewardStone) == 0x000148, "Member 'FSnfCatalogActivity::RewardStone' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivity, ClearPopup) == 0x00014C, "Member 'FSnfCatalogActivity::ClearPopup' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivity, AutoSave) == 0x000154, "Member 'FSnfCatalogActivity::AutoSave' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivity, AutoOpen) == 0x000155, "Member 'FSnfCatalogActivity::AutoOpen' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivity, OpenCheckActor) == 0x000156, "Member 'FSnfCatalogActivity::OpenCheckActor' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivity, ActivityTable) == 0x000158, "Member 'FSnfCatalogActivity::ActivityTable' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivity, StepTitle) == 0x000160, "Member 'FSnfCatalogActivity::StepTitle' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivity, StepMark) == 0x0001B0, "Member 'FSnfCatalogActivity::StepMark' has a wrong offset!");
static_assert(offsetof(FSnfCatalogActivity, PSNActivityTable) == 0x000200, "Member 'FSnfCatalogActivity::PSNActivityTable' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameKegareItem
// 0x0050 (0x0050 - 0x0000)
struct FSnfGameKegareItem final
{
public:
	TWeakObjectPtr<class ASnfDisquietActor>       Agent;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Size;                                              // 0x0040(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGameKegareItem) == 0x000010, "Wrong alignment on FSnfGameKegareItem");
static_assert(sizeof(FSnfGameKegareItem) == 0x000050, "Wrong size on FSnfGameKegareItem");
static_assert(offsetof(FSnfGameKegareItem, Agent) == 0x000000, "Member 'FSnfGameKegareItem::Agent' has a wrong offset!");
static_assert(offsetof(FSnfGameKegareItem, Transform) == 0x000010, "Member 'FSnfGameKegareItem::Transform' has a wrong offset!");
static_assert(offsetof(FSnfGameKegareItem, Size) == 0x000040, "Member 'FSnfGameKegareItem::Size' has a wrong offset!");

// ScriptStruct Snowfall.SnfQualityPresetScreenSpaceReflection
// 0x0008 (0x0008 - 0x0000)
struct FSnfQualityPresetScreenSpaceReflection final
{
public:
	uint8                                         Index;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SSRQuality;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfQualityPresetScreenSpaceReflection) == 0x000004, "Wrong alignment on FSnfQualityPresetScreenSpaceReflection");
static_assert(sizeof(FSnfQualityPresetScreenSpaceReflection) == 0x000008, "Wrong size on FSnfQualityPresetScreenSpaceReflection");
static_assert(offsetof(FSnfQualityPresetScreenSpaceReflection, Index) == 0x000000, "Member 'FSnfQualityPresetScreenSpaceReflection::Index' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetScreenSpaceReflection, SSRQuality) == 0x000004, "Member 'FSnfQualityPresetScreenSpaceReflection::SSRQuality' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameCharacterPointItem
// 0x000C (0x000C - 0x0000)
struct FSnfGameCharacterPointItem final
{
public:
	TWeakObjectPtr<class AActor>                  Agent;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameCharacterPointItem) == 0x000004, "Wrong alignment on FSnfGameCharacterPointItem");
static_assert(sizeof(FSnfGameCharacterPointItem) == 0x00000C, "Wrong size on FSnfGameCharacterPointItem");
static_assert(offsetof(FSnfGameCharacterPointItem, Agent) == 0x000000, "Member 'FSnfGameCharacterPointItem::Agent' has a wrong offset!");
static_assert(offsetof(FSnfGameCharacterPointItem, Length) == 0x000008, "Member 'FSnfGameCharacterPointItem::Length' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameDensityAreaTexture
// 0x0010 (0x0018 - 0x0008)
struct FSnfGameDensityAreaTexture final : public FTableRowBase
{
public:
	class FName                                   ID;                                                // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameDensityAreaTexture) == 0x000008, "Wrong alignment on FSnfGameDensityAreaTexture");
static_assert(sizeof(FSnfGameDensityAreaTexture) == 0x000018, "Wrong size on FSnfGameDensityAreaTexture");
static_assert(offsetof(FSnfGameDensityAreaTexture, ID) == 0x000008, "Member 'FSnfGameDensityAreaTexture::ID' has a wrong offset!");
static_assert(offsetof(FSnfGameDensityAreaTexture, Texture) == 0x000010, "Member 'FSnfGameDensityAreaTexture::Texture' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameDensityItem
// 0x0078 (0x0080 - 0x0008)
struct FSnfGameDensityItem final : public FTableRowBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ESnfGamePointDensityType                      DensityType;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UniqueId;                                          // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FlagId;                                            // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepBegin;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepEnd;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Density;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SizeIn;                                            // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SizeOut;                                           // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBox;                                             // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class AActor>                  OwnerActor;                                        // 0x0058(0x0028)(Edit, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameDensityItem) == 0x000008, "Wrong alignment on FSnfGameDensityItem");
static_assert(sizeof(FSnfGameDensityItem) == 0x000080, "Wrong size on FSnfGameDensityItem");
static_assert(offsetof(FSnfGameDensityItem, DensityType) == 0x000010, "Member 'FSnfGameDensityItem::DensityType' has a wrong offset!");
static_assert(offsetof(FSnfGameDensityItem, UniqueId) == 0x000014, "Member 'FSnfGameDensityItem::UniqueId' has a wrong offset!");
static_assert(offsetof(FSnfGameDensityItem, FlagId) == 0x00001C, "Member 'FSnfGameDensityItem::FlagId' has a wrong offset!");
static_assert(offsetof(FSnfGameDensityItem, StepBegin) == 0x000024, "Member 'FSnfGameDensityItem::StepBegin' has a wrong offset!");
static_assert(offsetof(FSnfGameDensityItem, StepEnd) == 0x000028, "Member 'FSnfGameDensityItem::StepEnd' has a wrong offset!");
static_assert(offsetof(FSnfGameDensityItem, Density) == 0x00002C, "Member 'FSnfGameDensityItem::Density' has a wrong offset!");
static_assert(offsetof(FSnfGameDensityItem, Location) == 0x000030, "Member 'FSnfGameDensityItem::Location' has a wrong offset!");
static_assert(offsetof(FSnfGameDensityItem, SizeIn) == 0x00003C, "Member 'FSnfGameDensityItem::SizeIn' has a wrong offset!");
static_assert(offsetof(FSnfGameDensityItem, SizeOut) == 0x000048, "Member 'FSnfGameDensityItem::SizeOut' has a wrong offset!");
static_assert(offsetof(FSnfGameDensityItem, IsBox) == 0x000054, "Member 'FSnfGameDensityItem::IsBox' has a wrong offset!");
static_assert(offsetof(FSnfGameDensityItem, OwnerActor) == 0x000058, "Member 'FSnfGameDensityItem::OwnerActor' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameEnvDofParams
// 0x0018 (0x0018 - 0x0000)
struct FSnfGameEnvDofParams final
{
public:
	float                                         Aperture;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumAperture;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfDiaphragmBlades;                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocalDistance;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthBlurKmForHalf;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthBlurRadius;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameEnvDofParams) == 0x000004, "Wrong alignment on FSnfGameEnvDofParams");
static_assert(sizeof(FSnfGameEnvDofParams) == 0x000018, "Wrong size on FSnfGameEnvDofParams");
static_assert(offsetof(FSnfGameEnvDofParams, Aperture) == 0x000000, "Member 'FSnfGameEnvDofParams::Aperture' has a wrong offset!");
static_assert(offsetof(FSnfGameEnvDofParams, MaximumAperture) == 0x000004, "Member 'FSnfGameEnvDofParams::MaximumAperture' has a wrong offset!");
static_assert(offsetof(FSnfGameEnvDofParams, NumberOfDiaphragmBlades) == 0x000008, "Member 'FSnfGameEnvDofParams::NumberOfDiaphragmBlades' has a wrong offset!");
static_assert(offsetof(FSnfGameEnvDofParams, FocalDistance) == 0x00000C, "Member 'FSnfGameEnvDofParams::FocalDistance' has a wrong offset!");
static_assert(offsetof(FSnfGameEnvDofParams, DepthBlurKmForHalf) == 0x000010, "Member 'FSnfGameEnvDofParams::DepthBlurKmForHalf' has a wrong offset!");
static_assert(offsetof(FSnfGameEnvDofParams, DepthBlurRadius) == 0x000014, "Member 'FSnfGameEnvDofParams::DepthBlurRadius' has a wrong offset!");

// ScriptStruct Snowfall.SnfScanData
// 0x0058 (0x0058 - 0x0000)
struct FSnfScanData final
{
public:
	struct FGameplayTagContainer                  CheckTags;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  NotTags;                                           // 0x0020(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsOutLine;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOutLineSp;                                       // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckRadius;                                       // 0x0042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckCylinder;                                     // 0x0043(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class USceneComponent>> List;                                              // 0x0048(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfScanData) == 0x000008, "Wrong alignment on FSnfScanData");
static_assert(sizeof(FSnfScanData) == 0x000058, "Wrong size on FSnfScanData");
static_assert(offsetof(FSnfScanData, CheckTags) == 0x000000, "Member 'FSnfScanData::CheckTags' has a wrong offset!");
static_assert(offsetof(FSnfScanData, NotTags) == 0x000020, "Member 'FSnfScanData::NotTags' has a wrong offset!");
static_assert(offsetof(FSnfScanData, IsOutLine) == 0x000040, "Member 'FSnfScanData::IsOutLine' has a wrong offset!");
static_assert(offsetof(FSnfScanData, IsOutLineSp) == 0x000041, "Member 'FSnfScanData::IsOutLineSp' has a wrong offset!");
static_assert(offsetof(FSnfScanData, CheckRadius) == 0x000042, "Member 'FSnfScanData::CheckRadius' has a wrong offset!");
static_assert(offsetof(FSnfScanData, CheckCylinder) == 0x000043, "Member 'FSnfScanData::CheckCylinder' has a wrong offset!");
static_assert(offsetof(FSnfScanData, Length) == 0x000044, "Member 'FSnfScanData::Length' has a wrong offset!");
static_assert(offsetof(FSnfScanData, List) == 0x000048, "Member 'FSnfScanData::List' has a wrong offset!");

// ScriptStruct Snowfall.SnfEnvironmentParamDefine
// 0x0010 (0x0018 - 0x0008)
struct FSnfEnvironmentParamDefine final : public FTableRowBase
{
public:
	struct FDataTableRowHandle                    ReferenceEnvParam;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEnvironmentParamDefine) == 0x000008, "Wrong alignment on FSnfEnvironmentParamDefine");
static_assert(sizeof(FSnfEnvironmentParamDefine) == 0x000018, "Wrong size on FSnfEnvironmentParamDefine");
static_assert(offsetof(FSnfEnvironmentParamDefine, ReferenceEnvParam) == 0x000008, "Member 'FSnfEnvironmentParamDefine::ReferenceEnvParam' has a wrong offset!");

// ScriptStruct Snowfall.SnfEnvironmentParam
// 0x0348 (0x0350 - 0x0008)
struct FSnfEnvironmentParam final : public FTableRowBase
{
public:
	class FText                                   Description;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTextureCube*                           SkyLightCubeMap;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureCube*                           EnvMap;                                            // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnvMap_Angle;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Skylight_Intensity;                                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Skylight_Color;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Skylight_VolumetricIntensity;                      // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Heightfog_FogDensity;                              // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Heightfog_Falloff;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Heightfog_MaxOpacity;                              // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondHeightfog_FogDensity;                        // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondHeightfog_Falloff;                           // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondHeightfog_Offset;                            // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeFog_ExtinctionScale;                         // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PP_Contrast;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PP_SceneColorTint;                                 // 0x006C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Exposure_MinBrightness;                            // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Exposure_MaxBrightness;                            // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Camera_ExposureCompensation;                       // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalEmissive;                                    // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkySphere_OverallColor;                            // 0x008C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkySphere_ZenithColor;                             // 0x009C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkySphere_HorizonColor;                            // 0x00AC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkySphere_CloudColor;                              // 0x00BC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkylightEnable;                                    // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HeightFogEnable;                                   // 0x00CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PostEnable;                                        // 0x00CE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DirectionalLightEnable;                            // 0x00CF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WhiteTemp;                                         // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WhiteTint;                                         // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ColorSaturation;                                   // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrast;                                     // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGamma;                                        // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGain;                                         // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffset;                                       // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorSaturationShadows;                            // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrastShadows;                              // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGammaShadows;                                 // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGainShadows;                                  // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffsetShadows;                                // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorSaturationMidtones;                           // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrastMidtones;                             // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGammaMidtones;                                // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGainMidtones;                                 // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffsetMidtones;                               // 0x01C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorSaturationHighlights;                         // 0x01D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrastHighlights;                           // 0x01E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGammaHighlights;                              // 0x01F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGainHighlights;                               // 0x0200(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffsetHighlights;                             // 0x0210(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorCorrectionHighlightsMin;                      // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorCorrectionShadowsMax;                         // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlueCorrection;                                    // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpandGamut;                                       // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomIntensity;                                    // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomThreshold;                                    // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SceneFringeIntensity;                              // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChromaticAberrationStartOffset;                    // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LensFlareIntensity;                                // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LensFlareThreshold;                                // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VignetteIntensity;                                 // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrainJitter;                                       // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrainIntensity;                                    // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientOcclusionIntensity;                         // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientOcclusionRadius;                            // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenSpaceReflectionIntensity;                    // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenSpaceReflectionQuality;                      // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenSpaceReflectionMaxRoughness;                 // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogScatteringDistribution;               // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 VolumetricFogAlbedo;                               // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricFogEmissive;                             // 0x0270(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogDistance;                             // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullyDirectionalInscatteringColorDistance;         // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NonDirectionalInscatteringColorDistance;           // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkySphereEnable;                                   // 0x028C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28D[0x3];                                      // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkySphereHorizonFalloff;                           // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkySphereCloudSpeed;                               // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkySphereSunBrightness;                            // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkySphereSunHeight;                                // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkySphereCloudOpacity;                             // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkySphereStarsBrightness;                          // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     OverrideSkyMaterial;                               // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalLight_Color;                            // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalLight_Intensity;                        // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalLight_ShadowAmount;                     // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientCubemapIntensity;                           // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           AmbientCubemap;                                    // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           IndirectLightingColor;                             // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectLightingIntensity;                         // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterIndirectLightingIntensity;                // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RaytracingShadows;                                 // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RaytracingReflections;                             // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_EnvMap;                                  // 0x02F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_EnvMap_Angle;                            // 0x02F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SkyLightCubeMap;                         // 0x02F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_Skylight_Intensity;                      // 0x02F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_Skylight_Color;                          // 0x02F6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_Skylight_VolumetricIntensity;            // 0x02F7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_Heightfog_FogDensity;                    // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_Heightfog_Falloff;                       // 0x02F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_Heightfog_MaxOpacity;                    // 0x02FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SecondHeightfog_FogDensity;              // 0x02FB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SecondHeightfog_Falloff;                 // 0x02FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SecondHeightfog_Offset;                  // 0x02FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_VolumeFog_ExtinctionScale;               // 0x02FE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_PP_Contrast;                             // 0x02FF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_PP_SceneColorTint;                       // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_Exposure_MinBrightness;                  // 0x0301(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_Exposure_MaxBrightness;                  // 0x0302(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_Camera_ExposureCompensation;             // 0x0303(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_GlobalEmissive;                          // 0x0304(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SkySphere_OverallColor;                  // 0x0305(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SkySphere_ZenithColor;                   // 0x0306(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SkySphere_HorizonColor;                  // 0x0307(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SkySphere_CloudColor;                    // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_WhiteTemp;                               // 0x0309(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_WhiteTint;                               // 0x030A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorSaturation;                         // 0x030B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorContrast;                           // 0x030C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorGamma;                              // 0x030D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorGain;                               // 0x030E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorOffset;                             // 0x030F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorSaturationShadows;                  // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorContrastShadows;                    // 0x0311(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorGammaShadows;                       // 0x0312(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorGainShadows;                        // 0x0313(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorOffsetShadows;                      // 0x0314(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorSaturationMidtones;                 // 0x0315(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorContrastMidtones;                   // 0x0316(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorGammaMidtones;                      // 0x0317(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorGainMidtones;                       // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorOffsetMidtones;                     // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorSaturationHighlights;               // 0x031A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorContrastHighlights;                 // 0x031B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorGammaHighlights;                    // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorGainHighlights;                     // 0x031D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorOffsetHighlights;                   // 0x031E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorCorrectionShadowsMax;               // 0x031F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ColorCorrectionHighlightsMin;            // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_BlueCorrection;                          // 0x0321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ExpandGamut;                             // 0x0322(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_BloomIntensity;                          // 0x0323(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_BloomThreshold;                          // 0x0324(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SceneFringeIntensity;                    // 0x0325(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ChromaticAberrationStartOffset;          // 0x0326(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_LensFlareIntensity;                      // 0x0327(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_LensFlareThreshold;                      // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_VignetteIntensity;                       // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_GrainJitter;                             // 0x032A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_GrainIntensity;                          // 0x032B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_AmbientOcclusionIntensity;               // 0x032C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_AmbientOcclusionRadius;                  // 0x032D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ScreenSpaceReflectionIntensity;          // 0x032E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ScreenSpaceReflectionQuality;            // 0x032F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ScreenSpaceReflectionMaxRoughness;       // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_VolumetricFogScatteringDistribution;     // 0x0331(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_VolumetricFogAlbedo;                     // 0x0332(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_VolumetricFogEmissive;                   // 0x0333(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_VolumetricFogDistance;                   // 0x0334(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_AmbientCubemapIntensity;                 // 0x0335(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_AmbientCubemap;                          // 0x0336(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SkylightEnable;                          // 0x0337(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_HeightFogEnable;                         // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_PostEnable;                              // 0x0339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_DirectionalLightEnable;                  // 0x033A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SkySphereEnable;                         // 0x033B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SkySphereHorizonFalloff;                 // 0x033C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SkySphereCloudSpeed;                     // 0x033D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SkySphereSunBrightness;                  // 0x033E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SkySphereSunHeight;                      // 0x033F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SkySphereCloudOpacity;                   // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SkySphereStarsBrightness;                // 0x0341(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_OverrideSkyMaterial;                     // 0x0342(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_DirectionalLight_Color;                  // 0x0343(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_DirectionalLight_Intensity;              // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_DirectionalLight_ShadowAmount;           // 0x0345(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_IndirectLightingColor;                   // 0x0346(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_IndirectLightingIntensity;               // 0x0347(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_CharacterIndirectLightingIntensity;      // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FullyDirectionalInscatteringColorDistance; // 0x0349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_NonDirectionalInscatteringColorDistance; // 0x034A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_RaytracingShadows;                       // 0x034B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_RaytracingReflections;                   // 0x034C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34D[0x3];                                      // 0x034D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfEnvironmentParam) == 0x000010, "Wrong alignment on FSnfEnvironmentParam");
static_assert(sizeof(FSnfEnvironmentParam) == 0x000350, "Wrong size on FSnfEnvironmentParam");
static_assert(offsetof(FSnfEnvironmentParam, Description) == 0x000008, "Member 'FSnfEnvironmentParam::Description' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, SkyLightCubeMap) == 0x000020, "Member 'FSnfEnvironmentParam::SkyLightCubeMap' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, EnvMap) == 0x000028, "Member 'FSnfEnvironmentParam::EnvMap' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, EnvMap_Angle) == 0x000030, "Member 'FSnfEnvironmentParam::EnvMap_Angle' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, Skylight_Intensity) == 0x000034, "Member 'FSnfEnvironmentParam::Skylight_Intensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, Skylight_Color) == 0x000038, "Member 'FSnfEnvironmentParam::Skylight_Color' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, Skylight_VolumetricIntensity) == 0x000048, "Member 'FSnfEnvironmentParam::Skylight_VolumetricIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, Heightfog_FogDensity) == 0x00004C, "Member 'FSnfEnvironmentParam::Heightfog_FogDensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, Heightfog_Falloff) == 0x000050, "Member 'FSnfEnvironmentParam::Heightfog_Falloff' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, Heightfog_MaxOpacity) == 0x000054, "Member 'FSnfEnvironmentParam::Heightfog_MaxOpacity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, SecondHeightfog_FogDensity) == 0x000058, "Member 'FSnfEnvironmentParam::SecondHeightfog_FogDensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, SecondHeightfog_Falloff) == 0x00005C, "Member 'FSnfEnvironmentParam::SecondHeightfog_Falloff' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, SecondHeightfog_Offset) == 0x000060, "Member 'FSnfEnvironmentParam::SecondHeightfog_Offset' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, VolumeFog_ExtinctionScale) == 0x000064, "Member 'FSnfEnvironmentParam::VolumeFog_ExtinctionScale' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, PP_Contrast) == 0x000068, "Member 'FSnfEnvironmentParam::PP_Contrast' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, PP_SceneColorTint) == 0x00006C, "Member 'FSnfEnvironmentParam::PP_SceneColorTint' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, Exposure_MinBrightness) == 0x00007C, "Member 'FSnfEnvironmentParam::Exposure_MinBrightness' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, Exposure_MaxBrightness) == 0x000080, "Member 'FSnfEnvironmentParam::Exposure_MaxBrightness' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, Camera_ExposureCompensation) == 0x000084, "Member 'FSnfEnvironmentParam::Camera_ExposureCompensation' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, GlobalEmissive) == 0x000088, "Member 'FSnfEnvironmentParam::GlobalEmissive' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, SkySphere_OverallColor) == 0x00008C, "Member 'FSnfEnvironmentParam::SkySphere_OverallColor' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, SkySphere_ZenithColor) == 0x00009C, "Member 'FSnfEnvironmentParam::SkySphere_ZenithColor' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, SkySphere_HorizonColor) == 0x0000AC, "Member 'FSnfEnvironmentParam::SkySphere_HorizonColor' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, SkySphere_CloudColor) == 0x0000BC, "Member 'FSnfEnvironmentParam::SkySphere_CloudColor' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, SkylightEnable) == 0x0000CC, "Member 'FSnfEnvironmentParam::SkylightEnable' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, HeightFogEnable) == 0x0000CD, "Member 'FSnfEnvironmentParam::HeightFogEnable' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, PostEnable) == 0x0000CE, "Member 'FSnfEnvironmentParam::PostEnable' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, DirectionalLightEnable) == 0x0000CF, "Member 'FSnfEnvironmentParam::DirectionalLightEnable' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, WhiteTemp) == 0x0000D0, "Member 'FSnfEnvironmentParam::WhiteTemp' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, WhiteTint) == 0x0000D4, "Member 'FSnfEnvironmentParam::WhiteTint' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorSaturation) == 0x0000E0, "Member 'FSnfEnvironmentParam::ColorSaturation' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorContrast) == 0x0000F0, "Member 'FSnfEnvironmentParam::ColorContrast' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorGamma) == 0x000100, "Member 'FSnfEnvironmentParam::ColorGamma' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorGain) == 0x000110, "Member 'FSnfEnvironmentParam::ColorGain' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorOffset) == 0x000120, "Member 'FSnfEnvironmentParam::ColorOffset' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorSaturationShadows) == 0x000130, "Member 'FSnfEnvironmentParam::ColorSaturationShadows' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorContrastShadows) == 0x000140, "Member 'FSnfEnvironmentParam::ColorContrastShadows' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorGammaShadows) == 0x000150, "Member 'FSnfEnvironmentParam::ColorGammaShadows' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorGainShadows) == 0x000160, "Member 'FSnfEnvironmentParam::ColorGainShadows' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorOffsetShadows) == 0x000170, "Member 'FSnfEnvironmentParam::ColorOffsetShadows' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorSaturationMidtones) == 0x000180, "Member 'FSnfEnvironmentParam::ColorSaturationMidtones' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorContrastMidtones) == 0x000190, "Member 'FSnfEnvironmentParam::ColorContrastMidtones' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorGammaMidtones) == 0x0001A0, "Member 'FSnfEnvironmentParam::ColorGammaMidtones' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorGainMidtones) == 0x0001B0, "Member 'FSnfEnvironmentParam::ColorGainMidtones' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorOffsetMidtones) == 0x0001C0, "Member 'FSnfEnvironmentParam::ColorOffsetMidtones' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorSaturationHighlights) == 0x0001D0, "Member 'FSnfEnvironmentParam::ColorSaturationHighlights' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorContrastHighlights) == 0x0001E0, "Member 'FSnfEnvironmentParam::ColorContrastHighlights' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorGammaHighlights) == 0x0001F0, "Member 'FSnfEnvironmentParam::ColorGammaHighlights' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorGainHighlights) == 0x000200, "Member 'FSnfEnvironmentParam::ColorGainHighlights' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorOffsetHighlights) == 0x000210, "Member 'FSnfEnvironmentParam::ColorOffsetHighlights' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorCorrectionHighlightsMin) == 0x000220, "Member 'FSnfEnvironmentParam::ColorCorrectionHighlightsMin' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ColorCorrectionShadowsMax) == 0x000224, "Member 'FSnfEnvironmentParam::ColorCorrectionShadowsMax' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, BlueCorrection) == 0x000228, "Member 'FSnfEnvironmentParam::BlueCorrection' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ExpandGamut) == 0x00022C, "Member 'FSnfEnvironmentParam::ExpandGamut' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, BloomIntensity) == 0x000230, "Member 'FSnfEnvironmentParam::BloomIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, BloomThreshold) == 0x000234, "Member 'FSnfEnvironmentParam::BloomThreshold' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, SceneFringeIntensity) == 0x000238, "Member 'FSnfEnvironmentParam::SceneFringeIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ChromaticAberrationStartOffset) == 0x00023C, "Member 'FSnfEnvironmentParam::ChromaticAberrationStartOffset' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, LensFlareIntensity) == 0x000240, "Member 'FSnfEnvironmentParam::LensFlareIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, LensFlareThreshold) == 0x000244, "Member 'FSnfEnvironmentParam::LensFlareThreshold' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, VignetteIntensity) == 0x000248, "Member 'FSnfEnvironmentParam::VignetteIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, GrainJitter) == 0x00024C, "Member 'FSnfEnvironmentParam::GrainJitter' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, GrainIntensity) == 0x000250, "Member 'FSnfEnvironmentParam::GrainIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, AmbientOcclusionIntensity) == 0x000254, "Member 'FSnfEnvironmentParam::AmbientOcclusionIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, AmbientOcclusionRadius) == 0x000258, "Member 'FSnfEnvironmentParam::AmbientOcclusionRadius' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ScreenSpaceReflectionIntensity) == 0x00025C, "Member 'FSnfEnvironmentParam::ScreenSpaceReflectionIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ScreenSpaceReflectionQuality) == 0x000260, "Member 'FSnfEnvironmentParam::ScreenSpaceReflectionQuality' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, ScreenSpaceReflectionMaxRoughness) == 0x000264, "Member 'FSnfEnvironmentParam::ScreenSpaceReflectionMaxRoughness' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, VolumetricFogScatteringDistribution) == 0x000268, "Member 'FSnfEnvironmentParam::VolumetricFogScatteringDistribution' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, VolumetricFogAlbedo) == 0x00026C, "Member 'FSnfEnvironmentParam::VolumetricFogAlbedo' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, VolumetricFogEmissive) == 0x000270, "Member 'FSnfEnvironmentParam::VolumetricFogEmissive' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, VolumetricFogDistance) == 0x000280, "Member 'FSnfEnvironmentParam::VolumetricFogDistance' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, FullyDirectionalInscatteringColorDistance) == 0x000284, "Member 'FSnfEnvironmentParam::FullyDirectionalInscatteringColorDistance' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, NonDirectionalInscatteringColorDistance) == 0x000288, "Member 'FSnfEnvironmentParam::NonDirectionalInscatteringColorDistance' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, SkySphereEnable) == 0x00028C, "Member 'FSnfEnvironmentParam::SkySphereEnable' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, SkySphereHorizonFalloff) == 0x000290, "Member 'FSnfEnvironmentParam::SkySphereHorizonFalloff' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, SkySphereCloudSpeed) == 0x000294, "Member 'FSnfEnvironmentParam::SkySphereCloudSpeed' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, SkySphereSunBrightness) == 0x000298, "Member 'FSnfEnvironmentParam::SkySphereSunBrightness' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, SkySphereSunHeight) == 0x00029C, "Member 'FSnfEnvironmentParam::SkySphereSunHeight' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, SkySphereCloudOpacity) == 0x0002A0, "Member 'FSnfEnvironmentParam::SkySphereCloudOpacity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, SkySphereStarsBrightness) == 0x0002A4, "Member 'FSnfEnvironmentParam::SkySphereStarsBrightness' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, OverrideSkyMaterial) == 0x0002A8, "Member 'FSnfEnvironmentParam::OverrideSkyMaterial' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, DirectionalLight_Color) == 0x0002B0, "Member 'FSnfEnvironmentParam::DirectionalLight_Color' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, DirectionalLight_Intensity) == 0x0002C0, "Member 'FSnfEnvironmentParam::DirectionalLight_Intensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, DirectionalLight_ShadowAmount) == 0x0002C4, "Member 'FSnfEnvironmentParam::DirectionalLight_ShadowAmount' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, AmbientCubemapIntensity) == 0x0002C8, "Member 'FSnfEnvironmentParam::AmbientCubemapIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, AmbientCubemap) == 0x0002D0, "Member 'FSnfEnvironmentParam::AmbientCubemap' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, IndirectLightingColor) == 0x0002D8, "Member 'FSnfEnvironmentParam::IndirectLightingColor' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, IndirectLightingIntensity) == 0x0002E8, "Member 'FSnfEnvironmentParam::IndirectLightingIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, CharacterIndirectLightingIntensity) == 0x0002EC, "Member 'FSnfEnvironmentParam::CharacterIndirectLightingIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, RaytracingShadows) == 0x0002F0, "Member 'FSnfEnvironmentParam::RaytracingShadows' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, RaytracingReflections) == 0x0002F1, "Member 'FSnfEnvironmentParam::RaytracingReflections' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_EnvMap) == 0x0002F2, "Member 'FSnfEnvironmentParam::bOverride_EnvMap' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_EnvMap_Angle) == 0x0002F3, "Member 'FSnfEnvironmentParam::bOverride_EnvMap_Angle' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_SkyLightCubeMap) == 0x0002F4, "Member 'FSnfEnvironmentParam::bOverride_SkyLightCubeMap' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_Skylight_Intensity) == 0x0002F5, "Member 'FSnfEnvironmentParam::bOverride_Skylight_Intensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_Skylight_Color) == 0x0002F6, "Member 'FSnfEnvironmentParam::bOverride_Skylight_Color' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_Skylight_VolumetricIntensity) == 0x0002F7, "Member 'FSnfEnvironmentParam::bOverride_Skylight_VolumetricIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_Heightfog_FogDensity) == 0x0002F8, "Member 'FSnfEnvironmentParam::bOverride_Heightfog_FogDensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_Heightfog_Falloff) == 0x0002F9, "Member 'FSnfEnvironmentParam::bOverride_Heightfog_Falloff' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_Heightfog_MaxOpacity) == 0x0002FA, "Member 'FSnfEnvironmentParam::bOverride_Heightfog_MaxOpacity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_SecondHeightfog_FogDensity) == 0x0002FB, "Member 'FSnfEnvironmentParam::bOverride_SecondHeightfog_FogDensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_SecondHeightfog_Falloff) == 0x0002FC, "Member 'FSnfEnvironmentParam::bOverride_SecondHeightfog_Falloff' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_SecondHeightfog_Offset) == 0x0002FD, "Member 'FSnfEnvironmentParam::bOverride_SecondHeightfog_Offset' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_VolumeFog_ExtinctionScale) == 0x0002FE, "Member 'FSnfEnvironmentParam::bOverride_VolumeFog_ExtinctionScale' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_PP_Contrast) == 0x0002FF, "Member 'FSnfEnvironmentParam::bOverride_PP_Contrast' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_PP_SceneColorTint) == 0x000300, "Member 'FSnfEnvironmentParam::bOverride_PP_SceneColorTint' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_Exposure_MinBrightness) == 0x000301, "Member 'FSnfEnvironmentParam::bOverride_Exposure_MinBrightness' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_Exposure_MaxBrightness) == 0x000302, "Member 'FSnfEnvironmentParam::bOverride_Exposure_MaxBrightness' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_Camera_ExposureCompensation) == 0x000303, "Member 'FSnfEnvironmentParam::bOverride_Camera_ExposureCompensation' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_GlobalEmissive) == 0x000304, "Member 'FSnfEnvironmentParam::bOverride_GlobalEmissive' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_SkySphere_OverallColor) == 0x000305, "Member 'FSnfEnvironmentParam::bOverride_SkySphere_OverallColor' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_SkySphere_ZenithColor) == 0x000306, "Member 'FSnfEnvironmentParam::bOverride_SkySphere_ZenithColor' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_SkySphere_HorizonColor) == 0x000307, "Member 'FSnfEnvironmentParam::bOverride_SkySphere_HorizonColor' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_SkySphere_CloudColor) == 0x000308, "Member 'FSnfEnvironmentParam::bOverride_SkySphere_CloudColor' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_WhiteTemp) == 0x000309, "Member 'FSnfEnvironmentParam::bOverride_WhiteTemp' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_WhiteTint) == 0x00030A, "Member 'FSnfEnvironmentParam::bOverride_WhiteTint' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorSaturation) == 0x00030B, "Member 'FSnfEnvironmentParam::bOverride_ColorSaturation' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorContrast) == 0x00030C, "Member 'FSnfEnvironmentParam::bOverride_ColorContrast' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorGamma) == 0x00030D, "Member 'FSnfEnvironmentParam::bOverride_ColorGamma' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorGain) == 0x00030E, "Member 'FSnfEnvironmentParam::bOverride_ColorGain' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorOffset) == 0x00030F, "Member 'FSnfEnvironmentParam::bOverride_ColorOffset' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorSaturationShadows) == 0x000310, "Member 'FSnfEnvironmentParam::bOverride_ColorSaturationShadows' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorContrastShadows) == 0x000311, "Member 'FSnfEnvironmentParam::bOverride_ColorContrastShadows' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorGammaShadows) == 0x000312, "Member 'FSnfEnvironmentParam::bOverride_ColorGammaShadows' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorGainShadows) == 0x000313, "Member 'FSnfEnvironmentParam::bOverride_ColorGainShadows' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorOffsetShadows) == 0x000314, "Member 'FSnfEnvironmentParam::bOverride_ColorOffsetShadows' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorSaturationMidtones) == 0x000315, "Member 'FSnfEnvironmentParam::bOverride_ColorSaturationMidtones' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorContrastMidtones) == 0x000316, "Member 'FSnfEnvironmentParam::bOverride_ColorContrastMidtones' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorGammaMidtones) == 0x000317, "Member 'FSnfEnvironmentParam::bOverride_ColorGammaMidtones' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorGainMidtones) == 0x000318, "Member 'FSnfEnvironmentParam::bOverride_ColorGainMidtones' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorOffsetMidtones) == 0x000319, "Member 'FSnfEnvironmentParam::bOverride_ColorOffsetMidtones' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorSaturationHighlights) == 0x00031A, "Member 'FSnfEnvironmentParam::bOverride_ColorSaturationHighlights' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorContrastHighlights) == 0x00031B, "Member 'FSnfEnvironmentParam::bOverride_ColorContrastHighlights' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorGammaHighlights) == 0x00031C, "Member 'FSnfEnvironmentParam::bOverride_ColorGammaHighlights' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorGainHighlights) == 0x00031D, "Member 'FSnfEnvironmentParam::bOverride_ColorGainHighlights' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorOffsetHighlights) == 0x00031E, "Member 'FSnfEnvironmentParam::bOverride_ColorOffsetHighlights' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorCorrectionShadowsMax) == 0x00031F, "Member 'FSnfEnvironmentParam::bOverride_ColorCorrectionShadowsMax' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ColorCorrectionHighlightsMin) == 0x000320, "Member 'FSnfEnvironmentParam::bOverride_ColorCorrectionHighlightsMin' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_BlueCorrection) == 0x000321, "Member 'FSnfEnvironmentParam::bOverride_BlueCorrection' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ExpandGamut) == 0x000322, "Member 'FSnfEnvironmentParam::bOverride_ExpandGamut' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_BloomIntensity) == 0x000323, "Member 'FSnfEnvironmentParam::bOverride_BloomIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_BloomThreshold) == 0x000324, "Member 'FSnfEnvironmentParam::bOverride_BloomThreshold' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_SceneFringeIntensity) == 0x000325, "Member 'FSnfEnvironmentParam::bOverride_SceneFringeIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ChromaticAberrationStartOffset) == 0x000326, "Member 'FSnfEnvironmentParam::bOverride_ChromaticAberrationStartOffset' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_LensFlareIntensity) == 0x000327, "Member 'FSnfEnvironmentParam::bOverride_LensFlareIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_LensFlareThreshold) == 0x000328, "Member 'FSnfEnvironmentParam::bOverride_LensFlareThreshold' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_VignetteIntensity) == 0x000329, "Member 'FSnfEnvironmentParam::bOverride_VignetteIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_GrainJitter) == 0x00032A, "Member 'FSnfEnvironmentParam::bOverride_GrainJitter' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_GrainIntensity) == 0x00032B, "Member 'FSnfEnvironmentParam::bOverride_GrainIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_AmbientOcclusionIntensity) == 0x00032C, "Member 'FSnfEnvironmentParam::bOverride_AmbientOcclusionIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_AmbientOcclusionRadius) == 0x00032D, "Member 'FSnfEnvironmentParam::bOverride_AmbientOcclusionRadius' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ScreenSpaceReflectionIntensity) == 0x00032E, "Member 'FSnfEnvironmentParam::bOverride_ScreenSpaceReflectionIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ScreenSpaceReflectionQuality) == 0x00032F, "Member 'FSnfEnvironmentParam::bOverride_ScreenSpaceReflectionQuality' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_ScreenSpaceReflectionMaxRoughness) == 0x000330, "Member 'FSnfEnvironmentParam::bOverride_ScreenSpaceReflectionMaxRoughness' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_VolumetricFogScatteringDistribution) == 0x000331, "Member 'FSnfEnvironmentParam::bOverride_VolumetricFogScatteringDistribution' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_VolumetricFogAlbedo) == 0x000332, "Member 'FSnfEnvironmentParam::bOverride_VolumetricFogAlbedo' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_VolumetricFogEmissive) == 0x000333, "Member 'FSnfEnvironmentParam::bOverride_VolumetricFogEmissive' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_VolumetricFogDistance) == 0x000334, "Member 'FSnfEnvironmentParam::bOverride_VolumetricFogDistance' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_AmbientCubemapIntensity) == 0x000335, "Member 'FSnfEnvironmentParam::bOverride_AmbientCubemapIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_AmbientCubemap) == 0x000336, "Member 'FSnfEnvironmentParam::bOverride_AmbientCubemap' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_SkylightEnable) == 0x000337, "Member 'FSnfEnvironmentParam::bOverride_SkylightEnable' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_HeightFogEnable) == 0x000338, "Member 'FSnfEnvironmentParam::bOverride_HeightFogEnable' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_PostEnable) == 0x000339, "Member 'FSnfEnvironmentParam::bOverride_PostEnable' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_DirectionalLightEnable) == 0x00033A, "Member 'FSnfEnvironmentParam::bOverride_DirectionalLightEnable' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_SkySphereEnable) == 0x00033B, "Member 'FSnfEnvironmentParam::bOverride_SkySphereEnable' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_SkySphereHorizonFalloff) == 0x00033C, "Member 'FSnfEnvironmentParam::bOverride_SkySphereHorizonFalloff' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_SkySphereCloudSpeed) == 0x00033D, "Member 'FSnfEnvironmentParam::bOverride_SkySphereCloudSpeed' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_SkySphereSunBrightness) == 0x00033E, "Member 'FSnfEnvironmentParam::bOverride_SkySphereSunBrightness' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_SkySphereSunHeight) == 0x00033F, "Member 'FSnfEnvironmentParam::bOverride_SkySphereSunHeight' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_SkySphereCloudOpacity) == 0x000340, "Member 'FSnfEnvironmentParam::bOverride_SkySphereCloudOpacity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_SkySphereStarsBrightness) == 0x000341, "Member 'FSnfEnvironmentParam::bOverride_SkySphereStarsBrightness' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_OverrideSkyMaterial) == 0x000342, "Member 'FSnfEnvironmentParam::bOverride_OverrideSkyMaterial' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_DirectionalLight_Color) == 0x000343, "Member 'FSnfEnvironmentParam::bOverride_DirectionalLight_Color' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_DirectionalLight_Intensity) == 0x000344, "Member 'FSnfEnvironmentParam::bOverride_DirectionalLight_Intensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_DirectionalLight_ShadowAmount) == 0x000345, "Member 'FSnfEnvironmentParam::bOverride_DirectionalLight_ShadowAmount' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_IndirectLightingColor) == 0x000346, "Member 'FSnfEnvironmentParam::bOverride_IndirectLightingColor' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_IndirectLightingIntensity) == 0x000347, "Member 'FSnfEnvironmentParam::bOverride_IndirectLightingIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_CharacterIndirectLightingIntensity) == 0x000348, "Member 'FSnfEnvironmentParam::bOverride_CharacterIndirectLightingIntensity' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_FullyDirectionalInscatteringColorDistance) == 0x000349, "Member 'FSnfEnvironmentParam::bOverride_FullyDirectionalInscatteringColorDistance' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_NonDirectionalInscatteringColorDistance) == 0x00034A, "Member 'FSnfEnvironmentParam::bOverride_NonDirectionalInscatteringColorDistance' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_RaytracingShadows) == 0x00034B, "Member 'FSnfEnvironmentParam::bOverride_RaytracingShadows' has a wrong offset!");
static_assert(offsetof(FSnfEnvironmentParam, bOverride_RaytracingReflections) == 0x00034C, "Member 'FSnfEnvironmentParam::bOverride_RaytracingReflections' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameFlagMap
// 0x0050 (0x0050 - 0x0000)
struct FSnfGameFlagMap final
{
public:
	TMap<class FName, int32>                      Values;                                            // 0x0000(0x0050)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameFlagMap) == 0x000008, "Wrong alignment on FSnfGameFlagMap");
static_assert(sizeof(FSnfGameFlagMap) == 0x000050, "Wrong size on FSnfGameFlagMap");
static_assert(offsetof(FSnfGameFlagMap, Values) == 0x000000, "Member 'FSnfGameFlagMap::Values' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameSceneParam
// 0x0078 (0x0078 - 0x0000)
struct FSnfGameSceneParam final
{
public:
	class FName                                   CurrentName;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NameLog;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      DelayList;                                         // 0x0018(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameSceneParam) == 0x000008, "Wrong alignment on FSnfGameSceneParam");
static_assert(sizeof(FSnfGameSceneParam) == 0x000078, "Wrong size on FSnfGameSceneParam");
static_assert(offsetof(FSnfGameSceneParam, CurrentName) == 0x000000, "Member 'FSnfGameSceneParam::CurrentName' has a wrong offset!");
static_assert(offsetof(FSnfGameSceneParam, NameLog) == 0x000008, "Member 'FSnfGameSceneParam::NameLog' has a wrong offset!");
static_assert(offsetof(FSnfGameSceneParam, DelayList) == 0x000018, "Member 'FSnfGameSceneParam::DelayList' has a wrong offset!");
static_assert(offsetof(FSnfGameSceneParam, Tags) == 0x000068, "Member 'FSnfGameSceneParam::Tags' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameActorList
// 0x0030 (0x0030 - 0x0000)
struct FSnfGameActorList final
{
public:
	class UObject*                                ObjectInstance;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UObject>>         RequestObject;                                     // 0x0008(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x18];                                      // 0x0018(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGameActorList) == 0x000008, "Wrong alignment on FSnfGameActorList");
static_assert(sizeof(FSnfGameActorList) == 0x000030, "Wrong size on FSnfGameActorList");
static_assert(offsetof(FSnfGameActorList, ObjectInstance) == 0x000000, "Member 'FSnfGameActorList::ObjectInstance' has a wrong offset!");
static_assert(offsetof(FSnfGameActorList, RequestObject) == 0x000008, "Member 'FSnfGameActorList::RequestObject' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameJobSaveSupply
// 0x0078 (0x0078 - 0x0000)
struct FSnfGameJobSaveSupply final
{
public:
	TMap<class FName, struct FSnfGameJobSaveSection> SectionList;                                       // 0x0000(0x0050)(Transient, NativeAccessSpecifierPublic)
	class FName                                   Spawn;                                             // 0x0050(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Section;                                           // 0x0058(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0060(0x000C)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance2D;                                     // 0x006C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeginTime;                                         // 0x0070(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndTime;                                           // 0x0074(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameJobSaveSupply) == 0x000008, "Wrong alignment on FSnfGameJobSaveSupply");
static_assert(sizeof(FSnfGameJobSaveSupply) == 0x000078, "Wrong size on FSnfGameJobSaveSupply");
static_assert(offsetof(FSnfGameJobSaveSupply, SectionList) == 0x000000, "Member 'FSnfGameJobSaveSupply::SectionList' has a wrong offset!");
static_assert(offsetof(FSnfGameJobSaveSupply, Spawn) == 0x000050, "Member 'FSnfGameJobSaveSupply::Spawn' has a wrong offset!");
static_assert(offsetof(FSnfGameJobSaveSupply, Section) == 0x000058, "Member 'FSnfGameJobSaveSupply::Section' has a wrong offset!");
static_assert(offsetof(FSnfGameJobSaveSupply, Location) == 0x000060, "Member 'FSnfGameJobSaveSupply::Location' has a wrong offset!");
static_assert(offsetof(FSnfGameJobSaveSupply, MaxDistance2D) == 0x00006C, "Member 'FSnfGameJobSaveSupply::MaxDistance2D' has a wrong offset!");
static_assert(offsetof(FSnfGameJobSaveSupply, BeginTime) == 0x000070, "Member 'FSnfGameJobSaveSupply::BeginTime' has a wrong offset!");
static_assert(offsetof(FSnfGameJobSaveSupply, EndTime) == 0x000074, "Member 'FSnfGameJobSaveSupply::EndTime' has a wrong offset!");

// ScriptStruct Snowfall.SnfQualityPresetXeSS
// 0x000C (0x000C - 0x0000)
struct FSnfQualityPresetXeSS final
{
public:
	uint8                                         Index;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0001(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Quality;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MipMapLODBias;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfQualityPresetXeSS) == 0x000004, "Wrong alignment on FSnfQualityPresetXeSS");
static_assert(sizeof(FSnfQualityPresetXeSS) == 0x00000C, "Wrong size on FSnfQualityPresetXeSS");
static_assert(offsetof(FSnfQualityPresetXeSS, Index) == 0x000000, "Member 'FSnfQualityPresetXeSS::Index' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetXeSS, bEnabled) == 0x000001, "Member 'FSnfQualityPresetXeSS::bEnabled' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetXeSS, Quality) == 0x000004, "Member 'FSnfQualityPresetXeSS::Quality' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetXeSS, MipMapLODBias) == 0x000008, "Member 'FSnfQualityPresetXeSS::MipMapLODBias' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameJobSaveInterval
// 0x0018 (0x0018 - 0x0000)
struct FSnfGameJobSaveInterval final
{
public:
	bool                                          IsManual;                                          // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TIME;                                              // 0x0004(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameJobSaveInterval) == 0x000004, "Wrong alignment on FSnfGameJobSaveInterval");
static_assert(sizeof(FSnfGameJobSaveInterval) == 0x000018, "Wrong size on FSnfGameJobSaveInterval");
static_assert(offsetof(FSnfGameJobSaveInterval, IsManual) == 0x000000, "Member 'FSnfGameJobSaveInterval::IsManual' has a wrong offset!");
static_assert(offsetof(FSnfGameJobSaveInterval, TIME) == 0x000004, "Member 'FSnfGameJobSaveInterval::TIME' has a wrong offset!");
static_assert(offsetof(FSnfGameJobSaveInterval, Location) == 0x000008, "Member 'FSnfGameJobSaveInterval::Location' has a wrong offset!");
static_assert(offsetof(FSnfGameJobSaveInterval, Length) == 0x000014, "Member 'FSnfGameJobSaveInterval::Length' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameInfoNearActivity
// 0x0054 (0x0054 - 0x0000)
struct FSnfGameInfoNearActivity final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CatalogId;                                         // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckLength;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NearFlagId;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapName;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NearLocation;                                      // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearLength;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NotClearOnly;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  OldActor;                                          // 0x0034(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  NewActor;                                          // 0x003C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BeginAction;                                       // 0x0044(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndAction;                                         // 0x004C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameInfoNearActivity) == 0x000004, "Wrong alignment on FSnfGameInfoNearActivity");
static_assert(sizeof(FSnfGameInfoNearActivity) == 0x000054, "Wrong size on FSnfGameInfoNearActivity");
static_assert(offsetof(FSnfGameInfoNearActivity, IsActive) == 0x000000, "Member 'FSnfGameInfoNearActivity::IsActive' has a wrong offset!");
static_assert(offsetof(FSnfGameInfoNearActivity, CatalogId) == 0x000004, "Member 'FSnfGameInfoNearActivity::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfGameInfoNearActivity, CheckLength) == 0x00000C, "Member 'FSnfGameInfoNearActivity::CheckLength' has a wrong offset!");
static_assert(offsetof(FSnfGameInfoNearActivity, NearFlagId) == 0x000010, "Member 'FSnfGameInfoNearActivity::NearFlagId' has a wrong offset!");
static_assert(offsetof(FSnfGameInfoNearActivity, MapName) == 0x000018, "Member 'FSnfGameInfoNearActivity::MapName' has a wrong offset!");
static_assert(offsetof(FSnfGameInfoNearActivity, NearLocation) == 0x000020, "Member 'FSnfGameInfoNearActivity::NearLocation' has a wrong offset!");
static_assert(offsetof(FSnfGameInfoNearActivity, NearLength) == 0x00002C, "Member 'FSnfGameInfoNearActivity::NearLength' has a wrong offset!");
static_assert(offsetof(FSnfGameInfoNearActivity, NotClearOnly) == 0x000030, "Member 'FSnfGameInfoNearActivity::NotClearOnly' has a wrong offset!");
static_assert(offsetof(FSnfGameInfoNearActivity, OldActor) == 0x000034, "Member 'FSnfGameInfoNearActivity::OldActor' has a wrong offset!");
static_assert(offsetof(FSnfGameInfoNearActivity, NewActor) == 0x00003C, "Member 'FSnfGameInfoNearActivity::NewActor' has a wrong offset!");
static_assert(offsetof(FSnfGameInfoNearActivity, BeginAction) == 0x000044, "Member 'FSnfGameInfoNearActivity::BeginAction' has a wrong offset!");
static_assert(offsetof(FSnfGameInfoNearActivity, EndAction) == 0x00004C, "Member 'FSnfGameInfoNearActivity::EndAction' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameSearchItem
// 0x0050 (0x0058 - 0x0008)
struct FSnfGameSearchItem final : public FTableRowBase
{
public:
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameTags;                                          // 0x0020(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  OwnerActor;                                        // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USceneComponent>         OwnerComponent;                                    // 0x0048(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGameSearchItem) == 0x000008, "Wrong alignment on FSnfGameSearchItem");
static_assert(sizeof(FSnfGameSearchItem) == 0x000058, "Wrong size on FSnfGameSearchItem");
static_assert(offsetof(FSnfGameSearchItem, Name) == 0x000008, "Member 'FSnfGameSearchItem::Name' has a wrong offset!");
static_assert(offsetof(FSnfGameSearchItem, Location) == 0x000010, "Member 'FSnfGameSearchItem::Location' has a wrong offset!");
static_assert(offsetof(FSnfGameSearchItem, Yaw) == 0x00001C, "Member 'FSnfGameSearchItem::Yaw' has a wrong offset!");
static_assert(offsetof(FSnfGameSearchItem, GameTags) == 0x000020, "Member 'FSnfGameSearchItem::GameTags' has a wrong offset!");
static_assert(offsetof(FSnfGameSearchItem, OwnerActor) == 0x000040, "Member 'FSnfGameSearchItem::OwnerActor' has a wrong offset!");
static_assert(offsetof(FSnfGameSearchItem, OwnerComponent) == 0x000048, "Member 'FSnfGameSearchItem::OwnerComponent' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameSupplyInfo
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSnfGameSupplyInfo final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGameSupplyInfo) == 0x000008, "Wrong alignment on FSnfGameSupplyInfo");
static_assert(sizeof(FSnfGameSupplyInfo) == 0x000020, "Wrong size on FSnfGameSupplyInfo");

// ScriptStruct Snowfall.SnfGameSupplySet
// 0x0100 (0x0100 - 0x0000)
struct FSnfGameSupplySet final
{
public:
	struct FSnfGameSupplyRequest                  Request;                                           // 0x0000(0x00C0)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x40];                                      // 0x00C0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGameSupplySet) == 0x000010, "Wrong alignment on FSnfGameSupplySet");
static_assert(sizeof(FSnfGameSupplySet) == 0x000100, "Wrong size on FSnfGameSupplySet");
static_assert(offsetof(FSnfGameSupplySet, Request) == 0x000000, "Member 'FSnfGameSupplySet::Request' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameSynchroData
// 0x0010 (0x0010 - 0x0000)
struct FSnfGameSynchroData final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReady;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCancel;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFinish;                                          // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGameSynchroData) == 0x000008, "Wrong alignment on FSnfGameSynchroData");
static_assert(sizeof(FSnfGameSynchroData) == 0x000010, "Wrong size on FSnfGameSynchroData");
static_assert(offsetof(FSnfGameSynchroData, Object) == 0x000000, "Member 'FSnfGameSynchroData::Object' has a wrong offset!");
static_assert(offsetof(FSnfGameSynchroData, IsReady) == 0x000008, "Member 'FSnfGameSynchroData::IsReady' has a wrong offset!");
static_assert(offsetof(FSnfGameSynchroData, IsCancel) == 0x000009, "Member 'FSnfGameSynchroData::IsCancel' has a wrong offset!");
static_assert(offsetof(FSnfGameSynchroData, IsFinish) == 0x00000A, "Member 'FSnfGameSynchroData::IsFinish' has a wrong offset!");

// ScriptStruct Snowfall.SnfSequenceTalkCastInfo
// 0x0014 (0x0014 - 0x0000)
struct FSnfSequenceTalkCastInfo final
{
public:
	class FName                                   TrackName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETalkCastType                                 CastType;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CatalogId;                                         // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfSequenceTalkCastInfo) == 0x000004, "Wrong alignment on FSnfSequenceTalkCastInfo");
static_assert(sizeof(FSnfSequenceTalkCastInfo) == 0x000014, "Wrong size on FSnfSequenceTalkCastInfo");
static_assert(offsetof(FSnfSequenceTalkCastInfo, TrackName) == 0x000000, "Member 'FSnfSequenceTalkCastInfo::TrackName' has a wrong offset!");
static_assert(offsetof(FSnfSequenceTalkCastInfo, CastType) == 0x000008, "Member 'FSnfSequenceTalkCastInfo::CastType' has a wrong offset!");
static_assert(offsetof(FSnfSequenceTalkCastInfo, CatalogId) == 0x00000C, "Member 'FSnfSequenceTalkCastInfo::CatalogId' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponLauncherData
// 0x00D8 (0x00D8 - 0x0000)
struct FSnfWeaponLauncherData final
{
public:
	uint8                                         LaunchAmmoNum;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SpendAmmoNum;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AmmoCapacity;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IntervalTime;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSnfWeaponLauncherBurstParam           BurstParam;                                        // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSnfWeaponLauncherDiffusionParam       DiffusionParam;                                    // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSnfWeaponLauncherFixedPointParam      FixedPointParam;                                   // 0x0030(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USnfWeaponChargeData>       ChargeData;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, TSubclassOf<class AActor>>  UsableAmmoClass;                                   // 0x0058(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         BaseFOV;                                           // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimFOV1;                                           // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimFOV2;                                           // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoAimSpeedRate;                                  // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseError;                                         // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimError;                                          // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveError;                                         // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            SpeedScaleCurve;                                   // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            GravityScaleCurve;                                 // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponLauncherData) == 0x000008, "Wrong alignment on FSnfWeaponLauncherData");
static_assert(sizeof(FSnfWeaponLauncherData) == 0x0000D8, "Wrong size on FSnfWeaponLauncherData");
static_assert(offsetof(FSnfWeaponLauncherData, LaunchAmmoNum) == 0x000000, "Member 'FSnfWeaponLauncherData::LaunchAmmoNum' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherData, SpendAmmoNum) == 0x000001, "Member 'FSnfWeaponLauncherData::SpendAmmoNum' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherData, AmmoCapacity) == 0x000002, "Member 'FSnfWeaponLauncherData::AmmoCapacity' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherData, IntervalTime) == 0x000008, "Member 'FSnfWeaponLauncherData::IntervalTime' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherData, BurstParam) == 0x00000C, "Member 'FSnfWeaponLauncherData::BurstParam' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherData, DiffusionParam) == 0x000018, "Member 'FSnfWeaponLauncherData::DiffusionParam' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherData, FixedPointParam) == 0x000030, "Member 'FSnfWeaponLauncherData::FixedPointParam' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherData, ChargeData) == 0x000050, "Member 'FSnfWeaponLauncherData::ChargeData' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherData, UsableAmmoClass) == 0x000058, "Member 'FSnfWeaponLauncherData::UsableAmmoClass' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherData, BaseFOV) == 0x0000A8, "Member 'FSnfWeaponLauncherData::BaseFOV' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherData, AimFOV1) == 0x0000AC, "Member 'FSnfWeaponLauncherData::AimFOV1' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherData, AimFOV2) == 0x0000B0, "Member 'FSnfWeaponLauncherData::AimFOV2' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherData, AutoAimSpeedRate) == 0x0000B4, "Member 'FSnfWeaponLauncherData::AutoAimSpeedRate' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherData, BaseError) == 0x0000B8, "Member 'FSnfWeaponLauncherData::BaseError' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherData, AimError) == 0x0000BC, "Member 'FSnfWeaponLauncherData::AimError' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherData, MoveError) == 0x0000C0, "Member 'FSnfWeaponLauncherData::MoveError' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherData, SpeedScaleCurve) == 0x0000C8, "Member 'FSnfWeaponLauncherData::SpeedScaleCurve' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherData, GravityScaleCurve) == 0x0000D0, "Member 'FSnfWeaponLauncherData::GravityScaleCurve' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkExSelectAfterInfo
// 0x0018 (0x0018 - 0x0000)
struct FSnfTalkExSelectAfterInfo final
{
public:
	int32                                         SelectNo;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    TalkID;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalkExSelectAfterInfo) == 0x000008, "Wrong alignment on FSnfTalkExSelectAfterInfo");
static_assert(sizeof(FSnfTalkExSelectAfterInfo) == 0x000018, "Wrong size on FSnfTalkExSelectAfterInfo");
static_assert(offsetof(FSnfTalkExSelectAfterInfo, SelectNo) == 0x000000, "Member 'FSnfTalkExSelectAfterInfo::SelectNo' has a wrong offset!");
static_assert(offsetof(FSnfTalkExSelectAfterInfo, TalkID) == 0x000008, "Member 'FSnfTalkExSelectAfterInfo::TalkID' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkParameter
// 0x0298 (0x0298 - 0x0000)
struct FSnfTalkParameter final
{
public:
	TSoftObjectPtr<class UDataTable>              TalkTablePath;                                     // 0x0000(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             TalkTable;                                         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x230];                                     // 0x0030(0x0230)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UAnimSequenceBase>> LoadMotions;                                       // 0x0260(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UAnimSequenceBase*>              UniqueMotions;                                     // 0x0270(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_280[0x18];                                     // 0x0280(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfTalkParameter) == 0x000008, "Wrong alignment on FSnfTalkParameter");
static_assert(sizeof(FSnfTalkParameter) == 0x000298, "Wrong size on FSnfTalkParameter");
static_assert(offsetof(FSnfTalkParameter, TalkTablePath) == 0x000000, "Member 'FSnfTalkParameter::TalkTablePath' has a wrong offset!");
static_assert(offsetof(FSnfTalkParameter, TalkTable) == 0x000028, "Member 'FSnfTalkParameter::TalkTable' has a wrong offset!");
static_assert(offsetof(FSnfTalkParameter, LoadMotions) == 0x000260, "Member 'FSnfTalkParameter::LoadMotions' has a wrong offset!");
static_assert(offsetof(FSnfTalkParameter, UniqueMotions) == 0x000270, "Member 'FSnfTalkParameter::UniqueMotions' has a wrong offset!");

// ScriptStruct Snowfall.SnfCutsceneTalkCastInfo
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FSnfCutsceneTalkCastInfo final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCutsceneTalkCastInfo) == 0x000004, "Wrong alignment on FSnfCutsceneTalkCastInfo");
static_assert(sizeof(FSnfCutsceneTalkCastInfo) == 0x000014, "Wrong size on FSnfCutsceneTalkCastInfo");

// ScriptStruct Snowfall.SnfTalkCastInfo
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FSnfTalkCastInfo final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfTalkCastInfo) == 0x000008, "Wrong alignment on FSnfTalkCastInfo");
static_assert(sizeof(FSnfTalkCastInfo) == 0x000050, "Wrong size on FSnfTalkCastInfo");

// ScriptStruct Snowfall.SnfTalkSaveParameter
// 0x0004 (0x0004 - 0x0000)
struct FSnfTalkSaveParameter final
{
public:
	int32                                         SaveIndex;                                         // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalkSaveParameter) == 0x000004, "Wrong alignment on FSnfTalkSaveParameter");
static_assert(sizeof(FSnfTalkSaveParameter) == 0x000004, "Wrong size on FSnfTalkSaveParameter");
static_assert(offsetof(FSnfTalkSaveParameter, SaveIndex) == 0x000000, "Member 'FSnfTalkSaveParameter::SaveIndex' has a wrong offset!");

// ScriptStruct Snowfall.SnfJoinTalkInfo
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x08) FSnfJoinTalkInfo final
{
public:
	uint8                                         Pad_0[0x70];                                       // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfJoinTalkInfo) == 0x000008, "Wrong alignment on FSnfJoinTalkInfo");
static_assert(sizeof(FSnfJoinTalkInfo) == 0x000070, "Wrong size on FSnfJoinTalkInfo");

// ScriptStruct Snowfall.SnfTalkActionRestrictInfo
// 0x0008 (0x0010 - 0x0008)
struct FSnfTalkActionRestrictInfo final : public FTableRowBase
{
public:
	class FName                                   PlayerMoveTypeName;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalkActionRestrictInfo) == 0x000008, "Wrong alignment on FSnfTalkActionRestrictInfo");
static_assert(sizeof(FSnfTalkActionRestrictInfo) == 0x000010, "Wrong size on FSnfTalkActionRestrictInfo");
static_assert(offsetof(FSnfTalkActionRestrictInfo, PlayerMoveTypeName) == 0x000008, "Member 'FSnfTalkActionRestrictInfo::PlayerMoveTypeName' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkSelect
// 0x0008 (0x0008 - 0x0000)
struct FSnfTalkSelect final
{
public:
	class FName                                   SelectID;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalkSelect) == 0x000004, "Wrong alignment on FSnfTalkSelect");
static_assert(sizeof(FSnfTalkSelect) == 0x000008, "Wrong size on FSnfTalkSelect");
static_assert(offsetof(FSnfTalkSelect, SelectID) == 0x000000, "Member 'FSnfTalkSelect::SelectID' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkInfo
// 0x00E0 (0x00E8 - 0x0008)
struct FSnfTalkInfo final : public FTableRowBase
{
public:
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
	ETalkAnotherName                              AnotherName;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NameIndex;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETalkCastType                                 CastType;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETalkCastType                                 Target;                                            // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetSocketName;                                  // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFaceFXAnim*                            FaceAnim;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSnfTalkSelect>                 Selects;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	class FName                                   NextID;                                            // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETalkNextType                                 TalkNextType;                                      // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NextTime;                                          // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnfGameTalkCameraData*                 CameraData;                                        // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraDelay;                                       // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraTargetSpeed;                                 // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDof;                                              // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfPlayerGestureType                         PlayerGesture;                                     // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfFaceType                                  FaceType;                                          // 0x007A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETalkMotion                                   TalkMotion;                                        // 0x007B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSnfTalkUniqueMotion                   UniqueMotion;                                      // 0x0080(0x0050)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
	EVoiceType                                    VoiceType;                                         // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSave;                                             // 0x00D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETalkTag>                              Tags;                                              // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalkInfo) == 0x000008, "Wrong alignment on FSnfTalkInfo");
static_assert(sizeof(FSnfTalkInfo) == 0x0000E8, "Wrong size on FSnfTalkInfo");
static_assert(offsetof(FSnfTalkInfo, Text) == 0x000008, "Member 'FSnfTalkInfo::Text' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, AnotherName) == 0x000020, "Member 'FSnfTalkInfo::AnotherName' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, NameIndex) == 0x000024, "Member 'FSnfTalkInfo::NameIndex' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, CastType) == 0x000028, "Member 'FSnfTalkInfo::CastType' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, Target) == 0x000029, "Member 'FSnfTalkInfo::Target' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, TargetSocketName) == 0x00002C, "Member 'FSnfTalkInfo::TargetSocketName' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, AudioEvent) == 0x000038, "Member 'FSnfTalkInfo::AudioEvent' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, FaceAnim) == 0x000040, "Member 'FSnfTalkInfo::FaceAnim' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, Selects) == 0x000048, "Member 'FSnfTalkInfo::Selects' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, NextID) == 0x000058, "Member 'FSnfTalkInfo::NextID' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, TalkNextType) == 0x000060, "Member 'FSnfTalkInfo::TalkNextType' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, NextTime) == 0x000064, "Member 'FSnfTalkInfo::NextTime' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, CameraData) == 0x000068, "Member 'FSnfTalkInfo::CameraData' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, CameraDelay) == 0x000070, "Member 'FSnfTalkInfo::CameraDelay' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, CameraTargetSpeed) == 0x000074, "Member 'FSnfTalkInfo::CameraTargetSpeed' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, bDof) == 0x000078, "Member 'FSnfTalkInfo::bDof' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, PlayerGesture) == 0x000079, "Member 'FSnfTalkInfo::PlayerGesture' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, FaceType) == 0x00007A, "Member 'FSnfTalkInfo::FaceType' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, TalkMotion) == 0x00007B, "Member 'FSnfTalkInfo::TalkMotion' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, UniqueMotion) == 0x000080, "Member 'FSnfTalkInfo::UniqueMotion' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, VoiceType) == 0x0000D0, "Member 'FSnfTalkInfo::VoiceType' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, bSave) == 0x0000D1, "Member 'FSnfTalkInfo::bSave' has a wrong offset!");
static_assert(offsetof(FSnfTalkInfo, Tags) == 0x0000D8, "Member 'FSnfTalkInfo::Tags' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkCameraPoint
// 0x001C (0x001C - 0x0000)
struct FSnfTalkCameraPoint final
{
public:
	ETalkCastType                                 CastType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysUpdate;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfTalkCameraPoint) == 0x000004, "Wrong alignment on FSnfTalkCameraPoint");
static_assert(sizeof(FSnfTalkCameraPoint) == 0x00001C, "Wrong size on FSnfTalkCameraPoint");
static_assert(offsetof(FSnfTalkCameraPoint, CastType) == 0x000000, "Member 'FSnfTalkCameraPoint::CastType' has a wrong offset!");
static_assert(offsetof(FSnfTalkCameraPoint, SocketName) == 0x000004, "Member 'FSnfTalkCameraPoint::SocketName' has a wrong offset!");
static_assert(offsetof(FSnfTalkCameraPoint, LocationOffset) == 0x00000C, "Member 'FSnfTalkCameraPoint::LocationOffset' has a wrong offset!");
static_assert(offsetof(FSnfTalkCameraPoint, bAlwaysUpdate) == 0x000018, "Member 'FSnfTalkCameraPoint::bAlwaysUpdate' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkLookAtTargetInfo
// 0x0010 (0x0010 - 0x0000)
struct FSnfTalkLookAtTargetInfo final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   JointName;                                         // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalkLookAtTargetInfo) == 0x000008, "Wrong alignment on FSnfTalkLookAtTargetInfo");
static_assert(sizeof(FSnfTalkLookAtTargetInfo) == 0x000010, "Wrong size on FSnfTalkLookAtTargetInfo");
static_assert(offsetof(FSnfTalkLookAtTargetInfo, TargetActor) == 0x000000, "Member 'FSnfTalkLookAtTargetInfo::TargetActor' has a wrong offset!");
static_assert(offsetof(FSnfTalkLookAtTargetInfo, JointName) == 0x000008, "Member 'FSnfTalkLookAtTargetInfo::JointName' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkSelectItem
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FSnfTalkSelectItem final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfTalkSelectItem) == 0x000004, "Wrong alignment on FSnfTalkSelectItem");
static_assert(sizeof(FSnfTalkSelectItem) == 0x000018, "Wrong size on FSnfTalkSelectItem");

// ScriptStruct Snowfall.SnfGimmickActorInterlockActionSetting
// 0x0030 (0x0030 - 0x0000)
struct FSnfGimmickActorInterlockActionSetting final
{
public:
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartsIndex;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ActivateActionList;                                // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           InActivateActionList;                              // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGimmickActorInterlockActionSetting) == 0x000008, "Wrong alignment on FSnfGimmickActorInterlockActionSetting");
static_assert(sizeof(FSnfGimmickActorInterlockActionSetting) == 0x000030, "Wrong size on FSnfGimmickActorInterlockActionSetting");
static_assert(offsetof(FSnfGimmickActorInterlockActionSetting, TargetActor) == 0x000000, "Member 'FSnfGimmickActorInterlockActionSetting::TargetActor' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInterlockActionSetting, PartsIndex) == 0x000008, "Member 'FSnfGimmickActorInterlockActionSetting::PartsIndex' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInterlockActionSetting, ActivateActionList) == 0x000010, "Member 'FSnfGimmickActorInterlockActionSetting::ActivateActionList' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInterlockActionSetting, InActivateActionList) == 0x000020, "Member 'FSnfGimmickActorInterlockActionSetting::InActivateActionList' has a wrong offset!");

// ScriptStruct Snowfall.SnfGimmickActorLightChannelSetting
// 0x0010 (0x0010 - 0x0000)
struct FSnfGimmickActorLightChannelSetting final
{
public:
	bool                                          UseEzLightChannelSettings;                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LightingChannel;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LightReceiveChannel0;                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LightReceiveChannel1;                              // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LightReceiveChannel2;                              // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LightCastChannel0;                                 // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LightCastChannel1;                                 // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LightCastChannel2;                                 // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGimmickActorLightChannelSetting) == 0x000004, "Wrong alignment on FSnfGimmickActorLightChannelSetting");
static_assert(sizeof(FSnfGimmickActorLightChannelSetting) == 0x000010, "Wrong size on FSnfGimmickActorLightChannelSetting");
static_assert(offsetof(FSnfGimmickActorLightChannelSetting, UseEzLightChannelSettings) == 0x000000, "Member 'FSnfGimmickActorLightChannelSetting::UseEzLightChannelSettings' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorLightChannelSetting, LightingChannel) == 0x000004, "Member 'FSnfGimmickActorLightChannelSetting::LightingChannel' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorLightChannelSetting, LightReceiveChannel0) == 0x000008, "Member 'FSnfGimmickActorLightChannelSetting::LightReceiveChannel0' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorLightChannelSetting, LightReceiveChannel1) == 0x000009, "Member 'FSnfGimmickActorLightChannelSetting::LightReceiveChannel1' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorLightChannelSetting, LightReceiveChannel2) == 0x00000A, "Member 'FSnfGimmickActorLightChannelSetting::LightReceiveChannel2' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorLightChannelSetting, LightCastChannel0) == 0x00000B, "Member 'FSnfGimmickActorLightChannelSetting::LightCastChannel0' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorLightChannelSetting, LightCastChannel1) == 0x00000C, "Member 'FSnfGimmickActorLightChannelSetting::LightCastChannel1' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorLightChannelSetting, LightCastChannel2) == 0x00000D, "Member 'FSnfGimmickActorLightChannelSetting::LightCastChannel2' has a wrong offset!");

// ScriptStruct Snowfall.SnfGimmickActorChildPhysicsPropSetting
// 0x0040 (0x0040 - 0x0000)
struct FSnfGimmickActorChildPhysicsPropSetting final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class ASnfTakeDamagePropsActorBase> PhysicsPropClass;                                  // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGimmickActorChildPhysicsPropSetting) == 0x000010, "Wrong alignment on FSnfGimmickActorChildPhysicsPropSetting");
static_assert(sizeof(FSnfGimmickActorChildPhysicsPropSetting) == 0x000040, "Wrong size on FSnfGimmickActorChildPhysicsPropSetting");
static_assert(offsetof(FSnfGimmickActorChildPhysicsPropSetting, Transform) == 0x000000, "Member 'FSnfGimmickActorChildPhysicsPropSetting::Transform' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorChildPhysicsPropSetting, PhysicsPropClass) == 0x000030, "Member 'FSnfGimmickActorChildPhysicsPropSetting::PhysicsPropClass' has a wrong offset!");

// ScriptStruct Snowfall.SnfGimmickActorInitiallySetting
// 0x0008 (0x0008 - 0x0000)
struct FSnfGimmickActorInitiallySetting final
{
public:
	bool                                          bActivate;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetAnimationRate;                                 // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PartsAnimationRate;                                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGimmickActorInitiallySetting) == 0x000004, "Wrong alignment on FSnfGimmickActorInitiallySetting");
static_assert(sizeof(FSnfGimmickActorInitiallySetting) == 0x000008, "Wrong size on FSnfGimmickActorInitiallySetting");
static_assert(offsetof(FSnfGimmickActorInitiallySetting, bActivate) == 0x000000, "Member 'FSnfGimmickActorInitiallySetting::bActivate' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInitiallySetting, bSetAnimationRate) == 0x000001, "Member 'FSnfGimmickActorInitiallySetting::bSetAnimationRate' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInitiallySetting, PartsAnimationRate) == 0x000004, "Member 'FSnfGimmickActorInitiallySetting::PartsAnimationRate' has a wrong offset!");

// ScriptStruct Snowfall.SnfGimmickActorPartsSoundSetting
// 0x00F0 (0x00F0 - 0x0000)
struct FSnfGimmickActorPartsSoundSetting final
{
public:
	bool                                          bFollowPartsLocation;                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AkPosition;                                        // 0x0004(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AkRotation;                                        // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bManualSetting_RefreshInterval;                    // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionRefreshInterval;                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkChangeRoomType                             ChangeRoomType;                                    // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ESnfGimmickActorSoundCallType, struct FSnfGimmickActorSoundSetting> SoundList;                                         // 0x0028(0x0050)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AAkAcousticPortal>       AkAcousticPortalSoft;                              // 0x0078(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AAkAcousticPortal>       AkAcousticPortalSoftWithPrefix;                    // 0x00A0(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssignOpenGimmickState;                           // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AkAcousticPortalSetTiming;                         // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReConnectAkAcousticPortalTime;                     // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReConnectAkAcousticCount;                          // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x18];                                      // 0x00D8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGimmickActorPartsSoundSetting) == 0x000008, "Wrong alignment on FSnfGimmickActorPartsSoundSetting");
static_assert(sizeof(FSnfGimmickActorPartsSoundSetting) == 0x0000F0, "Wrong size on FSnfGimmickActorPartsSoundSetting");
static_assert(offsetof(FSnfGimmickActorPartsSoundSetting, bFollowPartsLocation) == 0x000000, "Member 'FSnfGimmickActorPartsSoundSetting::bFollowPartsLocation' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSoundSetting, AkPosition) == 0x000004, "Member 'FSnfGimmickActorPartsSoundSetting::AkPosition' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSoundSetting, AkRotation) == 0x000010, "Member 'FSnfGimmickActorPartsSoundSetting::AkRotation' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSoundSetting, bManualSetting_RefreshInterval) == 0x00001C, "Member 'FSnfGimmickActorPartsSoundSetting::bManualSetting_RefreshInterval' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSoundSetting, OcclusionRefreshInterval) == 0x000020, "Member 'FSnfGimmickActorPartsSoundSetting::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSoundSetting, ChangeRoomType) == 0x000024, "Member 'FSnfGimmickActorPartsSoundSetting::ChangeRoomType' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSoundSetting, SoundList) == 0x000028, "Member 'FSnfGimmickActorPartsSoundSetting::SoundList' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSoundSetting, AkAcousticPortalSoft) == 0x000078, "Member 'FSnfGimmickActorPartsSoundSetting::AkAcousticPortalSoft' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSoundSetting, AkAcousticPortalSoftWithPrefix) == 0x0000A0, "Member 'FSnfGimmickActorPartsSoundSetting::AkAcousticPortalSoftWithPrefix' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSoundSetting, bAssignOpenGimmickState) == 0x0000C8, "Member 'FSnfGimmickActorPartsSoundSetting::bAssignOpenGimmickState' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSoundSetting, AkAcousticPortalSetTiming) == 0x0000CC, "Member 'FSnfGimmickActorPartsSoundSetting::AkAcousticPortalSetTiming' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSoundSetting, ReConnectAkAcousticPortalTime) == 0x0000D0, "Member 'FSnfGimmickActorPartsSoundSetting::ReConnectAkAcousticPortalTime' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsSoundSetting, ReConnectAkAcousticCount) == 0x0000D4, "Member 'FSnfGimmickActorPartsSoundSetting::ReConnectAkAcousticCount' has a wrong offset!");

// ScriptStruct Snowfall.SnfGimmickActorMaterialComponent
// 0x0178 (0x0178 - 0x0000)
struct FSnfGimmickActorMaterialComponent final
{
public:
	int32                                         MyPartsIndex;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MyMaterialSlotName;                                // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivate;                                         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSnfGimmickActorMaterialScalarValueSetting> ScalarValueSettings;                               // 0x0018(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FSnfGimmickActorMaterialVectorValueSetting> VectorValueSettings;                               // 0x0068(0x0050)(NativeAccessSpecifierPublic)
	struct FSnfPropsGimmickAnimationInfo          AnimationInfo;                                     // 0x00B8(0x00B8)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_170[0x8];                                      // 0x0170(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGimmickActorMaterialComponent) == 0x000008, "Wrong alignment on FSnfGimmickActorMaterialComponent");
static_assert(sizeof(FSnfGimmickActorMaterialComponent) == 0x000178, "Wrong size on FSnfGimmickActorMaterialComponent");
static_assert(offsetof(FSnfGimmickActorMaterialComponent, MyPartsIndex) == 0x000000, "Member 'FSnfGimmickActorMaterialComponent::MyPartsIndex' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorMaterialComponent, MyMaterialSlotName) == 0x000004, "Member 'FSnfGimmickActorMaterialComponent::MyMaterialSlotName' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorMaterialComponent, bActivate) == 0x00000C, "Member 'FSnfGimmickActorMaterialComponent::bActivate' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorMaterialComponent, DynamicMaterial) == 0x000010, "Member 'FSnfGimmickActorMaterialComponent::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorMaterialComponent, ScalarValueSettings) == 0x000018, "Member 'FSnfGimmickActorMaterialComponent::ScalarValueSettings' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorMaterialComponent, VectorValueSettings) == 0x000068, "Member 'FSnfGimmickActorMaterialComponent::VectorValueSettings' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorMaterialComponent, AnimationInfo) == 0x0000B8, "Member 'FSnfGimmickActorMaterialComponent::AnimationInfo' has a wrong offset!");

// ScriptStruct Snowfall.SnfGimmickActorPartsMaterialSetting
// 0x0058 (0x0058 - 0x0000)
struct FSnfGimmickActorPartsMaterialSetting final
{
public:
	bool                                          bInitialllyActivate;                               // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FSnfGimmickActorMaterialSlotSetting> ParameterSettingList;                              // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGimmickActorPartsMaterialSetting) == 0x000008, "Wrong alignment on FSnfGimmickActorPartsMaterialSetting");
static_assert(sizeof(FSnfGimmickActorPartsMaterialSetting) == 0x000058, "Wrong size on FSnfGimmickActorPartsMaterialSetting");
static_assert(offsetof(FSnfGimmickActorPartsMaterialSetting, bInitialllyActivate) == 0x000000, "Member 'FSnfGimmickActorPartsMaterialSetting::bInitialllyActivate' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsMaterialSetting, ParameterSettingList) == 0x000008, "Member 'FSnfGimmickActorPartsMaterialSetting::ParameterSettingList' has a wrong offset!");

// ScriptStruct Snowfall.SnfGimmickActorPartsInteractSetting
// 0x0050 (0x0050 - 0x0000)
struct FSnfGimmickActorPartsInteractSetting final
{
public:
	TMap<int32, struct FSnfGimmickActorInteractSetting> InteractSetting;                                   // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGimmickActorPartsInteractSetting) == 0x000008, "Wrong alignment on FSnfGimmickActorPartsInteractSetting");
static_assert(sizeof(FSnfGimmickActorPartsInteractSetting) == 0x000050, "Wrong size on FSnfGimmickActorPartsInteractSetting");
static_assert(offsetof(FSnfGimmickActorPartsInteractSetting, InteractSetting) == 0x000000, "Member 'FSnfGimmickActorPartsInteractSetting::InteractSetting' has a wrong offset!");

// ScriptStruct Snowfall.SnfGimmickActorPartsComponent
// 0x0130 (0x0130 - 0x0000)
struct FSnfGimmickActorPartsComponent final
{
public:
	int32                                         MyPartsIndex;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USnfStaticMeshComponent*                MeshComponent;                                     // 0x0008(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PrevEnableInteractTag;                             // 0x0010(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FSnfPropsGimmickAnimationInfo          AnimationInfo;                                     // 0x0030(0x00B8)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AnimationCurve;                                    // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActivateAnimationDelay;                            // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InActivateAnimationDelay;                          // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationSpeed;                                    // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEaseAnimSpeed;                                 // 0x00FC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EaseMoveAnimSpeed;                                 // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EaseRotAnimSpeed;                                  // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EaseScaleAnimSpeed;                                // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   MoveAnimType;                                      // 0x010C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   RotAnimType;                                       // 0x010D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   ScaleAnimType;                                     // 0x010E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivated;                                        // 0x010F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationTimeMax;                                  // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveTimeMin;                                      // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveTimeMax;                                      // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EaseMoveAnimTimer;                                 // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EaseRotAnimTimer;                                  // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EaseScaleAnimTimer;                                // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGimmickActorPartsComponent) == 0x000008, "Wrong alignment on FSnfGimmickActorPartsComponent");
static_assert(sizeof(FSnfGimmickActorPartsComponent) == 0x000130, "Wrong size on FSnfGimmickActorPartsComponent");
static_assert(offsetof(FSnfGimmickActorPartsComponent, MyPartsIndex) == 0x000000, "Member 'FSnfGimmickActorPartsComponent::MyPartsIndex' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsComponent, MeshComponent) == 0x000008, "Member 'FSnfGimmickActorPartsComponent::MeshComponent' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsComponent, PrevEnableInteractTag) == 0x000010, "Member 'FSnfGimmickActorPartsComponent::PrevEnableInteractTag' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsComponent, AnimationInfo) == 0x000030, "Member 'FSnfGimmickActorPartsComponent::AnimationInfo' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsComponent, AnimationCurve) == 0x0000E8, "Member 'FSnfGimmickActorPartsComponent::AnimationCurve' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsComponent, ActivateAnimationDelay) == 0x0000F0, "Member 'FSnfGimmickActorPartsComponent::ActivateAnimationDelay' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsComponent, InActivateAnimationDelay) == 0x0000F4, "Member 'FSnfGimmickActorPartsComponent::InActivateAnimationDelay' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsComponent, AnimationSpeed) == 0x0000F8, "Member 'FSnfGimmickActorPartsComponent::AnimationSpeed' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsComponent, bUseEaseAnimSpeed) == 0x0000FC, "Member 'FSnfGimmickActorPartsComponent::bUseEaseAnimSpeed' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsComponent, EaseMoveAnimSpeed) == 0x000100, "Member 'FSnfGimmickActorPartsComponent::EaseMoveAnimSpeed' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsComponent, EaseRotAnimSpeed) == 0x000104, "Member 'FSnfGimmickActorPartsComponent::EaseRotAnimSpeed' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsComponent, EaseScaleAnimSpeed) == 0x000108, "Member 'FSnfGimmickActorPartsComponent::EaseScaleAnimSpeed' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsComponent, MoveAnimType) == 0x00010C, "Member 'FSnfGimmickActorPartsComponent::MoveAnimType' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsComponent, RotAnimType) == 0x00010D, "Member 'FSnfGimmickActorPartsComponent::RotAnimType' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsComponent, ScaleAnimType) == 0x00010E, "Member 'FSnfGimmickActorPartsComponent::ScaleAnimType' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsComponent, bActivated) == 0x00010F, "Member 'FSnfGimmickActorPartsComponent::bActivated' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsComponent, AnimationTimeMax) == 0x000110, "Member 'FSnfGimmickActorPartsComponent::AnimationTimeMax' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsComponent, CurveTimeMin) == 0x000114, "Member 'FSnfGimmickActorPartsComponent::CurveTimeMin' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsComponent, CurveTimeMax) == 0x000118, "Member 'FSnfGimmickActorPartsComponent::CurveTimeMax' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsComponent, EaseMoveAnimTimer) == 0x00011C, "Member 'FSnfGimmickActorPartsComponent::EaseMoveAnimTimer' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsComponent, EaseRotAnimTimer) == 0x000120, "Member 'FSnfGimmickActorPartsComponent::EaseRotAnimTimer' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorPartsComponent, EaseScaleAnimTimer) == 0x000124, "Member 'FSnfGimmickActorPartsComponent::EaseScaleAnimTimer' has a wrong offset!");

// ScriptStruct Snowfall.SnfGimmickActorInstancePartsSetting
// 0x00C0 (0x00C0 - 0x0000)
struct FSnfGimmickActorInstancePartsSetting final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UStaticMesh*                            PartsMesh;                                         // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  PartsMaterials;                                    // 0x0038(0x0050)(Edit, NativeAccessSpecifierPublic)
	bool                                          bCastShadow;                                       // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AttachPartsIndex;                                  // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SocketPartsIndex;                                  // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0094(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CollisionProfileName;                              // 0x009C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     Instances;                                         // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGimmickActorInstancePartsSetting) == 0x000010, "Wrong alignment on FSnfGimmickActorInstancePartsSetting");
static_assert(sizeof(FSnfGimmickActorInstancePartsSetting) == 0x0000C0, "Wrong size on FSnfGimmickActorInstancePartsSetting");
static_assert(offsetof(FSnfGimmickActorInstancePartsSetting, Transform) == 0x000000, "Member 'FSnfGimmickActorInstancePartsSetting::Transform' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInstancePartsSetting, PartsMesh) == 0x000030, "Member 'FSnfGimmickActorInstancePartsSetting::PartsMesh' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInstancePartsSetting, PartsMaterials) == 0x000038, "Member 'FSnfGimmickActorInstancePartsSetting::PartsMaterials' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInstancePartsSetting, bCastShadow) == 0x000088, "Member 'FSnfGimmickActorInstancePartsSetting::bCastShadow' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInstancePartsSetting, AttachPartsIndex) == 0x00008C, "Member 'FSnfGimmickActorInstancePartsSetting::AttachPartsIndex' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInstancePartsSetting, SocketPartsIndex) == 0x000090, "Member 'FSnfGimmickActorInstancePartsSetting::SocketPartsIndex' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInstancePartsSetting, SocketName) == 0x000094, "Member 'FSnfGimmickActorInstancePartsSetting::SocketName' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInstancePartsSetting, CollisionProfileName) == 0x00009C, "Member 'FSnfGimmickActorInstancePartsSetting::CollisionProfileName' has a wrong offset!");
static_assert(offsetof(FSnfGimmickActorInstancePartsSetting, Instances) == 0x0000A8, "Member 'FSnfGimmickActorInstancePartsSetting::Instances' has a wrong offset!");

// ScriptStruct Snowfall.SnfHBModelPeekParam
// 0x001C (0x001C - 0x0000)
struct FSnfHBModelPeekParam final
{
public:
	ESnfHBModelPeekType                           PeekType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PeekPos;                                           // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               PeekRot;                                           // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfHBModelPeekParam) == 0x000004, "Wrong alignment on FSnfHBModelPeekParam");
static_assert(sizeof(FSnfHBModelPeekParam) == 0x00001C, "Wrong size on FSnfHBModelPeekParam");
static_assert(offsetof(FSnfHBModelPeekParam, PeekType) == 0x000000, "Member 'FSnfHBModelPeekParam::PeekType' has a wrong offset!");
static_assert(offsetof(FSnfHBModelPeekParam, PeekPos) == 0x000004, "Member 'FSnfHBModelPeekParam::PeekPos' has a wrong offset!");
static_assert(offsetof(FSnfHBModelPeekParam, PeekRot) == 0x000010, "Member 'FSnfHBModelPeekParam::PeekRot' has a wrong offset!");

// ScriptStruct Snowfall.TitleMenuRow
// 0x0040 (0x0048 - 0x0008)
struct FTitleMenuRow final : public FTableRowBase
{
public:
	class FText                                   ItemText;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DescriptionText;                                   // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 Command;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTitleMenuRow) == 0x000008, "Wrong alignment on FTitleMenuRow");
static_assert(sizeof(FTitleMenuRow) == 0x000048, "Wrong size on FTitleMenuRow");
static_assert(offsetof(FTitleMenuRow, ItemText) == 0x000008, "Member 'FTitleMenuRow::ItemText' has a wrong offset!");
static_assert(offsetof(FTitleMenuRow, DescriptionText) == 0x000020, "Member 'FTitleMenuRow::DescriptionText' has a wrong offset!");
static_assert(offsetof(FTitleMenuRow, Command) == 0x000038, "Member 'FTitleMenuRow::Command' has a wrong offset!");

// ScriptStruct Snowfall.SnfHYCompanionDefineTable
// 0x00D0 (0x00D8 - 0x0008)
struct FSnfHYCompanionDefineTable final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USkeletalMesh>           MeshClass;                                         // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       MaterialClass;                                     // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       HairMaterialClass;                                 // 0x0058(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   EnemyClass;                                        // 0x0080(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SupplyTags;                                        // 0x00A8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FSnfHYCompanionSubMeshParam>    SubMeshClass;                                      // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfHYCompanionDefineTable) == 0x000008, "Wrong alignment on FSnfHYCompanionDefineTable");
static_assert(sizeof(FSnfHYCompanionDefineTable) == 0x0000D8, "Wrong size on FSnfHYCompanionDefineTable");
static_assert(offsetof(FSnfHYCompanionDefineTable, MeshClass) == 0x000008, "Member 'FSnfHYCompanionDefineTable::MeshClass' has a wrong offset!");
static_assert(offsetof(FSnfHYCompanionDefineTable, MaterialClass) == 0x000030, "Member 'FSnfHYCompanionDefineTable::MaterialClass' has a wrong offset!");
static_assert(offsetof(FSnfHYCompanionDefineTable, HairMaterialClass) == 0x000058, "Member 'FSnfHYCompanionDefineTable::HairMaterialClass' has a wrong offset!");
static_assert(offsetof(FSnfHYCompanionDefineTable, EnemyClass) == 0x000080, "Member 'FSnfHYCompanionDefineTable::EnemyClass' has a wrong offset!");
static_assert(offsetof(FSnfHYCompanionDefineTable, SupplyTags) == 0x0000A8, "Member 'FSnfHYCompanionDefineTable::SupplyTags' has a wrong offset!");
static_assert(offsetof(FSnfHYCompanionDefineTable, SubMeshClass) == 0x0000C8, "Member 'FSnfHYCompanionDefineTable::SubMeshClass' has a wrong offset!");

// ScriptStruct Snowfall.SnfHYAmmoMovedTraceParam
// 0x0018 (0x0018 - 0x0000)
struct FSnfHYAmmoMovedTraceParam final
{
public:
	struct FVector                                StartPos;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPos;                                            // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfHYAmmoMovedTraceParam) == 0x000004, "Wrong alignment on FSnfHYAmmoMovedTraceParam");
static_assert(sizeof(FSnfHYAmmoMovedTraceParam) == 0x000018, "Wrong size on FSnfHYAmmoMovedTraceParam");
static_assert(offsetof(FSnfHYAmmoMovedTraceParam, StartPos) == 0x000000, "Member 'FSnfHYAmmoMovedTraceParam::StartPos' has a wrong offset!");
static_assert(offsetof(FSnfHYAmmoMovedTraceParam, EndPos) == 0x00000C, "Member 'FSnfHYAmmoMovedTraceParam::EndPos' has a wrong offset!");

// ScriptStruct Snowfall.SnfSupplyRewardGhostData
// 0x0058 (0x0058 - 0x0000)
struct FSnfSupplyRewardGhostData final
{
public:
	class USnfGameSupplyData*                     SupplyData;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   GhostClass;                                        // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0030(0x0020)(Edit, NativeAccessSpecifierPublic)
	class USnfActorIni*                           SupplyIni;                                         // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfSupplyRewardGhostData) == 0x000008, "Wrong alignment on FSnfSupplyRewardGhostData");
static_assert(sizeof(FSnfSupplyRewardGhostData) == 0x000058, "Wrong size on FSnfSupplyRewardGhostData");
static_assert(offsetof(FSnfSupplyRewardGhostData, SupplyData) == 0x000000, "Member 'FSnfSupplyRewardGhostData::SupplyData' has a wrong offset!");
static_assert(offsetof(FSnfSupplyRewardGhostData, GhostClass) == 0x000008, "Member 'FSnfSupplyRewardGhostData::GhostClass' has a wrong offset!");
static_assert(offsetof(FSnfSupplyRewardGhostData, Tags) == 0x000030, "Member 'FSnfSupplyRewardGhostData::Tags' has a wrong offset!");
static_assert(offsetof(FSnfSupplyRewardGhostData, SupplyIni) == 0x000050, "Member 'FSnfSupplyRewardGhostData::SupplyIni' has a wrong offset!");

// ScriptStruct Snowfall.SnfHyakkiyakoEnemyJobInfo
// 0x0010 (0x0010 - 0x0000)
struct FSnfHyakkiyakoEnemyJobInfo final
{
public:
	class ASnfJobActor*                           JobActor;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   JobGroupTag;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfHyakkiyakoEnemyJobInfo) == 0x000008, "Wrong alignment on FSnfHyakkiyakoEnemyJobInfo");
static_assert(sizeof(FSnfHyakkiyakoEnemyJobInfo) == 0x000010, "Wrong size on FSnfHyakkiyakoEnemyJobInfo");
static_assert(offsetof(FSnfHyakkiyakoEnemyJobInfo, JobActor) == 0x000000, "Member 'FSnfHyakkiyakoEnemyJobInfo::JobActor' has a wrong offset!");
static_assert(offsetof(FSnfHyakkiyakoEnemyJobInfo, JobGroupTag) == 0x000008, "Member 'FSnfHyakkiyakoEnemyJobInfo::JobGroupTag' has a wrong offset!");

// ScriptStruct Snowfall.SnfInteractActorMultipleSetting
// 0x0080 (0x0080 - 0x0000)
struct FSnfInteractActorMultipleSetting final
{
public:
	bool                                          bMakeComponent;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        InteractRoot;                                      // 0x0008(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             InteractTransform;                                 // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSnfInteractActorMultipleCollisionSetting> InteractCollisionList;                             // 0x0040(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         RelationPartsIndex;                                // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RelationInteractList;                              // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideInteractDrawName;                         // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractName                                 InteractDrawName;                                  // 0x0069(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetInteractRange;                                 // 0x006A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B[0x1];                                       // 0x006B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InteractRange;                                     // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetSelfToSenderAngle;                             // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelfToSenderAngle;                                 // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetSelfToSenderSideAngle;                         // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelfToSenderSideAngle;                             // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfInteractActorMultipleSetting) == 0x000010, "Wrong alignment on FSnfInteractActorMultipleSetting");
static_assert(sizeof(FSnfInteractActorMultipleSetting) == 0x000080, "Wrong size on FSnfInteractActorMultipleSetting");
static_assert(offsetof(FSnfInteractActorMultipleSetting, bMakeComponent) == 0x000000, "Member 'FSnfInteractActorMultipleSetting::bMakeComponent' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleSetting, InteractRoot) == 0x000008, "Member 'FSnfInteractActorMultipleSetting::InteractRoot' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleSetting, InteractTransform) == 0x000010, "Member 'FSnfInteractActorMultipleSetting::InteractTransform' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleSetting, InteractCollisionList) == 0x000040, "Member 'FSnfInteractActorMultipleSetting::InteractCollisionList' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleSetting, RelationPartsIndex) == 0x000050, "Member 'FSnfInteractActorMultipleSetting::RelationPartsIndex' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleSetting, RelationInteractList) == 0x000058, "Member 'FSnfInteractActorMultipleSetting::RelationInteractList' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleSetting, bOverrideInteractDrawName) == 0x000068, "Member 'FSnfInteractActorMultipleSetting::bOverrideInteractDrawName' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleSetting, InteractDrawName) == 0x000069, "Member 'FSnfInteractActorMultipleSetting::InteractDrawName' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleSetting, bSetInteractRange) == 0x00006A, "Member 'FSnfInteractActorMultipleSetting::bSetInteractRange' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleSetting, InteractRange) == 0x00006C, "Member 'FSnfInteractActorMultipleSetting::InteractRange' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleSetting, bSetSelfToSenderAngle) == 0x000070, "Member 'FSnfInteractActorMultipleSetting::bSetSelfToSenderAngle' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleSetting, SelfToSenderAngle) == 0x000074, "Member 'FSnfInteractActorMultipleSetting::SelfToSenderAngle' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleSetting, bSetSelfToSenderSideAngle) == 0x000078, "Member 'FSnfInteractActorMultipleSetting::bSetSelfToSenderSideAngle' has a wrong offset!");
static_assert(offsetof(FSnfInteractActorMultipleSetting, SelfToSenderSideAngle) == 0x00007C, "Member 'FSnfInteractActorMultipleSetting::SelfToSenderSideAngle' has a wrong offset!");

// ScriptStruct Snowfall.SnfVendingMachineInteractSetting
// 0x0080 (0x0080 - 0x0000)
struct FSnfVendingMachineInteractSetting final
{
public:
	TArray<class UStaticMesh*>                    TargetMeshList;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTransform                             ShopInteractTransform;                             // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CollisionSize;                                     // 0x0040(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             AkTransform;                                       // 0x0050(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfVendingMachineInteractSetting) == 0x000010, "Wrong alignment on FSnfVendingMachineInteractSetting");
static_assert(sizeof(FSnfVendingMachineInteractSetting) == 0x000080, "Wrong size on FSnfVendingMachineInteractSetting");
static_assert(offsetof(FSnfVendingMachineInteractSetting, TargetMeshList) == 0x000000, "Member 'FSnfVendingMachineInteractSetting::TargetMeshList' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineInteractSetting, ShopInteractTransform) == 0x000010, "Member 'FSnfVendingMachineInteractSetting::ShopInteractTransform' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineInteractSetting, CollisionSize) == 0x000040, "Member 'FSnfVendingMachineInteractSetting::CollisionSize' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineInteractSetting, AkTransform) == 0x000050, "Member 'FSnfVendingMachineInteractSetting::AkTransform' has a wrong offset!");

// ScriptStruct Snowfall.SnfVendingMachineShopMeshSetting
// 0x00A8 (0x00A8 - 0x0000)
struct FSnfVendingMachineShopMeshSetting final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  DisableMaterials;                                  // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  EnableMaterials;                                   // 0x0058(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfVendingMachineShopMeshSetting) == 0x000008, "Wrong alignment on FSnfVendingMachineShopMeshSetting");
static_assert(sizeof(FSnfVendingMachineShopMeshSetting) == 0x0000A8, "Wrong size on FSnfVendingMachineShopMeshSetting");
static_assert(offsetof(FSnfVendingMachineShopMeshSetting, StaticMesh) == 0x000000, "Member 'FSnfVendingMachineShopMeshSetting::StaticMesh' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineShopMeshSetting, DisableMaterials) == 0x000008, "Member 'FSnfVendingMachineShopMeshSetting::DisableMaterials' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineShopMeshSetting, EnableMaterials) == 0x000058, "Member 'FSnfVendingMachineShopMeshSetting::EnableMaterials' has a wrong offset!");

// ScriptStruct Snowfall.SnfDrawIntaractTable
// 0x0078 (0x0080 - 0x0008)
struct FSnfDrawIntaractTable final : public FTableRowBase
{
public:
	class FText                                   DrawText;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EInteractName                                 Type;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Tag;                                               // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ID;                                                // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PopupId;                                           // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanBattle;                                         // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanTimer;                                          // 0x003D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanDensity;                                        // 0x003E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanSeparation;                                     // 0x003F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanTalk;                                           // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0048(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DevComment;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDrawIntaractTable) == 0x000008, "Wrong alignment on FSnfDrawIntaractTable");
static_assert(sizeof(FSnfDrawIntaractTable) == 0x000080, "Wrong size on FSnfDrawIntaractTable");
static_assert(offsetof(FSnfDrawIntaractTable, DrawText) == 0x000008, "Member 'FSnfDrawIntaractTable::DrawText' has a wrong offset!");
static_assert(offsetof(FSnfDrawIntaractTable, Type) == 0x000020, "Member 'FSnfDrawIntaractTable::Type' has a wrong offset!");
static_assert(offsetof(FSnfDrawIntaractTable, Tag) == 0x000024, "Member 'FSnfDrawIntaractTable::Tag' has a wrong offset!");
static_assert(offsetof(FSnfDrawIntaractTable, ID) == 0x00002C, "Member 'FSnfDrawIntaractTable::ID' has a wrong offset!");
static_assert(offsetof(FSnfDrawIntaractTable, PopupId) == 0x000034, "Member 'FSnfDrawIntaractTable::PopupId' has a wrong offset!");
static_assert(offsetof(FSnfDrawIntaractTable, CanBattle) == 0x00003C, "Member 'FSnfDrawIntaractTable::CanBattle' has a wrong offset!");
static_assert(offsetof(FSnfDrawIntaractTable, CanTimer) == 0x00003D, "Member 'FSnfDrawIntaractTable::CanTimer' has a wrong offset!");
static_assert(offsetof(FSnfDrawIntaractTable, CanDensity) == 0x00003E, "Member 'FSnfDrawIntaractTable::CanDensity' has a wrong offset!");
static_assert(offsetof(FSnfDrawIntaractTable, CanSeparation) == 0x00003F, "Member 'FSnfDrawIntaractTable::CanSeparation' has a wrong offset!");
static_assert(offsetof(FSnfDrawIntaractTable, CanTalk) == 0x000040, "Member 'FSnfDrawIntaractTable::CanTalk' has a wrong offset!");
static_assert(offsetof(FSnfDrawIntaractTable, Icon) == 0x000048, "Member 'FSnfDrawIntaractTable::Icon' has a wrong offset!");
static_assert(offsetof(FSnfDrawIntaractTable, DevComment) == 0x000070, "Member 'FSnfDrawIntaractTable::DevComment' has a wrong offset!");

// ScriptStruct Snowfall.SnfItemData
// 0x0050 (0x0058 - 0x0008)
struct FSnfItemData final : public FTableRowBase
{
public:
	TMap<class FName, class UAkAudioEvent*>       AkEventList;                                       // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfItemData) == 0x000008, "Wrong alignment on FSnfItemData");
static_assert(sizeof(FSnfItemData) == 0x000058, "Wrong size on FSnfItemData");
static_assert(offsetof(FSnfItemData, AkEventList) == 0x000008, "Member 'FSnfItemData::AkEventList' has a wrong offset!");

// ScriptStruct Snowfall.SnfHumanoidPartialAnim
// 0x0030 (0x0038 - 0x0008)
struct FSnfHumanoidPartialAnim final : public FTableRowBase
{
public:
	ESnfPartialAnimType                           AnimType;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimSequenceBase>       AnimSequence;                                      // 0x0010(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfHumanoidPartialAnim) == 0x000008, "Wrong alignment on FSnfHumanoidPartialAnim");
static_assert(sizeof(FSnfHumanoidPartialAnim) == 0x000038, "Wrong size on FSnfHumanoidPartialAnim");
static_assert(offsetof(FSnfHumanoidPartialAnim, AnimType) == 0x000008, "Member 'FSnfHumanoidPartialAnim::AnimType' has a wrong offset!");
static_assert(offsetof(FSnfHumanoidPartialAnim, AnimSequence) == 0x000010, "Member 'FSnfHumanoidPartialAnim::AnimSequence' has a wrong offset!");

// ScriptStruct Snowfall.SnfItemBoxMovablePartsSetting
// 0x0100 (0x0100 - 0x0000)
struct FSnfItemBoxMovablePartsSetting final
{
public:
	class UStaticMesh*                            PartsMesh;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  PartsMaterials;                                    // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
	class FName                                   CollisionProfileName;                              // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0060(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PartsTransform;                                    // 0x0070(0x0030)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             OpenedTransformOffset;                             // 0x00A0(0x0030)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EEasingFunc                                   AnimType;                                          // 0x00D0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimationSpeed;                                    // 0x00D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationDelay;                                    // 0x00D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AkPosition;                                        // 0x00DC(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SoundOpen;                                         // 0x00E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SoundClose;                                        // 0x00F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfItemBoxMovablePartsSetting) == 0x000010, "Wrong alignment on FSnfItemBoxMovablePartsSetting");
static_assert(sizeof(FSnfItemBoxMovablePartsSetting) == 0x000100, "Wrong size on FSnfItemBoxMovablePartsSetting");
static_assert(offsetof(FSnfItemBoxMovablePartsSetting, PartsMesh) == 0x000000, "Member 'FSnfItemBoxMovablePartsSetting::PartsMesh' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxMovablePartsSetting, PartsMaterials) == 0x000008, "Member 'FSnfItemBoxMovablePartsSetting::PartsMaterials' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxMovablePartsSetting, CollisionProfileName) == 0x000058, "Member 'FSnfItemBoxMovablePartsSetting::CollisionProfileName' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxMovablePartsSetting, SocketName) == 0x000060, "Member 'FSnfItemBoxMovablePartsSetting::SocketName' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxMovablePartsSetting, PartsTransform) == 0x000070, "Member 'FSnfItemBoxMovablePartsSetting::PartsTransform' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxMovablePartsSetting, OpenedTransformOffset) == 0x0000A0, "Member 'FSnfItemBoxMovablePartsSetting::OpenedTransformOffset' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxMovablePartsSetting, AnimType) == 0x0000D0, "Member 'FSnfItemBoxMovablePartsSetting::AnimType' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxMovablePartsSetting, AnimationSpeed) == 0x0000D4, "Member 'FSnfItemBoxMovablePartsSetting::AnimationSpeed' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxMovablePartsSetting, AnimationDelay) == 0x0000D8, "Member 'FSnfItemBoxMovablePartsSetting::AnimationDelay' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxMovablePartsSetting, AkPosition) == 0x0000DC, "Member 'FSnfItemBoxMovablePartsSetting::AkPosition' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxMovablePartsSetting, SoundOpen) == 0x0000E8, "Member 'FSnfItemBoxMovablePartsSetting::SoundOpen' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxMovablePartsSetting, SoundClose) == 0x0000F0, "Member 'FSnfItemBoxMovablePartsSetting::SoundClose' has a wrong offset!");

// ScriptStruct Snowfall.SnfItemBoxPartsSetting
// 0x00A0 (0x00A0 - 0x0000)
struct FSnfItemBoxPartsSetting final
{
public:
	class UStaticMesh*                            PartsMesh;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  PartsMaterials;                                    // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
	class FName                                   CollisionProfileName;                              // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             PartsTransform;                                    // 0x0060(0x0030)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0090(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfItemBoxPartsSetting) == 0x000010, "Wrong alignment on FSnfItemBoxPartsSetting");
static_assert(sizeof(FSnfItemBoxPartsSetting) == 0x0000A0, "Wrong size on FSnfItemBoxPartsSetting");
static_assert(offsetof(FSnfItemBoxPartsSetting, PartsMesh) == 0x000000, "Member 'FSnfItemBoxPartsSetting::PartsMesh' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxPartsSetting, PartsMaterials) == 0x000008, "Member 'FSnfItemBoxPartsSetting::PartsMaterials' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxPartsSetting, CollisionProfileName) == 0x000058, "Member 'FSnfItemBoxPartsSetting::CollisionProfileName' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxPartsSetting, PartsTransform) == 0x000060, "Member 'FSnfItemBoxPartsSetting::PartsTransform' has a wrong offset!");
static_assert(offsetof(FSnfItemBoxPartsSetting, SocketName) == 0x000090, "Member 'FSnfItemBoxPartsSetting::SocketName' has a wrong offset!");

// ScriptStruct Snowfall.ItemOfudaBoxRandomItemListSetting
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FItemOfudaBoxRandomItemListSetting final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemOfudaBoxRandomItemListSetting) == 0x000008, "Wrong alignment on FItemOfudaBoxRandomItemListSetting");
static_assert(sizeof(FItemOfudaBoxRandomItemListSetting) == 0x000018, "Wrong size on FItemOfudaBoxRandomItemListSetting");

// ScriptStruct Snowfall.ItemOfudaBoxRandomItemSetting
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FItemOfudaBoxRandomItemSetting final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemOfudaBoxRandomItemSetting) == 0x000008, "Wrong alignment on FItemOfudaBoxRandomItemSetting");
static_assert(sizeof(FItemOfudaBoxRandomItemSetting) == 0x000038, "Wrong size on FItemOfudaBoxRandomItemSetting");

// ScriptStruct Snowfall.ItemPickupBaseRandomItemListSetting
// 0x0018 (0x0018 - 0x0000)
struct FItemPickupBaseRandomItemListSetting final
{
public:
	TArray<struct FItemPickupBaseRandomItemSetting> RandomItem;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RandomValue;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemPickupBaseRandomItemListSetting) == 0x000008, "Wrong alignment on FItemPickupBaseRandomItemListSetting");
static_assert(sizeof(FItemPickupBaseRandomItemListSetting) == 0x000018, "Wrong size on FItemPickupBaseRandomItemListSetting");
static_assert(offsetof(FItemPickupBaseRandomItemListSetting, RandomItem) == 0x000000, "Member 'FItemPickupBaseRandomItemListSetting::RandomItem' has a wrong offset!");
static_assert(offsetof(FItemPickupBaseRandomItemListSetting, RandomValue) == 0x000010, "Member 'FItemPickupBaseRandomItemListSetting::RandomValue' has a wrong offset!");

// ScriptStruct Snowfall.SnfItemPickupBaseLinkGimmickSetting
// 0x0010 (0x0010 - 0x0000)
struct FSnfItemPickupBaseLinkGimmickSetting final
{
public:
	TWeakObjectPtr<class ASnfGimmickActorBase>    TargetGimmick;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartsIndex;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivated;                                        // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfItemPickupBaseLinkGimmickSetting) == 0x000004, "Wrong alignment on FSnfItemPickupBaseLinkGimmickSetting");
static_assert(sizeof(FSnfItemPickupBaseLinkGimmickSetting) == 0x000010, "Wrong size on FSnfItemPickupBaseLinkGimmickSetting");
static_assert(offsetof(FSnfItemPickupBaseLinkGimmickSetting, TargetGimmick) == 0x000000, "Member 'FSnfItemPickupBaseLinkGimmickSetting::TargetGimmick' has a wrong offset!");
static_assert(offsetof(FSnfItemPickupBaseLinkGimmickSetting, PartsIndex) == 0x000008, "Member 'FSnfItemPickupBaseLinkGimmickSetting::PartsIndex' has a wrong offset!");
static_assert(offsetof(FSnfItemPickupBaseLinkGimmickSetting, bActivated) == 0x00000C, "Member 'FSnfItemPickupBaseLinkGimmickSetting::bActivated' has a wrong offset!");

// ScriptStruct Snowfall.SnfItemPickupBaseFXKey
// 0x0010 (0x0010 - 0x0000)
struct FSnfItemPickupBaseFXKey final
{
public:
	class FName                                   PlayListKey;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfItemPickupBaseFXKey) == 0x000004, "Wrong alignment on FSnfItemPickupBaseFXKey");
static_assert(sizeof(FSnfItemPickupBaseFXKey) == 0x000010, "Wrong size on FSnfItemPickupBaseFXKey");
static_assert(offsetof(FSnfItemPickupBaseFXKey, PlayListKey) == 0x000000, "Member 'FSnfItemPickupBaseFXKey::PlayListKey' has a wrong offset!");
static_assert(offsetof(FSnfItemPickupBaseFXKey, Delay) == 0x000008, "Member 'FSnfItemPickupBaseFXKey::Delay' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkShopSpawnEtherInfo
// 0x0028 (0x0028 - 0x0000)
struct FSnfTalkShopSpawnEtherInfo final
{
public:
	struct FBox                                   SpawnRange;                                        // 0x0000(0x001C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                SpawnBoxExtent;                                    // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalkShopSpawnEtherInfo) == 0x000004, "Wrong alignment on FSnfTalkShopSpawnEtherInfo");
static_assert(sizeof(FSnfTalkShopSpawnEtherInfo) == 0x000028, "Wrong size on FSnfTalkShopSpawnEtherInfo");
static_assert(offsetof(FSnfTalkShopSpawnEtherInfo, SpawnRange) == 0x000000, "Member 'FSnfTalkShopSpawnEtherInfo::SpawnRange' has a wrong offset!");
static_assert(offsetof(FSnfTalkShopSpawnEtherInfo, SpawnBoxExtent) == 0x00001C, "Member 'FSnfTalkShopSpawnEtherInfo::SpawnBoxExtent' has a wrong offset!");

// ScriptStruct Snowfall.SnfItemPickupBaseAdPropSetting
// 0x0090 (0x0090 - 0x0000)
struct FSnfItemPickupBaseAdPropSetting final
{
public:
	bool                                          bIsAutoDelete;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            AdPropMesh;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  Materials;                                         // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0060(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfItemPickupBaseAdPropSetting) == 0x000010, "Wrong alignment on FSnfItemPickupBaseAdPropSetting");
static_assert(sizeof(FSnfItemPickupBaseAdPropSetting) == 0x000090, "Wrong size on FSnfItemPickupBaseAdPropSetting");
static_assert(offsetof(FSnfItemPickupBaseAdPropSetting, bIsAutoDelete) == 0x000000, "Member 'FSnfItemPickupBaseAdPropSetting::bIsAutoDelete' has a wrong offset!");
static_assert(offsetof(FSnfItemPickupBaseAdPropSetting, AdPropMesh) == 0x000008, "Member 'FSnfItemPickupBaseAdPropSetting::AdPropMesh' has a wrong offset!");
static_assert(offsetof(FSnfItemPickupBaseAdPropSetting, Materials) == 0x000010, "Member 'FSnfItemPickupBaseAdPropSetting::Materials' has a wrong offset!");
static_assert(offsetof(FSnfItemPickupBaseAdPropSetting, Transform) == 0x000060, "Member 'FSnfItemPickupBaseAdPropSetting::Transform' has a wrong offset!");

// ScriptStruct Snowfall.SnfJizoActorMaterialSetting
// 0x00B8 (0x00B8 - 0x0000)
struct FSnfJizoActorMaterialSetting final
{
public:
	TArray<class FName>                           TargetRewardList;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   PlayListName;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  HeadMaterials;                                     // 0x0018(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  BodyMaterials;                                     // 0x0068(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfJizoActorMaterialSetting) == 0x000008, "Wrong alignment on FSnfJizoActorMaterialSetting");
static_assert(sizeof(FSnfJizoActorMaterialSetting) == 0x0000B8, "Wrong size on FSnfJizoActorMaterialSetting");
static_assert(offsetof(FSnfJizoActorMaterialSetting, TargetRewardList) == 0x000000, "Member 'FSnfJizoActorMaterialSetting::TargetRewardList' has a wrong offset!");
static_assert(offsetof(FSnfJizoActorMaterialSetting, PlayListName) == 0x000010, "Member 'FSnfJizoActorMaterialSetting::PlayListName' has a wrong offset!");
static_assert(offsetof(FSnfJizoActorMaterialSetting, HeadMaterials) == 0x000018, "Member 'FSnfJizoActorMaterialSetting::HeadMaterials' has a wrong offset!");
static_assert(offsetof(FSnfJizoActorMaterialSetting, BodyMaterials) == 0x000068, "Member 'FSnfJizoActorMaterialSetting::BodyMaterials' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogJob
// 0x0000 (0x0120 - 0x0120)
struct FSnfCatalogJob final : public FSnfCatalogItem
{
};
static_assert(alignof(FSnfCatalogJob) == 0x000008, "Wrong alignment on FSnfCatalogJob");
static_assert(sizeof(FSnfCatalogJob) == 0x000120, "Wrong size on FSnfCatalogJob");

// ScriptStruct Snowfall.SnfAutoTalkInterval
// 0x0010 (0x0010 - 0x0000)
struct FSnfAutoTalkInterval final
{
public:
	float                                         StartWaitTimeMin;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartWaitTimeMax;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalTimeMin;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalTimeMax;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAutoTalkInterval) == 0x000004, "Wrong alignment on FSnfAutoTalkInterval");
static_assert(sizeof(FSnfAutoTalkInterval) == 0x000010, "Wrong size on FSnfAutoTalkInterval");
static_assert(offsetof(FSnfAutoTalkInterval, StartWaitTimeMin) == 0x000000, "Member 'FSnfAutoTalkInterval::StartWaitTimeMin' has a wrong offset!");
static_assert(offsetof(FSnfAutoTalkInterval, StartWaitTimeMax) == 0x000004, "Member 'FSnfAutoTalkInterval::StartWaitTimeMax' has a wrong offset!");
static_assert(offsetof(FSnfAutoTalkInterval, IntervalTimeMin) == 0x000008, "Member 'FSnfAutoTalkInterval::IntervalTimeMin' has a wrong offset!");
static_assert(offsetof(FSnfAutoTalkInterval, IntervalTimeMax) == 0x00000C, "Member 'FSnfAutoTalkInterval::IntervalTimeMax' has a wrong offset!");

// ScriptStruct Snowfall.SnfPeopleAttachment
// 0x0090 (0x0090 - 0x0000)
struct FSnfPeopleAttachment final
{
public:
	bool                                          bIsHidden;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSkeletalMesh;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             StaticMesh;                                        // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMesh;                                      // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             RelativeTransform;                                 // 0x0060(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPeopleAttachment) == 0x000010, "Wrong alignment on FSnfPeopleAttachment");
static_assert(sizeof(FSnfPeopleAttachment) == 0x000090, "Wrong size on FSnfPeopleAttachment");
static_assert(offsetof(FSnfPeopleAttachment, bIsHidden) == 0x000000, "Member 'FSnfPeopleAttachment::bIsHidden' has a wrong offset!");
static_assert(offsetof(FSnfPeopleAttachment, bUseSkeletalMesh) == 0x000001, "Member 'FSnfPeopleAttachment::bUseSkeletalMesh' has a wrong offset!");
static_assert(offsetof(FSnfPeopleAttachment, StaticMesh) == 0x000008, "Member 'FSnfPeopleAttachment::StaticMesh' has a wrong offset!");
static_assert(offsetof(FSnfPeopleAttachment, SkeletalMesh) == 0x000030, "Member 'FSnfPeopleAttachment::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FSnfPeopleAttachment, SocketName) == 0x000058, "Member 'FSnfPeopleAttachment::SocketName' has a wrong offset!");
static_assert(offsetof(FSnfPeopleAttachment, RelativeTransform) == 0x000060, "Member 'FSnfPeopleAttachment::RelativeTransform' has a wrong offset!");

// ScriptStruct Snowfall.SnfKekkaiActorKekkaiSetting
// 0x0050 (0x0050 - 0x0000)
struct FSnfKekkaiActorKekkaiSetting final
{
public:
	TMap<ESnfKekkaiShapeType, struct FSnfKekkaiActorFXSetting> KekkaiSettingList;                                 // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfKekkaiActorKekkaiSetting) == 0x000008, "Wrong alignment on FSnfKekkaiActorKekkaiSetting");
static_assert(sizeof(FSnfKekkaiActorKekkaiSetting) == 0x000050, "Wrong size on FSnfKekkaiActorKekkaiSetting");
static_assert(offsetof(FSnfKekkaiActorKekkaiSetting, KekkaiSettingList) == 0x000000, "Member 'FSnfKekkaiActorKekkaiSetting::KekkaiSettingList' has a wrong offset!");

// ScriptStruct Snowfall.SnfAnimalAttachment
// 0x0040 (0x0040 - 0x0000)
struct FSnfAnimalAttachment final
{
public:
	TSoftObjectPtr<class USkeletalMesh>           BaseMesh;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USnfCcParamDataAsset>> CcParams;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TSubclassOf<class ASnfFXPropsActor>           FXPropClass;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAnimalAttachment) == 0x000008, "Wrong alignment on FSnfAnimalAttachment");
static_assert(sizeof(FSnfAnimalAttachment) == 0x000040, "Wrong size on FSnfAnimalAttachment");
static_assert(offsetof(FSnfAnimalAttachment, BaseMesh) == 0x000000, "Member 'FSnfAnimalAttachment::BaseMesh' has a wrong offset!");
static_assert(offsetof(FSnfAnimalAttachment, CcParams) == 0x000028, "Member 'FSnfAnimalAttachment::CcParams' has a wrong offset!");
static_assert(offsetof(FSnfAnimalAttachment, FXPropClass) == 0x000038, "Member 'FSnfAnimalAttachment::FXPropClass' has a wrong offset!");

// ScriptStruct Snowfall.SnfKoomotePathIndex
// 0x0010 (0x0018 - 0x0008)
struct FSnfKoomotePathIndex final : public FTableRowBase
{
public:
	TArray<int32>                                 Index;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfKoomotePathIndex) == 0x000008, "Wrong alignment on FSnfKoomotePathIndex");
static_assert(sizeof(FSnfKoomotePathIndex) == 0x000018, "Wrong size on FSnfKoomotePathIndex");
static_assert(offsetof(FSnfKoomotePathIndex, Index) == 0x000008, "Member 'FSnfKoomotePathIndex::Index' has a wrong offset!");

// ScriptStruct Snowfall.SlateVertexBP
// 0x0030 (0x0030 - 0x0000)
struct FSlateVertexBP final
{
public:
	struct FVector4                               TexCoords;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MaterialTexCoords;                                 // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Position;                                          // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PixelWidth;                                        // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PixelHeight;                                       // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlateVertexBP) == 0x000010, "Wrong alignment on FSlateVertexBP");
static_assert(sizeof(FSlateVertexBP) == 0x000030, "Wrong size on FSlateVertexBP");
static_assert(offsetof(FSlateVertexBP, TexCoords) == 0x000000, "Member 'FSlateVertexBP::TexCoords' has a wrong offset!");
static_assert(offsetof(FSlateVertexBP, MaterialTexCoords) == 0x000010, "Member 'FSlateVertexBP::MaterialTexCoords' has a wrong offset!");
static_assert(offsetof(FSlateVertexBP, Position) == 0x000018, "Member 'FSlateVertexBP::Position' has a wrong offset!");
static_assert(offsetof(FSlateVertexBP, Color) == 0x000020, "Member 'FSlateVertexBP::Color' has a wrong offset!");
static_assert(offsetof(FSlateVertexBP, PixelWidth) == 0x000024, "Member 'FSlateVertexBP::PixelWidth' has a wrong offset!");
static_assert(offsetof(FSlateVertexBP, PixelHeight) == 0x000028, "Member 'FSlateVertexBP::PixelHeight' has a wrong offset!");

// ScriptStruct Snowfall.CollectSearchEndlessData
// 0x00A8 (0x00A8 - 0x0000)
struct FCollectSearchEndlessData final
{
public:
	class UDataTable*                             PresetTable;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             FloorTable;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             TokenTable;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             SkillTable;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             RosaryTable;                                       // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             TaskTable;                                         // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             ObjectiveTable;                                    // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             WikiCharacterTable;                                // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnfGameSupplyData*                     SupplyAutoData;                                    // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             OutputInfoTable;                                   // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             OutputLogTable;                                    // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGameplayTagContainer> EnemyList;                                         // 0x0058(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCollectSearchEndlessData) == 0x000008, "Wrong alignment on FCollectSearchEndlessData");
static_assert(sizeof(FCollectSearchEndlessData) == 0x0000A8, "Wrong size on FCollectSearchEndlessData");
static_assert(offsetof(FCollectSearchEndlessData, PresetTable) == 0x000000, "Member 'FCollectSearchEndlessData::PresetTable' has a wrong offset!");
static_assert(offsetof(FCollectSearchEndlessData, FloorTable) == 0x000008, "Member 'FCollectSearchEndlessData::FloorTable' has a wrong offset!");
static_assert(offsetof(FCollectSearchEndlessData, TokenTable) == 0x000010, "Member 'FCollectSearchEndlessData::TokenTable' has a wrong offset!");
static_assert(offsetof(FCollectSearchEndlessData, SkillTable) == 0x000018, "Member 'FCollectSearchEndlessData::SkillTable' has a wrong offset!");
static_assert(offsetof(FCollectSearchEndlessData, RosaryTable) == 0x000020, "Member 'FCollectSearchEndlessData::RosaryTable' has a wrong offset!");
static_assert(offsetof(FCollectSearchEndlessData, TaskTable) == 0x000028, "Member 'FCollectSearchEndlessData::TaskTable' has a wrong offset!");
static_assert(offsetof(FCollectSearchEndlessData, ObjectiveTable) == 0x000030, "Member 'FCollectSearchEndlessData::ObjectiveTable' has a wrong offset!");
static_assert(offsetof(FCollectSearchEndlessData, WikiCharacterTable) == 0x000038, "Member 'FCollectSearchEndlessData::WikiCharacterTable' has a wrong offset!");
static_assert(offsetof(FCollectSearchEndlessData, SupplyAutoData) == 0x000040, "Member 'FCollectSearchEndlessData::SupplyAutoData' has a wrong offset!");
static_assert(offsetof(FCollectSearchEndlessData, OutputInfoTable) == 0x000048, "Member 'FCollectSearchEndlessData::OutputInfoTable' has a wrong offset!");
static_assert(offsetof(FCollectSearchEndlessData, OutputLogTable) == 0x000050, "Member 'FCollectSearchEndlessData::OutputLogTable' has a wrong offset!");
static_assert(offsetof(FCollectSearchEndlessData, EnemyList) == 0x000058, "Member 'FCollectSearchEndlessData::EnemyList' has a wrong offset!");

// ScriptStruct Snowfall.CollectSearchData
// 0x0070 (0x0070 - 0x0000)
struct FCollectSearchData final
{
public:
	bool                                          IsClear;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUpdateYurei;                                     // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SearchId;                                          // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             _MapDataTable;                                     // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             _JobDataTable;                                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             _DebugDataTable;                                   // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             _DensityDataTable;                                 // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             _BuddyDataTable;                                   // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             CatalogActivity;                                   // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             CatalogCollection;                                 // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             CatalogShrine;                                     // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             FacadeTable;                                       // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             AreaTable;                                         // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             _OldMapDataTable;                                  // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             _OldDebugDataTable;                                // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCollectSearchData) == 0x000008, "Wrong alignment on FCollectSearchData");
static_assert(sizeof(FCollectSearchData) == 0x000070, "Wrong size on FCollectSearchData");
static_assert(offsetof(FCollectSearchData, IsClear) == 0x000000, "Member 'FCollectSearchData::IsClear' has a wrong offset!");
static_assert(offsetof(FCollectSearchData, IsUpdateYurei) == 0x000001, "Member 'FCollectSearchData::IsUpdateYurei' has a wrong offset!");
static_assert(offsetof(FCollectSearchData, SearchId) == 0x000004, "Member 'FCollectSearchData::SearchId' has a wrong offset!");
static_assert(offsetof(FCollectSearchData, _MapDataTable) == 0x000010, "Member 'FCollectSearchData::_MapDataTable' has a wrong offset!");
static_assert(offsetof(FCollectSearchData, _JobDataTable) == 0x000018, "Member 'FCollectSearchData::_JobDataTable' has a wrong offset!");
static_assert(offsetof(FCollectSearchData, _DebugDataTable) == 0x000020, "Member 'FCollectSearchData::_DebugDataTable' has a wrong offset!");
static_assert(offsetof(FCollectSearchData, _DensityDataTable) == 0x000028, "Member 'FCollectSearchData::_DensityDataTable' has a wrong offset!");
static_assert(offsetof(FCollectSearchData, _BuddyDataTable) == 0x000030, "Member 'FCollectSearchData::_BuddyDataTable' has a wrong offset!");
static_assert(offsetof(FCollectSearchData, CatalogActivity) == 0x000038, "Member 'FCollectSearchData::CatalogActivity' has a wrong offset!");
static_assert(offsetof(FCollectSearchData, CatalogCollection) == 0x000040, "Member 'FCollectSearchData::CatalogCollection' has a wrong offset!");
static_assert(offsetof(FCollectSearchData, CatalogShrine) == 0x000048, "Member 'FCollectSearchData::CatalogShrine' has a wrong offset!");
static_assert(offsetof(FCollectSearchData, FacadeTable) == 0x000050, "Member 'FCollectSearchData::FacadeTable' has a wrong offset!");
static_assert(offsetof(FCollectSearchData, AreaTable) == 0x000058, "Member 'FCollectSearchData::AreaTable' has a wrong offset!");
static_assert(offsetof(FCollectSearchData, _OldMapDataTable) == 0x000060, "Member 'FCollectSearchData::_OldMapDataTable' has a wrong offset!");
static_assert(offsetof(FCollectSearchData, _OldDebugDataTable) == 0x000068, "Member 'FCollectSearchData::_OldDebugDataTable' has a wrong offset!");

// ScriptStruct Snowfall.SnfSequenceFadeParameter
// 0x0014 (0x0014 - 0x0000)
struct FSnfSequenceFadeParameter final
{
public:
	ESequenceFadeType                             Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 FadeColor;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutWaitTime;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfSequenceFadeParameter) == 0x000004, "Wrong alignment on FSnfSequenceFadeParameter");
static_assert(sizeof(FSnfSequenceFadeParameter) == 0x000014, "Wrong size on FSnfSequenceFadeParameter");
static_assert(offsetof(FSnfSequenceFadeParameter, Type) == 0x000000, "Member 'FSnfSequenceFadeParameter::Type' has a wrong offset!");
static_assert(offsetof(FSnfSequenceFadeParameter, FadeColor) == 0x000004, "Member 'FSnfSequenceFadeParameter::FadeColor' has a wrong offset!");
static_assert(offsetof(FSnfSequenceFadeParameter, FadeOutTime) == 0x000008, "Member 'FSnfSequenceFadeParameter::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FSnfSequenceFadeParameter, FadeOutWaitTime) == 0x00000C, "Member 'FSnfSequenceFadeParameter::FadeOutWaitTime' has a wrong offset!");
static_assert(offsetof(FSnfSequenceFadeParameter, FadeInTime) == 0x000010, "Member 'FSnfSequenceFadeParameter::FadeInTime' has a wrong offset!");

// ScriptStruct Snowfall.SnfSequenceCollectInfo
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FSnfSequenceCollectInfo final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfSequenceCollectInfo) == 0x000004, "Wrong alignment on FSnfSequenceCollectInfo");
static_assert(sizeof(FSnfSequenceCollectInfo) == 0x00000C, "Wrong size on FSnfSequenceCollectInfo");

// ScriptStruct Snowfall.SnfRosaryInfo
// 0x0080 (0x0088 - 0x0008)
struct FSnfRosaryInfo final : public FTableRowBase
{
public:
	class FName                                   CatalogId;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfRosaryType                                Type;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfRosaryType                                Source;                                            // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfRosaryType                                Up;                                                // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ModelId;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Model2Id;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ESnfSkillParam, float>                   Param;                                             // 0x0020(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   Comment;                                           // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfRosaryInfo) == 0x000008, "Wrong alignment on FSnfRosaryInfo");
static_assert(sizeof(FSnfRosaryInfo) == 0x000088, "Wrong size on FSnfRosaryInfo");
static_assert(offsetof(FSnfRosaryInfo, CatalogId) == 0x000008, "Member 'FSnfRosaryInfo::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfRosaryInfo, Type) == 0x000010, "Member 'FSnfRosaryInfo::Type' has a wrong offset!");
static_assert(offsetof(FSnfRosaryInfo, Source) == 0x000011, "Member 'FSnfRosaryInfo::Source' has a wrong offset!");
static_assert(offsetof(FSnfRosaryInfo, Up) == 0x000012, "Member 'FSnfRosaryInfo::Up' has a wrong offset!");
static_assert(offsetof(FSnfRosaryInfo, ModelId) == 0x000014, "Member 'FSnfRosaryInfo::ModelId' has a wrong offset!");
static_assert(offsetof(FSnfRosaryInfo, Model2Id) == 0x000018, "Member 'FSnfRosaryInfo::Model2Id' has a wrong offset!");
static_assert(offsetof(FSnfRosaryInfo, Level) == 0x00001C, "Member 'FSnfRosaryInfo::Level' has a wrong offset!");
static_assert(offsetof(FSnfRosaryInfo, Param) == 0x000020, "Member 'FSnfRosaryInfo::Param' has a wrong offset!");
static_assert(offsetof(FSnfRosaryInfo, Tags) == 0x000070, "Member 'FSnfRosaryInfo::Tags' has a wrong offset!");
static_assert(offsetof(FSnfRosaryInfo, Comment) == 0x000080, "Member 'FSnfRosaryInfo::Comment' has a wrong offset!");

// ScriptStruct Snowfall.SnfAdjustInfo
// 0x0020 (0x0020 - 0x0000)
struct FSnfAdjustInfo final
{
public:
	TWeakObjectPtr<class AActor>                  Target;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAdjustInfo) == 0x000004, "Wrong alignment on FSnfAdjustInfo");
static_assert(sizeof(FSnfAdjustInfo) == 0x000020, "Wrong size on FSnfAdjustInfo");
static_assert(offsetof(FSnfAdjustInfo, Target) == 0x000000, "Member 'FSnfAdjustInfo::Target' has a wrong offset!");
static_assert(offsetof(FSnfAdjustInfo, Location) == 0x000008, "Member 'FSnfAdjustInfo::Location' has a wrong offset!");
static_assert(offsetof(FSnfAdjustInfo, Rotation) == 0x000014, "Member 'FSnfAdjustInfo::Rotation' has a wrong offset!");

// ScriptStruct Snowfall.SnfLevelSequenceBindInfo
// 0x0040 (0x0040 - 0x0000)
struct FSnfLevelSequenceBindInfo final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x38];                                       // 0x0008(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfLevelSequenceBindInfo) == 0x000008, "Wrong alignment on FSnfLevelSequenceBindInfo");
static_assert(sizeof(FSnfLevelSequenceBindInfo) == 0x000040, "Wrong size on FSnfLevelSequenceBindInfo");
static_assert(offsetof(FSnfLevelSequenceBindInfo, Actor) == 0x000000, "Member 'FSnfLevelSequenceBindInfo::Actor' has a wrong offset!");

// ScriptStruct Snowfall.SnfLevelSequenceBindParam
// 0x0048 (0x0048 - 0x0000)
struct FSnfLevelSequenceBindParam final
{
public:
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  SoftActor;                                         // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfActorBindingMethod                        BindMethod;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetTrackName;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfLevelSequenceBindParam) == 0x000008, "Wrong alignment on FSnfLevelSequenceBindParam");
static_assert(sizeof(FSnfLevelSequenceBindParam) == 0x000048, "Wrong size on FSnfLevelSequenceBindParam");
static_assert(offsetof(FSnfLevelSequenceBindParam, Actor) == 0x000000, "Member 'FSnfLevelSequenceBindParam::Actor' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceBindParam, SoftActor) == 0x000008, "Member 'FSnfLevelSequenceBindParam::SoftActor' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceBindParam, BindMethod) == 0x000030, "Member 'FSnfLevelSequenceBindParam::BindMethod' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceBindParam, TargetTrackName) == 0x000038, "Member 'FSnfLevelSequenceBindParam::TargetTrackName' has a wrong offset!");

// ScriptStruct Snowfall.SnfLevelSequenceBindParameter
// 0x0018 (0x0018 - 0x0000)
struct FSnfLevelSequenceBindParameter final
{
public:
	class FName                                   TrackName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorName;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfLevelSequenceBindParameter) == 0x000008, "Wrong alignment on FSnfLevelSequenceBindParameter");
static_assert(sizeof(FSnfLevelSequenceBindParameter) == 0x000018, "Wrong size on FSnfLevelSequenceBindParameter");
static_assert(offsetof(FSnfLevelSequenceBindParameter, TrackName) == 0x000000, "Member 'FSnfLevelSequenceBindParameter::TrackName' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceBindParameter, ActorName) == 0x000008, "Member 'FSnfLevelSequenceBindParameter::ActorName' has a wrong offset!");

// ScriptStruct Snowfall.SnfLevelSequenceBindActorInfoRow
// 0x0010 (0x0018 - 0x0008)
struct FSnfLevelSequenceBindActorInfoRow final : public FTableRowBase
{
public:
	TArray<struct FSnfLevelSequenceBindParameter> Params;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfLevelSequenceBindActorInfoRow) == 0x000008, "Wrong alignment on FSnfLevelSequenceBindActorInfoRow");
static_assert(sizeof(FSnfLevelSequenceBindActorInfoRow) == 0x000018, "Wrong size on FSnfLevelSequenceBindActorInfoRow");
static_assert(offsetof(FSnfLevelSequenceBindActorInfoRow, Params) == 0x000008, "Member 'FSnfLevelSequenceBindActorInfoRow::Params' has a wrong offset!");

// ScriptStruct Snowfall.SnfSaveGameDataTextsSony
// 0x00A8 (0x00A8 - 0x0000)
struct FSnfSaveGameDataTextsSony final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ProfileSubtitle;                                   // 0x0018(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ProfileDescription;                                // 0x0030(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   SaveGameSubtitle;                                  // 0x0048(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   SaveGameDescription;                               // 0x0060(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   AutoSaveGameSubtitle;                              // 0x0078(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   EndlessGameSaveGameSubtitle;                       // 0x0090(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfSaveGameDataTextsSony) == 0x000008, "Wrong alignment on FSnfSaveGameDataTextsSony");
static_assert(sizeof(FSnfSaveGameDataTextsSony) == 0x0000A8, "Wrong size on FSnfSaveGameDataTextsSony");
static_assert(offsetof(FSnfSaveGameDataTextsSony, Title) == 0x000000, "Member 'FSnfSaveGameDataTextsSony::Title' has a wrong offset!");
static_assert(offsetof(FSnfSaveGameDataTextsSony, ProfileSubtitle) == 0x000018, "Member 'FSnfSaveGameDataTextsSony::ProfileSubtitle' has a wrong offset!");
static_assert(offsetof(FSnfSaveGameDataTextsSony, ProfileDescription) == 0x000030, "Member 'FSnfSaveGameDataTextsSony::ProfileDescription' has a wrong offset!");
static_assert(offsetof(FSnfSaveGameDataTextsSony, SaveGameSubtitle) == 0x000048, "Member 'FSnfSaveGameDataTextsSony::SaveGameSubtitle' has a wrong offset!");
static_assert(offsetof(FSnfSaveGameDataTextsSony, SaveGameDescription) == 0x000060, "Member 'FSnfSaveGameDataTextsSony::SaveGameDescription' has a wrong offset!");
static_assert(offsetof(FSnfSaveGameDataTextsSony, AutoSaveGameSubtitle) == 0x000078, "Member 'FSnfSaveGameDataTextsSony::AutoSaveGameSubtitle' has a wrong offset!");
static_assert(offsetof(FSnfSaveGameDataTextsSony, EndlessGameSaveGameSubtitle) == 0x000090, "Member 'FSnfSaveGameDataTextsSony::EndlessGameSaveGameSubtitle' has a wrong offset!");

// ScriptStruct Snowfall.SnfLevelSequenceSettingInfo
// 0x0068 (0x0070 - 0x0008)
struct FSnfLevelSequenceSettingInfo final : public FTableRowBase
{
public:
	bool                                          bInGamePlayerLocation;                             // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlayerLocation;                                    // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlayerLocationInGame;                              // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SnfPlayerCinema_NormalCostume;                     // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnvRayTraceMode;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RayTracingCullFrustumHorizontal;                   // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R_SSGI_Enable;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R_AmbientOcclusionLevels;                          // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Snf_GameSequence;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReconstructGameScene;                              // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PauseLevelStreaming;                               // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tng_GameFade_ForceSlateFadeIn;                     // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tng_GameFade_ForceSlateFadeClear;                  // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TngPlayer_Hide;                                    // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Snf_GameSupplyAuto_ForceStop;                      // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Snf_GameDensity_LockDensity;                       // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SnfGameEnv_EventFogParam;                          // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPermitToChangeWeather;                            // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Snf_ToriiActor_End;                                // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Snf_ShrineActor_End;                               // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R_RayTracing_TngCullRadius;                        // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         R_RayTracing_TngCullFrustumLength;                 // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfLevelSequenceSettingInfo) == 0x000008, "Wrong alignment on FSnfLevelSequenceSettingInfo");
static_assert(sizeof(FSnfLevelSequenceSettingInfo) == 0x000070, "Wrong size on FSnfLevelSequenceSettingInfo");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, bInGamePlayerLocation) == 0x000008, "Member 'FSnfLevelSequenceSettingInfo::bInGamePlayerLocation' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, PlayerLocation) == 0x00000C, "Member 'FSnfLevelSequenceSettingInfo::PlayerLocation' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, PlayerLocationInGame) == 0x000018, "Member 'FSnfLevelSequenceSettingInfo::PlayerLocationInGame' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, SnfPlayerCinema_NormalCostume) == 0x000024, "Member 'FSnfLevelSequenceSettingInfo::SnfPlayerCinema_NormalCostume' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, EnvRayTraceMode) == 0x000028, "Member 'FSnfLevelSequenceSettingInfo::EnvRayTraceMode' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, RayTracingCullFrustumHorizontal) == 0x00002C, "Member 'FSnfLevelSequenceSettingInfo::RayTracingCullFrustumHorizontal' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, R_SSGI_Enable) == 0x000030, "Member 'FSnfLevelSequenceSettingInfo::R_SSGI_Enable' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, R_AmbientOcclusionLevels) == 0x000034, "Member 'FSnfLevelSequenceSettingInfo::R_AmbientOcclusionLevels' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, Snf_GameSequence) == 0x000038, "Member 'FSnfLevelSequenceSettingInfo::Snf_GameSequence' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, ReconstructGameScene) == 0x00003C, "Member 'FSnfLevelSequenceSettingInfo::ReconstructGameScene' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, PauseLevelStreaming) == 0x000040, "Member 'FSnfLevelSequenceSettingInfo::PauseLevelStreaming' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, Tng_GameFade_ForceSlateFadeIn) == 0x000044, "Member 'FSnfLevelSequenceSettingInfo::Tng_GameFade_ForceSlateFadeIn' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, Tng_GameFade_ForceSlateFadeClear) == 0x000048, "Member 'FSnfLevelSequenceSettingInfo::Tng_GameFade_ForceSlateFadeClear' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, TngPlayer_Hide) == 0x00004C, "Member 'FSnfLevelSequenceSettingInfo::TngPlayer_Hide' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, Snf_GameSupplyAuto_ForceStop) == 0x000050, "Member 'FSnfLevelSequenceSettingInfo::Snf_GameSupplyAuto_ForceStop' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, Snf_GameDensity_LockDensity) == 0x000054, "Member 'FSnfLevelSequenceSettingInfo::Snf_GameDensity_LockDensity' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, SnfGameEnv_EventFogParam) == 0x000058, "Member 'FSnfLevelSequenceSettingInfo::SnfGameEnv_EventFogParam' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, bPermitToChangeWeather) == 0x00005C, "Member 'FSnfLevelSequenceSettingInfo::bPermitToChangeWeather' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, Snf_ToriiActor_End) == 0x000060, "Member 'FSnfLevelSequenceSettingInfo::Snf_ToriiActor_End' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, Snf_ShrineActor_End) == 0x000064, "Member 'FSnfLevelSequenceSettingInfo::Snf_ShrineActor_End' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, R_RayTracing_TngCullRadius) == 0x000068, "Member 'FSnfLevelSequenceSettingInfo::R_RayTracing_TngCullRadius' has a wrong offset!");
static_assert(offsetof(FSnfLevelSequenceSettingInfo, R_RayTracing_TngCullFrustumLength) == 0x00006C, "Member 'FSnfLevelSequenceSettingInfo::R_RayTracing_TngCullFrustumLength' has a wrong offset!");

// ScriptStruct Snowfall.SnfLevelStreamActorRequestSubLevelLoad
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FSnfLevelStreamActorRequestSubLevelLoad final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfLevelStreamActorRequestSubLevelLoad) == 0x000004, "Wrong alignment on FSnfLevelStreamActorRequestSubLevelLoad");
static_assert(sizeof(FSnfLevelStreamActorRequestSubLevelLoad) == 0x000008, "Wrong size on FSnfLevelStreamActorRequestSubLevelLoad");

// ScriptStruct Snowfall.SnfShrineActorDisableSequenceSetting
// 0x0008 (0x0008 - 0x0000)
struct FSnfShrineActorDisableSequenceSetting final
{
public:
	int32                                         DisableSequenceBegin;                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisableSequenceEnd;                                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfShrineActorDisableSequenceSetting) == 0x000004, "Wrong alignment on FSnfShrineActorDisableSequenceSetting");
static_assert(sizeof(FSnfShrineActorDisableSequenceSetting) == 0x000008, "Wrong size on FSnfShrineActorDisableSequenceSetting");
static_assert(offsetof(FSnfShrineActorDisableSequenceSetting, DisableSequenceBegin) == 0x000000, "Member 'FSnfShrineActorDisableSequenceSetting::DisableSequenceBegin' has a wrong offset!");
static_assert(offsetof(FSnfShrineActorDisableSequenceSetting, DisableSequenceEnd) == 0x000004, "Member 'FSnfShrineActorDisableSequenceSetting::DisableSequenceEnd' has a wrong offset!");

// ScriptStruct Snowfall.SnfLifeEffectCurveData
// 0x0048 (0x0048 - 0x0000)
struct FSnfLifeEffectCurveData final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LifeRange;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EffectRange;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CurveData;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveTimeMax;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x24];                                      // 0x0024(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfLifeEffectCurveData) == 0x000008, "Wrong alignment on FSnfLifeEffectCurveData");
static_assert(sizeof(FSnfLifeEffectCurveData) == 0x000048, "Wrong size on FSnfLifeEffectCurveData");
static_assert(offsetof(FSnfLifeEffectCurveData, ParamName) == 0x000000, "Member 'FSnfLifeEffectCurveData::ParamName' has a wrong offset!");
static_assert(offsetof(FSnfLifeEffectCurveData, LifeRange) == 0x000008, "Member 'FSnfLifeEffectCurveData::LifeRange' has a wrong offset!");
static_assert(offsetof(FSnfLifeEffectCurveData, EffectRange) == 0x000010, "Member 'FSnfLifeEffectCurveData::EffectRange' has a wrong offset!");
static_assert(offsetof(FSnfLifeEffectCurveData, CurveData) == 0x000018, "Member 'FSnfLifeEffectCurveData::CurveData' has a wrong offset!");
static_assert(offsetof(FSnfLifeEffectCurveData, CurveTimeMax) == 0x000020, "Member 'FSnfLifeEffectCurveData::CurveTimeMax' has a wrong offset!");

// ScriptStruct Snowfall.SnfLightBaseLightComponent
// 0x0020 (0x0020 - 0x0000)
struct FSnfLightBaseLightComponent final
{
public:
	class ULightComponent*                        LightComponent;                                    // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DefaultColor;                                      // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultLightIntensity;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultVolumetricScatteringIntensity;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfLightBaseLightComponent) == 0x000008, "Wrong alignment on FSnfLightBaseLightComponent");
static_assert(sizeof(FSnfLightBaseLightComponent) == 0x000020, "Wrong size on FSnfLightBaseLightComponent");
static_assert(offsetof(FSnfLightBaseLightComponent, LightComponent) == 0x000000, "Member 'FSnfLightBaseLightComponent::LightComponent' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightComponent, DefaultColor) == 0x000008, "Member 'FSnfLightBaseLightComponent::DefaultColor' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightComponent, DefaultLightIntensity) == 0x000018, "Member 'FSnfLightBaseLightComponent::DefaultLightIntensity' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightComponent, DefaultVolumetricScatteringIntensity) == 0x00001C, "Member 'FSnfLightBaseLightComponent::DefaultVolumetricScatteringIntensity' has a wrong offset!");

// ScriptStruct Snowfall.SnfLightBaseSoundSetting
// 0x0050 (0x0058 - 0x0008)
struct FSnfLightBaseSoundSetting final : public FTableRowBase
{
public:
	class UStaticMesh*                            TargetLightMesh;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AkPositionOffset;                                  // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AkRotationOffset;                                  // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bInitiallySoundOff;                                // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          OnSound;                                           // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          OffSound;                                          // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          OnFearOverOne;                                     // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          OnFearUnderZero;                                   // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          OnFearKeyPoint;                                    // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfLightBaseSoundSetting) == 0x000008, "Wrong alignment on FSnfLightBaseSoundSetting");
static_assert(sizeof(FSnfLightBaseSoundSetting) == 0x000058, "Wrong size on FSnfLightBaseSoundSetting");
static_assert(offsetof(FSnfLightBaseSoundSetting, TargetLightMesh) == 0x000008, "Member 'FSnfLightBaseSoundSetting::TargetLightMesh' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseSoundSetting, AkPositionOffset) == 0x000010, "Member 'FSnfLightBaseSoundSetting::AkPositionOffset' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseSoundSetting, AkRotationOffset) == 0x00001C, "Member 'FSnfLightBaseSoundSetting::AkRotationOffset' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseSoundSetting, bInitiallySoundOff) == 0x000028, "Member 'FSnfLightBaseSoundSetting::bInitiallySoundOff' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseSoundSetting, OnSound) == 0x000030, "Member 'FSnfLightBaseSoundSetting::OnSound' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseSoundSetting, OffSound) == 0x000038, "Member 'FSnfLightBaseSoundSetting::OffSound' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseSoundSetting, OnFearOverOne) == 0x000040, "Member 'FSnfLightBaseSoundSetting::OnFearOverOne' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseSoundSetting, OnFearUnderZero) == 0x000048, "Member 'FSnfLightBaseSoundSetting::OnFearUnderZero' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseSoundSetting, OnFearKeyPoint) == 0x000050, "Member 'FSnfLightBaseSoundSetting::OnFearKeyPoint' has a wrong offset!");

// ScriptStruct Snowfall.PropsGimmickFearCollisionDamage
// 0x0010 (0x0010 - 0x0000)
struct FPropsGimmickFearCollisionDamage final
{
public:
	class UBoxComponent*                          FearCollision;                                     // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreDamage;                                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPropsGimmickFearCollisionDamage) == 0x000008, "Wrong alignment on FPropsGimmickFearCollisionDamage");
static_assert(sizeof(FPropsGimmickFearCollisionDamage) == 0x000010, "Wrong size on FPropsGimmickFearCollisionDamage");
static_assert(offsetof(FPropsGimmickFearCollisionDamage, FearCollision) == 0x000000, "Member 'FPropsGimmickFearCollisionDamage::FearCollision' has a wrong offset!");
static_assert(offsetof(FPropsGimmickFearCollisionDamage, Damage) == 0x000008, "Member 'FPropsGimmickFearCollisionDamage::Damage' has a wrong offset!");
static_assert(offsetof(FPropsGimmickFearCollisionDamage, PreDamage) == 0x00000C, "Member 'FPropsGimmickFearCollisionDamage::PreDamage' has a wrong offset!");

// ScriptStruct Snowfall.SnfLightBaseFlickerComponent
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FSnfLightBaseFlickerComponent final
{
public:
	float                                         FlickerCurvePositionOffset;                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultPointLightIntensity;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultSpotLightIntensity;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultRectLightIntensity;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfLightBaseFlickerComponent) == 0x000008, "Wrong alignment on FSnfLightBaseFlickerComponent");
static_assert(sizeof(FSnfLightBaseFlickerComponent) == 0x000028, "Wrong size on FSnfLightBaseFlickerComponent");
static_assert(offsetof(FSnfLightBaseFlickerComponent, FlickerCurvePositionOffset) == 0x000000, "Member 'FSnfLightBaseFlickerComponent::FlickerCurvePositionOffset' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseFlickerComponent, DefaultPointLightIntensity) == 0x000004, "Member 'FSnfLightBaseFlickerComponent::DefaultPointLightIntensity' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseFlickerComponent, DefaultSpotLightIntensity) == 0x000008, "Member 'FSnfLightBaseFlickerComponent::DefaultSpotLightIntensity' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseFlickerComponent, DefaultRectLightIntensity) == 0x00000C, "Member 'FSnfLightBaseFlickerComponent::DefaultRectLightIntensity' has a wrong offset!");

// ScriptStruct Snowfall.SnfLightBaseAddPartsSetting
// 0x00A0 (0x00A0 - 0x0000)
struct FSnfLightBaseAddPartsSetting final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  Materials;                                         // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0060(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfLightBaseAddPartsSetting) == 0x000010, "Wrong alignment on FSnfLightBaseAddPartsSetting");
static_assert(sizeof(FSnfLightBaseAddPartsSetting) == 0x0000A0, "Wrong size on FSnfLightBaseAddPartsSetting");
static_assert(offsetof(FSnfLightBaseAddPartsSetting, Mesh) == 0x000000, "Member 'FSnfLightBaseAddPartsSetting::Mesh' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseAddPartsSetting, Materials) == 0x000008, "Member 'FSnfLightBaseAddPartsSetting::Materials' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseAddPartsSetting, Transform) == 0x000060, "Member 'FSnfLightBaseAddPartsSetting::Transform' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseAddPartsSetting, SocketName) == 0x000090, "Member 'FSnfLightBaseAddPartsSetting::SocketName' has a wrong offset!");

// ScriptStruct Snowfall.SnfLightLensFlareMeshComponent
// 0x0040 (0x0040 - 0x0000)
struct FSnfLightLensFlareMeshComponent final
{
public:
	class USnfStaticMeshComponent*                MeshComponent;                                     // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CompleteScale;                                     // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFearLensFlare;                                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x23];                                      // 0x001D(0x0023)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfLightLensFlareMeshComponent) == 0x000008, "Wrong alignment on FSnfLightLensFlareMeshComponent");
static_assert(sizeof(FSnfLightLensFlareMeshComponent) == 0x000040, "Wrong size on FSnfLightLensFlareMeshComponent");
static_assert(offsetof(FSnfLightLensFlareMeshComponent, MeshComponent) == 0x000000, "Member 'FSnfLightLensFlareMeshComponent::MeshComponent' has a wrong offset!");
static_assert(offsetof(FSnfLightLensFlareMeshComponent, DynamicMaterial) == 0x000008, "Member 'FSnfLightLensFlareMeshComponent::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(FSnfLightLensFlareMeshComponent, CompleteScale) == 0x000010, "Member 'FSnfLightLensFlareMeshComponent::CompleteScale' has a wrong offset!");
static_assert(offsetof(FSnfLightLensFlareMeshComponent, bFearLensFlare) == 0x00001C, "Member 'FSnfLightLensFlareMeshComponent::bFearLensFlare' has a wrong offset!");

// ScriptStruct Snowfall.SnfLightLensFlareComponent
// 0x00A8 (0x00A8 - 0x0000)
struct FSnfLightLensFlareComponent final
{
public:
	struct FLinearColor                           LensFlareColor;                                    // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInstancedStaticMeshComponent*          InstancedStaticMeshComponent;                      // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInstancedStaticMeshComponent*          InstancedStaticMeshComponent_Fear;                 // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSnfLightLensFlareMeshComponent> StaticMeshCompArray;                               // 0x0020(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FSnfLightLensFlareMeshComponent> FearStaticMeshCompArray;                           // 0x0030(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         AttachLightIndex;                                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x64];                                      // 0x0044(0x0064)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfLightLensFlareComponent) == 0x000008, "Wrong alignment on FSnfLightLensFlareComponent");
static_assert(sizeof(FSnfLightLensFlareComponent) == 0x0000A8, "Wrong size on FSnfLightLensFlareComponent");
static_assert(offsetof(FSnfLightLensFlareComponent, LensFlareColor) == 0x000000, "Member 'FSnfLightLensFlareComponent::LensFlareColor' has a wrong offset!");
static_assert(offsetof(FSnfLightLensFlareComponent, InstancedStaticMeshComponent) == 0x000010, "Member 'FSnfLightLensFlareComponent::InstancedStaticMeshComponent' has a wrong offset!");
static_assert(offsetof(FSnfLightLensFlareComponent, InstancedStaticMeshComponent_Fear) == 0x000018, "Member 'FSnfLightLensFlareComponent::InstancedStaticMeshComponent_Fear' has a wrong offset!");
static_assert(offsetof(FSnfLightLensFlareComponent, StaticMeshCompArray) == 0x000020, "Member 'FSnfLightLensFlareComponent::StaticMeshCompArray' has a wrong offset!");
static_assert(offsetof(FSnfLightLensFlareComponent, FearStaticMeshCompArray) == 0x000030, "Member 'FSnfLightLensFlareComponent::FearStaticMeshCompArray' has a wrong offset!");
static_assert(offsetof(FSnfLightLensFlareComponent, AttachLightIndex) == 0x000040, "Member 'FSnfLightLensFlareComponent::AttachLightIndex' has a wrong offset!");

// ScriptStruct Snowfall.SnfWellOutData
// 0x0020 (0x0020 - 0x0000)
struct FSnfWellOutData final
{
public:
	bool                                          OutFlag;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CloseTimeFlag;                                     // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FinishFlag;                                        // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ASnfCheckGotoActor*                     CheckActor;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TalkActor;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockTime;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfWellOutData) == 0x000008, "Wrong alignment on FSnfWellOutData");
static_assert(sizeof(FSnfWellOutData) == 0x000020, "Wrong size on FSnfWellOutData");
static_assert(offsetof(FSnfWellOutData, OutFlag) == 0x000000, "Member 'FSnfWellOutData::OutFlag' has a wrong offset!");
static_assert(offsetof(FSnfWellOutData, CloseTimeFlag) == 0x000001, "Member 'FSnfWellOutData::CloseTimeFlag' has a wrong offset!");
static_assert(offsetof(FSnfWellOutData, FinishFlag) == 0x000002, "Member 'FSnfWellOutData::FinishFlag' has a wrong offset!");
static_assert(offsetof(FSnfWellOutData, CheckActor) == 0x000008, "Member 'FSnfWellOutData::CheckActor' has a wrong offset!");
static_assert(offsetof(FSnfWellOutData, TalkActor) == 0x000010, "Member 'FSnfWellOutData::TalkActor' has a wrong offset!");
static_assert(offsetof(FSnfWellOutData, LockTime) == 0x000018, "Member 'FSnfWellOutData::LockTime' has a wrong offset!");

// ScriptStruct Snowfall.SnfLightLensFlareIndividual
// 0x00D0 (0x00D0 - 0x0000)
struct FSnfLightLensFlareIndividual final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SocketIndex;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            LensFlareMesh;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  LensFlareMaterials;                                // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FTransform                             TransformOffset;                                   // 0x0060(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             SocketTransform;                                   // 0x0090(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AttachLightIndex;                                  // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0xC];                                       // 0x00C4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfLightLensFlareIndividual) == 0x000010, "Wrong alignment on FSnfLightLensFlareIndividual");
static_assert(sizeof(FSnfLightLensFlareIndividual) == 0x0000D0, "Wrong size on FSnfLightLensFlareIndividual");
static_assert(offsetof(FSnfLightLensFlareIndividual, bEnable) == 0x000000, "Member 'FSnfLightLensFlareIndividual::bEnable' has a wrong offset!");
static_assert(offsetof(FSnfLightLensFlareIndividual, SocketIndex) == 0x000004, "Member 'FSnfLightLensFlareIndividual::SocketIndex' has a wrong offset!");
static_assert(offsetof(FSnfLightLensFlareIndividual, LensFlareMesh) == 0x000008, "Member 'FSnfLightLensFlareIndividual::LensFlareMesh' has a wrong offset!");
static_assert(offsetof(FSnfLightLensFlareIndividual, LensFlareMaterials) == 0x000010, "Member 'FSnfLightLensFlareIndividual::LensFlareMaterials' has a wrong offset!");
static_assert(offsetof(FSnfLightLensFlareIndividual, TransformOffset) == 0x000060, "Member 'FSnfLightLensFlareIndividual::TransformOffset' has a wrong offset!");
static_assert(offsetof(FSnfLightLensFlareIndividual, SocketTransform) == 0x000090, "Member 'FSnfLightLensFlareIndividual::SocketTransform' has a wrong offset!");
static_assert(offsetof(FSnfLightLensFlareIndividual, AttachLightIndex) == 0x0000C0, "Member 'FSnfLightLensFlareIndividual::AttachLightIndex' has a wrong offset!");

// ScriptStruct Snowfall.SnfLightLensFlareSetting
// 0x0060 (0x0060 - 0x0000)
struct FSnfLightLensFlareSetting final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReflectLightColor;                                // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSnfLightLensFlareIndividual>   LensFlareIndividuals;                              // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           LensFlareColor;                                    // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InstanceTransform;                                 // 0x0030(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfLightLensFlareSetting) == 0x000010, "Wrong alignment on FSnfLightLensFlareSetting");
static_assert(sizeof(FSnfLightLensFlareSetting) == 0x000060, "Wrong size on FSnfLightLensFlareSetting");
static_assert(offsetof(FSnfLightLensFlareSetting, bEnable) == 0x000000, "Member 'FSnfLightLensFlareSetting::bEnable' has a wrong offset!");
static_assert(offsetof(FSnfLightLensFlareSetting, bReflectLightColor) == 0x000001, "Member 'FSnfLightLensFlareSetting::bReflectLightColor' has a wrong offset!");
static_assert(offsetof(FSnfLightLensFlareSetting, LensFlareIndividuals) == 0x000008, "Member 'FSnfLightLensFlareSetting::LensFlareIndividuals' has a wrong offset!");
static_assert(offsetof(FSnfLightLensFlareSetting, LensFlareColor) == 0x000018, "Member 'FSnfLightLensFlareSetting::LensFlareColor' has a wrong offset!");
static_assert(offsetof(FSnfLightLensFlareSetting, InstanceTransform) == 0x000030, "Member 'FSnfLightLensFlareSetting::InstanceTransform' has a wrong offset!");

// ScriptStruct Snowfall.SnfPropsGimmickReplaceAddStaticMesh
// 0x0060 (0x0060 - 0x0000)
struct FSnfPropsGimmickReplaceAddStaticMesh final
{
public:
	class FName                                   ObjName;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParentName;                                        // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ObjTF;                                             // 0x0020(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EComponentMobility                            Mobility;                                          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USnfStaticMeshComponent*                StaticMeshComp;                                    // 0x0058(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPropsGimmickReplaceAddStaticMesh) == 0x000010, "Wrong alignment on FSnfPropsGimmickReplaceAddStaticMesh");
static_assert(sizeof(FSnfPropsGimmickReplaceAddStaticMesh) == 0x000060, "Wrong size on FSnfPropsGimmickReplaceAddStaticMesh");
static_assert(offsetof(FSnfPropsGimmickReplaceAddStaticMesh, ObjName) == 0x000000, "Member 'FSnfPropsGimmickReplaceAddStaticMesh::ObjName' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickReplaceAddStaticMesh, ParentName) == 0x000008, "Member 'FSnfPropsGimmickReplaceAddStaticMesh::ParentName' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickReplaceAddStaticMesh, ObjTF) == 0x000020, "Member 'FSnfPropsGimmickReplaceAddStaticMesh::ObjTF' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickReplaceAddStaticMesh, Mobility) == 0x000050, "Member 'FSnfPropsGimmickReplaceAddStaticMesh::Mobility' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickReplaceAddStaticMesh, StaticMeshComp) == 0x000058, "Member 'FSnfPropsGimmickReplaceAddStaticMesh::StaticMeshComp' has a wrong offset!");

// ScriptStruct Snowfall.SnfLightBaseLightSetting
// 0x00E0 (0x00E0 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x10) FSnfLightBaseLightSetting
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELightUnits                                   IntensityUnits;                                    // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttenuationRadius;                                 // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceRadius;                                      // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoftSourceRadius;                                  // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceLength;                                      // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Temperature;                                       // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTemperature;                                   // 0x005C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShadowResolutionScale;                             // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowBias;                                        // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSlopeBias;                                   // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactShadowLength;                               // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContactShadowLengthInWorldSpaceUnits;              // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinShadowDarkness;                                 // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastShadow;                                       // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumetricScatteringIntensity;                     // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpecularScale;                                     // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseInverseSquaredFalloff;                         // 0x0084(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightFalloffExponent;                              // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastRayTracingShadows;                            // 0x008C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectRayTracingReflections;                      // 0x008D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectRayTracingGlobalIllumination;               // 0x008E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChannel0;                                         // 0x008F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChannel1;                                         // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChannel2;                                         // 0x0091(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDrawDistance;                                   // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceFadeRange;                              // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxShadowDistance;                                 // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxShadowDistanceFadeRange;                        // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureLightProfile*                   IESTexture;                                        // 0x00A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseIESBrightness;                                 // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IESIntensityScale;                                 // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     LightFunctionMaterial;                             // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightFunctionScale;                                // 0x00C0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightFunctionFadeDistance;                         // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightFunctionDisabledBrightness;                   // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
#pragma pack(pop)
static_assert(alignof(FSnfLightBaseLightSetting) == 0x000010, "Wrong alignment on FSnfLightBaseLightSetting");
static_assert(sizeof(FSnfLightBaseLightSetting) == 0x0000E0, "Wrong size on FSnfLightBaseLightSetting");
static_assert(offsetof(FSnfLightBaseLightSetting, Transform) == 0x000000, "Member 'FSnfLightBaseLightSetting::Transform' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, LightColor) == 0x000030, "Member 'FSnfLightBaseLightSetting::LightColor' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, Intensity) == 0x000040, "Member 'FSnfLightBaseLightSetting::Intensity' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, IntensityUnits) == 0x000044, "Member 'FSnfLightBaseLightSetting::IntensityUnits' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, AttenuationRadius) == 0x000048, "Member 'FSnfLightBaseLightSetting::AttenuationRadius' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, SourceRadius) == 0x00004C, "Member 'FSnfLightBaseLightSetting::SourceRadius' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, SoftSourceRadius) == 0x000050, "Member 'FSnfLightBaseLightSetting::SoftSourceRadius' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, SourceLength) == 0x000054, "Member 'FSnfLightBaseLightSetting::SourceLength' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, Temperature) == 0x000058, "Member 'FSnfLightBaseLightSetting::Temperature' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, bUseTemperature) == 0x00005C, "Member 'FSnfLightBaseLightSetting::bUseTemperature' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, ShadowResolutionScale) == 0x000060, "Member 'FSnfLightBaseLightSetting::ShadowResolutionScale' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, ShadowBias) == 0x000064, "Member 'FSnfLightBaseLightSetting::ShadowBias' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, ShadowSlopeBias) == 0x000068, "Member 'FSnfLightBaseLightSetting::ShadowSlopeBias' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, ContactShadowLength) == 0x00006C, "Member 'FSnfLightBaseLightSetting::ContactShadowLength' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, ContactShadowLengthInWorldSpaceUnits) == 0x000070, "Member 'FSnfLightBaseLightSetting::ContactShadowLengthInWorldSpaceUnits' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, MinShadowDarkness) == 0x000074, "Member 'FSnfLightBaseLightSetting::MinShadowDarkness' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, bCastShadow) == 0x000078, "Member 'FSnfLightBaseLightSetting::bCastShadow' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, VolumetricScatteringIntensity) == 0x00007C, "Member 'FSnfLightBaseLightSetting::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, SpecularScale) == 0x000080, "Member 'FSnfLightBaseLightSetting::SpecularScale' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, bUseInverseSquaredFalloff) == 0x000084, "Member 'FSnfLightBaseLightSetting::bUseInverseSquaredFalloff' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, LightFalloffExponent) == 0x000088, "Member 'FSnfLightBaseLightSetting::LightFalloffExponent' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, bCastRayTracingShadows) == 0x00008C, "Member 'FSnfLightBaseLightSetting::bCastRayTracingShadows' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, bAffectRayTracingReflections) == 0x00008D, "Member 'FSnfLightBaseLightSetting::bAffectRayTracingReflections' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, bAffectRayTracingGlobalIllumination) == 0x00008E, "Member 'FSnfLightBaseLightSetting::bAffectRayTracingGlobalIllumination' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, bChannel0) == 0x00008F, "Member 'FSnfLightBaseLightSetting::bChannel0' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, bChannel1) == 0x000090, "Member 'FSnfLightBaseLightSetting::bChannel1' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, bChannel2) == 0x000091, "Member 'FSnfLightBaseLightSetting::bChannel2' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, MaxDrawDistance) == 0x000094, "Member 'FSnfLightBaseLightSetting::MaxDrawDistance' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, MaxDistanceFadeRange) == 0x000098, "Member 'FSnfLightBaseLightSetting::MaxDistanceFadeRange' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, MaxShadowDistance) == 0x00009C, "Member 'FSnfLightBaseLightSetting::MaxShadowDistance' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, MaxShadowDistanceFadeRange) == 0x0000A0, "Member 'FSnfLightBaseLightSetting::MaxShadowDistanceFadeRange' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, IESTexture) == 0x0000A8, "Member 'FSnfLightBaseLightSetting::IESTexture' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, bUseIESBrightness) == 0x0000B0, "Member 'FSnfLightBaseLightSetting::bUseIESBrightness' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, IESIntensityScale) == 0x0000B4, "Member 'FSnfLightBaseLightSetting::IESIntensityScale' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, LightFunctionMaterial) == 0x0000B8, "Member 'FSnfLightBaseLightSetting::LightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, LightFunctionScale) == 0x0000C0, "Member 'FSnfLightBaseLightSetting::LightFunctionScale' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, LightFunctionFadeDistance) == 0x0000CC, "Member 'FSnfLightBaseLightSetting::LightFunctionFadeDistance' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseLightSetting, LightFunctionDisabledBrightness) == 0x0000D0, "Member 'FSnfLightBaseLightSetting::LightFunctionDisabledBrightness' has a wrong offset!");

// ScriptStruct Snowfall.SnfLightBaseSpotLightSetting
// 0x0000 (0x00E0 - 0x00E0)
struct FSnfLightBaseSpotLightSetting : public FSnfLightBaseLightSetting
{
public:
	float                                         InnerConeAngle;                                    // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterConeAngle;                                    // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfLightBaseSpotLightSetting) == 0x000010, "Wrong alignment on FSnfLightBaseSpotLightSetting");
static_assert(sizeof(FSnfLightBaseSpotLightSetting) == 0x0000E0, "Wrong size on FSnfLightBaseSpotLightSetting");
static_assert(offsetof(FSnfLightBaseSpotLightSetting, InnerConeAngle) == 0x0000D8, "Member 'FSnfLightBaseSpotLightSetting::InnerConeAngle' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseSpotLightSetting, OuterConeAngle) == 0x0000DC, "Member 'FSnfLightBaseSpotLightSetting::OuterConeAngle' has a wrong offset!");

// ScriptStruct Snowfall.SnfLightBaseRectLightSetting
// 0x00D0 (0x00D0 - 0x0000)
struct FSnfLightBaseRectLightSetting
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELightUnits                                   IntensityUnits;                                    // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttenuationRadius;                                 // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceWidth;                                       // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceHeight;                                      // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarnDoorAngle;                                     // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarnDoorLength;                                    // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               SourceTexture;                                     // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Temperature;                                       // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTemperature;                                   // 0x006C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShadowResolutionScale;                             // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowBias;                                        // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSlopeBias;                                   // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactShadowLength;                               // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContactShadowLengthInWorldSpaceUnits;              // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinShadowDarkness;                                 // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastShadow;                                       // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumetricScatteringIntensity;                     // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpecularScale;                                     // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastRayTracingShadows;                            // 0x0094(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectRayTracingReflections;                      // 0x0095(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectRayTracingGlobalIllumination;               // 0x0096(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChannel0;                                         // 0x0097(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChannel1;                                         // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChannel2;                                         // 0x0099(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDrawDistance;                                   // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceFadeRange;                              // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxShadowDistance;                                 // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxShadowDistanceFadeRange;                        // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     LightFunctionMaterial;                             // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightFunctionScale;                                // 0x00B8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightFunctionFadeDistance;                         // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightFunctionDisabledBrightness;                   // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfLightBaseRectLightSetting) == 0x000010, "Wrong alignment on FSnfLightBaseRectLightSetting");
static_assert(sizeof(FSnfLightBaseRectLightSetting) == 0x0000D0, "Wrong size on FSnfLightBaseRectLightSetting");
static_assert(offsetof(FSnfLightBaseRectLightSetting, Transform) == 0x000000, "Member 'FSnfLightBaseRectLightSetting::Transform' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, LightColor) == 0x000030, "Member 'FSnfLightBaseRectLightSetting::LightColor' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, Intensity) == 0x000040, "Member 'FSnfLightBaseRectLightSetting::Intensity' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, IntensityUnits) == 0x000044, "Member 'FSnfLightBaseRectLightSetting::IntensityUnits' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, AttenuationRadius) == 0x000048, "Member 'FSnfLightBaseRectLightSetting::AttenuationRadius' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, SourceWidth) == 0x00004C, "Member 'FSnfLightBaseRectLightSetting::SourceWidth' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, SourceHeight) == 0x000050, "Member 'FSnfLightBaseRectLightSetting::SourceHeight' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, BarnDoorAngle) == 0x000054, "Member 'FSnfLightBaseRectLightSetting::BarnDoorAngle' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, BarnDoorLength) == 0x000058, "Member 'FSnfLightBaseRectLightSetting::BarnDoorLength' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, SourceTexture) == 0x000060, "Member 'FSnfLightBaseRectLightSetting::SourceTexture' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, Temperature) == 0x000068, "Member 'FSnfLightBaseRectLightSetting::Temperature' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, bUseTemperature) == 0x00006C, "Member 'FSnfLightBaseRectLightSetting::bUseTemperature' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, ShadowResolutionScale) == 0x000070, "Member 'FSnfLightBaseRectLightSetting::ShadowResolutionScale' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, ShadowBias) == 0x000074, "Member 'FSnfLightBaseRectLightSetting::ShadowBias' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, ShadowSlopeBias) == 0x000078, "Member 'FSnfLightBaseRectLightSetting::ShadowSlopeBias' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, ContactShadowLength) == 0x00007C, "Member 'FSnfLightBaseRectLightSetting::ContactShadowLength' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, ContactShadowLengthInWorldSpaceUnits) == 0x000080, "Member 'FSnfLightBaseRectLightSetting::ContactShadowLengthInWorldSpaceUnits' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, MinShadowDarkness) == 0x000084, "Member 'FSnfLightBaseRectLightSetting::MinShadowDarkness' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, bCastShadow) == 0x000088, "Member 'FSnfLightBaseRectLightSetting::bCastShadow' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, VolumetricScatteringIntensity) == 0x00008C, "Member 'FSnfLightBaseRectLightSetting::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, SpecularScale) == 0x000090, "Member 'FSnfLightBaseRectLightSetting::SpecularScale' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, bCastRayTracingShadows) == 0x000094, "Member 'FSnfLightBaseRectLightSetting::bCastRayTracingShadows' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, bAffectRayTracingReflections) == 0x000095, "Member 'FSnfLightBaseRectLightSetting::bAffectRayTracingReflections' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, bAffectRayTracingGlobalIllumination) == 0x000096, "Member 'FSnfLightBaseRectLightSetting::bAffectRayTracingGlobalIllumination' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, bChannel0) == 0x000097, "Member 'FSnfLightBaseRectLightSetting::bChannel0' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, bChannel1) == 0x000098, "Member 'FSnfLightBaseRectLightSetting::bChannel1' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, bChannel2) == 0x000099, "Member 'FSnfLightBaseRectLightSetting::bChannel2' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, MaxDrawDistance) == 0x00009C, "Member 'FSnfLightBaseRectLightSetting::MaxDrawDistance' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, MaxDistanceFadeRange) == 0x0000A0, "Member 'FSnfLightBaseRectLightSetting::MaxDistanceFadeRange' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, MaxShadowDistance) == 0x0000A4, "Member 'FSnfLightBaseRectLightSetting::MaxShadowDistance' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, MaxShadowDistanceFadeRange) == 0x0000A8, "Member 'FSnfLightBaseRectLightSetting::MaxShadowDistanceFadeRange' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, LightFunctionMaterial) == 0x0000B0, "Member 'FSnfLightBaseRectLightSetting::LightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, LightFunctionScale) == 0x0000B8, "Member 'FSnfLightBaseRectLightSetting::LightFunctionScale' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, LightFunctionFadeDistance) == 0x0000C4, "Member 'FSnfLightBaseRectLightSetting::LightFunctionFadeDistance' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseRectLightSetting, LightFunctionDisabledBrightness) == 0x0000C8, "Member 'FSnfLightBaseRectLightSetting::LightFunctionDisabledBrightness' has a wrong offset!");

// ScriptStruct Snowfall.SnfLightBasePreset
// 0x0318 (0x0320 - 0x0008)
struct FSnfLightBasePreset final : public FTableRowBase
{
public:
	class FName                                   Description;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CommonLightColor;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitiallyLightOn;                                 // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePointLight;                                    // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSpotLight;                                     // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRectLight;                                     // 0x0023(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFear;                                          // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0xB];                                       // 0x0025(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSnfLightBaseLightSetting              PointLightSetting;                                 // 0x0030(0x00E0)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfLightBaseSpotLightSetting          SpotLightSetting;                                  // 0x0110(0x00E0)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnfLightBaseRectLightSetting          RectLightSetting;                                  // 0x01F0(0x00D0)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseEmissiveWithoutLights;                         // 0x02C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCommonLightColorAsEmissive;                    // 0x02C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C2[0x2];                                      // 0x02C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SlotName;                                          // 0x02C4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EmissiveColor;                                     // 0x02CC(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmissiveIntensity;                                 // 0x02DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstanceStartCullDistance;                         // 0x02E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstanceEndCullDistance;                           // 0x02E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastShadow;                                       // 0x02E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLightTimer;                                    // 0x02E9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EA[0x2];                                      // 0x02EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NightTimeStartHour;                                // 0x02EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NightTimeEndHour;                                  // 0x02F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverridePresetData;                               // 0x02F4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCurveFloat*>                    FlickerCurves;                                     // 0x02F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LightAge;                                          // 0x0308(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlickerInterval;                                   // 0x030C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlickerLoop;                                      // 0x0310(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScatterFlicker;                                   // 0x0311(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_312[0xE];                                      // 0x0312(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfLightBasePreset) == 0x000010, "Wrong alignment on FSnfLightBasePreset");
static_assert(sizeof(FSnfLightBasePreset) == 0x000320, "Wrong size on FSnfLightBasePreset");
static_assert(offsetof(FSnfLightBasePreset, Description) == 0x000008, "Member 'FSnfLightBasePreset::Description' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, CommonLightColor) == 0x000010, "Member 'FSnfLightBasePreset::CommonLightColor' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, bInitiallyLightOn) == 0x000020, "Member 'FSnfLightBasePreset::bInitiallyLightOn' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, bUsePointLight) == 0x000021, "Member 'FSnfLightBasePreset::bUsePointLight' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, bUseSpotLight) == 0x000022, "Member 'FSnfLightBasePreset::bUseSpotLight' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, bUseRectLight) == 0x000023, "Member 'FSnfLightBasePreset::bUseRectLight' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, bUseFear) == 0x000024, "Member 'FSnfLightBasePreset::bUseFear' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, PointLightSetting) == 0x000030, "Member 'FSnfLightBasePreset::PointLightSetting' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, SpotLightSetting) == 0x000110, "Member 'FSnfLightBasePreset::SpotLightSetting' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, RectLightSetting) == 0x0001F0, "Member 'FSnfLightBasePreset::RectLightSetting' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, bUseEmissiveWithoutLights) == 0x0002C0, "Member 'FSnfLightBasePreset::bUseEmissiveWithoutLights' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, bUseCommonLightColorAsEmissive) == 0x0002C1, "Member 'FSnfLightBasePreset::bUseCommonLightColorAsEmissive' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, SlotName) == 0x0002C4, "Member 'FSnfLightBasePreset::SlotName' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, EmissiveColor) == 0x0002CC, "Member 'FSnfLightBasePreset::EmissiveColor' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, EmissiveIntensity) == 0x0002DC, "Member 'FSnfLightBasePreset::EmissiveIntensity' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, InstanceStartCullDistance) == 0x0002E0, "Member 'FSnfLightBasePreset::InstanceStartCullDistance' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, InstanceEndCullDistance) == 0x0002E4, "Member 'FSnfLightBasePreset::InstanceEndCullDistance' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, bCastShadow) == 0x0002E8, "Member 'FSnfLightBasePreset::bCastShadow' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, bUseLightTimer) == 0x0002E9, "Member 'FSnfLightBasePreset::bUseLightTimer' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, NightTimeStartHour) == 0x0002EC, "Member 'FSnfLightBasePreset::NightTimeStartHour' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, NightTimeEndHour) == 0x0002F0, "Member 'FSnfLightBasePreset::NightTimeEndHour' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, bOverridePresetData) == 0x0002F4, "Member 'FSnfLightBasePreset::bOverridePresetData' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, FlickerCurves) == 0x0002F8, "Member 'FSnfLightBasePreset::FlickerCurves' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, LightAge) == 0x000308, "Member 'FSnfLightBasePreset::LightAge' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, FlickerInterval) == 0x00030C, "Member 'FSnfLightBasePreset::FlickerInterval' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, bFlickerLoop) == 0x000310, "Member 'FSnfLightBasePreset::bFlickerLoop' has a wrong offset!");
static_assert(offsetof(FSnfLightBasePreset, bScatterFlicker) == 0x000311, "Member 'FSnfLightBasePreset::bScatterFlicker' has a wrong offset!");

// ScriptStruct Snowfall.SnfLightBaseOverrideRectLightSetting
// 0x0020 (0x00F0 - 0x00D0)
struct FSnfLightBaseOverrideRectLightSetting final : public FSnfLightBaseRectLightSetting
{
public:
	bool                                          bOverrideUseLight;                                 // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           OverrideLightColor;                                // 0x00D4(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0xC];                                       // 0x00E4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfLightBaseOverrideRectLightSetting) == 0x000010, "Wrong alignment on FSnfLightBaseOverrideRectLightSetting");
static_assert(sizeof(FSnfLightBaseOverrideRectLightSetting) == 0x0000F0, "Wrong size on FSnfLightBaseOverrideRectLightSetting");
static_assert(offsetof(FSnfLightBaseOverrideRectLightSetting, bOverrideUseLight) == 0x0000D0, "Member 'FSnfLightBaseOverrideRectLightSetting::bOverrideUseLight' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseOverrideRectLightSetting, OverrideLightColor) == 0x0000D4, "Member 'FSnfLightBaseOverrideRectLightSetting::OverrideLightColor' has a wrong offset!");

// ScriptStruct Snowfall.SnfLightBaseOverrideSpotLightSetting
// 0x0020 (0x0100 - 0x00E0)
struct FSnfLightBaseOverrideSpotLightSetting final : public FSnfLightBaseSpotLightSetting
{
public:
	bool                                          bOverrideUseLight;                                 // 0x00E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           OverrideLightColor;                                // 0x00E4(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0xC];                                       // 0x00F4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfLightBaseOverrideSpotLightSetting) == 0x000010, "Wrong alignment on FSnfLightBaseOverrideSpotLightSetting");
static_assert(sizeof(FSnfLightBaseOverrideSpotLightSetting) == 0x000100, "Wrong size on FSnfLightBaseOverrideSpotLightSetting");
static_assert(offsetof(FSnfLightBaseOverrideSpotLightSetting, bOverrideUseLight) == 0x0000E0, "Member 'FSnfLightBaseOverrideSpotLightSetting::bOverrideUseLight' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseOverrideSpotLightSetting, OverrideLightColor) == 0x0000E4, "Member 'FSnfLightBaseOverrideSpotLightSetting::OverrideLightColor' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponTelekinesisData
// 0x0050 (0x0058 - 0x0008)
struct FSnfWeaponTelekinesisData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UStaticMesh>             Mesh;                                              // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFSnfWeaponTelekinesisBehaviorType            BehaviorType;                                      // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Axis;                                              // 0x0034(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpinSpeed;                                         // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpTime;                                        // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSnfWeaponDamageSetting>        DamageSettings;                                    // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponTelekinesisData) == 0x000008, "Wrong alignment on FSnfWeaponTelekinesisData");
static_assert(sizeof(FSnfWeaponTelekinesisData) == 0x000058, "Wrong size on FSnfWeaponTelekinesisData");
static_assert(offsetof(FSnfWeaponTelekinesisData, Mesh) == 0x000008, "Member 'FSnfWeaponTelekinesisData::Mesh' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTelekinesisData, BehaviorType) == 0x000030, "Member 'FSnfWeaponTelekinesisData::BehaviorType' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTelekinesisData, Axis) == 0x000034, "Member 'FSnfWeaponTelekinesisData::Axis' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTelekinesisData, SpinSpeed) == 0x000040, "Member 'FSnfWeaponTelekinesisData::SpinSpeed' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTelekinesisData, InterpTime) == 0x000044, "Member 'FSnfWeaponTelekinesisData::InterpTime' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTelekinesisData, DamageSettings) == 0x000048, "Member 'FSnfWeaponTelekinesisData::DamageSettings' has a wrong offset!");

// ScriptStruct Snowfall.SnfLightBaseOverridePointLightSetting
// 0x0010 (0x00F0 - 0x00E0)
struct FSnfLightBaseOverridePointLightSetting final : public FSnfLightBaseLightSetting
{
public:
	bool                                          bOverrideUseLight;                                 // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           OverrideLightColor;                                // 0x00DC(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfLightBaseOverridePointLightSetting) == 0x000010, "Wrong alignment on FSnfLightBaseOverridePointLightSetting");
static_assert(sizeof(FSnfLightBaseOverridePointLightSetting) == 0x0000F0, "Wrong size on FSnfLightBaseOverridePointLightSetting");
static_assert(offsetof(FSnfLightBaseOverridePointLightSetting, bOverrideUseLight) == 0x0000D8, "Member 'FSnfLightBaseOverridePointLightSetting::bOverrideUseLight' has a wrong offset!");
static_assert(offsetof(FSnfLightBaseOverridePointLightSetting, OverrideLightColor) == 0x0000DC, "Member 'FSnfLightBaseOverridePointLightSetting::OverrideLightColor' has a wrong offset!");

// ScriptStruct Snowfall.LodLevel
// 0x0028 (0x0028 - 0x0000)
struct FLodLevel final
{
public:
	class USnfStaticMeshComponent*                MeshComponent;                                     // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PathName;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddedToWorld;                                      // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Mat;                                               // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLodLevel) == 0x000008, "Wrong alignment on FLodLevel");
static_assert(sizeof(FLodLevel) == 0x000028, "Wrong size on FLodLevel");
static_assert(offsetof(FLodLevel, MeshComponent) == 0x000000, "Member 'FLodLevel::MeshComponent' has a wrong offset!");
static_assert(offsetof(FLodLevel, PathName) == 0x000008, "Member 'FLodLevel::PathName' has a wrong offset!");
static_assert(offsetof(FLodLevel, AddedToWorld) == 0x000010, "Member 'FLodLevel::AddedToWorld' has a wrong offset!");
static_assert(offsetof(FLodLevel, Mat) == 0x000018, "Member 'FLodLevel::Mat' has a wrong offset!");

// ScriptStruct Snowfall.LodLevelInfo
// 0x0030 (0x0030 - 0x0000)
struct FLodLevelInfo final
{
public:
	class UStaticMesh*                            LODMesh;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  Level;                                             // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLodLevelInfo) == 0x000008, "Wrong alignment on FLodLevelInfo");
static_assert(sizeof(FLodLevelInfo) == 0x000030, "Wrong size on FLodLevelInfo");
static_assert(offsetof(FLodLevelInfo, LODMesh) == 0x000000, "Member 'FLodLevelInfo::LODMesh' has a wrong offset!");
static_assert(offsetof(FLodLevelInfo, Level) == 0x000008, "Member 'FLodLevelInfo::Level' has a wrong offset!");

// ScriptStruct Snowfall.SnfPrisonWaveInfo
// 0x0018 (0x0018 - 0x0000)
struct FSnfPrisonWaveInfo final
{
public:
	int32                                         TargetCageIndex;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USnfPrisonEnemyDataAsset*               EnemyData;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSec;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyRemaining;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPrisonWaveInfo) == 0x000008, "Wrong alignment on FSnfPrisonWaveInfo");
static_assert(sizeof(FSnfPrisonWaveInfo) == 0x000018, "Wrong size on FSnfPrisonWaveInfo");
static_assert(offsetof(FSnfPrisonWaveInfo, TargetCageIndex) == 0x000000, "Member 'FSnfPrisonWaveInfo::TargetCageIndex' has a wrong offset!");
static_assert(offsetof(FSnfPrisonWaveInfo, EnemyData) == 0x000008, "Member 'FSnfPrisonWaveInfo::EnemyData' has a wrong offset!");
static_assert(offsetof(FSnfPrisonWaveInfo, TimeSec) == 0x000010, "Member 'FSnfPrisonWaveInfo::TimeSec' has a wrong offset!");
static_assert(offsetof(FSnfPrisonWaveInfo, EnemyRemaining) == 0x000014, "Member 'FSnfPrisonWaveInfo::EnemyRemaining' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameLogAndCollectableMessageData
// 0x0018 (0x0018 - 0x0000)
struct FSnfGameLogAndCollectableMessageData final
{
public:
	class FName                                   CatalogId;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemName;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCount;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldCount;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameLogAndCollectableMessageData) == 0x000004, "Wrong alignment on FSnfGameLogAndCollectableMessageData");
static_assert(sizeof(FSnfGameLogAndCollectableMessageData) == 0x000018, "Wrong size on FSnfGameLogAndCollectableMessageData");
static_assert(offsetof(FSnfGameLogAndCollectableMessageData, CatalogId) == 0x000000, "Member 'FSnfGameLogAndCollectableMessageData::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfGameLogAndCollectableMessageData, ItemName) == 0x000008, "Member 'FSnfGameLogAndCollectableMessageData::ItemName' has a wrong offset!");
static_assert(offsetof(FSnfGameLogAndCollectableMessageData, NewCount) == 0x000010, "Member 'FSnfGameLogAndCollectableMessageData::NewCount' has a wrong offset!");
static_assert(offsetof(FSnfGameLogAndCollectableMessageData, OldCount) == 0x000014, "Member 'FSnfGameLogAndCollectableMessageData::OldCount' has a wrong offset!");

// ScriptStruct Snowfall.SnfItemLogData
// 0x0014 (0x0014 - 0x0000)
struct FSnfItemLogData final
{
public:
	class FName                                   CatalogId;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCount;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldCount;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ThroughCatalogId;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfItemLogData) == 0x000004, "Wrong alignment on FSnfItemLogData");
static_assert(sizeof(FSnfItemLogData) == 0x000014, "Wrong size on FSnfItemLogData");
static_assert(offsetof(FSnfItemLogData, CatalogId) == 0x000000, "Member 'FSnfItemLogData::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfItemLogData, NewCount) == 0x000008, "Member 'FSnfItemLogData::NewCount' has a wrong offset!");
static_assert(offsetof(FSnfItemLogData, OldCount) == 0x00000C, "Member 'FSnfItemLogData::OldCount' has a wrong offset!");
static_assert(offsetof(FSnfItemLogData, ThroughCatalogId) == 0x000010, "Member 'FSnfItemLogData::ThroughCatalogId' has a wrong offset!");

// ScriptStruct Snowfall.SnfItemLogWaitData
// 0x0010 (0x0010 - 0x0000)
struct FSnfItemLogWaitData final
{
public:
	class FName                                   WaitCatalogId;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PriorityNum;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsResumeSoon;                                      // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfItemLogWaitData) == 0x000004, "Wrong alignment on FSnfItemLogWaitData");
static_assert(sizeof(FSnfItemLogWaitData) == 0x000010, "Wrong size on FSnfItemLogWaitData");
static_assert(offsetof(FSnfItemLogWaitData, WaitCatalogId) == 0x000000, "Member 'FSnfItemLogWaitData::WaitCatalogId' has a wrong offset!");
static_assert(offsetof(FSnfItemLogWaitData, PriorityNum) == 0x000008, "Member 'FSnfItemLogWaitData::PriorityNum' has a wrong offset!");
static_assert(offsetof(FSnfItemLogWaitData, IsResumeSoon) == 0x00000C, "Member 'FSnfItemLogWaitData::IsResumeSoon' has a wrong offset!");

// ScriptStruct Snowfall.SnfOverrideAttackAnimParam
// 0x0040 (0x0040 - 0x0000)
struct FSnfOverrideAttackAnimParam final
{
public:
	TArray<class FName>                           Role;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      BaseAnim;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequenceBase>       AnimPath;                                          // 0x0018(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfOverrideAttackAnimParam) == 0x000008, "Wrong alignment on FSnfOverrideAttackAnimParam");
static_assert(sizeof(FSnfOverrideAttackAnimParam) == 0x000040, "Wrong size on FSnfOverrideAttackAnimParam");
static_assert(offsetof(FSnfOverrideAttackAnimParam, Role) == 0x000000, "Member 'FSnfOverrideAttackAnimParam::Role' has a wrong offset!");
static_assert(offsetof(FSnfOverrideAttackAnimParam, BaseAnim) == 0x000010, "Member 'FSnfOverrideAttackAnimParam::BaseAnim' has a wrong offset!");
static_assert(offsetof(FSnfOverrideAttackAnimParam, AnimPath) == 0x000018, "Member 'FSnfOverrideAttackAnimParam::AnimPath' has a wrong offset!");

// ScriptStruct Snowfall.SnfOsaisenSelectListData
// 0x0038 (0x0038 - 0x0000)
struct FSnfOsaisenSelectListData final
{
public:
	int32                                         UseMoney;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EOsaisenWishType>                      WishList;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FText>                           UniqueTextList;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 UserDataList;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfOsaisenSelectListData) == 0x000008, "Wrong alignment on FSnfOsaisenSelectListData");
static_assert(sizeof(FSnfOsaisenSelectListData) == 0x000038, "Wrong size on FSnfOsaisenSelectListData");
static_assert(offsetof(FSnfOsaisenSelectListData, UseMoney) == 0x000000, "Member 'FSnfOsaisenSelectListData::UseMoney' has a wrong offset!");
static_assert(offsetof(FSnfOsaisenSelectListData, WishList) == 0x000008, "Member 'FSnfOsaisenSelectListData::WishList' has a wrong offset!");
static_assert(offsetof(FSnfOsaisenSelectListData, UniqueTextList) == 0x000018, "Member 'FSnfOsaisenSelectListData::UniqueTextList' has a wrong offset!");
static_assert(offsetof(FSnfOsaisenSelectListData, UserDataList) == 0x000028, "Member 'FSnfOsaisenSelectListData::UserDataList' has a wrong offset!");

// ScriptStruct Snowfall.SnfMrbtAssaultMaterialData
// 0x0010 (0x0010 - 0x0000)
struct FSnfMrbtAssaultMaterialData final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         before;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         After;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMrbtAssaultMaterialData) == 0x000004, "Wrong alignment on FSnfMrbtAssaultMaterialData");
static_assert(sizeof(FSnfMrbtAssaultMaterialData) == 0x000010, "Wrong size on FSnfMrbtAssaultMaterialData");
static_assert(offsetof(FSnfMrbtAssaultMaterialData, Name) == 0x000000, "Member 'FSnfMrbtAssaultMaterialData::Name' has a wrong offset!");
static_assert(offsetof(FSnfMrbtAssaultMaterialData, before) == 0x000008, "Member 'FSnfMrbtAssaultMaterialData::before' has a wrong offset!");
static_assert(offsetof(FSnfMrbtAssaultMaterialData, After) == 0x00000C, "Member 'FSnfMrbtAssaultMaterialData::After' has a wrong offset!");

// ScriptStruct Snowfall.SnfMarebitoHearingParam
// 0x0020 (0x0020 - 0x0000)
struct FSnfMarebitoHearingParam final
{
public:
	float                                         Age;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Strength;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StimPos;                                           // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RecPos;                                            // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMarebitoHearingParam) == 0x000004, "Wrong alignment on FSnfMarebitoHearingParam");
static_assert(sizeof(FSnfMarebitoHearingParam) == 0x000020, "Wrong size on FSnfMarebitoHearingParam");
static_assert(offsetof(FSnfMarebitoHearingParam, Age) == 0x000000, "Member 'FSnfMarebitoHearingParam::Age' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoHearingParam, Strength) == 0x000004, "Member 'FSnfMarebitoHearingParam::Strength' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoHearingParam, StimPos) == 0x000008, "Member 'FSnfMarebitoHearingParam::StimPos' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoHearingParam, RecPos) == 0x000014, "Member 'FSnfMarebitoHearingParam::RecPos' has a wrong offset!");

// ScriptStruct Snowfall.SnfMarebitoPerceptionParam
// 0x000C (0x000C - 0x0000)
struct FSnfMarebitoPerceptionParam final
{
public:
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamID;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMarebitoPerceptionParam) == 0x000004, "Wrong alignment on FSnfMarebitoPerceptionParam");
static_assert(sizeof(FSnfMarebitoPerceptionParam) == 0x00000C, "Wrong size on FSnfMarebitoPerceptionParam");
static_assert(offsetof(FSnfMarebitoPerceptionParam, TargetActor) == 0x000000, "Member 'FSnfMarebitoPerceptionParam::TargetActor' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoPerceptionParam, TeamID) == 0x000008, "Member 'FSnfMarebitoPerceptionParam::TeamID' has a wrong offset!");

// ScriptStruct Snowfall.SnfMarebitoVectorParam
// 0x0010 (0x0010 - 0x0000)
struct FSnfMarebitoVectorParam final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           CurveData;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMarebitoVectorParam) == 0x000008, "Wrong alignment on FSnfMarebitoVectorParam");
static_assert(sizeof(FSnfMarebitoVectorParam) == 0x000010, "Wrong size on FSnfMarebitoVectorParam");
static_assert(offsetof(FSnfMarebitoVectorParam, ParamName) == 0x000000, "Member 'FSnfMarebitoVectorParam::ParamName' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoVectorParam, CurveData) == 0x000008, "Member 'FSnfMarebitoVectorParam::CurveData' has a wrong offset!");

// ScriptStruct Snowfall.SnfMarebitoScalarParam
// 0x0010 (0x0010 - 0x0000)
struct FSnfMarebitoScalarParam final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CurveData;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMarebitoScalarParam) == 0x000008, "Wrong alignment on FSnfMarebitoScalarParam");
static_assert(sizeof(FSnfMarebitoScalarParam) == 0x000010, "Wrong size on FSnfMarebitoScalarParam");
static_assert(offsetof(FSnfMarebitoScalarParam, ParamName) == 0x000000, "Member 'FSnfMarebitoScalarParam::ParamName' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoScalarParam, CurveData) == 0x000008, "Member 'FSnfMarebitoScalarParam::CurveData' has a wrong offset!");

// ScriptStruct Snowfall.SnfPlayerTriggerEffect
// 0x0030 (0x0038 - 0x0008)
struct FSnfPlayerTriggerEffect final : public FTableRowBase
{
public:
	ESnfPlayerTriggerEffectType                   Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WeaponStartPosition;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeaponEndPosition;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeaponStrength;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VibrationPosition;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VibrationFrequency;                                // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VibrationAmplitude;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FeedbackPosition;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FeedbackStrength;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timer;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            VibrationFrequencyCurve;                           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPlayerTriggerEffect) == 0x000008, "Wrong alignment on FSnfPlayerTriggerEffect");
static_assert(sizeof(FSnfPlayerTriggerEffect) == 0x000038, "Wrong size on FSnfPlayerTriggerEffect");
static_assert(offsetof(FSnfPlayerTriggerEffect, Type) == 0x000008, "Member 'FSnfPlayerTriggerEffect::Type' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTriggerEffect, WeaponStartPosition) == 0x00000C, "Member 'FSnfPlayerTriggerEffect::WeaponStartPosition' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTriggerEffect, WeaponEndPosition) == 0x000010, "Member 'FSnfPlayerTriggerEffect::WeaponEndPosition' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTriggerEffect, WeaponStrength) == 0x000014, "Member 'FSnfPlayerTriggerEffect::WeaponStrength' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTriggerEffect, VibrationPosition) == 0x000018, "Member 'FSnfPlayerTriggerEffect::VibrationPosition' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTriggerEffect, VibrationFrequency) == 0x00001C, "Member 'FSnfPlayerTriggerEffect::VibrationFrequency' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTriggerEffect, VibrationAmplitude) == 0x000020, "Member 'FSnfPlayerTriggerEffect::VibrationAmplitude' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTriggerEffect, FeedbackPosition) == 0x000024, "Member 'FSnfPlayerTriggerEffect::FeedbackPosition' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTriggerEffect, FeedbackStrength) == 0x000028, "Member 'FSnfPlayerTriggerEffect::FeedbackStrength' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTriggerEffect, Timer) == 0x00002C, "Member 'FSnfPlayerTriggerEffect::Timer' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTriggerEffect, VibrationFrequencyCurve) == 0x000030, "Member 'FSnfPlayerTriggerEffect::VibrationFrequencyCurve' has a wrong offset!");

// ScriptStruct Snowfall.SnfMarebitoTriggerEvents
// 0x0010 (0x0010 - 0x0000)
struct FSnfMarebitoTriggerEvents final
{
public:
	TArray<struct FSnfSoundSimpleParam>           Sounds;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMarebitoTriggerEvents) == 0x000008, "Wrong alignment on FSnfMarebitoTriggerEvents");
static_assert(sizeof(FSnfMarebitoTriggerEvents) == 0x000010, "Wrong size on FSnfMarebitoTriggerEvents");
static_assert(offsetof(FSnfMarebitoTriggerEvents, Sounds) == 0x000000, "Member 'FSnfMarebitoTriggerEvents::Sounds' has a wrong offset!");

// ScriptStruct Snowfall.SnfMarebitoSignParam
// 0x0014 (0x0014 - 0x0000)
struct FSnfMarebitoSignParam final
{
public:
	struct FVector                                MarebitoLocation;                                  // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Excitement;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMarebitoSignParam) == 0x000004, "Wrong alignment on FSnfMarebitoSignParam");
static_assert(sizeof(FSnfMarebitoSignParam) == 0x000014, "Wrong size on FSnfMarebitoSignParam");
static_assert(offsetof(FSnfMarebitoSignParam, MarebitoLocation) == 0x000000, "Member 'FSnfMarebitoSignParam::MarebitoLocation' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoSignParam, Distance) == 0x00000C, "Member 'FSnfMarebitoSignParam::Distance' has a wrong offset!");
static_assert(offsetof(FSnfMarebitoSignParam, Excitement) == 0x000010, "Member 'FSnfMarebitoSignParam::Excitement' has a wrong offset!");

// ScriptStruct Snowfall.SnfMarebitoPositionData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x04) FSnfMarebitoPositionData final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfMarebitoPositionData) == 0x000004, "Wrong alignment on FSnfMarebitoPositionData");
static_assert(sizeof(FSnfMarebitoPositionData) == 0x000028, "Wrong size on FSnfMarebitoPositionData");

// ScriptStruct Snowfall.SnfWeaponHandSpectrumTableData
// 0x0070 (0x0078 - 0x0008)
struct FSnfWeaponHandSpectrumTableData final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0020(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         DamageAmount;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StunDamageAmount;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoreDamageAmount;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KKModeCoreDamageAmount;                            // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCoreOpen;                                         // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IntervalTime;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tickness;                                          // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeTime;                                        // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExplode;                                          // 0x0064(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExplodeDamageAmount;                               // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplodeCoreDamageAmount;                           // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KKModeExplodeCoreDamageAmount;                     // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfWeaponHandSpectrumTableData) == 0x000008, "Wrong alignment on FSnfWeaponHandSpectrumTableData");
static_assert(sizeof(FSnfWeaponHandSpectrumTableData) == 0x000078, "Wrong size on FSnfWeaponHandSpectrumTableData");
static_assert(offsetof(FSnfWeaponHandSpectrumTableData, Name) == 0x000008, "Member 'FSnfWeaponHandSpectrumTableData::Name' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumTableData, Description) == 0x000020, "Member 'FSnfWeaponHandSpectrumTableData::Description' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumTableData, DamageAmount) == 0x000038, "Member 'FSnfWeaponHandSpectrumTableData::DamageAmount' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumTableData, StunDamageAmount) == 0x00003C, "Member 'FSnfWeaponHandSpectrumTableData::StunDamageAmount' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumTableData, CoreDamageAmount) == 0x000040, "Member 'FSnfWeaponHandSpectrumTableData::CoreDamageAmount' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumTableData, KKModeCoreDamageAmount) == 0x000044, "Member 'FSnfWeaponHandSpectrumTableData::KKModeCoreDamageAmount' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumTableData, bCoreOpen) == 0x000048, "Member 'FSnfWeaponHandSpectrumTableData::bCoreOpen' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumTableData, IntervalTime) == 0x00004C, "Member 'FSnfWeaponHandSpectrumTableData::IntervalTime' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumTableData, Speed) == 0x000050, "Member 'FSnfWeaponHandSpectrumTableData::Speed' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumTableData, Range) == 0x000054, "Member 'FSnfWeaponHandSpectrumTableData::Range' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumTableData, Angle) == 0x000058, "Member 'FSnfWeaponHandSpectrumTableData::Angle' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumTableData, Tickness) == 0x00005C, "Member 'FSnfWeaponHandSpectrumTableData::Tickness' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumTableData, ChargeTime) == 0x000060, "Member 'FSnfWeaponHandSpectrumTableData::ChargeTime' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumTableData, bExplode) == 0x000064, "Member 'FSnfWeaponHandSpectrumTableData::bExplode' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumTableData, ExplodeDamageAmount) == 0x000068, "Member 'FSnfWeaponHandSpectrumTableData::ExplodeDamageAmount' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumTableData, ExplodeCoreDamageAmount) == 0x00006C, "Member 'FSnfWeaponHandSpectrumTableData::ExplodeCoreDamageAmount' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumTableData, KKModeExplodeCoreDamageAmount) == 0x000070, "Member 'FSnfWeaponHandSpectrumTableData::KKModeExplodeCoreDamageAmount' has a wrong offset!");

// ScriptStruct Snowfall.SnfMarebitoAgentData
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FSnfMarebitoAgentData final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfMarebitoAgentData) == 0x000008, "Wrong alignment on FSnfMarebitoAgentData");
static_assert(sizeof(FSnfMarebitoAgentData) == 0x000040, "Wrong size on FSnfMarebitoAgentData");

// ScriptStruct Snowfall.SnfDPSCheckParam
// 0x000C (0x000C - 0x0000)
struct FSnfDPSCheckParam final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoreDamage;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hit;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDPSCheckParam) == 0x000004, "Wrong alignment on FSnfDPSCheckParam");
static_assert(sizeof(FSnfDPSCheckParam) == 0x00000C, "Wrong size on FSnfDPSCheckParam");
static_assert(offsetof(FSnfDPSCheckParam, Damage) == 0x000000, "Member 'FSnfDPSCheckParam::Damage' has a wrong offset!");
static_assert(offsetof(FSnfDPSCheckParam, CoreDamage) == 0x000004, "Member 'FSnfDPSCheckParam::CoreDamage' has a wrong offset!");
static_assert(offsetof(FSnfDPSCheckParam, Hit) == 0x000008, "Member 'FSnfDPSCheckParam::Hit' has a wrong offset!");

// ScriptStruct Snowfall.SnfEnemyBurnDeathExplodeParam
// 0x000C (0x000C - 0x0000)
struct FSnfEnemyBurnDeathExplodeParam final
{
public:
	float                                         Range;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BurnDamage;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StunDamage;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEnemyBurnDeathExplodeParam) == 0x000004, "Wrong alignment on FSnfEnemyBurnDeathExplodeParam");
static_assert(sizeof(FSnfEnemyBurnDeathExplodeParam) == 0x00000C, "Wrong size on FSnfEnemyBurnDeathExplodeParam");
static_assert(offsetof(FSnfEnemyBurnDeathExplodeParam, Range) == 0x000000, "Member 'FSnfEnemyBurnDeathExplodeParam::Range' has a wrong offset!");
static_assert(offsetof(FSnfEnemyBurnDeathExplodeParam, BurnDamage) == 0x000004, "Member 'FSnfEnemyBurnDeathExplodeParam::BurnDamage' has a wrong offset!");
static_assert(offsetof(FSnfEnemyBurnDeathExplodeParam, StunDamage) == 0x000008, "Member 'FSnfEnemyBurnDeathExplodeParam::StunDamage' has a wrong offset!");

// ScriptStruct Snowfall.SnfMetricsStatMapping
// 0x0010 (0x0018 - 0x0008)
struct FSnfMetricsStatMapping final : public FTableRowBase
{
public:
	TArray<class FName>                           RelationStatNames;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMetricsStatMapping) == 0x000008, "Wrong alignment on FSnfMetricsStatMapping");
static_assert(sizeof(FSnfMetricsStatMapping) == 0x000018, "Wrong size on FSnfMetricsStatMapping");
static_assert(offsetof(FSnfMetricsStatMapping, RelationStatNames) == 0x000008, "Member 'FSnfMetricsStatMapping::RelationStatNames' has a wrong offset!");

// ScriptStruct Snowfall.SnfEnemySummonBaseParam
// 0x0010 (0x0010 - 0x0000)
struct FSnfEnemySummonBaseParam final
{
public:
	struct FGameplayTag                           RollTag;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHeight;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEnemySummonBaseParam) == 0x000004, "Wrong alignment on FSnfEnemySummonBaseParam");
static_assert(sizeof(FSnfEnemySummonBaseParam) == 0x000010, "Wrong size on FSnfEnemySummonBaseParam");
static_assert(offsetof(FSnfEnemySummonBaseParam, RollTag) == 0x000000, "Member 'FSnfEnemySummonBaseParam::RollTag' has a wrong offset!");
static_assert(offsetof(FSnfEnemySummonBaseParam, CapsuleHeight) == 0x000008, "Member 'FSnfEnemySummonBaseParam::CapsuleHeight' has a wrong offset!");
static_assert(offsetof(FSnfEnemySummonBaseParam, CapsuleRadius) == 0x00000C, "Member 'FSnfEnemySummonBaseParam::CapsuleRadius' has a wrong offset!");

// ScriptStruct Snowfall.SnfEnemyWarpParam
// 0x0008 (0x0008 - 0x0000)
struct FSnfEnemyWarpParam final
{
public:
	float                                         DelayTime;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightLimit;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEnemyWarpParam) == 0x000004, "Wrong alignment on FSnfEnemyWarpParam");
static_assert(sizeof(FSnfEnemyWarpParam) == 0x000008, "Wrong size on FSnfEnemyWarpParam");
static_assert(offsetof(FSnfEnemyWarpParam, DelayTime) == 0x000000, "Member 'FSnfEnemyWarpParam::DelayTime' has a wrong offset!");
static_assert(offsetof(FSnfEnemyWarpParam, HeightLimit) == 0x000004, "Member 'FSnfEnemyWarpParam::HeightLimit' has a wrong offset!");

// ScriptStruct Snowfall.SnfEnemyDownParam
// 0x0014 (0x0014 - 0x0000)
struct FSnfEnemyDownParam final
{
public:
	float                                         MinTime;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTime;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Water2nd_NormalPer;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Water2nd_WeakPer;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Water2nd_Range;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEnemyDownParam) == 0x000004, "Wrong alignment on FSnfEnemyDownParam");
static_assert(sizeof(FSnfEnemyDownParam) == 0x000014, "Wrong size on FSnfEnemyDownParam");
static_assert(offsetof(FSnfEnemyDownParam, MinTime) == 0x000000, "Member 'FSnfEnemyDownParam::MinTime' has a wrong offset!");
static_assert(offsetof(FSnfEnemyDownParam, MaxTime) == 0x000004, "Member 'FSnfEnemyDownParam::MaxTime' has a wrong offset!");
static_assert(offsetof(FSnfEnemyDownParam, Water2nd_NormalPer) == 0x000008, "Member 'FSnfEnemyDownParam::Water2nd_NormalPer' has a wrong offset!");
static_assert(offsetof(FSnfEnemyDownParam, Water2nd_WeakPer) == 0x00000C, "Member 'FSnfEnemyDownParam::Water2nd_WeakPer' has a wrong offset!");
static_assert(offsetof(FSnfEnemyDownParam, Water2nd_Range) == 0x000010, "Member 'FSnfEnemyDownParam::Water2nd_Range' has a wrong offset!");

// ScriptStruct Snowfall.SnfEnemyHeadshotBonus
// 0x0008 (0x0008 - 0x0000)
struct FSnfEnemyHeadshotBonus final
{
public:
	float                                         DefaultRate;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalRate;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEnemyHeadshotBonus) == 0x000004, "Wrong alignment on FSnfEnemyHeadshotBonus");
static_assert(sizeof(FSnfEnemyHeadshotBonus) == 0x000008, "Wrong size on FSnfEnemyHeadshotBonus");
static_assert(offsetof(FSnfEnemyHeadshotBonus, DefaultRate) == 0x000000, "Member 'FSnfEnemyHeadshotBonus::DefaultRate' has a wrong offset!");
static_assert(offsetof(FSnfEnemyHeadshotBonus, CriticalRate) == 0x000004, "Member 'FSnfEnemyHeadshotBonus::CriticalRate' has a wrong offset!");

// ScriptStruct Snowfall.SnfEnemyDropItemScale
// 0x000C (0x000C - 0x0000)
struct FSnfEnemyDropItemScale final
{
public:
	float                                         Backstab;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearGrab;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarGrab;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEnemyDropItemScale) == 0x000004, "Wrong alignment on FSnfEnemyDropItemScale");
static_assert(sizeof(FSnfEnemyDropItemScale) == 0x00000C, "Wrong size on FSnfEnemyDropItemScale");
static_assert(offsetof(FSnfEnemyDropItemScale, Backstab) == 0x000000, "Member 'FSnfEnemyDropItemScale::Backstab' has a wrong offset!");
static_assert(offsetof(FSnfEnemyDropItemScale, NearGrab) == 0x000004, "Member 'FSnfEnemyDropItemScale::NearGrab' has a wrong offset!");
static_assert(offsetof(FSnfEnemyDropItemScale, FarGrab) == 0x000008, "Member 'FSnfEnemyDropItemScale::FarGrab' has a wrong offset!");

// ScriptStruct Snowfall.SnfEnemyPersonalAKEventList
// 0x0030 (0x0030 - 0x0000)
struct FSnfEnemyPersonalAKEventList final
{
public:
	struct FGameplayTagContainer                  BaseRole;                                          // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class UAkAudioEvent*>                  AKEventPersonalArray;                              // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEnemyPersonalAKEventList) == 0x000008, "Wrong alignment on FSnfEnemyPersonalAKEventList");
static_assert(sizeof(FSnfEnemyPersonalAKEventList) == 0x000030, "Wrong size on FSnfEnemyPersonalAKEventList");
static_assert(offsetof(FSnfEnemyPersonalAKEventList, BaseRole) == 0x000000, "Member 'FSnfEnemyPersonalAKEventList::BaseRole' has a wrong offset!");
static_assert(offsetof(FSnfEnemyPersonalAKEventList, AKEventPersonalArray) == 0x000020, "Member 'FSnfEnemyPersonalAKEventList::AKEventPersonalArray' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponBowCapacity
// 0x0058 (0x0060 - 0x0008)
struct FSnfWeaponBowCapacity final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   BaseItem;                                          // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DropProbability;                                   // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DurabilityMin;                                     // 0x0031(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DurabilityMax;                                     // 0x0032(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageScaleMin;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageScaleMax;                                    // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErrorScaleMin;                                     // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErrorScaleMax;                                     // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeScaleMin;                                     // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeScaleMax;                                     // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoAimSpeedScaleMin;                              // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoAimSpeedScaleMax;                              // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalProbabilityScaleMin;                       // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalProbabilityScaleMax;                       // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfWeaponBowCapacity) == 0x000008, "Wrong alignment on FSnfWeaponBowCapacity");
static_assert(sizeof(FSnfWeaponBowCapacity) == 0x000060, "Wrong size on FSnfWeaponBowCapacity");
static_assert(offsetof(FSnfWeaponBowCapacity, BaseItem) == 0x000008, "Member 'FSnfWeaponBowCapacity::BaseItem' has a wrong offset!");
static_assert(offsetof(FSnfWeaponBowCapacity, DropProbability) == 0x000030, "Member 'FSnfWeaponBowCapacity::DropProbability' has a wrong offset!");
static_assert(offsetof(FSnfWeaponBowCapacity, DurabilityMin) == 0x000031, "Member 'FSnfWeaponBowCapacity::DurabilityMin' has a wrong offset!");
static_assert(offsetof(FSnfWeaponBowCapacity, DurabilityMax) == 0x000032, "Member 'FSnfWeaponBowCapacity::DurabilityMax' has a wrong offset!");
static_assert(offsetof(FSnfWeaponBowCapacity, DamageScaleMin) == 0x000034, "Member 'FSnfWeaponBowCapacity::DamageScaleMin' has a wrong offset!");
static_assert(offsetof(FSnfWeaponBowCapacity, DamageScaleMax) == 0x000038, "Member 'FSnfWeaponBowCapacity::DamageScaleMax' has a wrong offset!");
static_assert(offsetof(FSnfWeaponBowCapacity, ErrorScaleMin) == 0x00003C, "Member 'FSnfWeaponBowCapacity::ErrorScaleMin' has a wrong offset!");
static_assert(offsetof(FSnfWeaponBowCapacity, ErrorScaleMax) == 0x000040, "Member 'FSnfWeaponBowCapacity::ErrorScaleMax' has a wrong offset!");
static_assert(offsetof(FSnfWeaponBowCapacity, RangeScaleMin) == 0x000044, "Member 'FSnfWeaponBowCapacity::RangeScaleMin' has a wrong offset!");
static_assert(offsetof(FSnfWeaponBowCapacity, RangeScaleMax) == 0x000048, "Member 'FSnfWeaponBowCapacity::RangeScaleMax' has a wrong offset!");
static_assert(offsetof(FSnfWeaponBowCapacity, AutoAimSpeedScaleMin) == 0x00004C, "Member 'FSnfWeaponBowCapacity::AutoAimSpeedScaleMin' has a wrong offset!");
static_assert(offsetof(FSnfWeaponBowCapacity, AutoAimSpeedScaleMax) == 0x000050, "Member 'FSnfWeaponBowCapacity::AutoAimSpeedScaleMax' has a wrong offset!");
static_assert(offsetof(FSnfWeaponBowCapacity, CriticalProbabilityScaleMin) == 0x000054, "Member 'FSnfWeaponBowCapacity::CriticalProbabilityScaleMin' has a wrong offset!");
static_assert(offsetof(FSnfWeaponBowCapacity, CriticalProbabilityScaleMax) == 0x000058, "Member 'FSnfWeaponBowCapacity::CriticalProbabilityScaleMax' has a wrong offset!");

// ScriptStruct Snowfall.SnfMarkerDefenseParamInfo
// 0x0038 (0x0038 - 0x0000)
struct FSnfMarkerDefenseParamInfo final
{
public:
	TWeakObjectPtr<class UImage>                  DefenseImage;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NormalColor;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DangerColor;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DamageColor;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMarkerDefenseParamInfo) == 0x000004, "Wrong alignment on FSnfMarkerDefenseParamInfo");
static_assert(sizeof(FSnfMarkerDefenseParamInfo) == 0x000038, "Wrong size on FSnfMarkerDefenseParamInfo");
static_assert(offsetof(FSnfMarkerDefenseParamInfo, DefenseImage) == 0x000000, "Member 'FSnfMarkerDefenseParamInfo::DefenseImage' has a wrong offset!");
static_assert(offsetof(FSnfMarkerDefenseParamInfo, NormalColor) == 0x000008, "Member 'FSnfMarkerDefenseParamInfo::NormalColor' has a wrong offset!");
static_assert(offsetof(FSnfMarkerDefenseParamInfo, DangerColor) == 0x000018, "Member 'FSnfMarkerDefenseParamInfo::DangerColor' has a wrong offset!");
static_assert(offsetof(FSnfMarkerDefenseParamInfo, DamageColor) == 0x000028, "Member 'FSnfMarkerDefenseParamInfo::DamageColor' has a wrong offset!");

// ScriptStruct Snowfall.SnfCreateDelayMarkerData
// 0x0178 (0x0178 - 0x0000)
struct FSnfCreateDelayMarkerData final
{
public:
	struct FSnfGameMapInfoItem                    MapInfoItem;                                       // 0x0000(0x0168)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class USnfMarkerParentWidget*                 UseParentWidget;                                   // 0x0168(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInvoke;                                          // 0x0170(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCreateDelayMarkerData) == 0x000008, "Wrong alignment on FSnfCreateDelayMarkerData");
static_assert(sizeof(FSnfCreateDelayMarkerData) == 0x000178, "Wrong size on FSnfCreateDelayMarkerData");
static_assert(offsetof(FSnfCreateDelayMarkerData, MapInfoItem) == 0x000000, "Member 'FSnfCreateDelayMarkerData::MapInfoItem' has a wrong offset!");
static_assert(offsetof(FSnfCreateDelayMarkerData, UseParentWidget) == 0x000168, "Member 'FSnfCreateDelayMarkerData::UseParentWidget' has a wrong offset!");
static_assert(offsetof(FSnfCreateDelayMarkerData, IsInvoke) == 0x000170, "Member 'FSnfCreateDelayMarkerData::IsInvoke' has a wrong offset!");

// ScriptStruct Snowfall.SnfMarkerParentInfo
// 0x0028 (0x0028 - 0x0000)
struct FSnfMarkerParentInfo final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USnfMarkerBaseWidget>       ChildWidgetClass;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USnfGameMarkerObject>       MarkerData;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MarkerMinNum;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LayerNum;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInvokeCallType;                                  // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOneShotInvoke;                                   // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCheckGameFlag;                                   // 0x0022(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNotCheckCreateGameFlag;                          // 0x0023(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCheckArchiveOpen;                                // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUseCatalogIcon;                                  // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfMarkerParentInfo) == 0x000008, "Wrong alignment on FSnfMarkerParentInfo");
static_assert(sizeof(FSnfMarkerParentInfo) == 0x000028, "Wrong size on FSnfMarkerParentInfo");
static_assert(offsetof(FSnfMarkerParentInfo, Tag) == 0x000000, "Member 'FSnfMarkerParentInfo::Tag' has a wrong offset!");
static_assert(offsetof(FSnfMarkerParentInfo, ChildWidgetClass) == 0x000008, "Member 'FSnfMarkerParentInfo::ChildWidgetClass' has a wrong offset!");
static_assert(offsetof(FSnfMarkerParentInfo, MarkerData) == 0x000010, "Member 'FSnfMarkerParentInfo::MarkerData' has a wrong offset!");
static_assert(offsetof(FSnfMarkerParentInfo, MarkerMinNum) == 0x000018, "Member 'FSnfMarkerParentInfo::MarkerMinNum' has a wrong offset!");
static_assert(offsetof(FSnfMarkerParentInfo, LayerNum) == 0x00001C, "Member 'FSnfMarkerParentInfo::LayerNum' has a wrong offset!");
static_assert(offsetof(FSnfMarkerParentInfo, IsInvokeCallType) == 0x000020, "Member 'FSnfMarkerParentInfo::IsInvokeCallType' has a wrong offset!");
static_assert(offsetof(FSnfMarkerParentInfo, IsOneShotInvoke) == 0x000021, "Member 'FSnfMarkerParentInfo::IsOneShotInvoke' has a wrong offset!");
static_assert(offsetof(FSnfMarkerParentInfo, IsCheckGameFlag) == 0x000022, "Member 'FSnfMarkerParentInfo::IsCheckGameFlag' has a wrong offset!");
static_assert(offsetof(FSnfMarkerParentInfo, IsNotCheckCreateGameFlag) == 0x000023, "Member 'FSnfMarkerParentInfo::IsNotCheckCreateGameFlag' has a wrong offset!");
static_assert(offsetof(FSnfMarkerParentInfo, IsCheckArchiveOpen) == 0x000024, "Member 'FSnfMarkerParentInfo::IsCheckArchiveOpen' has a wrong offset!");
static_assert(offsetof(FSnfMarkerParentInfo, IsUseCatalogIcon) == 0x000025, "Member 'FSnfMarkerParentInfo::IsUseCatalogIcon' has a wrong offset!");

// ScriptStruct Snowfall.SnfBuffBarInfo
// 0x0008 (0x0008 - 0x0000)
struct FSnfBuffBarInfo final
{
public:
	TWeakObjectPtr<class UMaterialInstanceDynamic> Material;                                          // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfBuffBarInfo) == 0x000004, "Wrong alignment on FSnfBuffBarInfo");
static_assert(sizeof(FSnfBuffBarInfo) == 0x000008, "Wrong size on FSnfBuffBarInfo");
static_assert(offsetof(FSnfBuffBarInfo, Material) == 0x000000, "Member 'FSnfBuffBarInfo::Material' has a wrong offset!");

// ScriptStruct Snowfall.SnfCameraFilterData
// 0x0020 (0x0020 - 0x0000)
struct FSnfCameraFilterData final
{
public:
	class UMaterialInterface*                     FilterMaterial;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   MaterialTitleText;                                 // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCameraFilterData) == 0x000008, "Wrong alignment on FSnfCameraFilterData");
static_assert(sizeof(FSnfCameraFilterData) == 0x000020, "Wrong size on FSnfCameraFilterData");
static_assert(offsetof(FSnfCameraFilterData, FilterMaterial) == 0x000000, "Member 'FSnfCameraFilterData::FilterMaterial' has a wrong offset!");
static_assert(offsetof(FSnfCameraFilterData, MaterialTitleText) == 0x000008, "Member 'FSnfCameraFilterData::MaterialTitleText' has a wrong offset!");

// ScriptStruct Snowfall.SnfMenuMapSchoolInfo
// 0x0038 (0x0038 - 0x0000)
struct FSnfMenuMapSchoolInfo final
{
public:
	TSoftObjectPtr<class UTexture2D>              MapTexture;                                        // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartRoomNum;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndRoomNum;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfMenuMapSchoolInfo) == 0x000008, "Wrong alignment on FSnfMenuMapSchoolInfo");
static_assert(sizeof(FSnfMenuMapSchoolInfo) == 0x000038, "Wrong size on FSnfMenuMapSchoolInfo");
static_assert(offsetof(FSnfMenuMapSchoolInfo, MapTexture) == 0x000000, "Member 'FSnfMenuMapSchoolInfo::MapTexture' has a wrong offset!");
static_assert(offsetof(FSnfMenuMapSchoolInfo, StartRoomNum) == 0x000028, "Member 'FSnfMenuMapSchoolInfo::StartRoomNum' has a wrong offset!");
static_assert(offsetof(FSnfMenuMapSchoolInfo, EndRoomNum) == 0x00002C, "Member 'FSnfMenuMapSchoolInfo::EndRoomNum' has a wrong offset!");
static_assert(offsetof(FSnfMenuMapSchoolInfo, Height) == 0x000030, "Member 'FSnfMenuMapSchoolInfo::Height' has a wrong offset!");

// ScriptStruct Snowfall.SnfMapUITextureData
// 0x0040 (0x0040 - 0x0000)
struct FSnfMapUITextureData final
{
public:
	TSoftObjectPtr<class UObject>                 Texture;                                           // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Position;                                          // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Scale;                                             // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMapUITextureData) == 0x000008, "Wrong alignment on FSnfMapUITextureData");
static_assert(sizeof(FSnfMapUITextureData) == 0x000040, "Wrong size on FSnfMapUITextureData");
static_assert(offsetof(FSnfMapUITextureData, Texture) == 0x000000, "Member 'FSnfMapUITextureData::Texture' has a wrong offset!");
static_assert(offsetof(FSnfMapUITextureData, Position) == 0x000028, "Member 'FSnfMapUITextureData::Position' has a wrong offset!");
static_assert(offsetof(FSnfMapUITextureData, Size) == 0x000030, "Member 'FSnfMapUITextureData::Size' has a wrong offset!");
static_assert(offsetof(FSnfMapUITextureData, Scale) == 0x000038, "Member 'FSnfMapUITextureData::Scale' has a wrong offset!");

// ScriptStruct Snowfall.SnfOptionSelectItem
// 0x0028 (0x0028 - 0x0000)
struct FSnfOptionSelectItem final
{
public:
	class FText                                   DrawText;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 CommandValue;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfOptionSelectItem) == 0x000008, "Wrong alignment on FSnfOptionSelectItem");
static_assert(sizeof(FSnfOptionSelectItem) == 0x000028, "Wrong size on FSnfOptionSelectItem");
static_assert(offsetof(FSnfOptionSelectItem, DrawText) == 0x000000, "Member 'FSnfOptionSelectItem::DrawText' has a wrong offset!");
static_assert(offsetof(FSnfOptionSelectItem, CommandValue) == 0x000018, "Member 'FSnfOptionSelectItem::CommandValue' has a wrong offset!");

// ScriptStruct Snowfall.SnfPlayerMoveInfo
// 0x0038 (0x0040 - 0x0008)
struct FSnfPlayerMoveInfo final : public FTableRowBase
{
public:
	float                                         WalkSpeed;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprintAddSpeed;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanClimb;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanSprint;                                         // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanAttack;                                         // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanGrapple;                                        // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanGlide;                                          // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanJump;                                           // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         JumpPowerScale;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttuneFOV;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightLength;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RoomCamera;                                        // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoLight;                                         // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightScale;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SeparationArea;                                    // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SafeArea;                                          // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CrouchSpeed;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanCrouch;                                         // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableIndoorScan;                                  // 0x0035(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LightOffArea;                                      // 0x0036(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanScan;                                           // 0x0037(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SnowWalk;                                          // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfPlayerJumpTalismanType                    JumpType;                                          // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfPlayerMoveInfo) == 0x000008, "Wrong alignment on FSnfPlayerMoveInfo");
static_assert(sizeof(FSnfPlayerMoveInfo) == 0x000040, "Wrong size on FSnfPlayerMoveInfo");
static_assert(offsetof(FSnfPlayerMoveInfo, WalkSpeed) == 0x000008, "Member 'FSnfPlayerMoveInfo::WalkSpeed' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, SprintAddSpeed) == 0x00000C, "Member 'FSnfPlayerMoveInfo::SprintAddSpeed' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, CanClimb) == 0x000010, "Member 'FSnfPlayerMoveInfo::CanClimb' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, CanSprint) == 0x000011, "Member 'FSnfPlayerMoveInfo::CanSprint' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, CanAttack) == 0x000012, "Member 'FSnfPlayerMoveInfo::CanAttack' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, CanGrapple) == 0x000013, "Member 'FSnfPlayerMoveInfo::CanGrapple' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, CanGlide) == 0x000014, "Member 'FSnfPlayerMoveInfo::CanGlide' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, CanJump) == 0x000015, "Member 'FSnfPlayerMoveInfo::CanJump' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, JumpPowerScale) == 0x000018, "Member 'FSnfPlayerMoveInfo::JumpPowerScale' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, AttuneFOV) == 0x00001C, "Member 'FSnfPlayerMoveInfo::AttuneFOV' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, LightLength) == 0x000020, "Member 'FSnfPlayerMoveInfo::LightLength' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, RoomCamera) == 0x000024, "Member 'FSnfPlayerMoveInfo::RoomCamera' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, AutoLight) == 0x000025, "Member 'FSnfPlayerMoveInfo::AutoLight' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, LightScale) == 0x000028, "Member 'FSnfPlayerMoveInfo::LightScale' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, SeparationArea) == 0x00002C, "Member 'FSnfPlayerMoveInfo::SeparationArea' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, SafeArea) == 0x00002D, "Member 'FSnfPlayerMoveInfo::SafeArea' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, CrouchSpeed) == 0x000030, "Member 'FSnfPlayerMoveInfo::CrouchSpeed' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, CanCrouch) == 0x000034, "Member 'FSnfPlayerMoveInfo::CanCrouch' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, EnableIndoorScan) == 0x000035, "Member 'FSnfPlayerMoveInfo::EnableIndoorScan' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, LightOffArea) == 0x000036, "Member 'FSnfPlayerMoveInfo::LightOffArea' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, CanScan) == 0x000037, "Member 'FSnfPlayerMoveInfo::CanScan' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, SnowWalk) == 0x000038, "Member 'FSnfPlayerMoveInfo::SnowWalk' has a wrong offset!");
static_assert(offsetof(FSnfPlayerMoveInfo, JumpType) == 0x000039, "Member 'FSnfPlayerMoveInfo::JumpType' has a wrong offset!");

// ScriptStruct Snowfall.SnfMenuRadioTable
// 0x0020 (0x0028 - 0x0008)
struct FSnfMenuRadioTable final : public FTableRowBase
{
public:
	class UAkAudioEvent*                          SoundEvent;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CatalogId;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DevComment;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMenuRadioTable) == 0x000008, "Wrong alignment on FSnfMenuRadioTable");
static_assert(sizeof(FSnfMenuRadioTable) == 0x000028, "Wrong size on FSnfMenuRadioTable");
static_assert(offsetof(FSnfMenuRadioTable, SoundEvent) == 0x000008, "Member 'FSnfMenuRadioTable::SoundEvent' has a wrong offset!");
static_assert(offsetof(FSnfMenuRadioTable, CatalogId) == 0x000010, "Member 'FSnfMenuRadioTable::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfMenuRadioTable, DevComment) == 0x000018, "Member 'FSnfMenuRadioTable::DevComment' has a wrong offset!");

// ScriptStruct Snowfall.SnfNekomataRewardData
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FSnfNekomataRewardData final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfNekomataRewardData) == 0x000004, "Wrong alignment on FSnfNekomataRewardData");
static_assert(sizeof(FSnfNekomataRewardData) == 0x000014, "Wrong size on FSnfNekomataRewardData");

// ScriptStruct Snowfall.SnfSkillVideoData
// 0x0030 (0x0038 - 0x0008)
struct FSnfSkillVideoData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UMediaPlaylist>          SkillVideoPlaylist;                                // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Comment;                                           // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfSkillVideoData) == 0x000008, "Wrong alignment on FSnfSkillVideoData");
static_assert(sizeof(FSnfSkillVideoData) == 0x000038, "Wrong size on FSnfSkillVideoData");
static_assert(offsetof(FSnfSkillVideoData, SkillVideoPlaylist) == 0x000008, "Member 'FSnfSkillVideoData::SkillVideoPlaylist' has a wrong offset!");
static_assert(offsetof(FSnfSkillVideoData, Comment) == 0x000030, "Member 'FSnfSkillVideoData::Comment' has a wrong offset!");

// ScriptStruct Snowfall.SnfSkillLineData
// 0x0010 (0x0010 - 0x0000)
struct FSnfSkillLineData final
{
public:
	class USnfMenuPlayerSkillItemWidget*          Item;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnfMenuPlayerSkillLineWidget*          Line;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfSkillLineData) == 0x000008, "Wrong alignment on FSnfSkillLineData");
static_assert(sizeof(FSnfSkillLineData) == 0x000010, "Wrong size on FSnfSkillLineData");
static_assert(offsetof(FSnfSkillLineData, Item) == 0x000000, "Member 'FSnfSkillLineData::Item' has a wrong offset!");
static_assert(offsetof(FSnfSkillLineData, Line) == 0x000008, "Member 'FSnfSkillLineData::Line' has a wrong offset!");

// ScriptStruct Snowfall.SnfMorphedRaccoonActorAnimalAnimSetting
// 0x0018 (0x0018 - 0x0000)
struct FSnfMorphedRaccoonActorAnimalAnimSetting final
{
public:
	bool                                          bUseAnimationAsset;                                // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      AnimationAsset;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AnimMontage;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMorphedRaccoonActorAnimalAnimSetting) == 0x000008, "Wrong alignment on FSnfMorphedRaccoonActorAnimalAnimSetting");
static_assert(sizeof(FSnfMorphedRaccoonActorAnimalAnimSetting) == 0x000018, "Wrong size on FSnfMorphedRaccoonActorAnimalAnimSetting");
static_assert(offsetof(FSnfMorphedRaccoonActorAnimalAnimSetting, bUseAnimationAsset) == 0x000000, "Member 'FSnfMorphedRaccoonActorAnimalAnimSetting::bUseAnimationAsset' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorAnimalAnimSetting, AnimationAsset) == 0x000008, "Member 'FSnfMorphedRaccoonActorAnimalAnimSetting::AnimationAsset' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorAnimalAnimSetting, AnimMontage) == 0x000010, "Member 'FSnfMorphedRaccoonActorAnimalAnimSetting::AnimMontage' has a wrong offset!");

// ScriptStruct Snowfall.SnfMorphedRaccoonActorSkeletalPartsComponent
// 0x0028 (0x0028 - 0x0000)
struct FSnfMorphedRaccoonActorSkeletalPartsComponent final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        AnimationAsset;                                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartsSettingIndex;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SocketPartsIndex;                                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfMorphedRaccoonActorSkeletalPartsComponent) == 0x000008, "Wrong alignment on FSnfMorphedRaccoonActorSkeletalPartsComponent");
static_assert(sizeof(FSnfMorphedRaccoonActorSkeletalPartsComponent) == 0x000028, "Wrong size on FSnfMorphedRaccoonActorSkeletalPartsComponent");
static_assert(offsetof(FSnfMorphedRaccoonActorSkeletalPartsComponent, SkeletalMeshComponent) == 0x000000, "Member 'FSnfMorphedRaccoonActorSkeletalPartsComponent::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorSkeletalPartsComponent, AnimationAsset) == 0x000008, "Member 'FSnfMorphedRaccoonActorSkeletalPartsComponent::AnimationAsset' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorSkeletalPartsComponent, PartsSettingIndex) == 0x000010, "Member 'FSnfMorphedRaccoonActorSkeletalPartsComponent::PartsSettingIndex' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorSkeletalPartsComponent, SocketPartsIndex) == 0x000014, "Member 'FSnfMorphedRaccoonActorSkeletalPartsComponent::SocketPartsIndex' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorSkeletalPartsComponent, SocketName) == 0x000018, "Member 'FSnfMorphedRaccoonActorSkeletalPartsComponent::SocketName' has a wrong offset!");

// ScriptStruct Snowfall.SnfMorphedRaccoonActorParts
// 0x0110 (0x0110 - 0x0000)
struct FSnfMorphedRaccoonActorParts final
{
public:
	bool                                          bUseSkeletalMesh;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          SkeltalMesh;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  SkeletalMeshMaterials;                             // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        AnimationAsset;                                    // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTngAnimInstance>           AnimInstance;                                      // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMesh;                                        // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  StaticMeshMaterials;                               // 0x0080(0x0050)(Edit, NativeAccessSpecifierPublic)
	int32                                         SocketPartsIndex;                                  // 0x00D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x00D4(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PartsTransform;                                    // 0x00E0(0x0030)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfMorphedRaccoonActorParts) == 0x000010, "Wrong alignment on FSnfMorphedRaccoonActorParts");
static_assert(sizeof(FSnfMorphedRaccoonActorParts) == 0x000110, "Wrong size on FSnfMorphedRaccoonActorParts");
static_assert(offsetof(FSnfMorphedRaccoonActorParts, bUseSkeletalMesh) == 0x000000, "Member 'FSnfMorphedRaccoonActorParts::bUseSkeletalMesh' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorParts, SkeltalMesh) == 0x000008, "Member 'FSnfMorphedRaccoonActorParts::SkeltalMesh' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorParts, SkeletalMeshMaterials) == 0x000010, "Member 'FSnfMorphedRaccoonActorParts::SkeletalMeshMaterials' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorParts, AnimationAsset) == 0x000060, "Member 'FSnfMorphedRaccoonActorParts::AnimationAsset' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorParts, PlayRate) == 0x000068, "Member 'FSnfMorphedRaccoonActorParts::PlayRate' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorParts, AnimInstance) == 0x000070, "Member 'FSnfMorphedRaccoonActorParts::AnimInstance' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorParts, StaticMesh) == 0x000078, "Member 'FSnfMorphedRaccoonActorParts::StaticMesh' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorParts, StaticMeshMaterials) == 0x000080, "Member 'FSnfMorphedRaccoonActorParts::StaticMeshMaterials' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorParts, SocketPartsIndex) == 0x0000D0, "Member 'FSnfMorphedRaccoonActorParts::SocketPartsIndex' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorParts, SocketName) == 0x0000D4, "Member 'FSnfMorphedRaccoonActorParts::SocketName' has a wrong offset!");
static_assert(offsetof(FSnfMorphedRaccoonActorParts, PartsTransform) == 0x0000E0, "Member 'FSnfMorphedRaccoonActorParts::PartsTransform' has a wrong offset!");

// ScriptStruct Snowfall.SnfMultiBoxSetting
// 0x0040 (0x0040 - 0x0000)
struct FSnfMultiBoxSetting final
{
public:
	struct FTransform                             RelativeTransform;                                 // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BoxSize;                                           // 0x0030(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfMultiBoxSetting) == 0x000010, "Wrong alignment on FSnfMultiBoxSetting");
static_assert(sizeof(FSnfMultiBoxSetting) == 0x000040, "Wrong size on FSnfMultiBoxSetting");
static_assert(offsetof(FSnfMultiBoxSetting, RelativeTransform) == 0x000000, "Member 'FSnfMultiBoxSetting::RelativeTransform' has a wrong offset!");
static_assert(offsetof(FSnfMultiBoxSetting, BoxSize) == 0x000030, "Member 'FSnfMultiBoxSetting::BoxSize' has a wrong offset!");

// ScriptStruct Snowfall.SnfNpcAnimalTypeAction
// 0x0018 (0x0018 - 0x0000)
struct FSnfNpcAnimalTypeAction final
{
public:
	class FName                                   TypeName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TypeActionData;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnd;                                              // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfNpcAnimalTypeAction) == 0x000008, "Wrong alignment on FSnfNpcAnimalTypeAction");
static_assert(sizeof(FSnfNpcAnimalTypeAction) == 0x000018, "Wrong size on FSnfNpcAnimalTypeAction");
static_assert(offsetof(FSnfNpcAnimalTypeAction, TypeName) == 0x000000, "Member 'FSnfNpcAnimalTypeAction::TypeName' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimalTypeAction, TypeActionData) == 0x000008, "Member 'FSnfNpcAnimalTypeAction::TypeActionData' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimalTypeAction, bEnd) == 0x000010, "Member 'FSnfNpcAnimalTypeAction::bEnd' has a wrong offset!");

// ScriptStruct Snowfall.SnfNpcAnimalConfigData
// 0x0050 (0x0050 - 0x0000)
struct FSnfNpcAnimalConfigData final
{
public:
	bool                                          bEnableInteract;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AllowCoopActionHeight;                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableTakeDamage;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFeedTalk;                                   // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForActivity;                                      // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForTelephoneCardActivity;                         // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GuideSearchRadius;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThreatSearchDistance;                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableTransitIdleType;                            // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IdleType;                                          // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSnfAnimalGuideSetting                 GuideSetting;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   BeginPlayListName;                                 // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAvoidBattle;                                // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AvoidVanishTime;                                   // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTalkMotion;                                    // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFloating;                                         // 0x0031(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDodgeOnPlayer;                                    // 0x0032(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             TelephoneCardTalkDataTable;                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TelephoneCardNoFeedingTalkId;                      // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TelephoneCardGuideStartTalkId;                     // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfNpcAnimalConfigData) == 0x000008, "Wrong alignment on FSnfNpcAnimalConfigData");
static_assert(sizeof(FSnfNpcAnimalConfigData) == 0x000050, "Wrong size on FSnfNpcAnimalConfigData");
static_assert(offsetof(FSnfNpcAnimalConfigData, bEnableInteract) == 0x000000, "Member 'FSnfNpcAnimalConfigData::bEnableInteract' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimalConfigData, AllowCoopActionHeight) == 0x000004, "Member 'FSnfNpcAnimalConfigData::AllowCoopActionHeight' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimalConfigData, bEnableTakeDamage) == 0x000008, "Member 'FSnfNpcAnimalConfigData::bEnableTakeDamage' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimalConfigData, bEnableFeedTalk) == 0x000009, "Member 'FSnfNpcAnimalConfigData::bEnableFeedTalk' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimalConfigData, bForActivity) == 0x00000A, "Member 'FSnfNpcAnimalConfigData::bForActivity' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimalConfigData, bForTelephoneCardActivity) == 0x00000B, "Member 'FSnfNpcAnimalConfigData::bForTelephoneCardActivity' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimalConfigData, GuideSearchRadius) == 0x00000C, "Member 'FSnfNpcAnimalConfigData::GuideSearchRadius' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimalConfigData, ThreatSearchDistance) == 0x000010, "Member 'FSnfNpcAnimalConfigData::ThreatSearchDistance' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimalConfigData, bEnableTransitIdleType) == 0x000014, "Member 'FSnfNpcAnimalConfigData::bEnableTransitIdleType' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimalConfigData, IdleType) == 0x000015, "Member 'FSnfNpcAnimalConfigData::IdleType' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimalConfigData, GuideSetting) == 0x000018, "Member 'FSnfNpcAnimalConfigData::GuideSetting' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimalConfigData, BeginPlayListName) == 0x000020, "Member 'FSnfNpcAnimalConfigData::BeginPlayListName' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimalConfigData, bEnableAvoidBattle) == 0x000028, "Member 'FSnfNpcAnimalConfigData::bEnableAvoidBattle' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimalConfigData, AvoidVanishTime) == 0x00002C, "Member 'FSnfNpcAnimalConfigData::AvoidVanishTime' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimalConfigData, bUseTalkMotion) == 0x000030, "Member 'FSnfNpcAnimalConfigData::bUseTalkMotion' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimalConfigData, bFloating) == 0x000031, "Member 'FSnfNpcAnimalConfigData::bFloating' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimalConfigData, bDodgeOnPlayer) == 0x000032, "Member 'FSnfNpcAnimalConfigData::bDodgeOnPlayer' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimalConfigData, TelephoneCardTalkDataTable) == 0x000038, "Member 'FSnfNpcAnimalConfigData::TelephoneCardTalkDataTable' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimalConfigData, TelephoneCardNoFeedingTalkId) == 0x000040, "Member 'FSnfNpcAnimalConfigData::TelephoneCardNoFeedingTalkId' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimalConfigData, TelephoneCardGuideStartTalkId) == 0x000048, "Member 'FSnfNpcAnimalConfigData::TelephoneCardGuideStartTalkId' has a wrong offset!");

// ScriptStruct Snowfall.SnfAnimalAttachmentTable
// 0x0038 (0x0040 - 0x0008)
struct FSnfAnimalAttachmentTable final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USkeletalMesh>           BaseMesh;                                          // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USnfCcParamDataAsset>> CcParams;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfAnimalAttachmentTable) == 0x000008, "Wrong alignment on FSnfAnimalAttachmentTable");
static_assert(sizeof(FSnfAnimalAttachmentTable) == 0x000040, "Wrong size on FSnfAnimalAttachmentTable");
static_assert(offsetof(FSnfAnimalAttachmentTable, BaseMesh) == 0x000008, "Member 'FSnfAnimalAttachmentTable::BaseMesh' has a wrong offset!");
static_assert(offsetof(FSnfAnimalAttachmentTable, CcParams) == 0x000030, "Member 'FSnfAnimalAttachmentTable::CcParams' has a wrong offset!");

// ScriptStruct Snowfall.SnfNpcAnimSeq
// 0x0010 (0x0010 - 0x0000)
struct FSnfNpcAnimSeq final
{
public:
	class UAnimSequenceBase*                      AnimSeqBase;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfNpcAnimSeq) == 0x000008, "Wrong alignment on FSnfNpcAnimSeq");
static_assert(sizeof(FSnfNpcAnimSeq) == 0x000010, "Wrong size on FSnfNpcAnimSeq");
static_assert(offsetof(FSnfNpcAnimSeq, AnimSeqBase) == 0x000000, "Member 'FSnfNpcAnimSeq::AnimSeqBase' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimSeq, PlayRate) == 0x000008, "Member 'FSnfNpcAnimSeq::PlayRate' has a wrong offset!");
static_assert(offsetof(FSnfNpcAnimSeq, bLoop) == 0x00000C, "Member 'FSnfNpcAnimSeq::bLoop' has a wrong offset!");

// ScriptStruct Snowfall.SnfPeopleAIJobSubBT
// 0x0010 (0x0010 - 0x0000)
struct FSnfPeopleAIJobSubBT final
{
public:
	struct FGameplayTag                           InjectionTag;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBehaviorTree*                          BTAsset;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPeopleAIJobSubBT) == 0x000008, "Wrong alignment on FSnfPeopleAIJobSubBT");
static_assert(sizeof(FSnfPeopleAIJobSubBT) == 0x000010, "Wrong size on FSnfPeopleAIJobSubBT");
static_assert(offsetof(FSnfPeopleAIJobSubBT, InjectionTag) == 0x000000, "Member 'FSnfPeopleAIJobSubBT::InjectionTag' has a wrong offset!");
static_assert(offsetof(FSnfPeopleAIJobSubBT, BTAsset) == 0x000008, "Member 'FSnfPeopleAIJobSubBT::BTAsset' has a wrong offset!");

// ScriptStruct Snowfall.SnfNpcPerception
// 0x0058 (0x0058 - 0x0000)
struct FSnfNpcPerception final
{
public:
	float                                         SightRadius;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SightRadiusMargin;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SightAngle;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SightHeight;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SightRayTraceTargetJointName;                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SightRayTracePlayerJointName;                      // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             SightRayTraceChannel;                              // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SightVelocity;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SightVelocityCurve;                                // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HearingRadius;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HearingVelocity;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            HearingVelocityCurve;                              // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TakeRadius;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TakeVelocity;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TouchRadius;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TouchVelocity;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoolingVelocity;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfNpcPerception) == 0x000008, "Wrong alignment on FSnfNpcPerception");
static_assert(sizeof(FSnfNpcPerception) == 0x000058, "Wrong size on FSnfNpcPerception");
static_assert(offsetof(FSnfNpcPerception, SightRadius) == 0x000000, "Member 'FSnfNpcPerception::SightRadius' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerception, SightRadiusMargin) == 0x000004, "Member 'FSnfNpcPerception::SightRadiusMargin' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerception, SightAngle) == 0x000008, "Member 'FSnfNpcPerception::SightAngle' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerception, SightHeight) == 0x00000C, "Member 'FSnfNpcPerception::SightHeight' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerception, SightRayTraceTargetJointName) == 0x000010, "Member 'FSnfNpcPerception::SightRayTraceTargetJointName' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerception, SightRayTracePlayerJointName) == 0x000018, "Member 'FSnfNpcPerception::SightRayTracePlayerJointName' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerception, SightRayTraceChannel) == 0x000020, "Member 'FSnfNpcPerception::SightRayTraceChannel' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerception, SightVelocity) == 0x000024, "Member 'FSnfNpcPerception::SightVelocity' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerception, SightVelocityCurve) == 0x000028, "Member 'FSnfNpcPerception::SightVelocityCurve' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerception, HearingRadius) == 0x000030, "Member 'FSnfNpcPerception::HearingRadius' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerception, HearingVelocity) == 0x000034, "Member 'FSnfNpcPerception::HearingVelocity' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerception, HearingVelocityCurve) == 0x000038, "Member 'FSnfNpcPerception::HearingVelocityCurve' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerception, TakeRadius) == 0x000040, "Member 'FSnfNpcPerception::TakeRadius' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerception, TakeVelocity) == 0x000044, "Member 'FSnfNpcPerception::TakeVelocity' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerception, TouchRadius) == 0x000048, "Member 'FSnfNpcPerception::TouchRadius' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerception, TouchVelocity) == 0x00004C, "Member 'FSnfNpcPerception::TouchVelocity' has a wrong offset!");
static_assert(offsetof(FSnfNpcPerception, CoolingVelocity) == 0x000050, "Member 'FSnfNpcPerception::CoolingVelocity' has a wrong offset!");

// ScriptStruct Snowfall.SnfHumanoidMotionFlow
// 0x0028 (0x0030 - 0x0008)
struct FSnfHumanoidMotionFlow final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UAnimSequenceBase>       FromIdle;                                          // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfHumanoidMotionFlow) == 0x000008, "Wrong alignment on FSnfHumanoidMotionFlow");
static_assert(sizeof(FSnfHumanoidMotionFlow) == 0x000030, "Wrong size on FSnfHumanoidMotionFlow");
static_assert(offsetof(FSnfHumanoidMotionFlow, FromIdle) == 0x000008, "Member 'FSnfHumanoidMotionFlow::FromIdle' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalkMotionDetail
// 0x0001 (0x0001 - 0x0000)
struct FSnfTalkMotionDetail final
{
public:
	bool                                          DoesNotBlendInNextWhenTalkSkip;                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalkMotionDetail) == 0x000001, "Wrong alignment on FSnfTalkMotionDetail");
static_assert(sizeof(FSnfTalkMotionDetail) == 0x000001, "Wrong size on FSnfTalkMotionDetail");
static_assert(offsetof(FSnfTalkMotionDetail, DoesNotBlendInNextWhenTalkSkip) == 0x000000, "Member 'FSnfTalkMotionDetail::DoesNotBlendInNextWhenTalkSkip' has a wrong offset!");

// ScriptStruct Snowfall.SnfOmikujiActorBuffSetting
// 0x0068 (0x0068 - 0x0000)
struct FSnfOmikujiActorBuffSetting final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ESnfBuffType, float>                     BuffTypeRate;                                      // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    BuffDataTable;                                     // 0x0058(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfOmikujiActorBuffSetting) == 0x000008, "Wrong alignment on FSnfOmikujiActorBuffSetting");
static_assert(sizeof(FSnfOmikujiActorBuffSetting) == 0x000068, "Wrong size on FSnfOmikujiActorBuffSetting");
static_assert(offsetof(FSnfOmikujiActorBuffSetting, Ratio) == 0x000000, "Member 'FSnfOmikujiActorBuffSetting::Ratio' has a wrong offset!");
static_assert(offsetof(FSnfOmikujiActorBuffSetting, BuffTypeRate) == 0x000008, "Member 'FSnfOmikujiActorBuffSetting::BuffTypeRate' has a wrong offset!");
static_assert(offsetof(FSnfOmikujiActorBuffSetting, BuffDataTable) == 0x000058, "Member 'FSnfOmikujiActorBuffSetting::BuffDataTable' has a wrong offset!");

// ScriptStruct Snowfall.SnfParanormalActorParam
// 0x0050 (0x0050 - 0x0000)
struct FSnfParanormalActorParam final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class ATriggerBase>>    Triggers;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, UObjectWrapper, NativeAccessSpecifierPublic)
	EFSnfParanormalTriggerBehavior                TriggerBehavior;                                   // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseInitialValue;                                   // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitialValue;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UpdateTriggerPosotion;                             // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        TriggerPosotionOffsets;                            // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfParanormalActorParam) == 0x000008, "Wrong alignment on FSnfParanormalActorParam");
static_assert(sizeof(FSnfParanormalActorParam) == 0x000050, "Wrong size on FSnfParanormalActorParam");
static_assert(offsetof(FSnfParanormalActorParam, Name) == 0x000000, "Member 'FSnfParanormalActorParam::Name' has a wrong offset!");
static_assert(offsetof(FSnfParanormalActorParam, Curve) == 0x000008, "Member 'FSnfParanormalActorParam::Curve' has a wrong offset!");
static_assert(offsetof(FSnfParanormalActorParam, Triggers) == 0x000010, "Member 'FSnfParanormalActorParam::Triggers' has a wrong offset!");
static_assert(offsetof(FSnfParanormalActorParam, TriggerBehavior) == 0x000020, "Member 'FSnfParanormalActorParam::TriggerBehavior' has a wrong offset!");
static_assert(offsetof(FSnfParanormalActorParam, UseInitialValue) == 0x000021, "Member 'FSnfParanormalActorParam::UseInitialValue' has a wrong offset!");
static_assert(offsetof(FSnfParanormalActorParam, InitialValue) == 0x000024, "Member 'FSnfParanormalActorParam::InitialValue' has a wrong offset!");
static_assert(offsetof(FSnfParanormalActorParam, UpdateTriggerPosotion) == 0x000028, "Member 'FSnfParanormalActorParam::UpdateTriggerPosotion' has a wrong offset!");
static_assert(offsetof(FSnfParanormalActorParam, TriggerPosotionOffsets) == 0x000030, "Member 'FSnfParanormalActorParam::TriggerPosotionOffsets' has a wrong offset!");

// ScriptStruct Snowfall.SnfParticlParamSet
// 0x0018 (0x0018 - 0x0000)
struct FSnfParticlParamSet final
{
public:
	class UCurveFloat*                            RateCurve;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSnfParticlParamScalar>         ScalarList;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfParticlParamSet) == 0x000008, "Wrong alignment on FSnfParticlParamSet");
static_assert(sizeof(FSnfParticlParamSet) == 0x000018, "Wrong size on FSnfParticlParamSet");
static_assert(offsetof(FSnfParticlParamSet, RateCurve) == 0x000000, "Member 'FSnfParticlParamSet::RateCurve' has a wrong offset!");
static_assert(offsetof(FSnfParticlParamSet, ScalarList) == 0x000008, "Member 'FSnfParticlParamSet::ScalarList' has a wrong offset!");

// ScriptStruct Snowfall.SnfPatrolRageData
// 0x0010 (0x0010 - 0x0000)
struct FSnfPatrolRageData final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPatrolRageData) == 0x000004, "Wrong alignment on FSnfPatrolRageData");
static_assert(sizeof(FSnfPatrolRageData) == 0x000010, "Wrong size on FSnfPatrolRageData");
static_assert(offsetof(FSnfPatrolRageData, Origin) == 0x000000, "Member 'FSnfPatrolRageData::Origin' has a wrong offset!");
static_assert(offsetof(FSnfPatrolRageData, Radius) == 0x00000C, "Member 'FSnfPatrolRageData::Radius' has a wrong offset!");

// ScriptStruct Snowfall.SnfGhostPictureParameter
// 0x001C (0x001C - 0x0000)
struct alignas(0x04) FSnfGhostPictureParameter final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGhostPictureParameter) == 0x000004, "Wrong alignment on FSnfGhostPictureParameter");
static_assert(sizeof(FSnfGhostPictureParameter) == 0x00001C, "Wrong size on FSnfGhostPictureParameter");

// ScriptStruct Snowfall.BinocularsFxPropInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FBinocularsFxPropInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBinocularsFxPropInfo) == 0x000008, "Wrong alignment on FBinocularsFxPropInfo");
static_assert(sizeof(FBinocularsFxPropInfo) == 0x000010, "Wrong size on FBinocularsFxPropInfo");

// ScriptStruct Snowfall.SnfGhostInfo
// 0x0010 (0x0010 - 0x0000)
struct FSnfGhostInfo final
{
public:
	TWeakObjectPtr<class AActor>                  Target;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AbsorbTimer;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAbsorbBegin;                                     // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGhostInfo) == 0x000004, "Wrong alignment on FSnfGhostInfo");
static_assert(sizeof(FSnfGhostInfo) == 0x000010, "Wrong size on FSnfGhostInfo");
static_assert(offsetof(FSnfGhostInfo, Target) == 0x000000, "Member 'FSnfGhostInfo::Target' has a wrong offset!");
static_assert(offsetof(FSnfGhostInfo, AbsorbTimer) == 0x000008, "Member 'FSnfGhostInfo::AbsorbTimer' has a wrong offset!");
static_assert(offsetof(FSnfGhostInfo, IsAbsorbBegin) == 0x00000C, "Member 'FSnfGhostInfo::IsAbsorbBegin' has a wrong offset!");

// ScriptStruct Snowfall.SnfPlayerInMusubiInfo
// 0x0010 (0x0018 - 0x0008)
struct FSnfPlayerInMusubiInfo final : public FTableRowBase
{
public:
	int32                                         AnimationNo;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfPlayerInMusubiInput                       Input_0;                                           // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfPlayerInMusubiInput                       Input_1;                                           // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfPlayerInMusubiInput                       Input_2;                                           // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfPlayerInMusubiInput                       Input_3;                                           // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfPlayerInMusubiInput                       Input_4;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfPlayerInMusubiInput                       Input_5;                                           // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfPlayerInMusubiInput                       Input_6;                                           // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfPlayerInMusubiInput                       Input_7;                                           // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfPlayerInMusubiInput                       Input_8;                                           // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfPlayerInMusubiInput                       Input_9;                                           // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfPlayerInMusubiInput                       Input_10;                                          // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfPlayerInMusubiInfo) == 0x000008, "Wrong alignment on FSnfPlayerInMusubiInfo");
static_assert(sizeof(FSnfPlayerInMusubiInfo) == 0x000018, "Wrong size on FSnfPlayerInMusubiInfo");
static_assert(offsetof(FSnfPlayerInMusubiInfo, AnimationNo) == 0x000008, "Member 'FSnfPlayerInMusubiInfo::AnimationNo' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInMusubiInfo, Input_0) == 0x00000C, "Member 'FSnfPlayerInMusubiInfo::Input_0' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInMusubiInfo, Input_1) == 0x00000D, "Member 'FSnfPlayerInMusubiInfo::Input_1' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInMusubiInfo, Input_2) == 0x00000E, "Member 'FSnfPlayerInMusubiInfo::Input_2' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInMusubiInfo, Input_3) == 0x00000F, "Member 'FSnfPlayerInMusubiInfo::Input_3' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInMusubiInfo, Input_4) == 0x000010, "Member 'FSnfPlayerInMusubiInfo::Input_4' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInMusubiInfo, Input_5) == 0x000011, "Member 'FSnfPlayerInMusubiInfo::Input_5' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInMusubiInfo, Input_6) == 0x000012, "Member 'FSnfPlayerInMusubiInfo::Input_6' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInMusubiInfo, Input_7) == 0x000013, "Member 'FSnfPlayerInMusubiInfo::Input_7' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInMusubiInfo, Input_8) == 0x000014, "Member 'FSnfPlayerInMusubiInfo::Input_8' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInMusubiInfo, Input_9) == 0x000015, "Member 'FSnfPlayerInMusubiInfo::Input_9' has a wrong offset!");
static_assert(offsetof(FSnfPlayerInMusubiInfo, Input_10) == 0x000016, "Member 'FSnfPlayerInMusubiInfo::Input_10' has a wrong offset!");

// ScriptStruct Snowfall.SnfLevelInfo
// 0x0010 (0x0018 - 0x0008)
struct FSnfLevelInfo final : public FTableRowBase
{
public:
	int32                                         NextLevelEXP;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetSP;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetLife;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfLevelInfo) == 0x000008, "Wrong alignment on FSnfLevelInfo");
static_assert(sizeof(FSnfLevelInfo) == 0x000018, "Wrong size on FSnfLevelInfo");
static_assert(offsetof(FSnfLevelInfo, NextLevelEXP) == 0x000008, "Member 'FSnfLevelInfo::NextLevelEXP' has a wrong offset!");
static_assert(offsetof(FSnfLevelInfo, GetSP) == 0x00000C, "Member 'FSnfLevelInfo::GetSP' has a wrong offset!");
static_assert(offsetof(FSnfLevelInfo, GetLife) == 0x000010, "Member 'FSnfLevelInfo::GetLife' has a wrong offset!");

// ScriptStruct Snowfall.SnfCostumeInfo
// 0x0058 (0x0060 - 0x0008)
struct FSnfCostumeInfo final : public FTableRowBase
{
public:
	ESnfCostumeType                               Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TypeIndex;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CatalogId;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SetIndex;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModelIndex;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VariationIndex;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   VariationList;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SetAudioEvent;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawList;                                          // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Tags;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   Comment;                                           // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfCostumeInfo) == 0x000008, "Wrong alignment on FSnfCostumeInfo");
static_assert(sizeof(FSnfCostumeInfo) == 0x000060, "Wrong size on FSnfCostumeInfo");
static_assert(offsetof(FSnfCostumeInfo, Type) == 0x000008, "Member 'FSnfCostumeInfo::Type' has a wrong offset!");
static_assert(offsetof(FSnfCostumeInfo, TypeIndex) == 0x00000C, "Member 'FSnfCostumeInfo::TypeIndex' has a wrong offset!");
static_assert(offsetof(FSnfCostumeInfo, CatalogId) == 0x000010, "Member 'FSnfCostumeInfo::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfCostumeInfo, SetIndex) == 0x000018, "Member 'FSnfCostumeInfo::SetIndex' has a wrong offset!");
static_assert(offsetof(FSnfCostumeInfo, ModelIndex) == 0x00001C, "Member 'FSnfCostumeInfo::ModelIndex' has a wrong offset!");
static_assert(offsetof(FSnfCostumeInfo, VariationIndex) == 0x000020, "Member 'FSnfCostumeInfo::VariationIndex' has a wrong offset!");
static_assert(offsetof(FSnfCostumeInfo, VariationList) == 0x000028, "Member 'FSnfCostumeInfo::VariationList' has a wrong offset!");
static_assert(offsetof(FSnfCostumeInfo, SetAudioEvent) == 0x000038, "Member 'FSnfCostumeInfo::SetAudioEvent' has a wrong offset!");
static_assert(offsetof(FSnfCostumeInfo, DrawList) == 0x000040, "Member 'FSnfCostumeInfo::DrawList' has a wrong offset!");
static_assert(offsetof(FSnfCostumeInfo, Tags) == 0x000048, "Member 'FSnfCostumeInfo::Tags' has a wrong offset!");
static_assert(offsetof(FSnfCostumeInfo, Comment) == 0x000058, "Member 'FSnfCostumeInfo::Comment' has a wrong offset!");

// ScriptStruct Snowfall.SnfBuffInfo
// 0x0070 (0x0078 - 0x0008)
struct FSnfBuffInfo final : public FTableRowBase
{
public:
	class FName                                   CatalogId;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfBuffType                                  Type;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TIME;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CalcBuffTimeSkill;                                 // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ESnfSkillParam, float>                   Param;                                             // 0x0020(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   Comment;                                           // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfBuffInfo) == 0x000008, "Wrong alignment on FSnfBuffInfo");
static_assert(sizeof(FSnfBuffInfo) == 0x000078, "Wrong size on FSnfBuffInfo");
static_assert(offsetof(FSnfBuffInfo, CatalogId) == 0x000008, "Member 'FSnfBuffInfo::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfBuffInfo, Type) == 0x000010, "Member 'FSnfBuffInfo::Type' has a wrong offset!");
static_assert(offsetof(FSnfBuffInfo, TIME) == 0x000014, "Member 'FSnfBuffInfo::TIME' has a wrong offset!");
static_assert(offsetof(FSnfBuffInfo, CalcBuffTimeSkill) == 0x000018, "Member 'FSnfBuffInfo::CalcBuffTimeSkill' has a wrong offset!");
static_assert(offsetof(FSnfBuffInfo, Param) == 0x000020, "Member 'FSnfBuffInfo::Param' has a wrong offset!");
static_assert(offsetof(FSnfBuffInfo, Comment) == 0x000070, "Member 'FSnfBuffInfo::Comment' has a wrong offset!");

// ScriptStruct Snowfall.SnfPlayerDifficultyInfo
// 0x0020 (0x0028 - 0x0008)
struct FSnfPlayerDifficultyInfo final : public FTableRowBase
{
public:
	float                                         DamageRate;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackRate;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoreAttackRate;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BowAttackRate;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StunRate;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JustGuardTime;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GuardRate;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GuardBreakDamageRate;                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPlayerDifficultyInfo) == 0x000008, "Wrong alignment on FSnfPlayerDifficultyInfo");
static_assert(sizeof(FSnfPlayerDifficultyInfo) == 0x000028, "Wrong size on FSnfPlayerDifficultyInfo");
static_assert(offsetof(FSnfPlayerDifficultyInfo, DamageRate) == 0x000008, "Member 'FSnfPlayerDifficultyInfo::DamageRate' has a wrong offset!");
static_assert(offsetof(FSnfPlayerDifficultyInfo, AttackRate) == 0x00000C, "Member 'FSnfPlayerDifficultyInfo::AttackRate' has a wrong offset!");
static_assert(offsetof(FSnfPlayerDifficultyInfo, CoreAttackRate) == 0x000010, "Member 'FSnfPlayerDifficultyInfo::CoreAttackRate' has a wrong offset!");
static_assert(offsetof(FSnfPlayerDifficultyInfo, BowAttackRate) == 0x000014, "Member 'FSnfPlayerDifficultyInfo::BowAttackRate' has a wrong offset!");
static_assert(offsetof(FSnfPlayerDifficultyInfo, StunRate) == 0x000018, "Member 'FSnfPlayerDifficultyInfo::StunRate' has a wrong offset!");
static_assert(offsetof(FSnfPlayerDifficultyInfo, JustGuardTime) == 0x00001C, "Member 'FSnfPlayerDifficultyInfo::JustGuardTime' has a wrong offset!");
static_assert(offsetof(FSnfPlayerDifficultyInfo, GuardRate) == 0x000020, "Member 'FSnfPlayerDifficultyInfo::GuardRate' has a wrong offset!");
static_assert(offsetof(FSnfPlayerDifficultyInfo, GuardBreakDamageRate) == 0x000024, "Member 'FSnfPlayerDifficultyInfo::GuardBreakDamageRate' has a wrong offset!");

// ScriptStruct Snowfall.SnfEnemyEndlessParams
// 0x0014 (0x0014 - 0x0000)
struct FSnfEnemyEndlessParams final
{
public:
	class FName                                   TagName;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageRate;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackRate;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoreAttackRate;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfEnemyEndlessParams) == 0x000004, "Wrong alignment on FSnfEnemyEndlessParams");
static_assert(sizeof(FSnfEnemyEndlessParams) == 0x000014, "Wrong size on FSnfEnemyEndlessParams");
static_assert(offsetof(FSnfEnemyEndlessParams, TagName) == 0x000000, "Member 'FSnfEnemyEndlessParams::TagName' has a wrong offset!");
static_assert(offsetof(FSnfEnemyEndlessParams, DamageRate) == 0x000008, "Member 'FSnfEnemyEndlessParams::DamageRate' has a wrong offset!");
static_assert(offsetof(FSnfEnemyEndlessParams, AttackRate) == 0x00000C, "Member 'FSnfEnemyEndlessParams::AttackRate' has a wrong offset!");
static_assert(offsetof(FSnfEnemyEndlessParams, CoreAttackRate) == 0x000010, "Member 'FSnfEnemyEndlessParams::CoreAttackRate' has a wrong offset!");

// ScriptStruct Snowfall.SnfPlayerEndlessDifficultyInfo
// 0x0038 (0x0040 - 0x0008)
struct FSnfPlayerEndlessDifficultyInfo final : public FTableRowBase
{
public:
	struct FSnfPlayerDifficultyInfo               DifficultyParams;                                  // 0x0008(0x0028)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
	TArray<struct FSnfEnemyEndlessParams>         EnemyParams;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPlayerEndlessDifficultyInfo) == 0x000008, "Wrong alignment on FSnfPlayerEndlessDifficultyInfo");
static_assert(sizeof(FSnfPlayerEndlessDifficultyInfo) == 0x000040, "Wrong size on FSnfPlayerEndlessDifficultyInfo");
static_assert(offsetof(FSnfPlayerEndlessDifficultyInfo, DifficultyParams) == 0x000008, "Member 'FSnfPlayerEndlessDifficultyInfo::DifficultyParams' has a wrong offset!");
static_assert(offsetof(FSnfPlayerEndlessDifficultyInfo, EnemyParams) == 0x000030, "Member 'FSnfPlayerEndlessDifficultyInfo::EnemyParams' has a wrong offset!");

// ScriptStruct Snowfall.SnfPlayerTalkCameraInfo
// 0x0048 (0x0048 - 0x0000)
struct FSnfPlayerTalkCameraInfo final
{
public:
	bool                                          IsTalkCamera;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAnimalCamera;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsToriiCamera;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         State;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlayerPos;                                         // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetPos;                                         // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTeleport;                                        // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TIME;                                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTimeLimit;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               StartRotator;                                      // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Rottime;                                           // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PreCrouch;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveSpeed;                                         // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPlayerTalkCameraInfo) == 0x000004, "Wrong alignment on FSnfPlayerTalkCameraInfo");
static_assert(sizeof(FSnfPlayerTalkCameraInfo) == 0x000048, "Wrong size on FSnfPlayerTalkCameraInfo");
static_assert(offsetof(FSnfPlayerTalkCameraInfo, IsTalkCamera) == 0x000000, "Member 'FSnfPlayerTalkCameraInfo::IsTalkCamera' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTalkCameraInfo, IsAnimalCamera) == 0x000001, "Member 'FSnfPlayerTalkCameraInfo::IsAnimalCamera' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTalkCameraInfo, IsToriiCamera) == 0x000002, "Member 'FSnfPlayerTalkCameraInfo::IsToriiCamera' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTalkCameraInfo, State) == 0x000004, "Member 'FSnfPlayerTalkCameraInfo::State' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTalkCameraInfo, PlayerPos) == 0x000008, "Member 'FSnfPlayerTalkCameraInfo::PlayerPos' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTalkCameraInfo, TargetPos) == 0x000014, "Member 'FSnfPlayerTalkCameraInfo::TargetPos' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTalkCameraInfo, IsTeleport) == 0x000020, "Member 'FSnfPlayerTalkCameraInfo::IsTeleport' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTalkCameraInfo, TIME) == 0x000024, "Member 'FSnfPlayerTalkCameraInfo::TIME' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTalkCameraInfo, EndTime) == 0x000028, "Member 'FSnfPlayerTalkCameraInfo::EndTime' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTalkCameraInfo, EndTimeLimit) == 0x00002C, "Member 'FSnfPlayerTalkCameraInfo::EndTimeLimit' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTalkCameraInfo, StartRotator) == 0x000030, "Member 'FSnfPlayerTalkCameraInfo::StartRotator' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTalkCameraInfo, Rottime) == 0x00003C, "Member 'FSnfPlayerTalkCameraInfo::Rottime' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTalkCameraInfo, PreCrouch) == 0x000040, "Member 'FSnfPlayerTalkCameraInfo::PreCrouch' has a wrong offset!");
static_assert(offsetof(FSnfPlayerTalkCameraInfo, MoveSpeed) == 0x000044, "Member 'FSnfPlayerTalkCameraInfo::MoveSpeed' has a wrong offset!");

// ScriptStruct Snowfall.SnfPlayerRayInfo
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FSnfPlayerRayInfo final
{
public:
	TWeakObjectPtr<class AActor>                  FocusActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  VisibleActor;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BodyPos;                                           // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ForecastMoveVec;                                   // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EyePos;                                            // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EyeVec;                                            // 0x0034(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootHeight;                                        // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodySize;                                          // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyRadius;                                        // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGrab;                                            // 0x004C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GrabHeight;                                        // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x14];                                      // 0x0054(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfPlayerRayInfo) == 0x000008, "Wrong alignment on FSnfPlayerRayInfo");
static_assert(sizeof(FSnfPlayerRayInfo) == 0x000068, "Wrong size on FSnfPlayerRayInfo");
static_assert(offsetof(FSnfPlayerRayInfo, FocusActor) == 0x000000, "Member 'FSnfPlayerRayInfo::FocusActor' has a wrong offset!");
static_assert(offsetof(FSnfPlayerRayInfo, VisibleActor) == 0x000008, "Member 'FSnfPlayerRayInfo::VisibleActor' has a wrong offset!");
static_assert(offsetof(FSnfPlayerRayInfo, BodyPos) == 0x000010, "Member 'FSnfPlayerRayInfo::BodyPos' has a wrong offset!");
static_assert(offsetof(FSnfPlayerRayInfo, ForecastMoveVec) == 0x00001C, "Member 'FSnfPlayerRayInfo::ForecastMoveVec' has a wrong offset!");
static_assert(offsetof(FSnfPlayerRayInfo, EyePos) == 0x000028, "Member 'FSnfPlayerRayInfo::EyePos' has a wrong offset!");
static_assert(offsetof(FSnfPlayerRayInfo, EyeVec) == 0x000034, "Member 'FSnfPlayerRayInfo::EyeVec' has a wrong offset!");
static_assert(offsetof(FSnfPlayerRayInfo, FootHeight) == 0x000040, "Member 'FSnfPlayerRayInfo::FootHeight' has a wrong offset!");
static_assert(offsetof(FSnfPlayerRayInfo, BodySize) == 0x000044, "Member 'FSnfPlayerRayInfo::BodySize' has a wrong offset!");
static_assert(offsetof(FSnfPlayerRayInfo, BodyRadius) == 0x000048, "Member 'FSnfPlayerRayInfo::BodyRadius' has a wrong offset!");
static_assert(offsetof(FSnfPlayerRayInfo, IsGrab) == 0x00004C, "Member 'FSnfPlayerRayInfo::IsGrab' has a wrong offset!");
static_assert(offsetof(FSnfPlayerRayInfo, GrabHeight) == 0x000050, "Member 'FSnfPlayerRayInfo::GrabHeight' has a wrong offset!");

// ScriptStruct Snowfall.SnfCinemaCostumeInfo
// 0x0030 (0x0038 - 0x0008)
struct FSnfCinemaCostumeInfo final : public FTableRowBase
{
public:
	class FName                                   Comment;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeadIndex;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TopsIndex;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TopsVariation;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BottomsIndex;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BottomsVariation;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShoesParamIndex;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GlovesParamIndex;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HairParamIndex;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaskParamIndex;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCinemaCostumeInfo) == 0x000008, "Wrong alignment on FSnfCinemaCostumeInfo");
static_assert(sizeof(FSnfCinemaCostumeInfo) == 0x000038, "Wrong size on FSnfCinemaCostumeInfo");
static_assert(offsetof(FSnfCinemaCostumeInfo, Comment) == 0x000008, "Member 'FSnfCinemaCostumeInfo::Comment' has a wrong offset!");
static_assert(offsetof(FSnfCinemaCostumeInfo, HeadIndex) == 0x000010, "Member 'FSnfCinemaCostumeInfo::HeadIndex' has a wrong offset!");
static_assert(offsetof(FSnfCinemaCostumeInfo, TopsIndex) == 0x000014, "Member 'FSnfCinemaCostumeInfo::TopsIndex' has a wrong offset!");
static_assert(offsetof(FSnfCinemaCostumeInfo, TopsVariation) == 0x000018, "Member 'FSnfCinemaCostumeInfo::TopsVariation' has a wrong offset!");
static_assert(offsetof(FSnfCinemaCostumeInfo, BottomsIndex) == 0x00001C, "Member 'FSnfCinemaCostumeInfo::BottomsIndex' has a wrong offset!");
static_assert(offsetof(FSnfCinemaCostumeInfo, BottomsVariation) == 0x000020, "Member 'FSnfCinemaCostumeInfo::BottomsVariation' has a wrong offset!");
static_assert(offsetof(FSnfCinemaCostumeInfo, ShoesParamIndex) == 0x000024, "Member 'FSnfCinemaCostumeInfo::ShoesParamIndex' has a wrong offset!");
static_assert(offsetof(FSnfCinemaCostumeInfo, GlovesParamIndex) == 0x000028, "Member 'FSnfCinemaCostumeInfo::GlovesParamIndex' has a wrong offset!");
static_assert(offsetof(FSnfCinemaCostumeInfo, HairParamIndex) == 0x00002C, "Member 'FSnfCinemaCostumeInfo::HairParamIndex' has a wrong offset!");
static_assert(offsetof(FSnfCinemaCostumeInfo, MaskParamIndex) == 0x000030, "Member 'FSnfCinemaCostumeInfo::MaskParamIndex' has a wrong offset!");

// ScriptStruct Snowfall.SnfInventoryLogItem
// 0x0020 (0x0020 - 0x0000)
struct FSnfInventoryLogItem final
{
public:
	TSubclassOf<class UTngItemObject>             Class;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CatalogId;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountOld;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountNew;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timer;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfInventoryLogItem) == 0x000008, "Wrong alignment on FSnfInventoryLogItem");
static_assert(sizeof(FSnfInventoryLogItem) == 0x000020, "Wrong size on FSnfInventoryLogItem");
static_assert(offsetof(FSnfInventoryLogItem, Class) == 0x000000, "Member 'FSnfInventoryLogItem::Class' has a wrong offset!");
static_assert(offsetof(FSnfInventoryLogItem, CatalogId) == 0x000008, "Member 'FSnfInventoryLogItem::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfInventoryLogItem, CountOld) == 0x000010, "Member 'FSnfInventoryLogItem::CountOld' has a wrong offset!");
static_assert(offsetof(FSnfInventoryLogItem, CountNew) == 0x000014, "Member 'FSnfInventoryLogItem::CountNew' has a wrong offset!");
static_assert(offsetof(FSnfInventoryLogItem, Timer) == 0x000018, "Member 'FSnfInventoryLogItem::Timer' has a wrong offset!");

// ScriptStruct Snowfall.SnfSpecialPopupReservationInfo
// 0x01C8 (0x01C8 - 0x0000)
struct FSnfSpecialPopupReservationInfo final
{
public:
	struct FSnfCatalogItem                        CatalogItem;                                       // 0x0000(0x0120)(NativeAccessSpecifierPublic)
	struct FSnfSpecialPopupInfo                   SpecialPopupInfo;                                  // 0x0120(0x0098)(NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8[0x10];                                     // 0x01B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfSpecialPopupReservationInfo) == 0x000008, "Wrong alignment on FSnfSpecialPopupReservationInfo");
static_assert(sizeof(FSnfSpecialPopupReservationInfo) == 0x0001C8, "Wrong size on FSnfSpecialPopupReservationInfo");
static_assert(offsetof(FSnfSpecialPopupReservationInfo, CatalogItem) == 0x000000, "Member 'FSnfSpecialPopupReservationInfo::CatalogItem' has a wrong offset!");
static_assert(offsetof(FSnfSpecialPopupReservationInfo, SpecialPopupInfo) == 0x000120, "Member 'FSnfSpecialPopupReservationInfo::SpecialPopupInfo' has a wrong offset!");

// ScriptStruct Snowfall.SnfPrisonSpawnEnemyGroupInfo
// 0x0018 (0x0018 - 0x0000)
struct FSnfPrisonSpawnEnemyGroupInfo final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSnfPrisonSpawnEnemyInfo>       EnemyTbl;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPrisonSpawnEnemyGroupInfo) == 0x000008, "Wrong alignment on FSnfPrisonSpawnEnemyGroupInfo");
static_assert(sizeof(FSnfPrisonSpawnEnemyGroupInfo) == 0x000018, "Wrong size on FSnfPrisonSpawnEnemyGroupInfo");
static_assert(offsetof(FSnfPrisonSpawnEnemyGroupInfo, Rate) == 0x000000, "Member 'FSnfPrisonSpawnEnemyGroupInfo::Rate' has a wrong offset!");
static_assert(offsetof(FSnfPrisonSpawnEnemyGroupInfo, EnemyTbl) == 0x000008, "Member 'FSnfPrisonSpawnEnemyGroupInfo::EnemyTbl' has a wrong offset!");

// ScriptStruct Snowfall.SnfPrisonSupplyGhostData
// 0x0058 (0x0058 - 0x0000)
struct FSnfPrisonSupplyGhostData final
{
public:
	class USnfGameSupplyData*                     SupplyData;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   GhostClass;                                        // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0030(0x0020)(Edit, NativeAccessSpecifierPublic)
	class USnfActorIni*                           SupplyIni;                                         // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPrisonSupplyGhostData) == 0x000008, "Wrong alignment on FSnfPrisonSupplyGhostData");
static_assert(sizeof(FSnfPrisonSupplyGhostData) == 0x000058, "Wrong size on FSnfPrisonSupplyGhostData");
static_assert(offsetof(FSnfPrisonSupplyGhostData, SupplyData) == 0x000000, "Member 'FSnfPrisonSupplyGhostData::SupplyData' has a wrong offset!");
static_assert(offsetof(FSnfPrisonSupplyGhostData, GhostClass) == 0x000008, "Member 'FSnfPrisonSupplyGhostData::GhostClass' has a wrong offset!");
static_assert(offsetof(FSnfPrisonSupplyGhostData, Tags) == 0x000030, "Member 'FSnfPrisonSupplyGhostData::Tags' has a wrong offset!");
static_assert(offsetof(FSnfPrisonSupplyGhostData, SupplyIni) == 0x000050, "Member 'FSnfPrisonSupplyGhostData::SupplyIni' has a wrong offset!");

// ScriptStruct Snowfall.SnfPropsGimmickMakeStaticMeshInfo
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x10) FSnfPropsGimmickMakeStaticMeshInfo final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfPropsGimmickMakeStaticMeshInfo) == 0x000010, "Wrong alignment on FSnfPropsGimmickMakeStaticMeshInfo");
static_assert(sizeof(FSnfPropsGimmickMakeStaticMeshInfo) == 0x000060, "Wrong size on FSnfPropsGimmickMakeStaticMeshInfo");

// ScriptStruct Snowfall.PropsGimmickInteract
// 0x0010 (0x0010 - 0x0000)
struct FPropsGimmickInteract final
{
public:
	class USnfInteractComponent*                  IntaractComp;                                      // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UShapeComponent*                        Collision;                                         // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPropsGimmickInteract) == 0x000008, "Wrong alignment on FPropsGimmickInteract");
static_assert(sizeof(FPropsGimmickInteract) == 0x000010, "Wrong size on FPropsGimmickInteract");
static_assert(offsetof(FPropsGimmickInteract, IntaractComp) == 0x000000, "Member 'FPropsGimmickInteract::IntaractComp' has a wrong offset!");
static_assert(offsetof(FPropsGimmickInteract, Collision) == 0x000008, "Member 'FPropsGimmickInteract::Collision' has a wrong offset!");

// ScriptStruct Snowfall.SnfPropsGimmickReplaceInfo
// 0x0018 (0x0020 - 0x0008)
struct FSnfPropsGimmickReplaceInfo final : public FTableRowBase
{
public:
	class UStaticMesh*                            OldMeshActor;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 OldActor;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASnfSignalBase>             NewActor;                                          // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPropsGimmickReplaceInfo) == 0x000008, "Wrong alignment on FSnfPropsGimmickReplaceInfo");
static_assert(sizeof(FSnfPropsGimmickReplaceInfo) == 0x000020, "Wrong size on FSnfPropsGimmickReplaceInfo");
static_assert(offsetof(FSnfPropsGimmickReplaceInfo, OldMeshActor) == 0x000008, "Member 'FSnfPropsGimmickReplaceInfo::OldMeshActor' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickReplaceInfo, OldActor) == 0x000010, "Member 'FSnfPropsGimmickReplaceInfo::OldActor' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickReplaceInfo, NewActor) == 0x000018, "Member 'FSnfPropsGimmickReplaceInfo::NewActor' has a wrong offset!");

// ScriptStruct Snowfall.SnfPropsGimmickCustomParts
// 0x0090 (0x0090 - 0x0000)
struct FSnfPropsGimmickCustomParts final
{
public:
	class UStaticMesh*                            CustomMesh;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class UMaterialInterface*>        CustomMaterials;                                   // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0060(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfPropsGimmickCustomParts) == 0x000010, "Wrong alignment on FSnfPropsGimmickCustomParts");
static_assert(sizeof(FSnfPropsGimmickCustomParts) == 0x000090, "Wrong size on FSnfPropsGimmickCustomParts");
static_assert(offsetof(FSnfPropsGimmickCustomParts, CustomMesh) == 0x000000, "Member 'FSnfPropsGimmickCustomParts::CustomMesh' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickCustomParts, CustomMaterials) == 0x000008, "Member 'FSnfPropsGimmickCustomParts::CustomMaterials' has a wrong offset!");
static_assert(offsetof(FSnfPropsGimmickCustomParts, Transform) == 0x000060, "Member 'FSnfPropsGimmickCustomParts::Transform' has a wrong offset!");

// ScriptStruct Snowfall.SnfCatalogPSNActivityCollectible
// 0x0040 (0x0048 - 0x0008)
struct FSnfCatalogPSNActivityCollectible final : public FTableRowBase
{
public:
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfPSNActivityType                           Type;                                              // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParentPSNActivityId;                               // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RootPSNActivityId;                                 // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AliasActivityId;                                   // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumChildren;                                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequireGameSequence;                               // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RequireCompletedActivityId;                        // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Attribute;                                         // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfCatalogPSNActivityCollectible) == 0x000008, "Wrong alignment on FSnfCatalogPSNActivityCollectible");
static_assert(sizeof(FSnfCatalogPSNActivityCollectible) == 0x000048, "Wrong size on FSnfCatalogPSNActivityCollectible");
static_assert(offsetof(FSnfCatalogPSNActivityCollectible, Comment) == 0x000008, "Member 'FSnfCatalogPSNActivityCollectible::Comment' has a wrong offset!");
static_assert(offsetof(FSnfCatalogPSNActivityCollectible, Type) == 0x000018, "Member 'FSnfCatalogPSNActivityCollectible::Type' has a wrong offset!");
static_assert(offsetof(FSnfCatalogPSNActivityCollectible, ParentPSNActivityId) == 0x00001C, "Member 'FSnfCatalogPSNActivityCollectible::ParentPSNActivityId' has a wrong offset!");
static_assert(offsetof(FSnfCatalogPSNActivityCollectible, RootPSNActivityId) == 0x000024, "Member 'FSnfCatalogPSNActivityCollectible::RootPSNActivityId' has a wrong offset!");
static_assert(offsetof(FSnfCatalogPSNActivityCollectible, AliasActivityId) == 0x00002C, "Member 'FSnfCatalogPSNActivityCollectible::AliasActivityId' has a wrong offset!");
static_assert(offsetof(FSnfCatalogPSNActivityCollectible, NumChildren) == 0x000034, "Member 'FSnfCatalogPSNActivityCollectible::NumChildren' has a wrong offset!");
static_assert(offsetof(FSnfCatalogPSNActivityCollectible, RequireGameSequence) == 0x000038, "Member 'FSnfCatalogPSNActivityCollectible::RequireGameSequence' has a wrong offset!");
static_assert(offsetof(FSnfCatalogPSNActivityCollectible, RequireCompletedActivityId) == 0x00003C, "Member 'FSnfCatalogPSNActivityCollectible::RequireCompletedActivityId' has a wrong offset!");
static_assert(offsetof(FSnfCatalogPSNActivityCollectible, Attribute) == 0x000044, "Member 'FSnfCatalogPSNActivityCollectible::Attribute' has a wrong offset!");

// ScriptStruct Snowfall.ASnfRandomActionParam
// 0x0010 (0x0010 - 0x0000)
struct FASnfRandomActionParam final
{
public:
	class FName                                   WinActionName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoseActionName;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FASnfRandomActionParam) == 0x000004, "Wrong alignment on FASnfRandomActionParam");
static_assert(sizeof(FASnfRandomActionParam) == 0x000010, "Wrong size on FASnfRandomActionParam");
static_assert(offsetof(FASnfRandomActionParam, WinActionName) == 0x000000, "Member 'FASnfRandomActionParam::WinActionName' has a wrong offset!");
static_assert(offsetof(FASnfRandomActionParam, LoseActionName) == 0x000008, "Member 'FASnfRandomActionParam::LoseActionName' has a wrong offset!");

// ScriptStruct Snowfall.SnfResidualSoulSkelInfo
// 0x0020 (0x0020 - 0x0000)
struct FSnfResidualSoulSkelInfo final
{
public:
	class USkeletalMesh*                          SkeltalMesh;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        SkeltalAnim;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VanishTime;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VanishWidth;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VanishPower;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeDistance;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfResidualSoulSkelInfo) == 0x000008, "Wrong alignment on FSnfResidualSoulSkelInfo");
static_assert(sizeof(FSnfResidualSoulSkelInfo) == 0x000020, "Wrong size on FSnfResidualSoulSkelInfo");
static_assert(offsetof(FSnfResidualSoulSkelInfo, SkeltalMesh) == 0x000000, "Member 'FSnfResidualSoulSkelInfo::SkeltalMesh' has a wrong offset!");
static_assert(offsetof(FSnfResidualSoulSkelInfo, SkeltalAnim) == 0x000008, "Member 'FSnfResidualSoulSkelInfo::SkeltalAnim' has a wrong offset!");
static_assert(offsetof(FSnfResidualSoulSkelInfo, VanishTime) == 0x000010, "Member 'FSnfResidualSoulSkelInfo::VanishTime' has a wrong offset!");
static_assert(offsetof(FSnfResidualSoulSkelInfo, VanishWidth) == 0x000014, "Member 'FSnfResidualSoulSkelInfo::VanishWidth' has a wrong offset!");
static_assert(offsetof(FSnfResidualSoulSkelInfo, VanishPower) == 0x000018, "Member 'FSnfResidualSoulSkelInfo::VanishPower' has a wrong offset!");
static_assert(offsetof(FSnfResidualSoulSkelInfo, FadeDistance) == 0x00001C, "Member 'FSnfResidualSoulSkelInfo::FadeDistance' has a wrong offset!");

// ScriptStruct Snowfall.SnfShrineActorFacadeActionInfo
// 0x0038 (0x0050 - 0x0018)
struct FSnfShrineActorFacadeActionInfo final : public FSnfShrineActorDivisionActionInfo
{
public:
	class ASnfFacadeBase*                         TargetFacade;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ASnfFacadeBase>          TargetFacadeSoft;                                  // 0x0020(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfShrineActorFacadeActionInfo) == 0x000008, "Wrong alignment on FSnfShrineActorFacadeActionInfo");
static_assert(sizeof(FSnfShrineActorFacadeActionInfo) == 0x000050, "Wrong size on FSnfShrineActorFacadeActionInfo");
static_assert(offsetof(FSnfShrineActorFacadeActionInfo, TargetFacade) == 0x000018, "Member 'FSnfShrineActorFacadeActionInfo::TargetFacade' has a wrong offset!");
static_assert(offsetof(FSnfShrineActorFacadeActionInfo, TargetFacadeSoft) == 0x000020, "Member 'FSnfShrineActorFacadeActionInfo::TargetFacadeSoft' has a wrong offset!");

// ScriptStruct Snowfall.SnfShrineActorActionInfo
// 0x0020 (0x0020 - 0x0000)
struct FSnfShrineActorActionInfo final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TypeName;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ActionParam;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CheckPrepareName;                                  // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfShrineActorActionInfo) == 0x000008, "Wrong alignment on FSnfShrineActorActionInfo");
static_assert(sizeof(FSnfShrineActorActionInfo) == 0x000020, "Wrong size on FSnfShrineActorActionInfo");
static_assert(offsetof(FSnfShrineActorActionInfo, TargetActor) == 0x000000, "Member 'FSnfShrineActorActionInfo::TargetActor' has a wrong offset!");
static_assert(offsetof(FSnfShrineActorActionInfo, TypeName) == 0x000008, "Member 'FSnfShrineActorActionInfo::TypeName' has a wrong offset!");
static_assert(offsetof(FSnfShrineActorActionInfo, ActionParam) == 0x000010, "Member 'FSnfShrineActorActionInfo::ActionParam' has a wrong offset!");
static_assert(offsetof(FSnfShrineActorActionInfo, CheckPrepareName) == 0x000018, "Member 'FSnfShrineActorActionInfo::CheckPrepareName' has a wrong offset!");

// ScriptStruct Snowfall.SnfShrineActorSoftToriiInfo
// 0x00D0 (0x00D0 - 0x0000)
struct FSnfShrineActorSoftToriiInfo final
{
public:
	TSoftObjectPtr<class ASnfMarkActor>           MarkActor;                                         // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<TSoftObjectPtr<class AActor>, class FName> OnPurgeActionList;                                 // 0x0028(0x0050)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ToriiTransform;                                    // 0x0080(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsSetToriiTransform;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x1F];                                      // 0x00B1(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfShrineActorSoftToriiInfo) == 0x000010, "Wrong alignment on FSnfShrineActorSoftToriiInfo");
static_assert(sizeof(FSnfShrineActorSoftToriiInfo) == 0x0000D0, "Wrong size on FSnfShrineActorSoftToriiInfo");
static_assert(offsetof(FSnfShrineActorSoftToriiInfo, MarkActor) == 0x000000, "Member 'FSnfShrineActorSoftToriiInfo::MarkActor' has a wrong offset!");
static_assert(offsetof(FSnfShrineActorSoftToriiInfo, OnPurgeActionList) == 0x000028, "Member 'FSnfShrineActorSoftToriiInfo::OnPurgeActionList' has a wrong offset!");
static_assert(offsetof(FSnfShrineActorSoftToriiInfo, ToriiTransform) == 0x000080, "Member 'FSnfShrineActorSoftToriiInfo::ToriiTransform' has a wrong offset!");
static_assert(offsetof(FSnfShrineActorSoftToriiInfo, bIsSetToriiTransform) == 0x0000B0, "Member 'FSnfShrineActorSoftToriiInfo::bIsSetToriiTransform' has a wrong offset!");

// ScriptStruct Snowfall.SnfShrineActorHardToriiInfo
// 0x0060 (0x0060 - 0x0000)
struct FSnfShrineActorHardToriiInfo final
{
public:
	class ASnfMarkActor*                          MarkActor;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class AActor*, class FName>              OnPurgeActionList;                                 // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfShrineActorHardToriiInfo) == 0x000008, "Wrong alignment on FSnfShrineActorHardToriiInfo");
static_assert(sizeof(FSnfShrineActorHardToriiInfo) == 0x000060, "Wrong size on FSnfShrineActorHardToriiInfo");
static_assert(offsetof(FSnfShrineActorHardToriiInfo, MarkActor) == 0x000000, "Member 'FSnfShrineActorHardToriiInfo::MarkActor' has a wrong offset!");
static_assert(offsetof(FSnfShrineActorHardToriiInfo, OnPurgeActionList) == 0x000008, "Member 'FSnfShrineActorHardToriiInfo::OnPurgeActionList' has a wrong offset!");

// ScriptStruct Snowfall.SnfSignalBaseCarSignalMaterialInfo
// 0x0028 (0x0028 - 0x0000)
struct FSnfSignalBaseCarSignalMaterialInfo final
{
public:
	class UMaterialInstanceDynamic*               DynamicMaterialInstance;                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmissiveIntensity;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Period;                                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Power;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfSignalBaseCarSignalMaterialInfo) == 0x000008, "Wrong alignment on FSnfSignalBaseCarSignalMaterialInfo");
static_assert(sizeof(FSnfSignalBaseCarSignalMaterialInfo) == 0x000028, "Wrong size on FSnfSignalBaseCarSignalMaterialInfo");
static_assert(offsetof(FSnfSignalBaseCarSignalMaterialInfo, DynamicMaterialInstance) == 0x000000, "Member 'FSnfSignalBaseCarSignalMaterialInfo::DynamicMaterialInstance' has a wrong offset!");
static_assert(offsetof(FSnfSignalBaseCarSignalMaterialInfo, EmissiveIntensity) == 0x000008, "Member 'FSnfSignalBaseCarSignalMaterialInfo::EmissiveIntensity' has a wrong offset!");
static_assert(offsetof(FSnfSignalBaseCarSignalMaterialInfo, Period) == 0x00000C, "Member 'FSnfSignalBaseCarSignalMaterialInfo::Period' has a wrong offset!");
static_assert(offsetof(FSnfSignalBaseCarSignalMaterialInfo, Power) == 0x000010, "Member 'FSnfSignalBaseCarSignalMaterialInfo::Power' has a wrong offset!");
static_assert(offsetof(FSnfSignalBaseCarSignalMaterialInfo, Color) == 0x000014, "Member 'FSnfSignalBaseCarSignalMaterialInfo::Color' has a wrong offset!");

// ScriptStruct Snowfall.SnfSignalBaseCustomMesh
// 0x00A0 (0x00A0 - 0x0000)
struct FSnfSignalBaseCustomMesh final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideMaterial;                                 // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UMaterialInterface*>        Materials;                                         // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
	int32                                         SocketIndex;                                       // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0xC];                                       // 0x0064(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TransformOffset;                                   // 0x0070(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfSignalBaseCustomMesh) == 0x000010, "Wrong alignment on FSnfSignalBaseCustomMesh");
static_assert(sizeof(FSnfSignalBaseCustomMesh) == 0x0000A0, "Wrong size on FSnfSignalBaseCustomMesh");
static_assert(offsetof(FSnfSignalBaseCustomMesh, Mesh) == 0x000000, "Member 'FSnfSignalBaseCustomMesh::Mesh' has a wrong offset!");
static_assert(offsetof(FSnfSignalBaseCustomMesh, bOverrideMaterial) == 0x000008, "Member 'FSnfSignalBaseCustomMesh::bOverrideMaterial' has a wrong offset!");
static_assert(offsetof(FSnfSignalBaseCustomMesh, Materials) == 0x000010, "Member 'FSnfSignalBaseCustomMesh::Materials' has a wrong offset!");
static_assert(offsetof(FSnfSignalBaseCustomMesh, SocketIndex) == 0x000060, "Member 'FSnfSignalBaseCustomMesh::SocketIndex' has a wrong offset!");
static_assert(offsetof(FSnfSignalBaseCustomMesh, TransformOffset) == 0x000070, "Member 'FSnfSignalBaseCustomMesh::TransformOffset' has a wrong offset!");

// ScriptStruct Snowfall.SnfSimpleCameraParam
// 0x0020 (0x0020 - 0x0000)
struct FSnfSimpleCameraParam final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTime;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ACameraActor>            BaseCamera;                                        // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStopPlayer;                                      // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTeleportPlayer;                                  // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfSimpleCameraParam) == 0x000004, "Wrong alignment on FSnfSimpleCameraParam");
static_assert(sizeof(FSnfSimpleCameraParam) == 0x000020, "Wrong size on FSnfSimpleCameraParam");
static_assert(offsetof(FSnfSimpleCameraParam, FadeTime) == 0x000000, "Member 'FSnfSimpleCameraParam::FadeTime' has a wrong offset!");
static_assert(offsetof(FSnfSimpleCameraParam, BlendTime) == 0x000004, "Member 'FSnfSimpleCameraParam::BlendTime' has a wrong offset!");
static_assert(offsetof(FSnfSimpleCameraParam, PlayTime) == 0x000008, "Member 'FSnfSimpleCameraParam::PlayTime' has a wrong offset!");
static_assert(offsetof(FSnfSimpleCameraParam, BaseCamera) == 0x00000C, "Member 'FSnfSimpleCameraParam::BaseCamera' has a wrong offset!");
static_assert(offsetof(FSnfSimpleCameraParam, BlendFunc) == 0x000014, "Member 'FSnfSimpleCameraParam::BlendFunc' has a wrong offset!");
static_assert(offsetof(FSnfSimpleCameraParam, BlendExp) == 0x000018, "Member 'FSnfSimpleCameraParam::BlendExp' has a wrong offset!");
static_assert(offsetof(FSnfSimpleCameraParam, IsStopPlayer) == 0x00001C, "Member 'FSnfSimpleCameraParam::IsStopPlayer' has a wrong offset!");
static_assert(offsetof(FSnfSimpleCameraParam, IsTeleportPlayer) == 0x00001D, "Member 'FSnfSimpleCameraParam::IsTeleportPlayer' has a wrong offset!");

// ScriptStruct Snowfall.SnfSpiritPhotoActorAction
// 0x0010 (0x0010 - 0x0000)
struct FSnfSpiritPhotoActorAction final
{
public:
	TArray<class FName>                           ActivityActionList;                                // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfSpiritPhotoActorAction) == 0x000008, "Wrong alignment on FSnfSpiritPhotoActorAction");
static_assert(sizeof(FSnfSpiritPhotoActorAction) == 0x000010, "Wrong size on FSnfSpiritPhotoActorAction");
static_assert(offsetof(FSnfSpiritPhotoActorAction, ActivityActionList) == 0x000000, "Member 'FSnfSpiritPhotoActorAction::ActivityActionList' has a wrong offset!");

// ScriptStruct Snowfall.SnfSpiritPhotoMeshInfo
// 0x0050 (0x0050 - 0x0000)
struct FSnfSpiritPhotoMeshInfo final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeTransform;                                 // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   GroupActivityId;                                   // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfSpiritPhotoMeshInfo) == 0x000010, "Wrong alignment on FSnfSpiritPhotoMeshInfo");
static_assert(sizeof(FSnfSpiritPhotoMeshInfo) == 0x000050, "Wrong size on FSnfSpiritPhotoMeshInfo");
static_assert(offsetof(FSnfSpiritPhotoMeshInfo, StaticMesh) == 0x000000, "Member 'FSnfSpiritPhotoMeshInfo::StaticMesh' has a wrong offset!");
static_assert(offsetof(FSnfSpiritPhotoMeshInfo, RelativeTransform) == 0x000010, "Member 'FSnfSpiritPhotoMeshInfo::RelativeTransform' has a wrong offset!");
static_assert(offsetof(FSnfSpiritPhotoMeshInfo, GroupActivityId) == 0x000040, "Member 'FSnfSpiritPhotoMeshInfo::GroupActivityId' has a wrong offset!");

// ScriptStruct Snowfall.SnfStreetStallActorReplaceCollectionSetting
// 0x0028 (0x0028 - 0x0000)
struct FSnfStreetStallActorReplaceCollectionSetting final
{
public:
	class FName                                   CollectionID;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            BeforeStaticMesh;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            AfterStaticMesh;                                   // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfStreetStallActorReplaceCollectionSetting) == 0x000008, "Wrong alignment on FSnfStreetStallActorReplaceCollectionSetting");
static_assert(sizeof(FSnfStreetStallActorReplaceCollectionSetting) == 0x000028, "Wrong size on FSnfStreetStallActorReplaceCollectionSetting");
static_assert(offsetof(FSnfStreetStallActorReplaceCollectionSetting, CollectionID) == 0x000000, "Member 'FSnfStreetStallActorReplaceCollectionSetting::CollectionID' has a wrong offset!");
static_assert(offsetof(FSnfStreetStallActorReplaceCollectionSetting, BeforeStaticMesh) == 0x000008, "Member 'FSnfStreetStallActorReplaceCollectionSetting::BeforeStaticMesh' has a wrong offset!");
static_assert(offsetof(FSnfStreetStallActorReplaceCollectionSetting, AfterStaticMesh) == 0x000018, "Member 'FSnfStreetStallActorReplaceCollectionSetting::AfterStaticMesh' has a wrong offset!");

// ScriptStruct Snowfall.SnfStreetStallActorCollectionSetting
// 0x0018 (0x0018 - 0x0000)
struct FSnfStreetStallActorCollectionSetting final
{
public:
	class FName                                   CollectionID;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMesh;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfStreetStallActorCollectionSetting) == 0x000008, "Wrong alignment on FSnfStreetStallActorCollectionSetting");
static_assert(sizeof(FSnfStreetStallActorCollectionSetting) == 0x000018, "Wrong size on FSnfStreetStallActorCollectionSetting");
static_assert(offsetof(FSnfStreetStallActorCollectionSetting, CollectionID) == 0x000000, "Member 'FSnfStreetStallActorCollectionSetting::CollectionID' has a wrong offset!");
static_assert(offsetof(FSnfStreetStallActorCollectionSetting, StaticMesh) == 0x000008, "Member 'FSnfStreetStallActorCollectionSetting::StaticMesh' has a wrong offset!");

// ScriptStruct Snowfall.SnfStreetStallActorPartsSetting
// 0x0090 (0x0090 - 0x0000)
struct FSnfStreetStallActorPartsSetting final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMesh;                                        // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  Materials;                                         // 0x0038(0x0050)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfStreetStallActorPartsSetting) == 0x000010, "Wrong alignment on FSnfStreetStallActorPartsSetting");
static_assert(sizeof(FSnfStreetStallActorPartsSetting) == 0x000090, "Wrong size on FSnfStreetStallActorPartsSetting");
static_assert(offsetof(FSnfStreetStallActorPartsSetting, Transform) == 0x000000, "Member 'FSnfStreetStallActorPartsSetting::Transform' has a wrong offset!");
static_assert(offsetof(FSnfStreetStallActorPartsSetting, StaticMesh) == 0x000030, "Member 'FSnfStreetStallActorPartsSetting::StaticMesh' has a wrong offset!");
static_assert(offsetof(FSnfStreetStallActorPartsSetting, Materials) == 0x000038, "Member 'FSnfStreetStallActorPartsSetting::Materials' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameAutoSupplyInfo
// 0x0018 (0x0018 - 0x0000)
struct FSnfGameAutoSupplyInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TIME;                                              // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameAutoSupplyInfo) == 0x000004, "Wrong alignment on FSnfGameAutoSupplyInfo");
static_assert(sizeof(FSnfGameAutoSupplyInfo) == 0x000018, "Wrong size on FSnfGameAutoSupplyInfo");
static_assert(offsetof(FSnfGameAutoSupplyInfo, ID) == 0x000000, "Member 'FSnfGameAutoSupplyInfo::ID' has a wrong offset!");
static_assert(offsetof(FSnfGameAutoSupplyInfo, Actor) == 0x000008, "Member 'FSnfGameAutoSupplyInfo::Actor' has a wrong offset!");
static_assert(offsetof(FSnfGameAutoSupplyInfo, TIME) == 0x000010, "Member 'FSnfGameAutoSupplyInfo::TIME' has a wrong offset!");
static_assert(offsetof(FSnfGameAutoSupplyInfo, Length) == 0x000014, "Member 'FSnfGameAutoSupplyInfo::Length' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameAutoSupplyRequest
// 0x00C0 (0x00C0 - 0x0000)
struct FSnfGameAutoSupplyRequest final
{
public:
	class FName                                   SupplyId;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SupplyName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Class;                                             // 0x0010(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0038(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0060(0x0030)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  OwnerActor;                                        // 0x0090(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USnfActorIni>            Ini;                                               // 0x0098(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfGameAutoSupplyRequest) == 0x000010, "Wrong alignment on FSnfGameAutoSupplyRequest");
static_assert(sizeof(FSnfGameAutoSupplyRequest) == 0x0000C0, "Wrong size on FSnfGameAutoSupplyRequest");
static_assert(offsetof(FSnfGameAutoSupplyRequest, SupplyId) == 0x000000, "Member 'FSnfGameAutoSupplyRequest::SupplyId' has a wrong offset!");
static_assert(offsetof(FSnfGameAutoSupplyRequest, SupplyName) == 0x000008, "Member 'FSnfGameAutoSupplyRequest::SupplyName' has a wrong offset!");
static_assert(offsetof(FSnfGameAutoSupplyRequest, Class) == 0x000010, "Member 'FSnfGameAutoSupplyRequest::Class' has a wrong offset!");
static_assert(offsetof(FSnfGameAutoSupplyRequest, Tags) == 0x000038, "Member 'FSnfGameAutoSupplyRequest::Tags' has a wrong offset!");
static_assert(offsetof(FSnfGameAutoSupplyRequest, Transform) == 0x000060, "Member 'FSnfGameAutoSupplyRequest::Transform' has a wrong offset!");
static_assert(offsetof(FSnfGameAutoSupplyRequest, OwnerActor) == 0x000090, "Member 'FSnfGameAutoSupplyRequest::OwnerActor' has a wrong offset!");
static_assert(offsetof(FSnfGameAutoSupplyRequest, Ini) == 0x000098, "Member 'FSnfGameAutoSupplyRequest::Ini' has a wrong offset!");

// ScriptStruct Snowfall.SnfTakeDamagePropsActorPhysicsPartsComponent
// 0x0100 (0x0100 - 0x0000)
struct FSnfTakeDamagePropsActorPhysicsPartsComponent final
{
public:
	bool                                          bPhysicsParts;                                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             DefaultTransform;                                  // 0x0010(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class USnfStaticMeshComponent*                MeshComponent;                                     // 0x0040(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionEnabled                             DefaultCollision;                                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ESnfTakeDamagePropsActorSoundType, struct FSnfTakeDamagePropsActorSoundSetting> SoundSettings;                                     // 0x0050(0x0050)(Edit, NativeAccessSpecifierPublic)
	float                                         ScrapeXRangeMin;                                   // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrapeXRangeMax;                                   // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrapeYRangeMin;                                   // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrapeYRangeMax;                                   // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrapeZRangeMin;                                   // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrapeZRangeMax;                                   // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrapeTimeRange;                                   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrapeAngleRange;                                  // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrapeAngleSizeRange;                              // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x3C];                                      // 0x00C4(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfTakeDamagePropsActorPhysicsPartsComponent) == 0x000010, "Wrong alignment on FSnfTakeDamagePropsActorPhysicsPartsComponent");
static_assert(sizeof(FSnfTakeDamagePropsActorPhysicsPartsComponent) == 0x000100, "Wrong size on FSnfTakeDamagePropsActorPhysicsPartsComponent");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsComponent, bPhysicsParts) == 0x000000, "Member 'FSnfTakeDamagePropsActorPhysicsPartsComponent::bPhysicsParts' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsComponent, DefaultTransform) == 0x000010, "Member 'FSnfTakeDamagePropsActorPhysicsPartsComponent::DefaultTransform' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsComponent, MeshComponent) == 0x000040, "Member 'FSnfTakeDamagePropsActorPhysicsPartsComponent::MeshComponent' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsComponent, DefaultCollision) == 0x000048, "Member 'FSnfTakeDamagePropsActorPhysicsPartsComponent::DefaultCollision' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsComponent, SoundSettings) == 0x000050, "Member 'FSnfTakeDamagePropsActorPhysicsPartsComponent::SoundSettings' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsComponent, ScrapeXRangeMin) == 0x0000A0, "Member 'FSnfTakeDamagePropsActorPhysicsPartsComponent::ScrapeXRangeMin' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsComponent, ScrapeXRangeMax) == 0x0000A4, "Member 'FSnfTakeDamagePropsActorPhysicsPartsComponent::ScrapeXRangeMax' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsComponent, ScrapeYRangeMin) == 0x0000A8, "Member 'FSnfTakeDamagePropsActorPhysicsPartsComponent::ScrapeYRangeMin' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsComponent, ScrapeYRangeMax) == 0x0000AC, "Member 'FSnfTakeDamagePropsActorPhysicsPartsComponent::ScrapeYRangeMax' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsComponent, ScrapeZRangeMin) == 0x0000B0, "Member 'FSnfTakeDamagePropsActorPhysicsPartsComponent::ScrapeZRangeMin' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsComponent, ScrapeZRangeMax) == 0x0000B4, "Member 'FSnfTakeDamagePropsActorPhysicsPartsComponent::ScrapeZRangeMax' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsComponent, ScrapeTimeRange) == 0x0000B8, "Member 'FSnfTakeDamagePropsActorPhysicsPartsComponent::ScrapeTimeRange' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsComponent, ScrapeAngleRange) == 0x0000BC, "Member 'FSnfTakeDamagePropsActorPhysicsPartsComponent::ScrapeAngleRange' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsComponent, ScrapeAngleSizeRange) == 0x0000C0, "Member 'FSnfTakeDamagePropsActorPhysicsPartsComponent::ScrapeAngleSizeRange' has a wrong offset!");

// ScriptStruct Snowfall.SnfTakeDamagePropsActorPhysicsPartsSettings
// 0x00F0 (0x00F0 - 0x0000)
struct FSnfTakeDamagePropsActorPhysicsPartsSettings final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  Materials;                                         // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
	bool                                          bSimulatePhysics;                                  // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetMassInkg;                                      // 0x0059(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MassInKg;                                          // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDamping;                                     // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDamping;                                    // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableGravity;                                    // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartAwake;                                       // 0x0069(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     Instances;                                         // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<ESnfTakeDamagePropsActorSoundType, struct FSnfTakeDamagePropsActorSoundSetting> SoundSettings;                                     // 0x0080(0x0050)(Edit, NativeAccessSpecifierPublic)
	float                                         ScrapeXRangeMin;                                   // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrapeXRangeMax;                                   // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrapeYRangeMin;                                   // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrapeYRangeMax;                                   // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrapeTimeRange;                                   // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrapeAngleRange;                                  // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrapeAngleSizeRange;                              // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfTakeDamagePropsActorPhysicsPartsSettings) == 0x000008, "Wrong alignment on FSnfTakeDamagePropsActorPhysicsPartsSettings");
static_assert(sizeof(FSnfTakeDamagePropsActorPhysicsPartsSettings) == 0x0000F0, "Wrong size on FSnfTakeDamagePropsActorPhysicsPartsSettings");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsSettings, StaticMesh) == 0x000000, "Member 'FSnfTakeDamagePropsActorPhysicsPartsSettings::StaticMesh' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsSettings, Materials) == 0x000008, "Member 'FSnfTakeDamagePropsActorPhysicsPartsSettings::Materials' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsSettings, bSimulatePhysics) == 0x000058, "Member 'FSnfTakeDamagePropsActorPhysicsPartsSettings::bSimulatePhysics' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsSettings, bSetMassInkg) == 0x000059, "Member 'FSnfTakeDamagePropsActorPhysicsPartsSettings::bSetMassInkg' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsSettings, MassInKg) == 0x00005C, "Member 'FSnfTakeDamagePropsActorPhysicsPartsSettings::MassInKg' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsSettings, LinearDamping) == 0x000060, "Member 'FSnfTakeDamagePropsActorPhysicsPartsSettings::LinearDamping' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsSettings, AngularDamping) == 0x000064, "Member 'FSnfTakeDamagePropsActorPhysicsPartsSettings::AngularDamping' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsSettings, bEnableGravity) == 0x000068, "Member 'FSnfTakeDamagePropsActorPhysicsPartsSettings::bEnableGravity' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsSettings, bStartAwake) == 0x000069, "Member 'FSnfTakeDamagePropsActorPhysicsPartsSettings::bStartAwake' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsSettings, Instances) == 0x000070, "Member 'FSnfTakeDamagePropsActorPhysicsPartsSettings::Instances' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsSettings, SoundSettings) == 0x000080, "Member 'FSnfTakeDamagePropsActorPhysicsPartsSettings::SoundSettings' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsSettings, ScrapeXRangeMin) == 0x0000D0, "Member 'FSnfTakeDamagePropsActorPhysicsPartsSettings::ScrapeXRangeMin' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsSettings, ScrapeXRangeMax) == 0x0000D4, "Member 'FSnfTakeDamagePropsActorPhysicsPartsSettings::ScrapeXRangeMax' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsSettings, ScrapeYRangeMin) == 0x0000D8, "Member 'FSnfTakeDamagePropsActorPhysicsPartsSettings::ScrapeYRangeMin' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsSettings, ScrapeYRangeMax) == 0x0000DC, "Member 'FSnfTakeDamagePropsActorPhysicsPartsSettings::ScrapeYRangeMax' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsSettings, ScrapeTimeRange) == 0x0000E0, "Member 'FSnfTakeDamagePropsActorPhysicsPartsSettings::ScrapeTimeRange' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsSettings, ScrapeAngleRange) == 0x0000E4, "Member 'FSnfTakeDamagePropsActorPhysicsPartsSettings::ScrapeAngleRange' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorPhysicsPartsSettings, ScrapeAngleSizeRange) == 0x0000E8, "Member 'FSnfTakeDamagePropsActorPhysicsPartsSettings::ScrapeAngleSizeRange' has a wrong offset!");

// ScriptStruct Snowfall.SnfTakeDamagePropsActorDamagePoint
// 0x00A8 (0x00A8 - 0x0000)
struct FSnfTakeDamagePropsActorDamagePoint final
{
public:
	int32                                         PointID;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBrokenDelete;                                     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HPMax;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackCountToBreakPoint;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      BrokenRatePlayList;                                // 0x0010(0x0050)(NativeAccessSpecifierPublic)
	class USnfStaticMeshComponent*                StaticMeshComponent;                               // 0x0060(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChildActorComponent*                   ChildActorComponent;                               // 0x0068(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnfBoxComponent*                       DamageCollision;                                   // 0x0070(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   CollisionBox;                                      // 0x0078(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x14];                                      // 0x0094(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfTakeDamagePropsActorDamagePoint) == 0x000008, "Wrong alignment on FSnfTakeDamagePropsActorDamagePoint");
static_assert(sizeof(FSnfTakeDamagePropsActorDamagePoint) == 0x0000A8, "Wrong size on FSnfTakeDamagePropsActorDamagePoint");
static_assert(offsetof(FSnfTakeDamagePropsActorDamagePoint, PointID) == 0x000000, "Member 'FSnfTakeDamagePropsActorDamagePoint::PointID' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorDamagePoint, bBrokenDelete) == 0x000004, "Member 'FSnfTakeDamagePropsActorDamagePoint::bBrokenDelete' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorDamagePoint, HPMax) == 0x000008, "Member 'FSnfTakeDamagePropsActorDamagePoint::HPMax' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorDamagePoint, AttackCountToBreakPoint) == 0x00000C, "Member 'FSnfTakeDamagePropsActorDamagePoint::AttackCountToBreakPoint' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorDamagePoint, BrokenRatePlayList) == 0x000010, "Member 'FSnfTakeDamagePropsActorDamagePoint::BrokenRatePlayList' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorDamagePoint, StaticMeshComponent) == 0x000060, "Member 'FSnfTakeDamagePropsActorDamagePoint::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorDamagePoint, ChildActorComponent) == 0x000068, "Member 'FSnfTakeDamagePropsActorDamagePoint::ChildActorComponent' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorDamagePoint, DamageCollision) == 0x000070, "Member 'FSnfTakeDamagePropsActorDamagePoint::DamageCollision' has a wrong offset!");
static_assert(offsetof(FSnfTakeDamagePropsActorDamagePoint, CollisionBox) == 0x000078, "Member 'FSnfTakeDamagePropsActorDamagePoint::CollisionBox' has a wrong offset!");

// ScriptStruct Snowfall.SnfTransferTelephoneEdoRinkoBuddyTalkSetting
// 0x001C (0x001C - 0x0000)
struct FSnfTransferTelephoneEdoRinkoBuddyTalkSetting final
{
public:
	class FName                                   TalkID;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameSequenceMin;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameSequenceMax;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransferedNum;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMustPlay;                                         // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Rate;                                              // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTransferTelephoneEdoRinkoBuddyTalkSetting) == 0x000004, "Wrong alignment on FSnfTransferTelephoneEdoRinkoBuddyTalkSetting");
static_assert(sizeof(FSnfTransferTelephoneEdoRinkoBuddyTalkSetting) == 0x00001C, "Wrong size on FSnfTransferTelephoneEdoRinkoBuddyTalkSetting");
static_assert(offsetof(FSnfTransferTelephoneEdoRinkoBuddyTalkSetting, TalkID) == 0x000000, "Member 'FSnfTransferTelephoneEdoRinkoBuddyTalkSetting::TalkID' has a wrong offset!");
static_assert(offsetof(FSnfTransferTelephoneEdoRinkoBuddyTalkSetting, GameSequenceMin) == 0x000008, "Member 'FSnfTransferTelephoneEdoRinkoBuddyTalkSetting::GameSequenceMin' has a wrong offset!");
static_assert(offsetof(FSnfTransferTelephoneEdoRinkoBuddyTalkSetting, GameSequenceMax) == 0x00000C, "Member 'FSnfTransferTelephoneEdoRinkoBuddyTalkSetting::GameSequenceMax' has a wrong offset!");
static_assert(offsetof(FSnfTransferTelephoneEdoRinkoBuddyTalkSetting, TransferedNum) == 0x000010, "Member 'FSnfTransferTelephoneEdoRinkoBuddyTalkSetting::TransferedNum' has a wrong offset!");
static_assert(offsetof(FSnfTransferTelephoneEdoRinkoBuddyTalkSetting, bMustPlay) == 0x000014, "Member 'FSnfTransferTelephoneEdoRinkoBuddyTalkSetting::bMustPlay' has a wrong offset!");
static_assert(offsetof(FSnfTransferTelephoneEdoRinkoBuddyTalkSetting, Rate) == 0x000018, "Member 'FSnfTransferTelephoneEdoRinkoBuddyTalkSetting::Rate' has a wrong offset!");

// ScriptStruct Snowfall.SnfTransferTelephoneBuddyTalkSetting
// 0x0024 (0x0024 - 0x0000)
struct FSnfTransferTelephoneBuddyTalkSetting final
{
public:
	class FName                                   RequestTalkId;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RequestAfterTalkId;                                // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameSequenceMin;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameSequenceMax;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivityId;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActivityStep;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTransferTelephoneBuddyTalkSetting) == 0x000004, "Wrong alignment on FSnfTransferTelephoneBuddyTalkSetting");
static_assert(sizeof(FSnfTransferTelephoneBuddyTalkSetting) == 0x000024, "Wrong size on FSnfTransferTelephoneBuddyTalkSetting");
static_assert(offsetof(FSnfTransferTelephoneBuddyTalkSetting, RequestTalkId) == 0x000000, "Member 'FSnfTransferTelephoneBuddyTalkSetting::RequestTalkId' has a wrong offset!");
static_assert(offsetof(FSnfTransferTelephoneBuddyTalkSetting, RequestAfterTalkId) == 0x000008, "Member 'FSnfTransferTelephoneBuddyTalkSetting::RequestAfterTalkId' has a wrong offset!");
static_assert(offsetof(FSnfTransferTelephoneBuddyTalkSetting, GameSequenceMin) == 0x000010, "Member 'FSnfTransferTelephoneBuddyTalkSetting::GameSequenceMin' has a wrong offset!");
static_assert(offsetof(FSnfTransferTelephoneBuddyTalkSetting, GameSequenceMax) == 0x000014, "Member 'FSnfTransferTelephoneBuddyTalkSetting::GameSequenceMax' has a wrong offset!");
static_assert(offsetof(FSnfTransferTelephoneBuddyTalkSetting, ActivityId) == 0x000018, "Member 'FSnfTransferTelephoneBuddyTalkSetting::ActivityId' has a wrong offset!");
static_assert(offsetof(FSnfTransferTelephoneBuddyTalkSetting, ActivityStep) == 0x000020, "Member 'FSnfTransferTelephoneBuddyTalkSetting::ActivityStep' has a wrong offset!");

// ScriptStruct Snowfall.SnfTransferTelephoneEffectSetting
// 0x0060 (0x0060 - 0x0000)
struct FSnfTransferTelephoneEffectSetting final
{
public:
	int32                                         MaterialSlotIndex;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSnfTransferTelephoneEffectFloatValue> FloatParamList;                                    // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTransferTelephoneEffectSetting) == 0x000008, "Wrong alignment on FSnfTransferTelephoneEffectSetting");
static_assert(sizeof(FSnfTransferTelephoneEffectSetting) == 0x000060, "Wrong size on FSnfTransferTelephoneEffectSetting");
static_assert(offsetof(FSnfTransferTelephoneEffectSetting, MaterialSlotIndex) == 0x000000, "Member 'FSnfTransferTelephoneEffectSetting::MaterialSlotIndex' has a wrong offset!");
static_assert(offsetof(FSnfTransferTelephoneEffectSetting, DynamicMaterial) == 0x000008, "Member 'FSnfTransferTelephoneEffectSetting::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(FSnfTransferTelephoneEffectSetting, FloatParamList) == 0x000010, "Member 'FSnfTransferTelephoneEffectSetting::FloatParamList' has a wrong offset!");

// ScriptStruct Snowfall.SnfTeleportPortalBaseExitInteractInfo
// 0x0038 (0x0038 - 0x0000)
struct FSnfTeleportPortalBaseExitInteractInfo final
{
public:
	class FName                                   OnInteractKey;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OffInteractKey;                                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExitIndex;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableInteract;                                   // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          SoundOnExitStartOverride;                          // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SoundOnExitEndOverride;                            // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAkPsitionOffset;                               // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AkPositionOffsetOverride;                          // 0x002C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTeleportPortalBaseExitInteractInfo) == 0x000008, "Wrong alignment on FSnfTeleportPortalBaseExitInteractInfo");
static_assert(sizeof(FSnfTeleportPortalBaseExitInteractInfo) == 0x000038, "Wrong size on FSnfTeleportPortalBaseExitInteractInfo");
static_assert(offsetof(FSnfTeleportPortalBaseExitInteractInfo, OnInteractKey) == 0x000000, "Member 'FSnfTeleportPortalBaseExitInteractInfo::OnInteractKey' has a wrong offset!");
static_assert(offsetof(FSnfTeleportPortalBaseExitInteractInfo, OffInteractKey) == 0x000008, "Member 'FSnfTeleportPortalBaseExitInteractInfo::OffInteractKey' has a wrong offset!");
static_assert(offsetof(FSnfTeleportPortalBaseExitInteractInfo, ExitIndex) == 0x000010, "Member 'FSnfTeleportPortalBaseExitInteractInfo::ExitIndex' has a wrong offset!");
static_assert(offsetof(FSnfTeleportPortalBaseExitInteractInfo, bEnableInteract) == 0x000014, "Member 'FSnfTeleportPortalBaseExitInteractInfo::bEnableInteract' has a wrong offset!");
static_assert(offsetof(FSnfTeleportPortalBaseExitInteractInfo, SoundOnExitStartOverride) == 0x000018, "Member 'FSnfTeleportPortalBaseExitInteractInfo::SoundOnExitStartOverride' has a wrong offset!");
static_assert(offsetof(FSnfTeleportPortalBaseExitInteractInfo, SoundOnExitEndOverride) == 0x000020, "Member 'FSnfTeleportPortalBaseExitInteractInfo::SoundOnExitEndOverride' has a wrong offset!");
static_assert(offsetof(FSnfTeleportPortalBaseExitInteractInfo, bUseAkPsitionOffset) == 0x000028, "Member 'FSnfTeleportPortalBaseExitInteractInfo::bUseAkPsitionOffset' has a wrong offset!");
static_assert(offsetof(FSnfTeleportPortalBaseExitInteractInfo, AkPositionOffsetOverride) == 0x00002C, "Member 'FSnfTeleportPortalBaseExitInteractInfo::AkPositionOffsetOverride' has a wrong offset!");

// ScriptStruct Snowfall.SnfTimeLineItem
// 0x00A8 (0x00A8 - 0x0000)
struct FSnfTimeLineItem final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TIME;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfTimeLineType                              Type;                                              // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  TargetSoft;                                        // 0x0018(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetPlayer;                                      // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetCharacter;                                   // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Action;                                            // 0x0044(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ActionData;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           NameList;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    TalkInfo;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          TalkInteract;                                      // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TalkCount;                                         // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Anim;                                              // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimBlend;                                         // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AnimLoop;                                          // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ID;                                                // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Draw;                                              // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTimeLineItem) == 0x000008, "Wrong alignment on FSnfTimeLineItem");
static_assert(sizeof(FSnfTimeLineItem) == 0x0000A8, "Wrong size on FSnfTimeLineItem");
static_assert(offsetof(FSnfTimeLineItem, TIME) == 0x000008, "Member 'FSnfTimeLineItem::TIME' has a wrong offset!");
static_assert(offsetof(FSnfTimeLineItem, Type) == 0x00000C, "Member 'FSnfTimeLineItem::Type' has a wrong offset!");
static_assert(offsetof(FSnfTimeLineItem, Target) == 0x000010, "Member 'FSnfTimeLineItem::Target' has a wrong offset!");
static_assert(offsetof(FSnfTimeLineItem, TargetSoft) == 0x000018, "Member 'FSnfTimeLineItem::TargetSoft' has a wrong offset!");
static_assert(offsetof(FSnfTimeLineItem, TargetPlayer) == 0x000040, "Member 'FSnfTimeLineItem::TargetPlayer' has a wrong offset!");
static_assert(offsetof(FSnfTimeLineItem, TargetCharacter) == 0x000041, "Member 'FSnfTimeLineItem::TargetCharacter' has a wrong offset!");
static_assert(offsetof(FSnfTimeLineItem, Action) == 0x000044, "Member 'FSnfTimeLineItem::Action' has a wrong offset!");
static_assert(offsetof(FSnfTimeLineItem, ActionData) == 0x000050, "Member 'FSnfTimeLineItem::ActionData' has a wrong offset!");
static_assert(offsetof(FSnfTimeLineItem, NameList) == 0x000058, "Member 'FSnfTimeLineItem::NameList' has a wrong offset!");
static_assert(offsetof(FSnfTimeLineItem, TalkInfo) == 0x000068, "Member 'FSnfTimeLineItem::TalkInfo' has a wrong offset!");
static_assert(offsetof(FSnfTimeLineItem, TalkInteract) == 0x000078, "Member 'FSnfTimeLineItem::TalkInteract' has a wrong offset!");
static_assert(offsetof(FSnfTimeLineItem, TalkCount) == 0x00007C, "Member 'FSnfTimeLineItem::TalkCount' has a wrong offset!");
static_assert(offsetof(FSnfTimeLineItem, Anim) == 0x000080, "Member 'FSnfTimeLineItem::Anim' has a wrong offset!");
static_assert(offsetof(FSnfTimeLineItem, AnimBlend) == 0x000088, "Member 'FSnfTimeLineItem::AnimBlend' has a wrong offset!");
static_assert(offsetof(FSnfTimeLineItem, AnimLoop) == 0x00008C, "Member 'FSnfTimeLineItem::AnimLoop' has a wrong offset!");
static_assert(offsetof(FSnfTimeLineItem, ID) == 0x000090, "Member 'FSnfTimeLineItem::ID' has a wrong offset!");
static_assert(offsetof(FSnfTimeLineItem, Draw) == 0x000098, "Member 'FSnfTimeLineItem::Draw' has a wrong offset!");

// ScriptStruct Snowfall.SnfTrainSpeedInfo
// 0x000C (0x000C - 0x0000)
struct FSnfTrainSpeedInfo final
{
public:
	float                                         BeginLength;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndLength;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetSpeed;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTrainSpeedInfo) == 0x000004, "Wrong alignment on FSnfTrainSpeedInfo");
static_assert(sizeof(FSnfTrainSpeedInfo) == 0x00000C, "Wrong size on FSnfTrainSpeedInfo");
static_assert(offsetof(FSnfTrainSpeedInfo, BeginLength) == 0x000000, "Member 'FSnfTrainSpeedInfo::BeginLength' has a wrong offset!");
static_assert(offsetof(FSnfTrainSpeedInfo, EndLength) == 0x000004, "Member 'FSnfTrainSpeedInfo::EndLength' has a wrong offset!");
static_assert(offsetof(FSnfTrainSpeedInfo, TargetSpeed) == 0x000008, "Member 'FSnfTrainSpeedInfo::TargetSpeed' has a wrong offset!");

// ScriptStruct Snowfall.SnfTrainAction
// 0x0038 (0x0038 - 0x0000)
struct FSnfTrainAction final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetDirect;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  TargetSoft;                                        // 0x0010(0x0028)(Edit, BlueprintVisible, DisableEditOnTemplate, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTrainAction) == 0x000008, "Wrong alignment on FSnfTrainAction");
static_assert(sizeof(FSnfTrainAction) == 0x000038, "Wrong size on FSnfTrainAction");
static_assert(offsetof(FSnfTrainAction, ActionName) == 0x000000, "Member 'FSnfTrainAction::ActionName' has a wrong offset!");
static_assert(offsetof(FSnfTrainAction, TargetDirect) == 0x000008, "Member 'FSnfTrainAction::TargetDirect' has a wrong offset!");
static_assert(offsetof(FSnfTrainAction, TargetSoft) == 0x000010, "Member 'FSnfTrainAction::TargetSoft' has a wrong offset!");

// ScriptStruct Snowfall.SnfTreasureBoxParts
// 0x0020 (0x0020 - 0x0000)
struct FSnfTreasureBoxParts final
{
public:
	class FName                                   TargetTag;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetPos;                                         // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRot;                                         // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTreasureBoxParts) == 0x000004, "Wrong alignment on FSnfTreasureBoxParts");
static_assert(sizeof(FSnfTreasureBoxParts) == 0x000020, "Wrong size on FSnfTreasureBoxParts");
static_assert(offsetof(FSnfTreasureBoxParts, TargetTag) == 0x000000, "Member 'FSnfTreasureBoxParts::TargetTag' has a wrong offset!");
static_assert(offsetof(FSnfTreasureBoxParts, OffsetPos) == 0x000008, "Member 'FSnfTreasureBoxParts::OffsetPos' has a wrong offset!");
static_assert(offsetof(FSnfTreasureBoxParts, OffsetRot) == 0x000014, "Member 'FSnfTreasureBoxParts::OffsetRot' has a wrong offset!");

// ScriptStruct Snowfall.SnfVATControlActorMoveComponent
// 0x0094 (0x0094 - 0x0000)
struct FSnfVATControlActorMoveComponent final
{
public:
	struct FVector                                InitiallyLocation;                                 // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CurrentLocation;                                   // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NowFowerd;                                         // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetDir;                                         // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveVec;                                           // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetAngle;                                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveLen;                                           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedOffset;                                       // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomSpeed;                                       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfVATControlActorState                      InitiallyState;                                    // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnfVATControlActorState                      CurrentState;                                      // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2E];                                      // 0x0066(0x002E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfVATControlActorMoveComponent) == 0x000004, "Wrong alignment on FSnfVATControlActorMoveComponent");
static_assert(sizeof(FSnfVATControlActorMoveComponent) == 0x000094, "Wrong size on FSnfVATControlActorMoveComponent");
static_assert(offsetof(FSnfVATControlActorMoveComponent, InitiallyLocation) == 0x000000, "Member 'FSnfVATControlActorMoveComponent::InitiallyLocation' has a wrong offset!");
static_assert(offsetof(FSnfVATControlActorMoveComponent, CurrentLocation) == 0x00000C, "Member 'FSnfVATControlActorMoveComponent::CurrentLocation' has a wrong offset!");
static_assert(offsetof(FSnfVATControlActorMoveComponent, StartLocation) == 0x000018, "Member 'FSnfVATControlActorMoveComponent::StartLocation' has a wrong offset!");
static_assert(offsetof(FSnfVATControlActorMoveComponent, EndLocation) == 0x000024, "Member 'FSnfVATControlActorMoveComponent::EndLocation' has a wrong offset!");
static_assert(offsetof(FSnfVATControlActorMoveComponent, NowFowerd) == 0x000030, "Member 'FSnfVATControlActorMoveComponent::NowFowerd' has a wrong offset!");
static_assert(offsetof(FSnfVATControlActorMoveComponent, TargetDir) == 0x00003C, "Member 'FSnfVATControlActorMoveComponent::TargetDir' has a wrong offset!");
static_assert(offsetof(FSnfVATControlActorMoveComponent, MoveVec) == 0x000048, "Member 'FSnfVATControlActorMoveComponent::MoveVec' has a wrong offset!");
static_assert(offsetof(FSnfVATControlActorMoveComponent, TargetAngle) == 0x000054, "Member 'FSnfVATControlActorMoveComponent::TargetAngle' has a wrong offset!");
static_assert(offsetof(FSnfVATControlActorMoveComponent, MoveLen) == 0x000058, "Member 'FSnfVATControlActorMoveComponent::MoveLen' has a wrong offset!");
static_assert(offsetof(FSnfVATControlActorMoveComponent, SpeedOffset) == 0x00005C, "Member 'FSnfVATControlActorMoveComponent::SpeedOffset' has a wrong offset!");
static_assert(offsetof(FSnfVATControlActorMoveComponent, RandomSpeed) == 0x000060, "Member 'FSnfVATControlActorMoveComponent::RandomSpeed' has a wrong offset!");
static_assert(offsetof(FSnfVATControlActorMoveComponent, InitiallyState) == 0x000064, "Member 'FSnfVATControlActorMoveComponent::InitiallyState' has a wrong offset!");
static_assert(offsetof(FSnfVATControlActorMoveComponent, CurrentState) == 0x000065, "Member 'FSnfVATControlActorMoveComponent::CurrentState' has a wrong offset!");

// ScriptStruct Snowfall.SnfVendingMachineInfo
// 0x0088 (0x0090 - 0x0008)
struct FSnfVendingMachineInfo final : public FTableRowBase
{
public:
	class FName                                   ActorName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  Level;                                             // 0x0010(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0040(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAssignShop;                                       // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            MachineMesh;                                       // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            ContentsMesh;                                      // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfVendingMachineInfo) == 0x000010, "Wrong alignment on FSnfVendingMachineInfo");
static_assert(sizeof(FSnfVendingMachineInfo) == 0x000090, "Wrong size on FSnfVendingMachineInfo");
static_assert(offsetof(FSnfVendingMachineInfo, ActorName) == 0x000008, "Member 'FSnfVendingMachineInfo::ActorName' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineInfo, Level) == 0x000010, "Member 'FSnfVendingMachineInfo::Level' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineInfo, Transform) == 0x000040, "Member 'FSnfVendingMachineInfo::Transform' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineInfo, bAssignShop) == 0x000070, "Member 'FSnfVendingMachineInfo::bAssignShop' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineInfo, MachineMesh) == 0x000078, "Member 'FSnfVendingMachineInfo::MachineMesh' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineInfo, ContentsMesh) == 0x000080, "Member 'FSnfVendingMachineInfo::ContentsMesh' has a wrong offset!");

// ScriptStruct Snowfall.SnfVendingMachineShopComponent
// 0x0028 (0x0028 - 0x0000)
struct FSnfVendingMachineShopComponent final
{
public:
	class USnfStaticMeshComponent*                ShopMeshComponent;                                 // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnfStaticMeshComponent*                ContentsMeshComponent;                             // 0x0008(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnfInteractComponent*                  InteractComponent;                                 // 0x0010(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnfBoxComponent*                       InteractCollisionComponent;                        // 0x0018(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkSphereComponent2*                    AkSphereComponent;                                 // 0x0020(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfVendingMachineShopComponent) == 0x000008, "Wrong alignment on FSnfVendingMachineShopComponent");
static_assert(sizeof(FSnfVendingMachineShopComponent) == 0x000028, "Wrong size on FSnfVendingMachineShopComponent");
static_assert(offsetof(FSnfVendingMachineShopComponent, ShopMeshComponent) == 0x000000, "Member 'FSnfVendingMachineShopComponent::ShopMeshComponent' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineShopComponent, ContentsMeshComponent) == 0x000008, "Member 'FSnfVendingMachineShopComponent::ContentsMeshComponent' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineShopComponent, InteractComponent) == 0x000010, "Member 'FSnfVendingMachineShopComponent::InteractComponent' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineShopComponent, InteractCollisionComponent) == 0x000018, "Member 'FSnfVendingMachineShopComponent::InteractCollisionComponent' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineShopComponent, AkSphereComponent) == 0x000020, "Member 'FSnfVendingMachineShopComponent::AkSphereComponent' has a wrong offset!");

// ScriptStruct Snowfall.SnfVendingMachineLayoutParam
// 0x00F0 (0x00F0 - 0x0000)
struct FSnfVendingMachineLayoutParam final
{
public:
	int32                                         MeshIndex;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            OverrideMesh;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInterface*>  OverrideMaterials;                                 // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FTransform                             DefaultTransform;                                  // 0x0060(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             PreDefaultTransform;                               // 0x0090(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             OffsetTransform;                                   // 0x00C0(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfVendingMachineLayoutParam) == 0x000010, "Wrong alignment on FSnfVendingMachineLayoutParam");
static_assert(sizeof(FSnfVendingMachineLayoutParam) == 0x0000F0, "Wrong size on FSnfVendingMachineLayoutParam");
static_assert(offsetof(FSnfVendingMachineLayoutParam, MeshIndex) == 0x000000, "Member 'FSnfVendingMachineLayoutParam::MeshIndex' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineLayoutParam, OverrideMesh) == 0x000008, "Member 'FSnfVendingMachineLayoutParam::OverrideMesh' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineLayoutParam, OverrideMaterials) == 0x000010, "Member 'FSnfVendingMachineLayoutParam::OverrideMaterials' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineLayoutParam, DefaultTransform) == 0x000060, "Member 'FSnfVendingMachineLayoutParam::DefaultTransform' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineLayoutParam, PreDefaultTransform) == 0x000090, "Member 'FSnfVendingMachineLayoutParam::PreDefaultTransform' has a wrong offset!");
static_assert(offsetof(FSnfVendingMachineLayoutParam, OffsetTransform) == 0x0000C0, "Member 'FSnfVendingMachineLayoutParam::OffsetTransform' has a wrong offset!");

// ScriptStruct Snowfall.SnfGameShopItemInfo
// 0x0030 (0x0038 - 0x0008)
struct FSnfGameShopItemInfo final : public FTableRowBase
{
public:
	uint8                                         Pad_8[0x30];                                       // 0x0008(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfGameShopItemInfo) == 0x000008, "Wrong alignment on FSnfGameShopItemInfo");
static_assert(sizeof(FSnfGameShopItemInfo) == 0x000038, "Wrong size on FSnfGameShopItemInfo");

// ScriptStruct Snowfall.SnfConditionEffectScalarData
// 0x001C (0x001C - 0x0000)
struct FSnfConditionEffectScalarData final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalConditionParam;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OtherConditionParam;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageConditionParam;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x8];                                       // 0x0014(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfConditionEffectScalarData) == 0x000004, "Wrong alignment on FSnfConditionEffectScalarData");
static_assert(sizeof(FSnfConditionEffectScalarData) == 0x00001C, "Wrong size on FSnfConditionEffectScalarData");
static_assert(offsetof(FSnfConditionEffectScalarData, ParamName) == 0x000000, "Member 'FSnfConditionEffectScalarData::ParamName' has a wrong offset!");
static_assert(offsetof(FSnfConditionEffectScalarData, NormalConditionParam) == 0x000008, "Member 'FSnfConditionEffectScalarData::NormalConditionParam' has a wrong offset!");
static_assert(offsetof(FSnfConditionEffectScalarData, OtherConditionParam) == 0x00000C, "Member 'FSnfConditionEffectScalarData::OtherConditionParam' has a wrong offset!");
static_assert(offsetof(FSnfConditionEffectScalarData, DamageConditionParam) == 0x000010, "Member 'FSnfConditionEffectScalarData::DamageConditionParam' has a wrong offset!");

// ScriptStruct Snowfall.SnfVitalEffectCurveData
// 0x0010 (0x0010 - 0x0000)
struct FSnfVitalEffectCurveData final
{
public:
	class FName                                   ScalarName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            CurveData;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfVitalEffectCurveData) == 0x000008, "Wrong alignment on FSnfVitalEffectCurveData");
static_assert(sizeof(FSnfVitalEffectCurveData) == 0x000010, "Wrong size on FSnfVitalEffectCurveData");
static_assert(offsetof(FSnfVitalEffectCurveData, ScalarName) == 0x000000, "Member 'FSnfVitalEffectCurveData::ScalarName' has a wrong offset!");
static_assert(offsetof(FSnfVitalEffectCurveData, CurveData) == 0x000008, "Member 'FSnfVitalEffectCurveData::CurveData' has a wrong offset!");

// ScriptStruct Snowfall.AttachSetting
// 0x0048 (0x0048 - 0x0000)
struct FAttachSetting final
{
public:
	bool                                          bFilterTargetClass;                                // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   TargetClass;                                       // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0030(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateNormal;                                     // 0x003C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttachTime;                                        // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDropOnParentDead;                                 // 0x0044(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttachSetting) == 0x000008, "Wrong alignment on FAttachSetting");
static_assert(sizeof(FAttachSetting) == 0x000048, "Wrong size on FAttachSetting");
static_assert(offsetof(FAttachSetting, bFilterTargetClass) == 0x000000, "Member 'FAttachSetting::bFilterTargetClass' has a wrong offset!");
static_assert(offsetof(FAttachSetting, TargetClass) == 0x000008, "Member 'FAttachSetting::TargetClass' has a wrong offset!");
static_assert(offsetof(FAttachSetting, Offset) == 0x000030, "Member 'FAttachSetting::Offset' has a wrong offset!");
static_assert(offsetof(FAttachSetting, bRotateNormal) == 0x00003C, "Member 'FAttachSetting::bRotateNormal' has a wrong offset!");
static_assert(offsetof(FAttachSetting, AttachTime) == 0x000040, "Member 'FAttachSetting::AttachTime' has a wrong offset!");
static_assert(offsetof(FAttachSetting, bDropOnParentDead) == 0x000044, "Member 'FAttachSetting::bDropOnParentDead' has a wrong offset!");

// ScriptStruct Snowfall.AttenuationSetting
// 0x0030 (0x0030 - 0x0000)
struct FAttenuationSetting final
{
public:
	TSoftClassPtr<class UClass>                   TargetActor;                                       // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Ratio;                                             // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttenuationSetting) == 0x000008, "Wrong alignment on FAttenuationSetting");
static_assert(sizeof(FAttenuationSetting) == 0x000030, "Wrong size on FAttenuationSetting");
static_assert(offsetof(FAttenuationSetting, TargetActor) == 0x000000, "Member 'FAttenuationSetting::TargetActor' has a wrong offset!");
static_assert(offsetof(FAttenuationSetting, Ratio) == 0x000028, "Member 'FAttenuationSetting::Ratio' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponExplosiveDurabilitySetting
// 0x000C (0x000C - 0x0000)
struct FSnfWeaponExplosiveDurabilitySetting final
{
public:
	float                                         Durability;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReductionRate;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BurstNum;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponExplosiveDurabilitySetting) == 0x000004, "Wrong alignment on FSnfWeaponExplosiveDurabilitySetting");
static_assert(sizeof(FSnfWeaponExplosiveDurabilitySetting) == 0x00000C, "Wrong size on FSnfWeaponExplosiveDurabilitySetting");
static_assert(offsetof(FSnfWeaponExplosiveDurabilitySetting, Durability) == 0x000000, "Member 'FSnfWeaponExplosiveDurabilitySetting::Durability' has a wrong offset!");
static_assert(offsetof(FSnfWeaponExplosiveDurabilitySetting, ReductionRate) == 0x000004, "Member 'FSnfWeaponExplosiveDurabilitySetting::ReductionRate' has a wrong offset!");
static_assert(offsetof(FSnfWeaponExplosiveDurabilitySetting, BurstNum) == 0x000008, "Member 'FSnfWeaponExplosiveDurabilitySetting::BurstNum' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponHandSpectrumEffectParam
// 0x0018 (0x0018 - 0x0000)
struct FSnfWeaponHandSpectrumEffectParam final
{
public:
	TSubclassOf<class ASnfWeaponHandSpectrumEffectBase> Effect;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MuzzleOffset;                                      // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfWeaponHandSpectrumEffectParam) == 0x000008, "Wrong alignment on FSnfWeaponHandSpectrumEffectParam");
static_assert(sizeof(FSnfWeaponHandSpectrumEffectParam) == 0x000018, "Wrong size on FSnfWeaponHandSpectrumEffectParam");
static_assert(offsetof(FSnfWeaponHandSpectrumEffectParam, Effect) == 0x000000, "Member 'FSnfWeaponHandSpectrumEffectParam::Effect' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHandSpectrumEffectParam, MuzzleOffset) == 0x000008, "Member 'FSnfWeaponHandSpectrumEffectParam::MuzzleOffset' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponLauncherTableData
// 0x0108 (0x0110 - 0x0008)
struct FSnfWeaponLauncherTableData final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSnfWeaponLauncherData                 LauncherData;                                      // 0x0038(0x00D8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponLauncherTableData) == 0x000008, "Wrong alignment on FSnfWeaponLauncherTableData");
static_assert(sizeof(FSnfWeaponLauncherTableData) == 0x000110, "Wrong size on FSnfWeaponLauncherTableData");
static_assert(offsetof(FSnfWeaponLauncherTableData, Name) == 0x000008, "Member 'FSnfWeaponLauncherTableData::Name' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherTableData, Description) == 0x000020, "Member 'FSnfWeaponLauncherTableData::Description' has a wrong offset!");
static_assert(offsetof(FSnfWeaponLauncherTableData, LauncherData) == 0x000038, "Member 'FSnfWeaponLauncherTableData::LauncherData' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponHomingTargetBoneSetting
// 0x0038 (0x0038 - 0x0000)
struct FSnfWeaponHomingTargetBoneSetting final
{
public:
	TSoftClassPtr<class UClass>                   TargetClass;                                       // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ValidBoneNameList;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponHomingTargetBoneSetting) == 0x000008, "Wrong alignment on FSnfWeaponHomingTargetBoneSetting");
static_assert(sizeof(FSnfWeaponHomingTargetBoneSetting) == 0x000038, "Wrong size on FSnfWeaponHomingTargetBoneSetting");
static_assert(offsetof(FSnfWeaponHomingTargetBoneSetting, TargetClass) == 0x000000, "Member 'FSnfWeaponHomingTargetBoneSetting::TargetClass' has a wrong offset!");
static_assert(offsetof(FSnfWeaponHomingTargetBoneSetting, ValidBoneNameList) == 0x000028, "Member 'FSnfWeaponHomingTargetBoneSetting::ValidBoneNameList' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponRecycleActor
// 0x000C (0x000C - 0x0000)
struct FSnfWeaponRecycleActor final
{
public:
	bool                                          bUsing;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponRecycleActor) == 0x000004, "Wrong alignment on FSnfWeaponRecycleActor");
static_assert(sizeof(FSnfWeaponRecycleActor) == 0x00000C, "Wrong size on FSnfWeaponRecycleActor");
static_assert(offsetof(FSnfWeaponRecycleActor, bUsing) == 0x000000, "Member 'FSnfWeaponRecycleActor::bUsing' has a wrong offset!");
static_assert(offsetof(FSnfWeaponRecycleActor, Actor) == 0x000004, "Member 'FSnfWeaponRecycleActor::Actor' has a wrong offset!");

// ScriptStruct Snowfall.MapContainRecycleActor
// 0x0010 (0x0010 - 0x0000)
struct FMapContainRecycleActor final
{
public:
	TArray<struct FSnfWeaponRecycleActor>         Actors;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapContainRecycleActor) == 0x000008, "Wrong alignment on FMapContainRecycleActor");
static_assert(sizeof(FMapContainRecycleActor) == 0x000010, "Wrong size on FMapContainRecycleActor");
static_assert(offsetof(FMapContainRecycleActor, Actors) == 0x000000, "Member 'FMapContainRecycleActor::Actors' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponTelekinesisMeshSetting
// 0x0030 (0x0030 - 0x0000)
struct FSnfWeaponTelekinesisMeshSetting final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale3D;                                           // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ASnfFXPropsActor>           FXPropClass;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASnfFXPropsActor>           LaunchFxPropClass;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTngImpactEffectTable*                  HitImpactEffectTable;                              // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponTelekinesisMeshSetting) == 0x000008, "Wrong alignment on FSnfWeaponTelekinesisMeshSetting");
static_assert(sizeof(FSnfWeaponTelekinesisMeshSetting) == 0x000030, "Wrong size on FSnfWeaponTelekinesisMeshSetting");
static_assert(offsetof(FSnfWeaponTelekinesisMeshSetting, Mesh) == 0x000000, "Member 'FSnfWeaponTelekinesisMeshSetting::Mesh' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTelekinesisMeshSetting, Scale3D) == 0x000008, "Member 'FSnfWeaponTelekinesisMeshSetting::Scale3D' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTelekinesisMeshSetting, FXPropClass) == 0x000018, "Member 'FSnfWeaponTelekinesisMeshSetting::FXPropClass' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTelekinesisMeshSetting, LaunchFxPropClass) == 0x000020, "Member 'FSnfWeaponTelekinesisMeshSetting::LaunchFxPropClass' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTelekinesisMeshSetting, HitImpactEffectTable) == 0x000028, "Member 'FSnfWeaponTelekinesisMeshSetting::HitImpactEffectTable' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponTelekinesisPhysicsData
// 0x0180 (0x0180 - 0x0000)
struct alignas(0x10) FSnfWeaponTelekinesisPhysicsData final
{
public:
	class ASnfWeaponAmmo*                         Ammo;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x178];                                      // 0x0008(0x0178)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfWeaponTelekinesisPhysicsData) == 0x000010, "Wrong alignment on FSnfWeaponTelekinesisPhysicsData");
static_assert(sizeof(FSnfWeaponTelekinesisPhysicsData) == 0x000180, "Wrong size on FSnfWeaponTelekinesisPhysicsData");
static_assert(offsetof(FSnfWeaponTelekinesisPhysicsData, Ammo) == 0x000000, "Member 'FSnfWeaponTelekinesisPhysicsData::Ammo' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponTalismanInfo
// 0x0030 (0x0030 - 0x0000)
struct FSnfWeaponTalismanInfo final
{
public:
	TSoftClassPtr<class UClass>                   TargetClass;                                       // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParalysisRegistRate;                               // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfWeaponTalismanInfo) == 0x000008, "Wrong alignment on FSnfWeaponTalismanInfo");
static_assert(sizeof(FSnfWeaponTalismanInfo) == 0x000030, "Wrong size on FSnfWeaponTalismanInfo");
static_assert(offsetof(FSnfWeaponTalismanInfo, TargetClass) == 0x000000, "Member 'FSnfWeaponTalismanInfo::TargetClass' has a wrong offset!");
static_assert(offsetof(FSnfWeaponTalismanInfo, ParalysisRegistRate) == 0x000028, "Member 'FSnfWeaponTalismanInfo::ParalysisRegistRate' has a wrong offset!");

// ScriptStruct Snowfall.SnfWeaponDamageRequest
// 0x0090 (0x0090 - 0x0000)
struct FSnfWeaponDamageRequest final
{
public:
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0008(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWeaponDamageRequest) == 0x000004, "Wrong alignment on FSnfWeaponDamageRequest");
static_assert(sizeof(FSnfWeaponDamageRequest) == 0x000090, "Wrong size on FSnfWeaponDamageRequest");
static_assert(offsetof(FSnfWeaponDamageRequest, TargetActor) == 0x000000, "Member 'FSnfWeaponDamageRequest::TargetActor' has a wrong offset!");
static_assert(offsetof(FSnfWeaponDamageRequest, HitResult) == 0x000008, "Member 'FSnfWeaponDamageRequest::HitResult' has a wrong offset!");

// ScriptStruct Snowfall.SnfTalismanEffectInformation
// 0x0018 (0x0018 - 0x0000)
struct FSnfTalismanEffectInformation final
{
public:
	class FName                                   CatalogId;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfTalismanEffectInformation) == 0x000008, "Wrong alignment on FSnfTalismanEffectInformation");
static_assert(sizeof(FSnfTalismanEffectInformation) == 0x000018, "Wrong size on FSnfTalismanEffectInformation");
static_assert(offsetof(FSnfTalismanEffectInformation, CatalogId) == 0x000000, "Member 'FSnfTalismanEffectInformation::CatalogId' has a wrong offset!");
static_assert(offsetof(FSnfTalismanEffectInformation, Tags) == 0x000008, "Member 'FSnfTalismanEffectInformation::Tags' has a wrong offset!");

// ScriptStruct Snowfall.SnfWellTalkData
// 0x0018 (0x0018 - 0x0000)
struct FSnfWellTalkData final
{
public:
	bool                                          TalkFlag;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CheckId;                                           // 0x0004(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TalkActor;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfWellTalkData) == 0x000008, "Wrong alignment on FSnfWellTalkData");
static_assert(sizeof(FSnfWellTalkData) == 0x000018, "Wrong size on FSnfWellTalkData");
static_assert(offsetof(FSnfWellTalkData, TalkFlag) == 0x000000, "Member 'FSnfWellTalkData::TalkFlag' has a wrong offset!");
static_assert(offsetof(FSnfWellTalkData, CheckId) == 0x000004, "Member 'FSnfWellTalkData::CheckId' has a wrong offset!");
static_assert(offsetof(FSnfWellTalkData, TalkActor) == 0x000010, "Member 'FSnfWellTalkData::TalkActor' has a wrong offset!");

// ScriptStruct Snowfall.SnfWellData
// 0x0040 (0x0040 - 0x0000)
struct FSnfWellData final
{
public:
	class FName                                   KeyId;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CheckPurgeTarget;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASnfCheckEliminateActor*                CheckBattleTarget;                                 // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 BeginPurgeAction;                                  // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EndPurgeAction;                                    // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EndBattleAction;                                   // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MarkStep;                                          // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnfWellData) == 0x000008, "Wrong alignment on FSnfWellData");
static_assert(sizeof(FSnfWellData) == 0x000040, "Wrong size on FSnfWellData");
static_assert(offsetof(FSnfWellData, KeyId) == 0x000000, "Member 'FSnfWellData::KeyId' has a wrong offset!");
static_assert(offsetof(FSnfWellData, CheckPurgeTarget) == 0x000010, "Member 'FSnfWellData::CheckPurgeTarget' has a wrong offset!");
static_assert(offsetof(FSnfWellData, CheckBattleTarget) == 0x000018, "Member 'FSnfWellData::CheckBattleTarget' has a wrong offset!");
static_assert(offsetof(FSnfWellData, BeginPurgeAction) == 0x000020, "Member 'FSnfWellData::BeginPurgeAction' has a wrong offset!");
static_assert(offsetof(FSnfWellData, EndPurgeAction) == 0x000028, "Member 'FSnfWellData::EndPurgeAction' has a wrong offset!");
static_assert(offsetof(FSnfWellData, EndBattleAction) == 0x000030, "Member 'FSnfWellData::EndBattleAction' has a wrong offset!");
static_assert(offsetof(FSnfWellData, MarkStep) == 0x000038, "Member 'FSnfWellData::MarkStep' has a wrong offset!");

// ScriptStruct Snowfall.SnfQualityPresetDLSS
// 0x0008 (0x0008 - 0x0000)
struct FSnfQualityPresetDLSS final
{
public:
	uint8                                         Index;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0001(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Quality;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfQualityPresetDLSS) == 0x000004, "Wrong alignment on FSnfQualityPresetDLSS");
static_assert(sizeof(FSnfQualityPresetDLSS) == 0x000008, "Wrong size on FSnfQualityPresetDLSS");
static_assert(offsetof(FSnfQualityPresetDLSS, Index) == 0x000000, "Member 'FSnfQualityPresetDLSS::Index' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetDLSS, bEnabled) == 0x000001, "Member 'FSnfQualityPresetDLSS::bEnabled' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetDLSS, Quality) == 0x000004, "Member 'FSnfQualityPresetDLSS::Quality' has a wrong offset!");

// ScriptStruct Snowfall.SnfQualityPresetRayTracingShadows
// 0x0014 (0x0014 - 0x0000)
struct FSnfQualityPresetRayTracingShadows final
{
public:
	uint8                                         Index;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0001(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxLights;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxDenoisedLights;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AcceptFirstHit;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SupportCheckerboardTNG;                            // 0x0010(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfQualityPresetRayTracingShadows) == 0x000004, "Wrong alignment on FSnfQualityPresetRayTracingShadows");
static_assert(sizeof(FSnfQualityPresetRayTracingShadows) == 0x000014, "Wrong size on FSnfQualityPresetRayTracingShadows");
static_assert(offsetof(FSnfQualityPresetRayTracingShadows, Index) == 0x000000, "Member 'FSnfQualityPresetRayTracingShadows::Index' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetRayTracingShadows, bEnabled) == 0x000001, "Member 'FSnfQualityPresetRayTracingShadows::bEnabled' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetRayTracingShadows, MaxLights) == 0x000004, "Member 'FSnfQualityPresetRayTracingShadows::MaxLights' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetRayTracingShadows, MaxDenoisedLights) == 0x000008, "Member 'FSnfQualityPresetRayTracingShadows::MaxDenoisedLights' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetRayTracingShadows, AcceptFirstHit) == 0x00000C, "Member 'FSnfQualityPresetRayTracingShadows::AcceptFirstHit' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetRayTracingShadows, SupportCheckerboardTNG) == 0x000010, "Member 'FSnfQualityPresetRayTracingShadows::SupportCheckerboardTNG' has a wrong offset!");

// ScriptStruct Snowfall.SnfQualityPresetShadow
// 0x001C (0x001C - 0x0000)
struct FSnfQualityPresetShadow final
{
public:
	uint8                                         Index;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShadowQuality;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowPointLightSlopeScaleDepthBias;               // 0x0008(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSpotLightSlopeDepthBias;                     // 0x000C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowRectLightSlopeScaleDepthBias;                // 0x0010(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowPointLightDepthBias;                         // 0x0014(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowRectLightDepthBias;                          // 0x0018(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfQualityPresetShadow) == 0x000004, "Wrong alignment on FSnfQualityPresetShadow");
static_assert(sizeof(FSnfQualityPresetShadow) == 0x00001C, "Wrong size on FSnfQualityPresetShadow");
static_assert(offsetof(FSnfQualityPresetShadow, Index) == 0x000000, "Member 'FSnfQualityPresetShadow::Index' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetShadow, ShadowQuality) == 0x000004, "Member 'FSnfQualityPresetShadow::ShadowQuality' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetShadow, ShadowPointLightSlopeScaleDepthBias) == 0x000008, "Member 'FSnfQualityPresetShadow::ShadowPointLightSlopeScaleDepthBias' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetShadow, ShadowSpotLightSlopeDepthBias) == 0x00000C, "Member 'FSnfQualityPresetShadow::ShadowSpotLightSlopeDepthBias' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetShadow, ShadowRectLightSlopeScaleDepthBias) == 0x000010, "Member 'FSnfQualityPresetShadow::ShadowRectLightSlopeScaleDepthBias' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetShadow, ShadowPointLightDepthBias) == 0x000014, "Member 'FSnfQualityPresetShadow::ShadowPointLightDepthBias' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetShadow, ShadowRectLightDepthBias) == 0x000018, "Member 'FSnfQualityPresetShadow::ShadowRectLightDepthBias' has a wrong offset!");

// ScriptStruct Snowfall.SnfQualityPresetSubsurfaceScattering
// 0x0008 (0x0008 - 0x0000)
struct FSnfQualityPresetSubsurfaceScattering final
{
public:
	uint8                                         Index;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubsurfaceScattering;                             // 0x0001(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SSSQuality;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfQualityPresetSubsurfaceScattering) == 0x000004, "Wrong alignment on FSnfQualityPresetSubsurfaceScattering");
static_assert(sizeof(FSnfQualityPresetSubsurfaceScattering) == 0x000008, "Wrong size on FSnfQualityPresetSubsurfaceScattering");
static_assert(offsetof(FSnfQualityPresetSubsurfaceScattering, Index) == 0x000000, "Member 'FSnfQualityPresetSubsurfaceScattering::Index' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetSubsurfaceScattering, bSubsurfaceScattering) == 0x000001, "Member 'FSnfQualityPresetSubsurfaceScattering::bSubsurfaceScattering' has a wrong offset!");
static_assert(offsetof(FSnfQualityPresetSubsurfaceScattering, SSSQuality) == 0x000004, "Member 'FSnfQualityPresetSubsurfaceScattering::SSSQuality' has a wrong offset!");

// ScriptStruct Snowfall.SnfDamageReactionParam
// 0x0008 (0x0008 - 0x0000)
struct FSnfDamageReactionParam final
{
public:
	ESnfDamageReactionType                        ReactionType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReactionDuration;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnfDamageReactionParam) == 0x000004, "Wrong alignment on FSnfDamageReactionParam");
static_assert(sizeof(FSnfDamageReactionParam) == 0x000008, "Wrong size on FSnfDamageReactionParam");
static_assert(offsetof(FSnfDamageReactionParam, ReactionType) == 0x000000, "Member 'FSnfDamageReactionParam::ReactionType' has a wrong offset!");
static_assert(offsetof(FSnfDamageReactionParam, ReactionDuration) == 0x000004, "Member 'FSnfDamageReactionParam::ReactionDuration' has a wrong offset!");

}

