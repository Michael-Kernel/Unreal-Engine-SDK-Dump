#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: People_Job_BTT

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass People_Job_BTT.People_Job_BTT_C
// 0x00C0 (0x0168 - 0x00A8)
class UPeople_Job_BTT_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 IsInteractBK;                                      // 0x00B0(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 JobActorBK;                                        // 0x00D8(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 JobActionIndexBK;                                  // 0x0100(0x0028)(Edit, BlueprintVisible)
	int32                                         ActionIndex;                                       // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActionPhase;                                       // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActionSubPhase;                                    // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeCount;                                         // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USnfPeopleAnimInstance*                 AnimInst;                                          // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASnfNpcHumanoidCharacter*               Humanoid;                                          // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultMaxSpeed;                                   // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocationLog;                                       // 0x014C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotationLog;                                       // 0x0158(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             CollisionLog;                                      // 0x0164(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GravityLog;                                        // 0x0165(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsStoppedAnimPlaying;                              // 0x0166(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_People_Job_BTT(int32 EntryPoint);
	void ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void UpdatePath(class ASnfAIController_BP_C* OwnerController, class APawn* ControlledPawn, float DeltaSeconds, class USnfJobType* JobType, bool* CanNext);
	void ActAnim(class APawn* ControlledPawn, float DeltaSeconds, class USnfJobAction_Anim* JobActionAnim, const struct FTransform& ActionTransform, bool* CanNext);
	void SubPhaseTurn(class APawn* ControlledPawn, float DeltaSeconds, const struct FTransform& ActionTransform, float PlayRate, bool* CanNext);
	void SubPhaseWait(class APawn* ControlledPawn, float DeltaSeconds, float Duration, bool* CanNext);
	void ActWait(class APawn* ControlledPawn, float DeltaSeconds, class USnfJobAction_Wait* JobActionWait, const struct FTransform& ActionTransform, bool* CanNext);
	void ActTurn(class APawn* ControlledPawn, float DeltaSeconds, class USnfJobAction_Turn* JobActionTurn, const struct FTransform& ActionTransform, bool* CanNext);
	void UpdatePoint(class ASnfAIController_BP_C* OwnerController, class APawn* ControlledPawn, float DeltaSeconds, class USnfJobType* JobType, const struct FTransform& ActionTransform, bool* CanNext);
	void Update_Actions(class ASnfAIController_BP_C* OwnerController, class APawn* ControlledPawn, float DeltaSeconds, TArray<class USnfJobAction*>& JobActions, const struct FTransform& ActionTransform, bool* CanNext);
	void ActTalk(class APawn* ControlledPawn, class USnfJobAction_Talk* JobActionTalk, bool* CanNext);
	void ActActivityTag(class APawn* ControlledPawn, class USnfJobAction_ActivityTag* JobActionActivityTag, bool* CanNext);
	void ActExit(class APawn* ControlledPawn, class USnfJobAction_Exit* JobActionExit, bool* CanNext);
	void ActLookAt(class APawn* ControlledPawn, class USnfJobAction_LookAt* JobActionLookAt, bool* CanNext);
	void ActJobChange(class APawn* ControlledPawn, class USnfJobAction_JobChange* JobActionJobChange, bool* CanNext);
	void AdjustTransform(class APawn* ControlledPawn, float DeltaSeconds, const struct FTransform& TargetTransform, bool AdjustLocation, bool AdjustRotation, bool* IsComplete);
	void ActAdjustTransform(class APawn* ControlledPawn, float DeltaSeconds, class USnfJobAction_AdjustTransform* JobActionAdjustTransform, const struct FTransform& ActionTransform, bool* CanNext);
	void Sub_Phase_Adjust_Transform(class APawn* ControlledPawn, float DeltaSeconds, float InterpDuration, const struct FTransform& ActionTransform, bool AdjustLocation, bool AdjustRotation, bool* CanNext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"People_Job_BTT_C">();
	}
	static class UPeople_Job_BTT_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPeople_Job_BTT_C>();
	}
};
static_assert(alignof(UPeople_Job_BTT_C) == 0x000008, "Wrong alignment on UPeople_Job_BTT_C");
static_assert(sizeof(UPeople_Job_BTT_C) == 0x000168, "Wrong size on UPeople_Job_BTT_C");
static_assert(offsetof(UPeople_Job_BTT_C, UberGraphFrame) == 0x0000A8, "Member 'UPeople_Job_BTT_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UPeople_Job_BTT_C, IsInteractBK) == 0x0000B0, "Member 'UPeople_Job_BTT_C::IsInteractBK' has a wrong offset!");
static_assert(offsetof(UPeople_Job_BTT_C, JobActorBK) == 0x0000D8, "Member 'UPeople_Job_BTT_C::JobActorBK' has a wrong offset!");
static_assert(offsetof(UPeople_Job_BTT_C, JobActionIndexBK) == 0x000100, "Member 'UPeople_Job_BTT_C::JobActionIndexBK' has a wrong offset!");
static_assert(offsetof(UPeople_Job_BTT_C, ActionIndex) == 0x000128, "Member 'UPeople_Job_BTT_C::ActionIndex' has a wrong offset!");
static_assert(offsetof(UPeople_Job_BTT_C, ActionPhase) == 0x00012C, "Member 'UPeople_Job_BTT_C::ActionPhase' has a wrong offset!");
static_assert(offsetof(UPeople_Job_BTT_C, ActionSubPhase) == 0x000130, "Member 'UPeople_Job_BTT_C::ActionSubPhase' has a wrong offset!");
static_assert(offsetof(UPeople_Job_BTT_C, TimeCount) == 0x000134, "Member 'UPeople_Job_BTT_C::TimeCount' has a wrong offset!");
static_assert(offsetof(UPeople_Job_BTT_C, AnimInst) == 0x000138, "Member 'UPeople_Job_BTT_C::AnimInst' has a wrong offset!");
static_assert(offsetof(UPeople_Job_BTT_C, Humanoid) == 0x000140, "Member 'UPeople_Job_BTT_C::Humanoid' has a wrong offset!");
static_assert(offsetof(UPeople_Job_BTT_C, DefaultMaxSpeed) == 0x000148, "Member 'UPeople_Job_BTT_C::DefaultMaxSpeed' has a wrong offset!");
static_assert(offsetof(UPeople_Job_BTT_C, LocationLog) == 0x00014C, "Member 'UPeople_Job_BTT_C::LocationLog' has a wrong offset!");
static_assert(offsetof(UPeople_Job_BTT_C, RotationLog) == 0x000158, "Member 'UPeople_Job_BTT_C::RotationLog' has a wrong offset!");
static_assert(offsetof(UPeople_Job_BTT_C, CollisionLog) == 0x000164, "Member 'UPeople_Job_BTT_C::CollisionLog' has a wrong offset!");
static_assert(offsetof(UPeople_Job_BTT_C, GravityLog) == 0x000165, "Member 'UPeople_Job_BTT_C::GravityLog' has a wrong offset!");
static_assert(offsetof(UPeople_Job_BTT_C, IsStoppedAnimPlaying) == 0x000166, "Member 'UPeople_Job_BTT_C::IsStoppedAnimPlaying' has a wrong offset!");

}

