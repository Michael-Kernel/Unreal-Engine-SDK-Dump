#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TangoSoundUtility

#include "Basic.hpp"

#include "TangoSoundUtility_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AkAudio_structs.hpp"
#include "AkAudio_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class TangoSoundUtility.AkCandidateVolume
// 0x0000 (0x0260 - 0x0260)
class AAkCandidateVolume : public AVolume
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkCandidateVolume">();
	}
	static class AAkCandidateVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkCandidateVolume>();
	}
};
static_assert(alignof(AAkCandidateVolume) == 0x000008, "Wrong alignment on AAkCandidateVolume");
static_assert(sizeof(AAkCandidateVolume) == 0x000260, "Wrong size on AAkCandidateVolume");

// Class TangoSoundUtility.AkCandidateGenerationVolume
// 0x0010 (0x0270 - 0x0260)
class AAkCandidateGenerationVolume final : public AAkCandidateVolume
{
public:
	TArray<struct FCandidateGenerationInfo>       GenerationInfos;                                   // 0x0260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkCandidateGenerationVolume">();
	}
	static class AAkCandidateGenerationVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkCandidateGenerationVolume>();
	}
};
static_assert(alignof(AAkCandidateGenerationVolume) == 0x000008, "Wrong alignment on AAkCandidateGenerationVolume");
static_assert(sizeof(AAkCandidateGenerationVolume) == 0x000270, "Wrong size on AAkCandidateGenerationVolume");
static_assert(offsetof(AAkCandidateGenerationVolume, GenerationInfos) == 0x000260, "Member 'AAkCandidateGenerationVolume::GenerationInfos' has a wrong offset!");

// Class TangoSoundUtility.AkCandidateComponent
// 0x00F0 (0x02F0 - 0x0200)
class UAkCandidateComponent final : public USceneComponent
{
public:
	ETngSoundCandidateListSelectionMode           ListSelectMode;                                    // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngSoundCandidatePositionSelectionMode       PositionSelectMode;                                // 0x01F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FA[0x6];                                      // 0x01FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AkAudioEvent;                                      // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RTPCName;                                          // 0x0208(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoPost;                                          // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ListDistance;                                      // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ListUpdateInterval;                                // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTngSoundCandidatePointInfo>    AllPositions;                                      // 0x0228(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TickInterval;                                      // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarestOnceProhibitionDistance;                     // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             OcclusionCollisionChannel;                         // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkChangeRoomType                             ChangeRoomType;                                    // 0x0241(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242[0x6];                                      // 0x0242(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAkComponent*>                   Aks;                                               // 0x0248(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_258[0x98];                                     // 0x0258(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAllPositions(const TArray<struct FTngSoundCandidatePointInfo>& Positions);
	void Start();
	void Stop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkCandidateComponent">();
	}
	static class UAkCandidateComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkCandidateComponent>();
	}
};
static_assert(alignof(UAkCandidateComponent) == 0x000010, "Wrong alignment on UAkCandidateComponent");
static_assert(sizeof(UAkCandidateComponent) == 0x0002F0, "Wrong size on UAkCandidateComponent");
static_assert(offsetof(UAkCandidateComponent, ListSelectMode) == 0x0001F8, "Member 'UAkCandidateComponent::ListSelectMode' has a wrong offset!");
static_assert(offsetof(UAkCandidateComponent, PositionSelectMode) == 0x0001F9, "Member 'UAkCandidateComponent::PositionSelectMode' has a wrong offset!");
static_assert(offsetof(UAkCandidateComponent, AkAudioEvent) == 0x000200, "Member 'UAkCandidateComponent::AkAudioEvent' has a wrong offset!");
static_assert(offsetof(UAkCandidateComponent, RTPCName) == 0x000208, "Member 'UAkCandidateComponent::RTPCName' has a wrong offset!");
static_assert(offsetof(UAkCandidateComponent, AutoPost) == 0x000218, "Member 'UAkCandidateComponent::AutoPost' has a wrong offset!");
static_assert(offsetof(UAkCandidateComponent, ListDistance) == 0x00021C, "Member 'UAkCandidateComponent::ListDistance' has a wrong offset!");
static_assert(offsetof(UAkCandidateComponent, ListUpdateInterval) == 0x000220, "Member 'UAkCandidateComponent::ListUpdateInterval' has a wrong offset!");
static_assert(offsetof(UAkCandidateComponent, AllPositions) == 0x000228, "Member 'UAkCandidateComponent::AllPositions' has a wrong offset!");
static_assert(offsetof(UAkCandidateComponent, TickInterval) == 0x000238, "Member 'UAkCandidateComponent::TickInterval' has a wrong offset!");
static_assert(offsetof(UAkCandidateComponent, FarestOnceProhibitionDistance) == 0x00023C, "Member 'UAkCandidateComponent::FarestOnceProhibitionDistance' has a wrong offset!");
static_assert(offsetof(UAkCandidateComponent, OcclusionCollisionChannel) == 0x000240, "Member 'UAkCandidateComponent::OcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(UAkCandidateComponent, ChangeRoomType) == 0x000241, "Member 'UAkCandidateComponent::ChangeRoomType' has a wrong offset!");
static_assert(offsetof(UAkCandidateComponent, Aks) == 0x000248, "Member 'UAkCandidateComponent::Aks' has a wrong offset!");

// Class TangoSoundUtility.AkCandidateEventCullingVolume
// 0x0010 (0x0270 - 0x0260)
class AAkCandidateEventCullingVolume final : public AAkCandidateVolume
{
public:
	TArray<class UAkAudioEvent*>                  AkAudioEvents;                                     // 0x0260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkCandidateEventCullingVolume">();
	}
	static class AAkCandidateEventCullingVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkCandidateEventCullingVolume>();
	}
};
static_assert(alignof(AAkCandidateEventCullingVolume) == 0x000008, "Wrong alignment on AAkCandidateEventCullingVolume");
static_assert(sizeof(AAkCandidateEventCullingVolume) == 0x000270, "Wrong size on AAkCandidateEventCullingVolume");
static_assert(offsetof(AAkCandidateEventCullingVolume, AkAudioEvents) == 0x000260, "Member 'AAkCandidateEventCullingVolume::AkAudioEvents' has a wrong offset!");

// Class TangoSoundUtility.AkCandidateSpeaker
// 0x0008 (0x0230 - 0x0228)
class AAkCandidateSpeaker final : public AActor
{
public:
	class UAkCandidateComponent*                  AkCandidateComponent;                              // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkCandidateSpeaker">();
	}
	static class AAkCandidateSpeaker* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkCandidateSpeaker>();
	}
};
static_assert(alignof(AAkCandidateSpeaker) == 0x000008, "Wrong alignment on AAkCandidateSpeaker");
static_assert(sizeof(AAkCandidateSpeaker) == 0x000230, "Wrong size on AAkCandidateSpeaker");
static_assert(offsetof(AAkCandidateSpeaker, AkCandidateComponent) == 0x000228, "Member 'AAkCandidateSpeaker::AkCandidateComponent' has a wrong offset!");

// Class TangoSoundUtility.AkCandidatePointComponent
// 0x0000 (0x0200 - 0x0200)
class UAkCandidatePointComponent final : public USceneComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkCandidatePointComponent">();
	}
	static class UAkCandidatePointComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkCandidatePointComponent>();
	}
};
static_assert(alignof(UAkCandidatePointComponent) == 0x000010, "Wrong alignment on UAkCandidatePointComponent");
static_assert(sizeof(UAkCandidatePointComponent) == 0x000200, "Wrong size on UAkCandidatePointComponent");

// Class TangoSoundUtility.AkCandidatePoint
// 0x0010 (0x0238 - 0x0228)
class AAkCandidatePoint final : public AActor
{
public:
	class UAkCandidatePointComponent*             AkCandidatePointComponent;                         // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Speaker;                                           // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkCandidatePoint">();
	}
	static class AAkCandidatePoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkCandidatePoint>();
	}
};
static_assert(alignof(AAkCandidatePoint) == 0x000008, "Wrong alignment on AAkCandidatePoint");
static_assert(sizeof(AAkCandidatePoint) == 0x000238, "Wrong size on AAkCandidatePoint");
static_assert(offsetof(AAkCandidatePoint, AkCandidatePointComponent) == 0x000228, "Member 'AAkCandidatePoint::AkCandidatePointComponent' has a wrong offset!");
static_assert(offsetof(AAkCandidatePoint, Speaker) == 0x000230, "Member 'AAkCandidatePoint::Speaker' has a wrong offset!");

// Class TangoSoundUtility.AkCandidateCullingVolume
// 0x0010 (0x0270 - 0x0260)
class AAkCandidateCullingVolume final : public AAkCandidateVolume
{
public:
	TArray<struct FCandidateCullingInfo>          CullingInfos;                                      // 0x0260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkCandidateCullingVolume">();
	}
	static class AAkCandidateCullingVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkCandidateCullingVolume>();
	}
};
static_assert(alignof(AAkCandidateCullingVolume) == 0x000008, "Wrong alignment on AAkCandidateCullingVolume");
static_assert(sizeof(AAkCandidateCullingVolume) == 0x000270, "Wrong size on AAkCandidateCullingVolume");
static_assert(offsetof(AAkCandidateCullingVolume, CullingInfos) == 0x000260, "Member 'AAkCandidateCullingVolume::CullingInfos' has a wrong offset!");

// Class TangoSoundUtility.AkDynamicDialogueComponent
// 0x0010 (0x0680 - 0x0670)
class UAkDynamicDialogueComponent final : public UAkComponent
{
public:
	EAkDynamicSequenceType                        SequenceType;                                      // 0x0670(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_671[0xF];                                      // 0x0671(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 AddQueue(class UAkDynamicDialogueEvent* In_AkEvent, const TArray<class FString>& In_Args, int32 DelayTimeMs);
	void BreakQueue();
	void GetAllItems(TArray<struct FAkDynamicDialogueNodeInfo>* Items);
	void GetPauseTimes(int32* Out_TimeMs, int32* Out_Duration);
	void GetPlayingItem(struct FAkDynamicDialogueNodeInfo* Item);
	void PauseQueue(int32 FadeTimeMs);
	void PlayQueue(int32 FadeTimeMs);
	void RemoveAllQueue();
	void RemoveQueue(int32 NodeID);
	void ResumeQueue(int32 FadeTimeMs);
	void StopQueue(int32 FadeTimeMs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkDynamicDialogueComponent">();
	}
	static class UAkDynamicDialogueComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkDynamicDialogueComponent>();
	}
};
static_assert(alignof(UAkDynamicDialogueComponent) == 0x000010, "Wrong alignment on UAkDynamicDialogueComponent");
static_assert(sizeof(UAkDynamicDialogueComponent) == 0x000680, "Wrong size on UAkDynamicDialogueComponent");
static_assert(offsetof(UAkDynamicDialogueComponent, SequenceType) == 0x000670, "Member 'UAkDynamicDialogueComponent::SequenceType' has a wrong offset!");

// Class TangoSoundUtility.AkDynamicDialogueSound
// 0x0008 (0x0230 - 0x0228)
class AAkDynamicDialogueSound final : public AActor
{
public:
	class UAkDynamicDialogueComponent*            AkDynamicDialogueComponent;                        // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkDynamicDialogueSound">();
	}
	static class AAkDynamicDialogueSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkDynamicDialogueSound>();
	}
};
static_assert(alignof(AAkDynamicDialogueSound) == 0x000008, "Wrong alignment on AAkDynamicDialogueSound");
static_assert(sizeof(AAkDynamicDialogueSound) == 0x000230, "Wrong size on AAkDynamicDialogueSound");
static_assert(offsetof(AAkDynamicDialogueSound, AkDynamicDialogueComponent) == 0x000228, "Member 'AAkDynamicDialogueSound::AkDynamicDialogueComponent' has a wrong offset!");

// Class TangoSoundUtility.TngSoundGameplayStatics
// 0x0000 (0x0028 - 0x0028)
class UTngSoundGameplayStatics final : public UBlueprintFunctionLibrary
{
public:
	static int32 CheckOutFiles(const TArray<class FString>& FullFilePaths);
	static void CheckProceduralCSV();
	static void CreateGoogleTTSWavFile(const class FString& Text, bool bSSML, const class FString& OutputFile, ETngSoundGoogleTTSVoiceName VoiceName, float Pitch, float Rate, bool bSync);
	static ECollisionChannel GetDefaultECollisionChannelForFX();
	static int32 GetProceduralCanInfo(TArray<struct FProcCSSpawnInfo>* CSInfos, TArray<struct FProcCPSpawnInfo>* CPInfos, const class FString& FullFilePath, bool bEnableCullingVolume);
	static int32 GetProceduralMPInfo(TArray<struct FProcMPLSpawnInfo>* MPLInfos, TArray<struct FProcMPSSpawnInfo>* MPSInfos, const class FString& FullFilePath);
	static int32 GetProceduralPortalInfo(TArray<struct FProcPortalSpawnInfo>* Infos, const class FString& FullFilePath);
	static int32 GetProceduralSAVInfo(TArray<struct FProcSAVSpawnInfo>* Infos, const class FString& FullFilePath);
	static int32 GetProceduralSPSP2Info(TArray<struct FProcSPSP2SpawnInfo>* Infos, const class FString& FullFilePath);
	static void GetSpatialAudioListenerPosition(struct FVector* Position, struct FVector* Front, struct FVector* Right);
	static int32 PlayFile(const class FString& FilePathWithExtension);
	static void PostMessageOnSlackChannel(const class FString& Channel, const class FString& UserName, const class FString& Message);
	static void Procedural();
	static void ProceduralSAVsAndPortals();
	static int32 ProceduralSAVsAndPortalsWithName(const class FString& Name_0);
	static void ProceduralSources();
	static int32 ProceduralSourcesWithName(const class FString& Name_0);
	static int32 ProceduralWithName(const class FString& Name_0);
	static void SetFrontAndBackRoomToPortals();
	static void SetFrontAndBackRoomToSpecificWorldsPortals(class UWorld* World, const class FString& FullfilePathForDebug);
	static void SetStreamingDistance(const class FString& UmapName, ETngSoundAssignToLayer AssignToLayer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TngSoundGameplayStatics">();
	}
	static class UTngSoundGameplayStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTngSoundGameplayStatics>();
	}
};
static_assert(alignof(UTngSoundGameplayStatics) == 0x000008, "Wrong alignment on UTngSoundGameplayStatics");
static_assert(sizeof(UTngSoundGameplayStatics) == 0x000028, "Wrong size on UTngSoundGameplayStatics");

// Class TangoSoundUtility.AkLinearSpeakerComponent
// 0x0050 (0x05A0 - 0x0550)
class UAkLinearSpeakerComponent final : public USplineComponent
{
public:
	float                                         InterpolationDistance;                             // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickInterval;                                      // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAkAudioEvent*>                  Events;                                            // 0x0550(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AttenuationScalingFactor;                          // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionRefreshInterval;                          // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             OcclusionCollisionChannel;                         // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkChangeRoomType                             ChangeRoomType;                                    // 0x0569(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56A[0x2];                                      // 0x056A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeOutMsWhenStopped;                              // 0x056C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_571[0x17];                                     // 0x0571(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           Ak;                                                // 0x0588(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_590[0x10];                                     // 0x0590(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetEnable(bool SoundPlay);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkLinearSpeakerComponent">();
	}
	static class UAkLinearSpeakerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkLinearSpeakerComponent>();
	}
};
static_assert(alignof(UAkLinearSpeakerComponent) == 0x000010, "Wrong alignment on UAkLinearSpeakerComponent");
static_assert(sizeof(UAkLinearSpeakerComponent) == 0x0005A0, "Wrong size on UAkLinearSpeakerComponent");
static_assert(offsetof(UAkLinearSpeakerComponent, InterpolationDistance) == 0x000548, "Member 'UAkLinearSpeakerComponent::InterpolationDistance' has a wrong offset!");
static_assert(offsetof(UAkLinearSpeakerComponent, TickInterval) == 0x00054C, "Member 'UAkLinearSpeakerComponent::TickInterval' has a wrong offset!");
static_assert(offsetof(UAkLinearSpeakerComponent, Events) == 0x000550, "Member 'UAkLinearSpeakerComponent::Events' has a wrong offset!");
static_assert(offsetof(UAkLinearSpeakerComponent, AttenuationScalingFactor) == 0x000560, "Member 'UAkLinearSpeakerComponent::AttenuationScalingFactor' has a wrong offset!");
static_assert(offsetof(UAkLinearSpeakerComponent, OcclusionRefreshInterval) == 0x000564, "Member 'UAkLinearSpeakerComponent::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(UAkLinearSpeakerComponent, OcclusionCollisionChannel) == 0x000568, "Member 'UAkLinearSpeakerComponent::OcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(UAkLinearSpeakerComponent, ChangeRoomType) == 0x000569, "Member 'UAkLinearSpeakerComponent::ChangeRoomType' has a wrong offset!");
static_assert(offsetof(UAkLinearSpeakerComponent, FadeOutMsWhenStopped) == 0x00056C, "Member 'UAkLinearSpeakerComponent::FadeOutMsWhenStopped' has a wrong offset!");
static_assert(offsetof(UAkLinearSpeakerComponent, bEnable) == 0x000570, "Member 'UAkLinearSpeakerComponent::bEnable' has a wrong offset!");
static_assert(offsetof(UAkLinearSpeakerComponent, Ak) == 0x000588, "Member 'UAkLinearSpeakerComponent::Ak' has a wrong offset!");

// Class TangoSoundUtility.AkLinearAmbientSound
// 0x0008 (0x0230 - 0x0228)
class AAkLinearAmbientSound final : public AActor
{
public:
	class UAkLinearSpeakerComponent*              AkLinearSpeakerComponent;                          // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkLinearAmbientSound">();
	}
	static class AAkLinearAmbientSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkLinearAmbientSound>();
	}
};
static_assert(alignof(AAkLinearAmbientSound) == 0x000008, "Wrong alignment on AAkLinearAmbientSound");
static_assert(sizeof(AAkLinearAmbientSound) == 0x000230, "Wrong size on AAkLinearAmbientSound");
static_assert(offsetof(AAkLinearAmbientSound, AkLinearSpeakerComponent) == 0x000228, "Member 'AAkLinearAmbientSound::AkLinearSpeakerComponent' has a wrong offset!");

// Class TangoSoundUtility.AkRailSpeakerComponent
// 0x0030 (0x0580 - 0x0550)
class UAkRailSpeakerComponent final : public USplineComponent
{
public:
	class UAkAudioEvent*                          AkAudioEvent;                                      // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttenuationScalingFactor;                          // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionRefreshInterval;                          // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickInterval;                                      // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkChangeRoomType                             ChangeRoomType;                                    // 0x055C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkRailCurveType                              CurveType;                                         // 0x055D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseMoveTime;                                       // 0x055E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55F[0x1];                                      // 0x055F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveTime;                                          // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_564[0x4];                                      // 0x0564(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           Ak;                                                // 0x0568(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_570[0x10];                                     // 0x0570(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Pause();
	void Resume();
	void Start();
	void Stop(int32 FadeTimeMs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkRailSpeakerComponent">();
	}
	static class UAkRailSpeakerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkRailSpeakerComponent>();
	}
};
static_assert(alignof(UAkRailSpeakerComponent) == 0x000010, "Wrong alignment on UAkRailSpeakerComponent");
static_assert(sizeof(UAkRailSpeakerComponent) == 0x000580, "Wrong size on UAkRailSpeakerComponent");
static_assert(offsetof(UAkRailSpeakerComponent, AkAudioEvent) == 0x000548, "Member 'UAkRailSpeakerComponent::AkAudioEvent' has a wrong offset!");
static_assert(offsetof(UAkRailSpeakerComponent, AttenuationScalingFactor) == 0x000550, "Member 'UAkRailSpeakerComponent::AttenuationScalingFactor' has a wrong offset!");
static_assert(offsetof(UAkRailSpeakerComponent, OcclusionRefreshInterval) == 0x000554, "Member 'UAkRailSpeakerComponent::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(UAkRailSpeakerComponent, TickInterval) == 0x000558, "Member 'UAkRailSpeakerComponent::TickInterval' has a wrong offset!");
static_assert(offsetof(UAkRailSpeakerComponent, ChangeRoomType) == 0x00055C, "Member 'UAkRailSpeakerComponent::ChangeRoomType' has a wrong offset!");
static_assert(offsetof(UAkRailSpeakerComponent, CurveType) == 0x00055D, "Member 'UAkRailSpeakerComponent::CurveType' has a wrong offset!");
static_assert(offsetof(UAkRailSpeakerComponent, UseMoveTime) == 0x00055E, "Member 'UAkRailSpeakerComponent::UseMoveTime' has a wrong offset!");
static_assert(offsetof(UAkRailSpeakerComponent, MoveTime) == 0x000560, "Member 'UAkRailSpeakerComponent::MoveTime' has a wrong offset!");
static_assert(offsetof(UAkRailSpeakerComponent, Ak) == 0x000568, "Member 'UAkRailSpeakerComponent::Ak' has a wrong offset!");

// Class TangoSoundUtility.AkRailAmbientSound
// 0x0008 (0x0230 - 0x0228)
class AAkRailAmbientSound final : public AActor
{
public:
	class UAkRailSpeakerComponent*                AkRailSpeakerComponent;                            // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkRailAmbientSound">();
	}
	static class AAkRailAmbientSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkRailAmbientSound>();
	}
};
static_assert(alignof(AAkRailAmbientSound) == 0x000008, "Wrong alignment on AAkRailAmbientSound");
static_assert(sizeof(AAkRailAmbientSound) == 0x000230, "Wrong size on AAkRailAmbientSound");
static_assert(offsetof(AAkRailAmbientSound, AkRailSpeakerComponent) == 0x000228, "Member 'AAkRailAmbientSound::AkRailSpeakerComponent' has a wrong offset!");

// Class TangoSoundUtility.AkActivityTableLinearSpeakerComponent
// 0x0050 (0x0250 - 0x0200)
class UAkActivityTableLinearSpeakerComponent final : public USceneComponent
{
public:
	float                                         InterpolationDistance;                             // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickInterval;                                      // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAkAudioEvent*>                  Events;                                            // 0x0200(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AttenuationScalingFactor;                          // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionRefreshInterval;                          // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             OcclusionCollisionChannel;                         // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkChangeRoomType                             ChangeRoomType;                                    // 0x0219(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A[0x2];                                      // 0x021A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeOutMsWhenStopped;                              // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_228[0x10];                                     // 0x0228(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           Ak;                                                // 0x0238(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_240[0x10];                                     // 0x0240(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkActivityTableLinearSpeakerComponent">();
	}
	static class UAkActivityTableLinearSpeakerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkActivityTableLinearSpeakerComponent>();
	}
};
static_assert(alignof(UAkActivityTableLinearSpeakerComponent) == 0x000010, "Wrong alignment on UAkActivityTableLinearSpeakerComponent");
static_assert(sizeof(UAkActivityTableLinearSpeakerComponent) == 0x000250, "Wrong size on UAkActivityTableLinearSpeakerComponent");
static_assert(offsetof(UAkActivityTableLinearSpeakerComponent, InterpolationDistance) == 0x0001F8, "Member 'UAkActivityTableLinearSpeakerComponent::InterpolationDistance' has a wrong offset!");
static_assert(offsetof(UAkActivityTableLinearSpeakerComponent, TickInterval) == 0x0001FC, "Member 'UAkActivityTableLinearSpeakerComponent::TickInterval' has a wrong offset!");
static_assert(offsetof(UAkActivityTableLinearSpeakerComponent, Events) == 0x000200, "Member 'UAkActivityTableLinearSpeakerComponent::Events' has a wrong offset!");
static_assert(offsetof(UAkActivityTableLinearSpeakerComponent, AttenuationScalingFactor) == 0x000210, "Member 'UAkActivityTableLinearSpeakerComponent::AttenuationScalingFactor' has a wrong offset!");
static_assert(offsetof(UAkActivityTableLinearSpeakerComponent, OcclusionRefreshInterval) == 0x000214, "Member 'UAkActivityTableLinearSpeakerComponent::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(UAkActivityTableLinearSpeakerComponent, OcclusionCollisionChannel) == 0x000218, "Member 'UAkActivityTableLinearSpeakerComponent::OcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(UAkActivityTableLinearSpeakerComponent, ChangeRoomType) == 0x000219, "Member 'UAkActivityTableLinearSpeakerComponent::ChangeRoomType' has a wrong offset!");
static_assert(offsetof(UAkActivityTableLinearSpeakerComponent, FadeOutMsWhenStopped) == 0x00021C, "Member 'UAkActivityTableLinearSpeakerComponent::FadeOutMsWhenStopped' has a wrong offset!");
static_assert(offsetof(UAkActivityTableLinearSpeakerComponent, Spline) == 0x000220, "Member 'UAkActivityTableLinearSpeakerComponent::Spline' has a wrong offset!");
static_assert(offsetof(UAkActivityTableLinearSpeakerComponent, Ak) == 0x000238, "Member 'UAkActivityTableLinearSpeakerComponent::Ak' has a wrong offset!");

// Class TangoSoundUtility.AkMPLComponent
// 0x0030 (0x0230 - 0x0200)
class UAkMPLComponent final : public USceneComponent
{
public:
	class UAkAuxBus*                              AuxBus;                                            // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SendValue;                                         // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkMPSComponent*                        MPS;                                               // 0x0208(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDraw;                                        // 0x0210(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             OcclusionCollisionChannel;                         // 0x0211(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212[0x2];                                      // 0x0212(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionRefreshInterval;                          // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkChangeRoomType                             ChangeRoomType;                                    // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x7];                                      // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           Ak;                                                // 0x0220(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_228[0x8];                                      // 0x0228(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMPLComponent">();
	}
	static class UAkMPLComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMPLComponent>();
	}
};
static_assert(alignof(UAkMPLComponent) == 0x000010, "Wrong alignment on UAkMPLComponent");
static_assert(sizeof(UAkMPLComponent) == 0x000230, "Wrong size on UAkMPLComponent");
static_assert(offsetof(UAkMPLComponent, AuxBus) == 0x0001F8, "Member 'UAkMPLComponent::AuxBus' has a wrong offset!");
static_assert(offsetof(UAkMPLComponent, SendValue) == 0x000200, "Member 'UAkMPLComponent::SendValue' has a wrong offset!");
static_assert(offsetof(UAkMPLComponent, MPS) == 0x000208, "Member 'UAkMPLComponent::MPS' has a wrong offset!");
static_assert(offsetof(UAkMPLComponent, bDebugDraw) == 0x000210, "Member 'UAkMPLComponent::bDebugDraw' has a wrong offset!");
static_assert(offsetof(UAkMPLComponent, OcclusionCollisionChannel) == 0x000211, "Member 'UAkMPLComponent::OcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(UAkMPLComponent, OcclusionRefreshInterval) == 0x000214, "Member 'UAkMPLComponent::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(UAkMPLComponent, ChangeRoomType) == 0x000218, "Member 'UAkMPLComponent::ChangeRoomType' has a wrong offset!");
static_assert(offsetof(UAkMPLComponent, Ak) == 0x000220, "Member 'UAkMPLComponent::Ak' has a wrong offset!");

// Class TangoSoundUtility.AkMPSComponent
// 0x00C0 (0x02C0 - 0x0200)
class UAkMPSComponent final : public USceneComponent
{
public:
	class UAkAudioEvent*                          AkAudioEvent;                                      // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoPost;                                          // 0x0200(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_201[0x3];                                      // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TickInterval;                                      // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMusicSyncMode;                                    // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  Bars;                                              // 0x0210(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMusicSyncComponent_Beat>       Beats;                                             // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMusicSyncComponent_Grid>       Grids;                                             // 0x0230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAkMPLComponent*>                Listeners;                                         // 0x0240(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_250[0x18];                                     // 0x0250(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAkMPLComponent*>                CurrentListeners;                                  // 0x0268(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_278[0x48];                                     // 0x0278(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddMPL(class UAkMPLComponent* Cmp);
	void EndOfEvent(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
	void Start();
	void Stop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMPSComponent">();
	}
	static class UAkMPSComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMPSComponent>();
	}
};
static_assert(alignof(UAkMPSComponent) == 0x000010, "Wrong alignment on UAkMPSComponent");
static_assert(sizeof(UAkMPSComponent) == 0x0002C0, "Wrong size on UAkMPSComponent");
static_assert(offsetof(UAkMPSComponent, AkAudioEvent) == 0x0001F8, "Member 'UAkMPSComponent::AkAudioEvent' has a wrong offset!");
static_assert(offsetof(UAkMPSComponent, AutoPost) == 0x000200, "Member 'UAkMPSComponent::AutoPost' has a wrong offset!");
static_assert(offsetof(UAkMPSComponent, TickInterval) == 0x000204, "Member 'UAkMPSComponent::TickInterval' has a wrong offset!");
static_assert(offsetof(UAkMPSComponent, bMusicSyncMode) == 0x000208, "Member 'UAkMPSComponent::bMusicSyncMode' has a wrong offset!");
static_assert(offsetof(UAkMPSComponent, Bars) == 0x000210, "Member 'UAkMPSComponent::Bars' has a wrong offset!");
static_assert(offsetof(UAkMPSComponent, Beats) == 0x000220, "Member 'UAkMPSComponent::Beats' has a wrong offset!");
static_assert(offsetof(UAkMPSComponent, Grids) == 0x000230, "Member 'UAkMPSComponent::Grids' has a wrong offset!");
static_assert(offsetof(UAkMPSComponent, Listeners) == 0x000240, "Member 'UAkMPSComponent::Listeners' has a wrong offset!");
static_assert(offsetof(UAkMPSComponent, CurrentListeners) == 0x000268, "Member 'UAkMPSComponent::CurrentListeners' has a wrong offset!");

// Class TangoSoundUtility.AkMPL
// 0x0008 (0x0230 - 0x0228)
class AAkMPL final : public AActor
{
public:
	class UAkMPLComponent*                        AkMPL;                                             // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMPL">();
	}
	static class AAkMPL* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkMPL>();
	}
};
static_assert(alignof(AAkMPL) == 0x000008, "Wrong alignment on AAkMPL");
static_assert(sizeof(AAkMPL) == 0x000230, "Wrong size on AAkMPL");
static_assert(offsetof(AAkMPL, AkMPL) == 0x000228, "Member 'AAkMPL::AkMPL' has a wrong offset!");

// Class TangoSoundUtility.AkMPS
// 0x0020 (0x0248 - 0x0228)
class AAkMPS final : public AActor
{
public:
	class UAkMPSComponent*                        AkMPS;                                             // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AAkMPL*>                         Listeners;                                         // 0x0230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawEditor_AllMPL;                           // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMPS">();
	}
	static class AAkMPS* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkMPS>();
	}
};
static_assert(alignof(AAkMPS) == 0x000008, "Wrong alignment on AAkMPS");
static_assert(sizeof(AAkMPS) == 0x000248, "Wrong size on AAkMPS");
static_assert(offsetof(AAkMPS, AkMPS) == 0x000228, "Member 'AAkMPS::AkMPS' has a wrong offset!");
static_assert(offsetof(AAkMPS, Listeners) == 0x000230, "Member 'AAkMPS::Listeners' has a wrong offset!");
static_assert(offsetof(AAkMPS, bDebugDrawEditor_AllMPL) == 0x000240, "Member 'AAkMPS::bDebugDrawEditor_AllMPL' has a wrong offset!");

// Class TangoSoundUtility.TngSoundMusicManagerTestActor
// 0x0030 (0x0258 - 0x0228)
class ATngSoundMusicManagerTestActor final : public AActor
{
public:
	class UAkComponent*                           AkComponent;                                       // 0x0228(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_230[0x28];                                     // 0x0230(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 PostAssociatedAkEvent();
	void Stop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TngSoundMusicManagerTestActor">();
	}
	static class ATngSoundMusicManagerTestActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATngSoundMusicManagerTestActor>();
	}
};
static_assert(alignof(ATngSoundMusicManagerTestActor) == 0x000008, "Wrong alignment on ATngSoundMusicManagerTestActor");
static_assert(sizeof(ATngSoundMusicManagerTestActor) == 0x000258, "Wrong size on ATngSoundMusicManagerTestActor");
static_assert(offsetof(ATngSoundMusicManagerTestActor, AkComponent) == 0x000228, "Member 'ATngSoundMusicManagerTestActor::AkComponent' has a wrong offset!");

// Class TangoSoundUtility.AkMusicSyncComponent
// 0x0080 (0x0280 - 0x0200)
class UAkMusicSyncComponent final : public USceneComponent
{
public:
	class UAkAudioEvent*                          AkAudioEvent;                                      // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionRefreshInterval;                          // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             OcclusionCollisionChannel;                         // 0x0204(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_205[0x3];                                      // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bEnableSphere : 1;                                 // 0x0208(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AddRadius;                                         // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Mute;                                              // 0x0210(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  Bars;                                              // 0x0218(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMusicSyncComponent_Beat>       Beats;                                             // 0x0228(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMusicSyncComponent_Grid>       Grids;                                             // 0x0238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAkComponent*                           Ak;                                                // 0x0248(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_250[0x30];                                     // 0x0250(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMusicSyncComponent">();
	}
	static class UAkMusicSyncComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMusicSyncComponent>();
	}
};
static_assert(alignof(UAkMusicSyncComponent) == 0x000010, "Wrong alignment on UAkMusicSyncComponent");
static_assert(sizeof(UAkMusicSyncComponent) == 0x000280, "Wrong size on UAkMusicSyncComponent");
static_assert(offsetof(UAkMusicSyncComponent, AkAudioEvent) == 0x0001F8, "Member 'UAkMusicSyncComponent::AkAudioEvent' has a wrong offset!");
static_assert(offsetof(UAkMusicSyncComponent, OcclusionRefreshInterval) == 0x000200, "Member 'UAkMusicSyncComponent::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(UAkMusicSyncComponent, OcclusionCollisionChannel) == 0x000204, "Member 'UAkMusicSyncComponent::OcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(UAkMusicSyncComponent, AddRadius) == 0x00020C, "Member 'UAkMusicSyncComponent::AddRadius' has a wrong offset!");
static_assert(offsetof(UAkMusicSyncComponent, Mute) == 0x000210, "Member 'UAkMusicSyncComponent::Mute' has a wrong offset!");
static_assert(offsetof(UAkMusicSyncComponent, Bars) == 0x000218, "Member 'UAkMusicSyncComponent::Bars' has a wrong offset!");
static_assert(offsetof(UAkMusicSyncComponent, Beats) == 0x000228, "Member 'UAkMusicSyncComponent::Beats' has a wrong offset!");
static_assert(offsetof(UAkMusicSyncComponent, Grids) == 0x000238, "Member 'UAkMusicSyncComponent::Grids' has a wrong offset!");
static_assert(offsetof(UAkMusicSyncComponent, Ak) == 0x000248, "Member 'UAkMusicSyncComponent::Ak' has a wrong offset!");

// Class TangoSoundUtility.AkMusicSyncSpeaker
// 0x0008 (0x0230 - 0x0228)
class AAkMusicSyncSpeaker final : public AActor
{
public:
	class UAkMusicSyncComponent*                  AkMusicSyncComponent;                              // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMusicSyncSpeaker">();
	}
	static class AAkMusicSyncSpeaker* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkMusicSyncSpeaker>();
	}
};
static_assert(alignof(AAkMusicSyncSpeaker) == 0x000008, "Wrong alignment on AAkMusicSyncSpeaker");
static_assert(sizeof(AAkMusicSyncSpeaker) == 0x000230, "Wrong size on AAkMusicSyncSpeaker");
static_assert(offsetof(AAkMusicSyncSpeaker, AkMusicSyncComponent) == 0x000228, "Member 'AAkMusicSyncSpeaker::AkMusicSyncComponent' has a wrong offset!");

// Class TangoSoundUtility.AkMusicSyncLinearComponent
// 0x0020 (0x0570 - 0x0550)
class UAkMusicSyncLinearComponent final : public USplineComponent
{
public:
	class UAkMusicSyncComponent*                  AkMusicSyncComponent;                              // 0x0548(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDraw;                                        // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_551[0x1F];                                     // 0x0551(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMusicSyncLinearComponent">();
	}
	static class UAkMusicSyncLinearComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMusicSyncLinearComponent>();
	}
};
static_assert(alignof(UAkMusicSyncLinearComponent) == 0x000010, "Wrong alignment on UAkMusicSyncLinearComponent");
static_assert(sizeof(UAkMusicSyncLinearComponent) == 0x000570, "Wrong size on UAkMusicSyncLinearComponent");
static_assert(offsetof(UAkMusicSyncLinearComponent, AkMusicSyncComponent) == 0x000548, "Member 'UAkMusicSyncLinearComponent::AkMusicSyncComponent' has a wrong offset!");
static_assert(offsetof(UAkMusicSyncLinearComponent, bDebugDraw) == 0x000550, "Member 'UAkMusicSyncLinearComponent::bDebugDraw' has a wrong offset!");

// Class TangoSoundUtility.AkMusicSyncLinearSpeaker
// 0x0008 (0x0230 - 0x0228)
class AAkMusicSyncLinearSpeaker final : public AActor
{
public:
	class UAkMusicSyncLinearComponent*            AkMusicSyncLinearComponent;                        // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMusicSyncLinearSpeaker">();
	}
	static class AAkMusicSyncLinearSpeaker* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkMusicSyncLinearSpeaker>();
	}
};
static_assert(alignof(AAkMusicSyncLinearSpeaker) == 0x000008, "Wrong alignment on AAkMusicSyncLinearSpeaker");
static_assert(sizeof(AAkMusicSyncLinearSpeaker) == 0x000230, "Wrong size on AAkMusicSyncLinearSpeaker");
static_assert(offsetof(AAkMusicSyncLinearSpeaker, AkMusicSyncLinearComponent) == 0x000228, "Member 'AAkMusicSyncLinearSpeaker::AkMusicSyncLinearComponent' has a wrong offset!");

// Class TangoSoundUtility.AkRandomComponent
// 0x0060 (0x0260 - 0x0200)
class UAkRandomComponent final : public USceneComponent
{
public:
	class UAkAudioEvent*                          AkAudioEvent;                                      // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSimultaneousSounds;                             // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTime;                                          // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RandomizerPlayTime : 1;                            // 0x020C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_20D[0x3];                                      // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayTimeMinOffset;                                 // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTimeMaxOffset;                                 // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitTime;                                          // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RandomizerWaitTime : 1;                            // 0x021C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_21D[0x3];                                      // 0x021D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaitTimeMinOffset;                                 // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitTimeMaxOffset;                                 // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     AllPositions;                                      // 0x0230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TickInterval;                                      // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAkComponent;                                    // 0x0244(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDraw;                                        // 0x0245(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_246[0x1A];                                     // 0x0246(0x001A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Start();
	void Stop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkRandomComponent">();
	}
	static class UAkRandomComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkRandomComponent>();
	}
};
static_assert(alignof(UAkRandomComponent) == 0x000010, "Wrong alignment on UAkRandomComponent");
static_assert(sizeof(UAkRandomComponent) == 0x000260, "Wrong size on UAkRandomComponent");
static_assert(offsetof(UAkRandomComponent, AkAudioEvent) == 0x0001F8, "Member 'UAkRandomComponent::AkAudioEvent' has a wrong offset!");
static_assert(offsetof(UAkRandomComponent, NumSimultaneousSounds) == 0x000200, "Member 'UAkRandomComponent::NumSimultaneousSounds' has a wrong offset!");
static_assert(offsetof(UAkRandomComponent, Distance) == 0x000204, "Member 'UAkRandomComponent::Distance' has a wrong offset!");
static_assert(offsetof(UAkRandomComponent, PlayTime) == 0x000208, "Member 'UAkRandomComponent::PlayTime' has a wrong offset!");
static_assert(offsetof(UAkRandomComponent, PlayTimeMinOffset) == 0x000210, "Member 'UAkRandomComponent::PlayTimeMinOffset' has a wrong offset!");
static_assert(offsetof(UAkRandomComponent, PlayTimeMaxOffset) == 0x000214, "Member 'UAkRandomComponent::PlayTimeMaxOffset' has a wrong offset!");
static_assert(offsetof(UAkRandomComponent, WaitTime) == 0x000218, "Member 'UAkRandomComponent::WaitTime' has a wrong offset!");
static_assert(offsetof(UAkRandomComponent, WaitTimeMinOffset) == 0x000220, "Member 'UAkRandomComponent::WaitTimeMinOffset' has a wrong offset!");
static_assert(offsetof(UAkRandomComponent, WaitTimeMaxOffset) == 0x000224, "Member 'UAkRandomComponent::WaitTimeMaxOffset' has a wrong offset!");
static_assert(offsetof(UAkRandomComponent, FadeOutTime) == 0x000228, "Member 'UAkRandomComponent::FadeOutTime' has a wrong offset!");
static_assert(offsetof(UAkRandomComponent, AllPositions) == 0x000230, "Member 'UAkRandomComponent::AllPositions' has a wrong offset!");
static_assert(offsetof(UAkRandomComponent, TickInterval) == 0x000240, "Member 'UAkRandomComponent::TickInterval' has a wrong offset!");
static_assert(offsetof(UAkRandomComponent, UseAkComponent) == 0x000244, "Member 'UAkRandomComponent::UseAkComponent' has a wrong offset!");
static_assert(offsetof(UAkRandomComponent, bDebugDraw) == 0x000245, "Member 'UAkRandomComponent::bDebugDraw' has a wrong offset!");

// Class TangoSoundUtility.AkRandomSpeaker
// 0x0018 (0x0240 - 0x0228)
class AAkRandomSpeaker final : public AActor
{
public:
	class UAkRandomComponent*                     AkRandomComponent;                                 // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AAkCandidatePoint*>              Points;                                            // 0x0230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkRandomSpeaker">();
	}
	static class AAkRandomSpeaker* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkRandomSpeaker>();
	}
};
static_assert(alignof(AAkRandomSpeaker) == 0x000008, "Wrong alignment on AAkRandomSpeaker");
static_assert(sizeof(AAkRandomSpeaker) == 0x000240, "Wrong size on AAkRandomSpeaker");
static_assert(offsetof(AAkRandomSpeaker, AkRandomComponent) == 0x000228, "Member 'AAkRandomSpeaker::AkRandomComponent' has a wrong offset!");
static_assert(offsetof(AAkRandomSpeaker, Points) == 0x000230, "Member 'AAkRandomSpeaker::Points' has a wrong offset!");

// Class TangoSoundUtility.TngSoundSettingsPerUser
// 0x0018 (0x0040 - 0x0028)
class UTngSoundSettingsPerUser final : public UObject
{
public:
	struct FDirectoryPath                         OutputFolderPath;                                  // 0x0028(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	int32                                         RefleshTimeMin;                                    // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TngSoundSettingsPerUser">();
	}
	static class UTngSoundSettingsPerUser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTngSoundSettingsPerUser>();
	}
};
static_assert(alignof(UTngSoundSettingsPerUser) == 0x000008, "Wrong alignment on UTngSoundSettingsPerUser");
static_assert(sizeof(UTngSoundSettingsPerUser) == 0x000040, "Wrong size on UTngSoundSettingsPerUser");
static_assert(offsetof(UTngSoundSettingsPerUser, OutputFolderPath) == 0x000028, "Member 'UTngSoundSettingsPerUser::OutputFolderPath' has a wrong offset!");
static_assert(offsetof(UTngSoundSettingsPerUser, RefleshTimeMin) == 0x000038, "Member 'UTngSoundSettingsPerUser::RefleshTimeMin' has a wrong offset!");

// Class TangoSoundUtility.AkSphereComponent2
// 0x0040 (0x0240 - 0x0200)
class UAkSphereComponent2 final : public USceneComponent
{
public:
	float                                         TickInterval;                                      // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAkAudioEvent*>                  Events;                                            // 0x0200(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AttenuationScalingFactor;                          // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionRefreshInterval;                          // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             OcclusionCollisionChannel;                         // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableChangeRoom;                                  // 0x0219(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkChangeRoomType                             ChangeRoomType;                                    // 0x021A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x021B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           Ak;                                                // 0x0220(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_228[0x18];                                     // 0x0228(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AppendAkEvent(class UAkAudioEvent* Event);
	bool IsPlaying();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSphereComponent2">();
	}
	static class UAkSphereComponent2* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkSphereComponent2>();
	}
};
static_assert(alignof(UAkSphereComponent2) == 0x000010, "Wrong alignment on UAkSphereComponent2");
static_assert(sizeof(UAkSphereComponent2) == 0x000240, "Wrong size on UAkSphereComponent2");
static_assert(offsetof(UAkSphereComponent2, TickInterval) == 0x0001F8, "Member 'UAkSphereComponent2::TickInterval' has a wrong offset!");
static_assert(offsetof(UAkSphereComponent2, Events) == 0x000200, "Member 'UAkSphereComponent2::Events' has a wrong offset!");
static_assert(offsetof(UAkSphereComponent2, AttenuationScalingFactor) == 0x000210, "Member 'UAkSphereComponent2::AttenuationScalingFactor' has a wrong offset!");
static_assert(offsetof(UAkSphereComponent2, OcclusionRefreshInterval) == 0x000214, "Member 'UAkSphereComponent2::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(UAkSphereComponent2, OcclusionCollisionChannel) == 0x000218, "Member 'UAkSphereComponent2::OcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(UAkSphereComponent2, EnableChangeRoom) == 0x000219, "Member 'UAkSphereComponent2::EnableChangeRoom' has a wrong offset!");
static_assert(offsetof(UAkSphereComponent2, ChangeRoomType) == 0x00021A, "Member 'UAkSphereComponent2::ChangeRoomType' has a wrong offset!");
static_assert(offsetof(UAkSphereComponent2, bEnable) == 0x00021B, "Member 'UAkSphereComponent2::bEnable' has a wrong offset!");
static_assert(offsetof(UAkSphereComponent2, Ak) == 0x000220, "Member 'UAkSphereComponent2::Ak' has a wrong offset!");

// Class TangoSoundUtility.AkSphereSpeaker2
// 0x0008 (0x0230 - 0x0228)
class AAkSphereSpeaker2 final : public AActor
{
public:
	class UAkSphereComponent2*                    AkSphereComponent2;                                // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetEnable(bool bEnable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSphereSpeaker2">();
	}
	static class AAkSphereSpeaker2* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkSphereSpeaker2>();
	}
};
static_assert(alignof(AAkSphereSpeaker2) == 0x000008, "Wrong alignment on AAkSphereSpeaker2");
static_assert(sizeof(AAkSphereSpeaker2) == 0x000230, "Wrong size on AAkSphereSpeaker2");
static_assert(offsetof(AAkSphereSpeaker2, AkSphereComponent2) == 0x000228, "Member 'AAkSphereSpeaker2::AkSphereComponent2' has a wrong offset!");

// Class TangoSoundUtility.TngSoundSAVBox
// 0x0000 (0x0230 - 0x0230)
class ATngSoundSAVBox final : public ATriggerBox
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TngSoundSAVBox">();
	}
	static class ATngSoundSAVBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATngSoundSAVBox>();
	}
};
static_assert(alignof(ATngSoundSAVBox) == 0x000008, "Wrong alignment on ATngSoundSAVBox");
static_assert(sizeof(ATngSoundSAVBox) == 0x000230, "Wrong size on ATngSoundSAVBox");

// Class TangoSoundUtility.TngSoundPortalBox
// 0x0000 (0x0230 - 0x0230)
class ATngSoundPortalBox final : public ATriggerBox
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TngSoundPortalBox">();
	}
	static class ATngSoundPortalBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATngSoundPortalBox>();
	}
};
static_assert(alignof(ATngSoundPortalBox) == 0x000008, "Wrong alignment on ATngSoundPortalBox");
static_assert(sizeof(ATngSoundPortalBox) == 0x000230, "Wrong size on ATngSoundPortalBox");

// Class TangoSoundUtility.TngSoundBoxComponent
// 0x0000 (0x0480 - 0x0480)
class UTngSoundBoxComponent : public UBoxComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TngSoundBoxComponent">();
	}
	static class UTngSoundBoxComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTngSoundBoxComponent>();
	}
};
static_assert(alignof(UTngSoundBoxComponent) == 0x000010, "Wrong alignment on UTngSoundBoxComponent");
static_assert(sizeof(UTngSoundBoxComponent) == 0x000480, "Wrong size on UTngSoundBoxComponent");

// Class TangoSoundUtility.TngSoundSAVBoxComponent
// 0x0000 (0x0480 - 0x0480)
class UTngSoundSAVBoxComponent final : public UTngSoundBoxComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TngSoundSAVBoxComponent">();
	}
	static class UTngSoundSAVBoxComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTngSoundSAVBoxComponent>();
	}
};
static_assert(alignof(UTngSoundSAVBoxComponent) == 0x000010, "Wrong alignment on UTngSoundSAVBoxComponent");
static_assert(sizeof(UTngSoundSAVBoxComponent) == 0x000480, "Wrong size on UTngSoundSAVBoxComponent");

// Class TangoSoundUtility.TngSoundPortalBoxComponent
// 0x0000 (0x0480 - 0x0480)
class UTngSoundPortalBoxComponent final : public UTngSoundBoxComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TngSoundPortalBoxComponent">();
	}
	static class UTngSoundPortalBoxComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTngSoundPortalBoxComponent>();
	}
};
static_assert(alignof(UTngSoundPortalBoxComponent) == 0x000010, "Wrong alignment on UTngSoundPortalBoxComponent");
static_assert(sizeof(UTngSoundPortalBoxComponent) == 0x000480, "Wrong size on UTngSoundPortalBoxComponent");

// Class TangoSoundUtility.TngSoundVolume
// 0x0000 (0x0260 - 0x0260)
class ATngSoundVolume final : public AVolume
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TngSoundVolume">();
	}
	static class ATngSoundVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATngSoundVolume>();
	}
};
static_assert(alignof(ATngSoundVolume) == 0x000008, "Wrong alignment on ATngSoundVolume");
static_assert(sizeof(ATngSoundVolume) == 0x000260, "Wrong size on ATngSoundVolume");

}

