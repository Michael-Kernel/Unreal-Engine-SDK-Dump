#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TangoAnimationRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "AnimationCore_structs.hpp"


namespace SDK
{

// Enum TangoAnimationRuntime.ETngAnimHelperJointInterpolationType
// NumValues: 0x0005
enum class ETngAnimHelperJointInterpolationType : uint8
{
	None                                     = 0,
	Linear                                   = 1,
	Flat                                     = 2,
	Spline                                   = 3,
	ETngAnimHelperJointInterpolationType_MAX = 4,
};

// Enum TangoAnimationRuntime.ETngAnimHelperJointCurveExpressionType
// NumValues: 0x0004
enum class ETngAnimHelperJointCurveExpressionType : uint8
{
	None                                     = 0,
	Simple                                   = 1,
	Graph                                    = 2,
	ETngAnimHelperJointCurveExpressionType_MAX = 3,
};

// Enum TangoAnimationRuntime.ETngAnimHelperJointRotationSequence
// NumValues: 0x0008
enum class ETngAnimHelperJointRotationSequence : uint8
{
	None                                     = 0,
	XYZ                                      = 1,
	YZX                                      = 2,
	ZXY                                      = 3,
	XZY                                      = 4,
	YXZ                                      = 5,
	ZYX                                      = 6,
	ETngAnimHelperJointRotationSequence_MAX  = 7,
};

// Enum TangoAnimationRuntime.ETngAnimHelperJointReferenceType
// NumValues: 0x0005
enum class ETngAnimHelperJointReferenceType : uint8
{
	None                                     = 0,
	AnotherJoint                             = 1,
	BindPose                                 = 2,
	ParentJoint                              = 3,
	ETngAnimHelperJointReferenceType_MAX     = 4,
};

// Enum TangoAnimationRuntime.ETngAnimHelperJointSourceComponentType
// NumValues: 0x0009
enum class ETngAnimHelperJointSourceComponentType : uint8
{
	None                                     = 0,
	RotationX                                = 1,
	RotationY                                = 2,
	RotationZ                                = 3,
	TranslationX                             = 4,
	TranslationY                             = 5,
	TranslationZ                             = 6,
	Distance                                 = 7,
	ETngAnimHelperJointSourceComponentType_MAX = 8,
};

// Enum TangoAnimationRuntime.ETngAnimHelperJointType
// NumValues: 0x0006
enum class ETngAnimHelperJointType : uint8
{
	None                                     = 0,
	Expression                               = 1,
	DriveConstraint                          = 2,
	DriveBlendShape                          = 3,
	DriveMaterial                            = 4,
	ETngAnimHelperJointType_MAX              = 5,
};

// Enum TangoAnimationRuntime.ETngJCPSphereColliderType
// NumValues: 0x0003
enum class ETngJCPSphereColliderType : uint8
{
	Inner                                    = 0,
	Outer                                    = 1,
	ETngJCPSphereColliderType_MAX            = 2,
};

// Enum TangoAnimationRuntime.ETngJCPSimulationSpace
// NumValues: 0x0004
enum class ETngJCPSimulationSpace : uint8
{
	ComponentSpace                           = 0,
	WorldSpace                               = 1,
	BaseJointSpace                           = 2,
	ETngJCPSimulationSpace_MAX               = 3,
};

// Enum TangoAnimationRuntime.ETngJCPAxis
// NumValues: 0x0005
enum class ETngJCPAxis : uint8
{
	None                                     = 0,
	X                                        = 1,
	Y                                        = 2,
	Z                                        = 3,
	ETngJCPAxis_MAX                          = 4,
};

// Enum TangoAnimationRuntime.ETngAnimSpringType
// NumValues: 0x0004
enum class ETngAnimSpringType : uint8
{
	Translation                              = 0,
	ChildTransToRot                          = 1,
	Rotation                                 = 2,
	ETngAnimSpringType_MAX                   = 3,
};

// Enum TangoAnimationRuntime.ETngAnimTailAnimatorSpringSimulationMode
// NumValues: 0x0003
enum class ETngAnimTailAnimatorSpringSimulationMode : uint8
{
	TailAnimator                             = 0,
	TailAnimatorPlusSpring                   = 1,
	ETngAnimTailAnimatorSpringSimulationMode_MAX = 2,
};

// Enum TangoAnimationRuntime.ETngTwoBoneAxis
// NumValues: 0x0007
enum class ETngTwoBoneAxis : uint8
{
	PositiveX                                = 0,
	NegativeX                                = 1,
	PositiveY                                = 2,
	NegativeY                                = 3,
	PositiveZ                                = 4,
	NegativeZ                                = 5,
	ETngTwoBoneAxis_MAX                      = 6,
};

// Enum TangoAnimationRuntime.ETngTwoBoneFootIKQueryShape
// NumValues: 0x0004
enum class ETngTwoBoneFootIKQueryShape : uint8
{
	Line                                     = 0,
	Sphere                                   = 1,
	Box                                      = 2,
	ETngTwoBoneFootIKQueryShape_MAX          = 3,
};

// ScriptStruct TangoAnimationRuntime.TngAnimRichCurve
// 0x0000 (0x0080 - 0x0080)
struct FTngAnimRichCurve final : public FRichCurve
{
};
static_assert(alignof(FTngAnimRichCurve) == 0x000008, "Wrong alignment on FTngAnimRichCurve");
static_assert(sizeof(FTngAnimRichCurve) == 0x000080, "Wrong size on FTngAnimRichCurve");

// ScriptStruct TangoAnimationRuntime.TngAnimHelperJointDriveBlendShapeSetting
// 0x00B0 (0x00B0 - 0x0000)
struct FTngAnimHelperJointDriveBlendShapeSetting final
{
public:
	ETngAnimHelperJointCurveExpressionType        CurveMode;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointSourceComponentType        SourceComponent;                                   // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SourceMin;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceMax;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetBlendShape;                                  // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetBlendShapeWeight;                            // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetWeightMin;                                   // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetWeightMax;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationMin;                                  // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationBindPose;                             // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationMax;                                  // 0x0026(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTngAnimRichCurve                      TargetWeightCurve;                                 // 0x0028(0x0080)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bUseYZXRotation : 1;                               // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ETngAnimHelperJointRotationSequence           SourceRotationSequence;                            // 0x00AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngAnimHelperJointDriveBlendShapeSetting) == 0x000008, "Wrong alignment on FTngAnimHelperJointDriveBlendShapeSetting");
static_assert(sizeof(FTngAnimHelperJointDriveBlendShapeSetting) == 0x0000B0, "Wrong size on FTngAnimHelperJointDriveBlendShapeSetting");
static_assert(offsetof(FTngAnimHelperJointDriveBlendShapeSetting, CurveMode) == 0x000000, "Member 'FTngAnimHelperJointDriveBlendShapeSetting::CurveMode' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveBlendShapeSetting, SourceComponent) == 0x000001, "Member 'FTngAnimHelperJointDriveBlendShapeSetting::SourceComponent' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveBlendShapeSetting, SourceMin) == 0x000004, "Member 'FTngAnimHelperJointDriveBlendShapeSetting::SourceMin' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveBlendShapeSetting, SourceMax) == 0x000008, "Member 'FTngAnimHelperJointDriveBlendShapeSetting::SourceMax' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveBlendShapeSetting, TargetBlendShape) == 0x00000C, "Member 'FTngAnimHelperJointDriveBlendShapeSetting::TargetBlendShape' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveBlendShapeSetting, TargetBlendShapeWeight) == 0x000014, "Member 'FTngAnimHelperJointDriveBlendShapeSetting::TargetBlendShapeWeight' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveBlendShapeSetting, TargetWeightMin) == 0x00001C, "Member 'FTngAnimHelperJointDriveBlendShapeSetting::TargetWeightMin' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveBlendShapeSetting, TargetWeightMax) == 0x000020, "Member 'FTngAnimHelperJointDriveBlendShapeSetting::TargetWeightMax' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveBlendShapeSetting, InterpolationMin) == 0x000024, "Member 'FTngAnimHelperJointDriveBlendShapeSetting::InterpolationMin' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveBlendShapeSetting, InterpolationBindPose) == 0x000025, "Member 'FTngAnimHelperJointDriveBlendShapeSetting::InterpolationBindPose' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveBlendShapeSetting, InterpolationMax) == 0x000026, "Member 'FTngAnimHelperJointDriveBlendShapeSetting::InterpolationMax' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveBlendShapeSetting, TargetWeightCurve) == 0x000028, "Member 'FTngAnimHelperJointDriveBlendShapeSetting::TargetWeightCurve' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveBlendShapeSetting, SourceRotationSequence) == 0x0000AC, "Member 'FTngAnimHelperJointDriveBlendShapeSetting::SourceRotationSequence' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngAnimHelperJointExpressionSetting
// 0x0008 (0x0008 - 0x0000)
struct FTngAnimHelperJointExpressionSetting final
{
public:
	float                                         ScaleBend;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleTwist;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngAnimHelperJointExpressionSetting) == 0x000004, "Wrong alignment on FTngAnimHelperJointExpressionSetting");
static_assert(sizeof(FTngAnimHelperJointExpressionSetting) == 0x000008, "Wrong size on FTngAnimHelperJointExpressionSetting");
static_assert(offsetof(FTngAnimHelperJointExpressionSetting, ScaleBend) == 0x000000, "Member 'FTngAnimHelperJointExpressionSetting::ScaleBend' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointExpressionSetting, ScaleTwist) == 0x000004, "Member 'FTngAnimHelperJointExpressionSetting::ScaleTwist' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngAnimHelperJointDriveConstraintSetting
// 0x0378 (0x0378 - 0x0000)
struct FTngAnimHelperJointDriveConstraintSetting final
{
public:
	ETngAnimHelperJointCurveExpressionType        CurveMode;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointSourceComponentType        SourceComponent;                                   // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SourceMin;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceMax;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bTargetTranslationX : 1;                           // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetTranslationX_Min;                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetTranslationX_Max;                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationTranslationX_Min;                     // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationTranslationX_BindPose;                // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationTranslationX_Max;                     // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTngAnimRichCurve                      TargetTranslationX_Curve;                          // 0x0020(0x0080)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bTargetTranslationY : 1;                           // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetTranslationY_Min;                            // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetTranslationY_Max;                            // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationTranslationY_Min;                     // 0x00AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationTranslationY_BindPose;                // 0x00AD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationTranslationY_Max;                     // 0x00AE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AF[0x1];                                       // 0x00AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTngAnimRichCurve                      TargetTranslationY_Curve;                          // 0x00B0(0x0080)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bTargetTranslationZ : 1;                           // 0x0130(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetTranslationZ_Min;                            // 0x0134(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetTranslationZ_Max;                            // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationTranslationZ_Min;                     // 0x013C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationTranslationZ_BindPose;                // 0x013D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationTranslationZ_Max;                     // 0x013E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13F[0x1];                                      // 0x013F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTngAnimRichCurve                      TargetTranslationZ_Curve;                          // 0x0140(0x0080)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bTargetRotationX : 1;                              // 0x01C0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1C1[0x3];                                      // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetRotationX_Min;                               // 0x01C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetRotationX_Max;                               // 0x01C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationRotationX_Min;                        // 0x01CC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationRotationX_BindPose;                   // 0x01CD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationRotationX_Max;                        // 0x01CE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF[0x1];                                      // 0x01CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTngAnimRichCurve                      TargetRotationX_Curve;                             // 0x01D0(0x0080)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bTargetRotationY : 1;                              // 0x0250(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetRotationY_Min;                               // 0x0254(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetRotationY_Max;                               // 0x0258(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationRotationY_Min;                        // 0x025C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationRotationY_BindPose;                   // 0x025D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationRotationY_Max;                        // 0x025E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25F[0x1];                                      // 0x025F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTngAnimRichCurve                      TargetRotationY_Curve;                             // 0x0260(0x0080)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bTargetRotationZ : 1;                              // 0x02E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetRotationZ_Min;                               // 0x02E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetRotationZ_Max;                               // 0x02E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationRotationZ_Min;                        // 0x02EC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationRotationZ_BindPose;                   // 0x02ED(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationRotationZ_Max;                        // 0x02EE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EF[0x1];                                      // 0x02EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTngAnimRichCurve                      TargetRotationZ_Curve;                             // 0x02F0(0x0080)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bUseYZXRotation : 1;                               // 0x0370(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_371[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ETngAnimHelperJointRotationSequence           SourceRotationSequence;                            // 0x0374(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_375[0x3];                                      // 0x0375(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngAnimHelperJointDriveConstraintSetting) == 0x000008, "Wrong alignment on FTngAnimHelperJointDriveConstraintSetting");
static_assert(sizeof(FTngAnimHelperJointDriveConstraintSetting) == 0x000378, "Wrong size on FTngAnimHelperJointDriveConstraintSetting");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, CurveMode) == 0x000000, "Member 'FTngAnimHelperJointDriveConstraintSetting::CurveMode' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, SourceComponent) == 0x000001, "Member 'FTngAnimHelperJointDriveConstraintSetting::SourceComponent' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, SourceMin) == 0x000004, "Member 'FTngAnimHelperJointDriveConstraintSetting::SourceMin' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, SourceMax) == 0x000008, "Member 'FTngAnimHelperJointDriveConstraintSetting::SourceMax' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, TargetTranslationX_Min) == 0x000010, "Member 'FTngAnimHelperJointDriveConstraintSetting::TargetTranslationX_Min' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, TargetTranslationX_Max) == 0x000014, "Member 'FTngAnimHelperJointDriveConstraintSetting::TargetTranslationX_Max' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, InterpolationTranslationX_Min) == 0x000018, "Member 'FTngAnimHelperJointDriveConstraintSetting::InterpolationTranslationX_Min' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, InterpolationTranslationX_BindPose) == 0x000019, "Member 'FTngAnimHelperJointDriveConstraintSetting::InterpolationTranslationX_BindPose' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, InterpolationTranslationX_Max) == 0x00001A, "Member 'FTngAnimHelperJointDriveConstraintSetting::InterpolationTranslationX_Max' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, TargetTranslationX_Curve) == 0x000020, "Member 'FTngAnimHelperJointDriveConstraintSetting::TargetTranslationX_Curve' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, TargetTranslationY_Min) == 0x0000A4, "Member 'FTngAnimHelperJointDriveConstraintSetting::TargetTranslationY_Min' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, TargetTranslationY_Max) == 0x0000A8, "Member 'FTngAnimHelperJointDriveConstraintSetting::TargetTranslationY_Max' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, InterpolationTranslationY_Min) == 0x0000AC, "Member 'FTngAnimHelperJointDriveConstraintSetting::InterpolationTranslationY_Min' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, InterpolationTranslationY_BindPose) == 0x0000AD, "Member 'FTngAnimHelperJointDriveConstraintSetting::InterpolationTranslationY_BindPose' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, InterpolationTranslationY_Max) == 0x0000AE, "Member 'FTngAnimHelperJointDriveConstraintSetting::InterpolationTranslationY_Max' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, TargetTranslationY_Curve) == 0x0000B0, "Member 'FTngAnimHelperJointDriveConstraintSetting::TargetTranslationY_Curve' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, TargetTranslationZ_Min) == 0x000134, "Member 'FTngAnimHelperJointDriveConstraintSetting::TargetTranslationZ_Min' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, TargetTranslationZ_Max) == 0x000138, "Member 'FTngAnimHelperJointDriveConstraintSetting::TargetTranslationZ_Max' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, InterpolationTranslationZ_Min) == 0x00013C, "Member 'FTngAnimHelperJointDriveConstraintSetting::InterpolationTranslationZ_Min' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, InterpolationTranslationZ_BindPose) == 0x00013D, "Member 'FTngAnimHelperJointDriveConstraintSetting::InterpolationTranslationZ_BindPose' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, InterpolationTranslationZ_Max) == 0x00013E, "Member 'FTngAnimHelperJointDriveConstraintSetting::InterpolationTranslationZ_Max' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, TargetTranslationZ_Curve) == 0x000140, "Member 'FTngAnimHelperJointDriveConstraintSetting::TargetTranslationZ_Curve' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, TargetRotationX_Min) == 0x0001C4, "Member 'FTngAnimHelperJointDriveConstraintSetting::TargetRotationX_Min' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, TargetRotationX_Max) == 0x0001C8, "Member 'FTngAnimHelperJointDriveConstraintSetting::TargetRotationX_Max' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, InterpolationRotationX_Min) == 0x0001CC, "Member 'FTngAnimHelperJointDriveConstraintSetting::InterpolationRotationX_Min' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, InterpolationRotationX_BindPose) == 0x0001CD, "Member 'FTngAnimHelperJointDriveConstraintSetting::InterpolationRotationX_BindPose' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, InterpolationRotationX_Max) == 0x0001CE, "Member 'FTngAnimHelperJointDriveConstraintSetting::InterpolationRotationX_Max' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, TargetRotationX_Curve) == 0x0001D0, "Member 'FTngAnimHelperJointDriveConstraintSetting::TargetRotationX_Curve' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, TargetRotationY_Min) == 0x000254, "Member 'FTngAnimHelperJointDriveConstraintSetting::TargetRotationY_Min' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, TargetRotationY_Max) == 0x000258, "Member 'FTngAnimHelperJointDriveConstraintSetting::TargetRotationY_Max' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, InterpolationRotationY_Min) == 0x00025C, "Member 'FTngAnimHelperJointDriveConstraintSetting::InterpolationRotationY_Min' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, InterpolationRotationY_BindPose) == 0x00025D, "Member 'FTngAnimHelperJointDriveConstraintSetting::InterpolationRotationY_BindPose' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, InterpolationRotationY_Max) == 0x00025E, "Member 'FTngAnimHelperJointDriveConstraintSetting::InterpolationRotationY_Max' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, TargetRotationY_Curve) == 0x000260, "Member 'FTngAnimHelperJointDriveConstraintSetting::TargetRotationY_Curve' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, TargetRotationZ_Min) == 0x0002E4, "Member 'FTngAnimHelperJointDriveConstraintSetting::TargetRotationZ_Min' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, TargetRotationZ_Max) == 0x0002E8, "Member 'FTngAnimHelperJointDriveConstraintSetting::TargetRotationZ_Max' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, InterpolationRotationZ_Min) == 0x0002EC, "Member 'FTngAnimHelperJointDriveConstraintSetting::InterpolationRotationZ_Min' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, InterpolationRotationZ_BindPose) == 0x0002ED, "Member 'FTngAnimHelperJointDriveConstraintSetting::InterpolationRotationZ_BindPose' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, InterpolationRotationZ_Max) == 0x0002EE, "Member 'FTngAnimHelperJointDriveConstraintSetting::InterpolationRotationZ_Max' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, TargetRotationZ_Curve) == 0x0002F0, "Member 'FTngAnimHelperJointDriveConstraintSetting::TargetRotationZ_Curve' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveConstraintSetting, SourceRotationSequence) == 0x000374, "Member 'FTngAnimHelperJointDriveConstraintSetting::SourceRotationSequence' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngAnimHelperJointDriveMaterialSetting
// 0x00B0 (0x00B0 - 0x0000)
struct FTngAnimHelperJointDriveMaterialSetting final
{
public:
	ETngAnimHelperJointCurveExpressionType        CurveMode;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointSourceComponentType        SourceComponent;                                   // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SourceMin;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceMax;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetMaterial;                                    // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetMaterialParam;                               // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetParamMin;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetParamMax;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationMin;                                  // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationBindPose;                             // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAnimHelperJointInterpolationType          InterpolationMax;                                  // 0x0026(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTngAnimRichCurve                      TargetParamCurve;                                  // 0x0028(0x0080)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bUseYZXRotation : 1;                               // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ETngAnimHelperJointRotationSequence           SourceRotationSequence;                            // 0x00AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngAnimHelperJointDriveMaterialSetting) == 0x000008, "Wrong alignment on FTngAnimHelperJointDriveMaterialSetting");
static_assert(sizeof(FTngAnimHelperJointDriveMaterialSetting) == 0x0000B0, "Wrong size on FTngAnimHelperJointDriveMaterialSetting");
static_assert(offsetof(FTngAnimHelperJointDriveMaterialSetting, CurveMode) == 0x000000, "Member 'FTngAnimHelperJointDriveMaterialSetting::CurveMode' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveMaterialSetting, SourceComponent) == 0x000001, "Member 'FTngAnimHelperJointDriveMaterialSetting::SourceComponent' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveMaterialSetting, SourceMin) == 0x000004, "Member 'FTngAnimHelperJointDriveMaterialSetting::SourceMin' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveMaterialSetting, SourceMax) == 0x000008, "Member 'FTngAnimHelperJointDriveMaterialSetting::SourceMax' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveMaterialSetting, TargetMaterial) == 0x00000C, "Member 'FTngAnimHelperJointDriveMaterialSetting::TargetMaterial' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveMaterialSetting, TargetMaterialParam) == 0x000014, "Member 'FTngAnimHelperJointDriveMaterialSetting::TargetMaterialParam' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveMaterialSetting, TargetParamMin) == 0x00001C, "Member 'FTngAnimHelperJointDriveMaterialSetting::TargetParamMin' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveMaterialSetting, TargetParamMax) == 0x000020, "Member 'FTngAnimHelperJointDriveMaterialSetting::TargetParamMax' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveMaterialSetting, InterpolationMin) == 0x000024, "Member 'FTngAnimHelperJointDriveMaterialSetting::InterpolationMin' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveMaterialSetting, InterpolationBindPose) == 0x000025, "Member 'FTngAnimHelperJointDriveMaterialSetting::InterpolationBindPose' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveMaterialSetting, InterpolationMax) == 0x000026, "Member 'FTngAnimHelperJointDriveMaterialSetting::InterpolationMax' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveMaterialSetting, TargetParamCurve) == 0x000028, "Member 'FTngAnimHelperJointDriveMaterialSetting::TargetParamCurve' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointDriveMaterialSetting, SourceRotationSequence) == 0x0000AC, "Member 'FTngAnimHelperJointDriveMaterialSetting::SourceRotationSequence' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngAnimHelperJointSetting
// 0x0528 (0x0528 - 0x0000)
struct FTngAnimHelperJointSetting final
{
public:
	uint8                                         bTypeExpression : 1;                               // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ETngAnimHelperJointType                       Type;                                              // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUseSourceRef : 1;                                 // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ETngAnimHelperJointReferenceType              SourceRefType;                                     // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SourceRefJointName;                                // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SourceJointName;                                   // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseTargetRef : 1;                                 // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ETngAnimHelperJointReferenceType              TargetRefType;                                     // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetRefJointName;                                // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetJointName;                                   // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetJointOrient;                                 // 0x0038(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTngAnimHelperJointExpressionSetting   ExpressionSetting;                                 // 0x0044(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTngAnimHelperJointDriveConstraintSetting DriveConstraintSetting;                            // 0x0050(0x0378)(Edit, NativeAccessSpecifierPublic)
	struct FTngAnimHelperJointDriveBlendShapeSetting DriveBlendShapeSetting;                            // 0x03C8(0x00B0)(Edit, NativeAccessSpecifierPublic)
	struct FTngAnimHelperJointDriveMaterialSetting DriveMaterialSetting;                              // 0x0478(0x00B0)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngAnimHelperJointSetting) == 0x000008, "Wrong alignment on FTngAnimHelperJointSetting");
static_assert(sizeof(FTngAnimHelperJointSetting) == 0x000528, "Wrong size on FTngAnimHelperJointSetting");
static_assert(offsetof(FTngAnimHelperJointSetting, Type) == 0x000004, "Member 'FTngAnimHelperJointSetting::Type' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointSetting, SourceRefType) == 0x00000C, "Member 'FTngAnimHelperJointSetting::SourceRefType' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointSetting, SourceRefJointName) == 0x000010, "Member 'FTngAnimHelperJointSetting::SourceRefJointName' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointSetting, SourceJointName) == 0x000018, "Member 'FTngAnimHelperJointSetting::SourceJointName' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointSetting, TargetRefType) == 0x000024, "Member 'FTngAnimHelperJointSetting::TargetRefType' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointSetting, TargetRefJointName) == 0x000028, "Member 'FTngAnimHelperJointSetting::TargetRefJointName' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointSetting, TargetJointName) == 0x000030, "Member 'FTngAnimHelperJointSetting::TargetJointName' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointSetting, TargetJointOrient) == 0x000038, "Member 'FTngAnimHelperJointSetting::TargetJointOrient' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointSetting, ExpressionSetting) == 0x000044, "Member 'FTngAnimHelperJointSetting::ExpressionSetting' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointSetting, DriveConstraintSetting) == 0x000050, "Member 'FTngAnimHelperJointSetting::DriveConstraintSetting' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointSetting, DriveBlendShapeSetting) == 0x0003C8, "Member 'FTngAnimHelperJointSetting::DriveBlendShapeSetting' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointSetting, DriveMaterialSetting) == 0x000478, "Member 'FTngAnimHelperJointSetting::DriveMaterialSetting' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngAnimHelperJointMaterialMapping
// 0x0058 (0x0058 - 0x0000)
struct FTngAnimHelperJointMaterialMapping final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class FName>                ParamTable;                                        // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngAnimHelperJointMaterialMapping) == 0x000008, "Wrong alignment on FTngAnimHelperJointMaterialMapping");
static_assert(sizeof(FTngAnimHelperJointMaterialMapping) == 0x000058, "Wrong size on FTngAnimHelperJointMaterialMapping");
static_assert(offsetof(FTngAnimHelperJointMaterialMapping, SlotName) == 0x000000, "Member 'FTngAnimHelperJointMaterialMapping::SlotName' has a wrong offset!");
static_assert(offsetof(FTngAnimHelperJointMaterialMapping, ParamTable) == 0x000008, "Member 'FTngAnimHelperJointMaterialMapping::ParamTable' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngAnimHelperJointMaterialMeshMapping
// 0x0050 (0x0050 - 0x0000)
struct FTngAnimHelperJointMaterialMeshMapping final
{
public:
	TMap<class FName, class USkinnedMeshComponent*> MeshComponentTable;                                // 0x0000(0x0050)(Edit, BlueprintVisible, ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngAnimHelperJointMaterialMeshMapping) == 0x000008, "Wrong alignment on FTngAnimHelperJointMaterialMeshMapping");
static_assert(sizeof(FTngAnimHelperJointMaterialMeshMapping) == 0x000050, "Wrong size on FTngAnimHelperJointMaterialMeshMapping");
static_assert(offsetof(FTngAnimHelperJointMaterialMeshMapping, MeshComponentTable) == 0x000000, "Member 'FTngAnimHelperJointMaterialMeshMapping::MeshComponentTable' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngAnimNode_HelperJoint
// 0x0108 (0x01D0 - 0x00C8)
struct FTngAnimNode_HelperJoint final : public FAnimNode_SkeletalControlBase
{
public:
	class UTngAnimHelperJointData*                Settings;                                          // 0x00C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FTngAnimHelperJointMaterialMapping> MaterialTable;                                     // 0x00D0(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FTngAnimHelperJointMaterialMeshMapping MeshCompTable;                                     // 0x0120(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_170[0x60];                                     // 0x0170(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngAnimNode_HelperJoint) == 0x000008, "Wrong alignment on FTngAnimNode_HelperJoint");
static_assert(sizeof(FTngAnimNode_HelperJoint) == 0x0001D0, "Wrong size on FTngAnimNode_HelperJoint");
static_assert(offsetof(FTngAnimNode_HelperJoint, Settings) == 0x0000C8, "Member 'FTngAnimNode_HelperJoint::Settings' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_HelperJoint, MaterialTable) == 0x0000D0, "Member 'FTngAnimNode_HelperJoint::MaterialTable' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_HelperJoint, MeshCompTable) == 0x000120, "Member 'FTngAnimNode_HelperJoint::MeshCompTable' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngAnimNode_JointChainDelayed
// 0x0048 (0x0110 - 0x00C8)
struct FTngAnimNode_JointChainDelayed final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         RootJoint;                                         // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         EndJoint;                                          // 0x00D8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableStretch;                                    // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayAlpha;                                        // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawInputPose;                                    // 0x00F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawOutputPose;                                   // 0x00F1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2[0x1E];                                      // 0x00F2(0x001E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngAnimNode_JointChainDelayed) == 0x000008, "Wrong alignment on FTngAnimNode_JointChainDelayed");
static_assert(sizeof(FTngAnimNode_JointChainDelayed) == 0x000110, "Wrong size on FTngAnimNode_JointChainDelayed");
static_assert(offsetof(FTngAnimNode_JointChainDelayed, RootJoint) == 0x0000C8, "Member 'FTngAnimNode_JointChainDelayed::RootJoint' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainDelayed, EndJoint) == 0x0000D8, "Member 'FTngAnimNode_JointChainDelayed::EndJoint' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainDelayed, bEnableStretch) == 0x0000E8, "Member 'FTngAnimNode_JointChainDelayed::bEnableStretch' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainDelayed, DelayAlpha) == 0x0000EC, "Member 'FTngAnimNode_JointChainDelayed::DelayAlpha' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainDelayed, bDrawInputPose) == 0x0000F0, "Member 'FTngAnimNode_JointChainDelayed::bDrawInputPose' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainDelayed, bDrawOutputPose) == 0x0000F1, "Member 'FTngAnimNode_JointChainDelayed::bDrawOutputPose' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngJointChainPhysicsParameters
// 0x0010 (0x0010 - 0x0000)
struct FTngJointChainPhysicsParameters final
{
public:
	float                                         Damping;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldDampingLocation;                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldDampingRotation;                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngJointChainPhysicsParameters) == 0x000004, "Wrong alignment on FTngJointChainPhysicsParameters");
static_assert(sizeof(FTngJointChainPhysicsParameters) == 0x000010, "Wrong size on FTngJointChainPhysicsParameters");
static_assert(offsetof(FTngJointChainPhysicsParameters, Damping) == 0x000000, "Member 'FTngJointChainPhysicsParameters::Damping' has a wrong offset!");
static_assert(offsetof(FTngJointChainPhysicsParameters, WorldDampingLocation) == 0x000004, "Member 'FTngJointChainPhysicsParameters::WorldDampingLocation' has a wrong offset!");
static_assert(offsetof(FTngJointChainPhysicsParameters, WorldDampingRotation) == 0x000008, "Member 'FTngJointChainPhysicsParameters::WorldDampingRotation' has a wrong offset!");
static_assert(offsetof(FTngJointChainPhysicsParameters, Stiffness) == 0x00000C, "Member 'FTngJointChainPhysicsParameters::Stiffness' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngJCPColliderBase
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x10) FTngJCPColliderBase
{
public:
	struct FBoneReference                         DrivingBone;                                       // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OffsetLocation;                                    // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotation;                                    // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x28];                                      // 0x0028(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngJCPColliderBase) == 0x000010, "Wrong alignment on FTngJCPColliderBase");
static_assert(sizeof(FTngJCPColliderBase) == 0x000050, "Wrong size on FTngJCPColliderBase");
static_assert(offsetof(FTngJCPColliderBase, DrivingBone) == 0x000000, "Member 'FTngJCPColliderBase::DrivingBone' has a wrong offset!");
static_assert(offsetof(FTngJCPColliderBase, OffsetLocation) == 0x000010, "Member 'FTngJCPColliderBase::OffsetLocation' has a wrong offset!");
static_assert(offsetof(FTngJCPColliderBase, OffsetRotation) == 0x00001C, "Member 'FTngJCPColliderBase::OffsetRotation' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngJCPSphereCollider
// 0x0010 (0x0060 - 0x0050)
struct FTngJCPSphereCollider final : public FTngJCPColliderBase
{
public:
	float                                         Radius;                                            // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngJCPSphereColliderType                     LimitType;                                         // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0xB];                                       // 0x0055(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngJCPSphereCollider) == 0x000010, "Wrong alignment on FTngJCPSphereCollider");
static_assert(sizeof(FTngJCPSphereCollider) == 0x000060, "Wrong size on FTngJCPSphereCollider");
static_assert(offsetof(FTngJCPSphereCollider, Radius) == 0x000050, "Member 'FTngJCPSphereCollider::Radius' has a wrong offset!");
static_assert(offsetof(FTngJCPSphereCollider, LimitType) == 0x000054, "Member 'FTngJCPSphereCollider::LimitType' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngJCPCapsuleCollider
// 0x0010 (0x0060 - 0x0050)
struct FTngJCPCapsuleCollider final : public FTngJCPColliderBase
{
public:
	float                                         Radius;                                            // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngJCPCapsuleCollider) == 0x000010, "Wrong alignment on FTngJCPCapsuleCollider");
static_assert(sizeof(FTngJCPCapsuleCollider) == 0x000060, "Wrong size on FTngJCPCapsuleCollider");
static_assert(offsetof(FTngJCPCapsuleCollider, Radius) == 0x000050, "Member 'FTngJCPCapsuleCollider::Radius' has a wrong offset!");
static_assert(offsetof(FTngJCPCapsuleCollider, Length) == 0x000054, "Member 'FTngJCPCapsuleCollider::Length' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngJCPPlaneCollider
// 0x0010 (0x0060 - 0x0050)
struct FTngJCPPlaneCollider final : public FTngJCPColliderBase
{
public:
	struct FPlane                                 Plane;                                             // 0x0050(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngJCPPlaneCollider) == 0x000010, "Wrong alignment on FTngJCPPlaneCollider");
static_assert(sizeof(FTngJCPPlaneCollider) == 0x000060, "Wrong size on FTngJCPPlaneCollider");
static_assert(offsetof(FTngJCPPlaneCollider, Plane) == 0x000050, "Member 'FTngJCPPlaneCollider::Plane' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngAnimNode_JointChainPhysics
// 0x0158 (0x0220 - 0x00C8)
struct alignas(0x10) FTngAnimNode_JointChainPhysics final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         RootJoint;                                         // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 ExcludeJoints;                                     // 0x00D8(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bFixEndJoint;                                      // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DummyBoneLength;                                   // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngJCPSimulationSpace                        SimulationSpace;                                   // 0x00F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         BaseJoint;                                         // 0x00F4(0x0010)(Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FTngJointChainPhysicsParameters        PhysicsParams;                                     // 0x0104(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DampingCurve;                                      // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            WorldDampingLocationCurve;                         // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            WorldDampingRotationCurve;                         // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            StiffnessCurve;                                    // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseFrameRate;                                     // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumIteration;                                      // 0x013C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JointSphereRadius;                                 // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            JointSphereRadiusCurve;                            // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConeConstraintAngle;                               // 0x0150(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ConeConstraintAngleCurve;                          // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngJCPAxis                                   PlaneConstraintAxis;                               // 0x0160(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTngJCPSphereCollider>          SphereColliders;                                   // 0x0168(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTngJCPCapsuleCollider>         CapsuleColliders;                                  // 0x0178(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTngJCPPlaneCollider>           PlaneColliders;                                    // 0x0188(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Gravity;                                           // 0x0198(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeleportDistanceThreshold;                         // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeleportRotationThreshold;                         // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindScale;                                         // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideWind;                                     // 0x01B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OverrideWindVelocity;                              // 0x01B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0[0x60];                                     // 0x01C0(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngAnimNode_JointChainPhysics) == 0x000010, "Wrong alignment on FTngAnimNode_JointChainPhysics");
static_assert(sizeof(FTngAnimNode_JointChainPhysics) == 0x000220, "Wrong size on FTngAnimNode_JointChainPhysics");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, RootJoint) == 0x0000C8, "Member 'FTngAnimNode_JointChainPhysics::RootJoint' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, ExcludeJoints) == 0x0000D8, "Member 'FTngAnimNode_JointChainPhysics::ExcludeJoints' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, bFixEndJoint) == 0x0000E8, "Member 'FTngAnimNode_JointChainPhysics::bFixEndJoint' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, DummyBoneLength) == 0x0000EC, "Member 'FTngAnimNode_JointChainPhysics::DummyBoneLength' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, SimulationSpace) == 0x0000F0, "Member 'FTngAnimNode_JointChainPhysics::SimulationSpace' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, BaseJoint) == 0x0000F4, "Member 'FTngAnimNode_JointChainPhysics::BaseJoint' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, PhysicsParams) == 0x000104, "Member 'FTngAnimNode_JointChainPhysics::PhysicsParams' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, DampingCurve) == 0x000118, "Member 'FTngAnimNode_JointChainPhysics::DampingCurve' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, WorldDampingLocationCurve) == 0x000120, "Member 'FTngAnimNode_JointChainPhysics::WorldDampingLocationCurve' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, WorldDampingRotationCurve) == 0x000128, "Member 'FTngAnimNode_JointChainPhysics::WorldDampingRotationCurve' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, StiffnessCurve) == 0x000130, "Member 'FTngAnimNode_JointChainPhysics::StiffnessCurve' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, BaseFrameRate) == 0x000138, "Member 'FTngAnimNode_JointChainPhysics::BaseFrameRate' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, NumIteration) == 0x00013C, "Member 'FTngAnimNode_JointChainPhysics::NumIteration' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, JointSphereRadius) == 0x000140, "Member 'FTngAnimNode_JointChainPhysics::JointSphereRadius' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, JointSphereRadiusCurve) == 0x000148, "Member 'FTngAnimNode_JointChainPhysics::JointSphereRadiusCurve' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, ConeConstraintAngle) == 0x000150, "Member 'FTngAnimNode_JointChainPhysics::ConeConstraintAngle' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, ConeConstraintAngleCurve) == 0x000158, "Member 'FTngAnimNode_JointChainPhysics::ConeConstraintAngleCurve' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, PlaneConstraintAxis) == 0x000160, "Member 'FTngAnimNode_JointChainPhysics::PlaneConstraintAxis' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, SphereColliders) == 0x000168, "Member 'FTngAnimNode_JointChainPhysics::SphereColliders' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, CapsuleColliders) == 0x000178, "Member 'FTngAnimNode_JointChainPhysics::CapsuleColliders' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, PlaneColliders) == 0x000188, "Member 'FTngAnimNode_JointChainPhysics::PlaneColliders' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, Gravity) == 0x000198, "Member 'FTngAnimNode_JointChainPhysics::Gravity' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, TeleportDistanceThreshold) == 0x0001A4, "Member 'FTngAnimNode_JointChainPhysics::TeleportDistanceThreshold' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, TeleportRotationThreshold) == 0x0001A8, "Member 'FTngAnimNode_JointChainPhysics::TeleportRotationThreshold' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, WindScale) == 0x0001AC, "Member 'FTngAnimNode_JointChainPhysics::WindScale' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, bOverrideWind) == 0x0001B0, "Member 'FTngAnimNode_JointChainPhysics::bOverrideWind' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_JointChainPhysics, OverrideWindVelocity) == 0x0001B4, "Member 'FTngAnimNode_JointChainPhysics::OverrideWindVelocity' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngQuadrupedFootIKDefinition
// 0x0024 (0x0024 - 0x0000)
struct FTngQuadrupedFootIKDefinition final
{
public:
	struct FBoneReference                         FootBone;                                          // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NumBonesInLimb;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootBoneHeight;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRotationAngle;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         FootBoneForwardAxis;                               // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         HingeRotationAxis;                                 // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRotationLimit;                              // 0x001E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableKneeTwistCorrection;                        // 0x001F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootSoleHeight;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngQuadrupedFootIKDefinition) == 0x000004, "Wrong alignment on FTngQuadrupedFootIKDefinition");
static_assert(sizeof(FTngQuadrupedFootIKDefinition) == 0x000024, "Wrong size on FTngQuadrupedFootIKDefinition");
static_assert(offsetof(FTngQuadrupedFootIKDefinition, FootBone) == 0x000000, "Member 'FTngQuadrupedFootIKDefinition::FootBone' has a wrong offset!");
static_assert(offsetof(FTngQuadrupedFootIKDefinition, NumBonesInLimb) == 0x000010, "Member 'FTngQuadrupedFootIKDefinition::NumBonesInLimb' has a wrong offset!");
static_assert(offsetof(FTngQuadrupedFootIKDefinition, FootBoneHeight) == 0x000014, "Member 'FTngQuadrupedFootIKDefinition::FootBoneHeight' has a wrong offset!");
static_assert(offsetof(FTngQuadrupedFootIKDefinition, MinRotationAngle) == 0x000018, "Member 'FTngQuadrupedFootIKDefinition::MinRotationAngle' has a wrong offset!");
static_assert(offsetof(FTngQuadrupedFootIKDefinition, FootBoneForwardAxis) == 0x00001C, "Member 'FTngQuadrupedFootIKDefinition::FootBoneForwardAxis' has a wrong offset!");
static_assert(offsetof(FTngQuadrupedFootIKDefinition, HingeRotationAxis) == 0x00001D, "Member 'FTngQuadrupedFootIKDefinition::HingeRotationAxis' has a wrong offset!");
static_assert(offsetof(FTngQuadrupedFootIKDefinition, bEnableRotationLimit) == 0x00001E, "Member 'FTngQuadrupedFootIKDefinition::bEnableRotationLimit' has a wrong offset!");
static_assert(offsetof(FTngQuadrupedFootIKDefinition, bEnableKneeTwistCorrection) == 0x00001F, "Member 'FTngQuadrupedFootIKDefinition::bEnableKneeTwistCorrection' has a wrong offset!");
static_assert(offsetof(FTngQuadrupedFootIKDefinition, FootSoleHeight) == 0x000020, "Member 'FTngQuadrupedFootIKDefinition::FootSoleHeight' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngAnimNode_QuadrupedFootIK
// 0x0428 (0x04F0 - 0x00C8)
struct alignas(0x10) FTngAnimNode_QuadrupedFootIK final : public FAnimNode_SkeletalControlBase
{
public:
	bool                                          bEnableDrawCollisionQuery;                         // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReachPrecision;                                    // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterations;                                     // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTngQuadrupedFootIKDefinition          LeftBackLegSetting;                                // 0x00D4(0x0024)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FTngQuadrupedFootIKDefinition          RightBackLegSetting;                               // 0x00F8(0x0024)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FTngQuadrupedFootIKDefinition          LeftFrontLegSetting;                               // 0x011C(0x0024)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FTngQuadrupedFootIKDefinition          RightFrontLegSetting;                              // 0x0140(0x0024)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         PelvisJoint;                                       // 0x0164(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PelvisForward_UpslopeMultiplier;                   // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisForward_DownslopeMultiplier;                 // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisUp_UpslopeMultiplier;                        // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisUp_DownslopeMultiplier;                      // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisRot_UpslopeMultiplier;                       // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisRot_DownslopeMultiplier;                     // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStretchRatio;                                   // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableTailIK;                                     // 0x0190(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         TailRootJoint;                                     // 0x0194(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableSmoothing;                                  // 0x01A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A5[0x3];                                      // 0x01A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PelvisScapulaZ_InterpSpeed;                        // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootZ_InterpSpeed;                                 // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeleportVelocityZ_Threshold;                       // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootMaxRotVelocity;                                // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TailRootMaxRotVelocity;                            // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x01C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x01D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         NormalDotThreshold;                                // 0x01E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceStartOffset;                                  // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceEndOffset;                                    // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC[0x304];                                    // 0x01EC(0x0304)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngAnimNode_QuadrupedFootIK) == 0x000010, "Wrong alignment on FTngAnimNode_QuadrupedFootIK");
static_assert(sizeof(FTngAnimNode_QuadrupedFootIK) == 0x0004F0, "Wrong size on FTngAnimNode_QuadrupedFootIK");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, bEnableDrawCollisionQuery) == 0x0000C8, "Member 'FTngAnimNode_QuadrupedFootIK::bEnableDrawCollisionQuery' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, ReachPrecision) == 0x0000CC, "Member 'FTngAnimNode_QuadrupedFootIK::ReachPrecision' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, MaxIterations) == 0x0000D0, "Member 'FTngAnimNode_QuadrupedFootIK::MaxIterations' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, LeftBackLegSetting) == 0x0000D4, "Member 'FTngAnimNode_QuadrupedFootIK::LeftBackLegSetting' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, RightBackLegSetting) == 0x0000F8, "Member 'FTngAnimNode_QuadrupedFootIK::RightBackLegSetting' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, LeftFrontLegSetting) == 0x00011C, "Member 'FTngAnimNode_QuadrupedFootIK::LeftFrontLegSetting' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, RightFrontLegSetting) == 0x000140, "Member 'FTngAnimNode_QuadrupedFootIK::RightFrontLegSetting' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, PelvisJoint) == 0x000164, "Member 'FTngAnimNode_QuadrupedFootIK::PelvisJoint' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, PelvisForward_UpslopeMultiplier) == 0x000174, "Member 'FTngAnimNode_QuadrupedFootIK::PelvisForward_UpslopeMultiplier' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, PelvisForward_DownslopeMultiplier) == 0x000178, "Member 'FTngAnimNode_QuadrupedFootIK::PelvisForward_DownslopeMultiplier' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, PelvisUp_UpslopeMultiplier) == 0x00017C, "Member 'FTngAnimNode_QuadrupedFootIK::PelvisUp_UpslopeMultiplier' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, PelvisUp_DownslopeMultiplier) == 0x000180, "Member 'FTngAnimNode_QuadrupedFootIK::PelvisUp_DownslopeMultiplier' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, PelvisRot_UpslopeMultiplier) == 0x000184, "Member 'FTngAnimNode_QuadrupedFootIK::PelvisRot_UpslopeMultiplier' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, PelvisRot_DownslopeMultiplier) == 0x000188, "Member 'FTngAnimNode_QuadrupedFootIK::PelvisRot_DownslopeMultiplier' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, MaxStretchRatio) == 0x00018C, "Member 'FTngAnimNode_QuadrupedFootIK::MaxStretchRatio' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, bEnableTailIK) == 0x000190, "Member 'FTngAnimNode_QuadrupedFootIK::bEnableTailIK' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, TailRootJoint) == 0x000194, "Member 'FTngAnimNode_QuadrupedFootIK::TailRootJoint' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, bEnableSmoothing) == 0x0001A4, "Member 'FTngAnimNode_QuadrupedFootIK::bEnableSmoothing' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, PelvisScapulaZ_InterpSpeed) == 0x0001A8, "Member 'FTngAnimNode_QuadrupedFootIK::PelvisScapulaZ_InterpSpeed' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, FootZ_InterpSpeed) == 0x0001AC, "Member 'FTngAnimNode_QuadrupedFootIK::FootZ_InterpSpeed' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, TeleportVelocityZ_Threshold) == 0x0001B0, "Member 'FTngAnimNode_QuadrupedFootIK::TeleportVelocityZ_Threshold' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, FootMaxRotVelocity) == 0x0001B4, "Member 'FTngAnimNode_QuadrupedFootIK::FootMaxRotVelocity' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, TailRootMaxRotVelocity) == 0x0001B8, "Member 'FTngAnimNode_QuadrupedFootIK::TailRootMaxRotVelocity' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, ObjectTypes) == 0x0001C0, "Member 'FTngAnimNode_QuadrupedFootIK::ObjectTypes' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, ActorsToIgnore) == 0x0001D0, "Member 'FTngAnimNode_QuadrupedFootIK::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, NormalDotThreshold) == 0x0001E0, "Member 'FTngAnimNode_QuadrupedFootIK::NormalDotThreshold' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, TraceStartOffset) == 0x0001E4, "Member 'FTngAnimNode_QuadrupedFootIK::TraceStartOffset' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_QuadrupedFootIK, TraceEndOffset) == 0x0001E8, "Member 'FTngAnimNode_QuadrupedFootIK::TraceEndOffset' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngAnimNode_SkeletalControlLocalBase
// 0x00B8 (0x00C8 - 0x0010)
struct FTngAnimNode_SkeletalControlLocalBase : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActualAlpha;                                       // 0x0024(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimAlphaInputType                           AlphaInputType;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlphaBoolEnabled;                                 // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Alpha;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputAlphaBoolBlend                   AlphaBoolBlend;                                    // 0x0038(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   AlphaCurveName;                                    // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBiasClamp                   AlphaScaleBiasClamp;                               // 0x0088(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x10];                                      // 0x00B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngAnimNode_SkeletalControlLocalBase) == 0x000008, "Wrong alignment on FTngAnimNode_SkeletalControlLocalBase");
static_assert(sizeof(FTngAnimNode_SkeletalControlLocalBase) == 0x0000C8, "Wrong size on FTngAnimNode_SkeletalControlLocalBase");
static_assert(offsetof(FTngAnimNode_SkeletalControlLocalBase, Source) == 0x000010, "Member 'FTngAnimNode_SkeletalControlLocalBase::Source' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SkeletalControlLocalBase, LODThreshold) == 0x000020, "Member 'FTngAnimNode_SkeletalControlLocalBase::LODThreshold' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SkeletalControlLocalBase, ActualAlpha) == 0x000024, "Member 'FTngAnimNode_SkeletalControlLocalBase::ActualAlpha' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SkeletalControlLocalBase, AlphaInputType) == 0x000028, "Member 'FTngAnimNode_SkeletalControlLocalBase::AlphaInputType' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SkeletalControlLocalBase, bAlphaBoolEnabled) == 0x000029, "Member 'FTngAnimNode_SkeletalControlLocalBase::bAlphaBoolEnabled' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SkeletalControlLocalBase, Alpha) == 0x00002C, "Member 'FTngAnimNode_SkeletalControlLocalBase::Alpha' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SkeletalControlLocalBase, AlphaScaleBias) == 0x000030, "Member 'FTngAnimNode_SkeletalControlLocalBase::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SkeletalControlLocalBase, AlphaBoolBlend) == 0x000038, "Member 'FTngAnimNode_SkeletalControlLocalBase::AlphaBoolBlend' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SkeletalControlLocalBase, AlphaCurveName) == 0x000080, "Member 'FTngAnimNode_SkeletalControlLocalBase::AlphaCurveName' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SkeletalControlLocalBase, AlphaScaleBiasClamp) == 0x000088, "Member 'FTngAnimNode_SkeletalControlLocalBase::AlphaScaleBiasClamp' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngAnimNode_Retarget
// 0x0078 (0x0140 - 0x00C8)
struct FTngAnimNode_Retarget final : public FTngAnimNode_SkeletalControlLocalBase
{
public:
	class USkeletalMesh*                          ReferencePoseMesh;                                 // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RetargetRootJoint;                                 // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawInputPose;                                    // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawOutputPose;                                   // 0x00D9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x66];                                      // 0x00DA(0x0066)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngAnimNode_Retarget) == 0x000008, "Wrong alignment on FTngAnimNode_Retarget");
static_assert(sizeof(FTngAnimNode_Retarget) == 0x000140, "Wrong size on FTngAnimNode_Retarget");
static_assert(offsetof(FTngAnimNode_Retarget, ReferencePoseMesh) == 0x0000C8, "Member 'FTngAnimNode_Retarget::ReferencePoseMesh' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_Retarget, RetargetRootJoint) == 0x0000D0, "Member 'FTngAnimNode_Retarget::RetargetRootJoint' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_Retarget, bDrawInputPose) == 0x0000D8, "Member 'FTngAnimNode_Retarget::bDrawInputPose' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_Retarget, bDrawOutputPose) == 0x0000D9, "Member 'FTngAnimNode_Retarget::bDrawOutputPose' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngAnimNode_SelectedBoneBlend
// 0x00A0 (0x00B0 - 0x0010)
struct FTngAnimNode_SelectedBoneBlend final : public FAnimNode_Base
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              BlendPose;                                         // 0x0020(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 Bones;                                             // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         BlendWeight;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMeshSpaceRotationBlend;                           // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMeshSpaceScaleBlend;                              // 0x0045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECurveBlendOption                             CurveBlendOption;                                  // 0x0046(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlendRootMotionBasedOnRootBone;                   // 0x0047(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x4];                                       // 0x0048(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LODThreshold;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPerBoneBlendWeight>            PerBoneBlendWeights;                               // 0x0050(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FGuid                                  SkeletonGuid;                                      // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  VirtualBoneGuid;                                   // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_80[0x30];                                      // 0x0080(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngAnimNode_SelectedBoneBlend) == 0x000008, "Wrong alignment on FTngAnimNode_SelectedBoneBlend");
static_assert(sizeof(FTngAnimNode_SelectedBoneBlend) == 0x0000B0, "Wrong size on FTngAnimNode_SelectedBoneBlend");
static_assert(offsetof(FTngAnimNode_SelectedBoneBlend, BasePose) == 0x000010, "Member 'FTngAnimNode_SelectedBoneBlend::BasePose' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SelectedBoneBlend, BlendPose) == 0x000020, "Member 'FTngAnimNode_SelectedBoneBlend::BlendPose' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SelectedBoneBlend, Bones) == 0x000030, "Member 'FTngAnimNode_SelectedBoneBlend::Bones' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SelectedBoneBlend, BlendWeight) == 0x000040, "Member 'FTngAnimNode_SelectedBoneBlend::BlendWeight' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SelectedBoneBlend, bMeshSpaceRotationBlend) == 0x000044, "Member 'FTngAnimNode_SelectedBoneBlend::bMeshSpaceRotationBlend' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SelectedBoneBlend, bMeshSpaceScaleBlend) == 0x000045, "Member 'FTngAnimNode_SelectedBoneBlend::bMeshSpaceScaleBlend' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SelectedBoneBlend, CurveBlendOption) == 0x000046, "Member 'FTngAnimNode_SelectedBoneBlend::CurveBlendOption' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SelectedBoneBlend, bBlendRootMotionBasedOnRootBone) == 0x000047, "Member 'FTngAnimNode_SelectedBoneBlend::bBlendRootMotionBasedOnRootBone' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SelectedBoneBlend, LODThreshold) == 0x00004C, "Member 'FTngAnimNode_SelectedBoneBlend::LODThreshold' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SelectedBoneBlend, PerBoneBlendWeights) == 0x000050, "Member 'FTngAnimNode_SelectedBoneBlend::PerBoneBlendWeights' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SelectedBoneBlend, SkeletonGuid) == 0x000060, "Member 'FTngAnimNode_SelectedBoneBlend::SkeletonGuid' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SelectedBoneBlend, VirtualBoneGuid) == 0x000070, "Member 'FTngAnimNode_SelectedBoneBlend::VirtualBoneGuid' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.SplineSpineCachedBoneData
// 0x0014 (0x0014 - 0x0000)
struct FSplineSpineCachedBoneData final
{
public:
	struct FBoneReference                         Bone;                                              // 0x0000(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         RefSkeletonIndex;                                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSplineSpineCachedBoneData) == 0x000004, "Wrong alignment on FSplineSpineCachedBoneData");
static_assert(sizeof(FSplineSpineCachedBoneData) == 0x000014, "Wrong size on FSplineSpineCachedBoneData");
static_assert(offsetof(FSplineSpineCachedBoneData, Bone) == 0x000000, "Member 'FSplineSpineCachedBoneData::Bone' has a wrong offset!");
static_assert(offsetof(FSplineSpineCachedBoneData, RefSkeletonIndex) == 0x000010, "Member 'FSplineSpineCachedBoneData::RefSkeletonIndex' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngAnimNode_SplineSpine
// 0x00F8 (0x01C0 - 0x00C8)
struct FTngAnimNode_SplineSpine final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         StartBone;                                         // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         EndBone;                                           // 0x00D8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EAxis                                         BoneAxis;                                          // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       SplineComponent;                                   // 0x00F0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSplineSpineCachedBoneData>     CachedBoneReferences;                              // 0x00F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 CachedBoneLengths;                                 // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FQuat>                          CachedOffsetRotations;                             // 0x0118(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FTransform>                     ControlPoints;                                     // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FSplineCurves                          BoneSpline;                                        // 0x0138(0x0070)(NativeAccessSpecifierPrivate)
	float                                         OriginalSplineLength;                              // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1AC[0x14];                                     // 0x01AC(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngAnimNode_SplineSpine) == 0x000008, "Wrong alignment on FTngAnimNode_SplineSpine");
static_assert(sizeof(FTngAnimNode_SplineSpine) == 0x0001C0, "Wrong size on FTngAnimNode_SplineSpine");
static_assert(offsetof(FTngAnimNode_SplineSpine, StartBone) == 0x0000C8, "Member 'FTngAnimNode_SplineSpine::StartBone' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SplineSpine, EndBone) == 0x0000D8, "Member 'FTngAnimNode_SplineSpine::EndBone' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SplineSpine, BoneAxis) == 0x0000E8, "Member 'FTngAnimNode_SplineSpine::BoneAxis' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SplineSpine, SplineComponent) == 0x0000F0, "Member 'FTngAnimNode_SplineSpine::SplineComponent' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SplineSpine, CachedBoneReferences) == 0x0000F8, "Member 'FTngAnimNode_SplineSpine::CachedBoneReferences' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SplineSpine, CachedBoneLengths) == 0x000108, "Member 'FTngAnimNode_SplineSpine::CachedBoneLengths' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SplineSpine, CachedOffsetRotations) == 0x000118, "Member 'FTngAnimNode_SplineSpine::CachedOffsetRotations' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SplineSpine, ControlPoints) == 0x000128, "Member 'FTngAnimNode_SplineSpine::ControlPoints' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SplineSpine, BoneSpline) == 0x000138, "Member 'FTngAnimNode_SplineSpine::BoneSpline' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SplineSpine, OriginalSplineLength) == 0x0001A8, "Member 'FTngAnimNode_SplineSpine::OriginalSplineLength' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngAnimNode_TwoBoneFootIK
// 0x0138 (0x0200 - 0x00C8)
struct FTngAnimNode_TwoBoneFootIK final : public FAnimNode_SkeletalControlBase
{
public:
	bool                                          bEnableAdjustShapeMode;                            // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDrawCollisionShape;                         // 0x00C9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDrawCollisionQuery;                         // 0x00CA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB[0x1];                                       // 0x00CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         LeftFootJoint;                                     // 0x00CC(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightFootJoint;                                    // 0x00DC(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         PelvisJoint;                                       // 0x00EC(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PelvisZ_LowFootAlpha;                              // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisZ_UpslopeMultiplier;                         // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisZ_DownslopeMultiplier;                       // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHipToFootLengthRatio;                           // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngTwoBoneAxis                               LeftKneeForwardAxis;                               // 0x010C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngTwoBoneAxis                               RightKneeForwardAxis;                              // 0x010D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E[0x2];                                      // 0x010E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeftSoleZ;                                         // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightSoleZ;                                        // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSmoothing;                                  // 0x0118(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootMaxVelocityZ;                                  // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisMaxVelocityZ;                                // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootZ_InterpSpeed;                                 // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisZ_InterpSpeed;                               // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeleportVelocityZ_Threshold;                       // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootMaxRotVelocity;                                // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplexOnly;                                 // 0x0134(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0138(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	ETngTwoBoneFootIKQueryShape                   Shape;                                             // 0x0148(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LeftHalfExtent;                                    // 0x014C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftOffsetZ;                                       // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngTwoBoneAxis                               LeftOffsetX_Axis;                                  // 0x015C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              LeftOffsetXY;                                      // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightHalfExtent;                                   // 0x0168(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightOffsetZ;                                      // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngTwoBoneAxis                               RightOffsetX_Axis;                                 // 0x0178(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              RightOffsetXY;                                     // 0x017C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceStartOffset;                                  // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceEndOffset;                                    // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         NormalDotThreshold;                                // 0x01A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceMaxXY_Radius;                                 // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8[0x50];                                     // 0x01A8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterMovementComponent*            MovementComponent;                                 // 0x01F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTngAnimNode_TwoBoneFootIK) == 0x000008, "Wrong alignment on FTngAnimNode_TwoBoneFootIK");
static_assert(sizeof(FTngAnimNode_TwoBoneFootIK) == 0x000200, "Wrong size on FTngAnimNode_TwoBoneFootIK");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, bEnableAdjustShapeMode) == 0x0000C8, "Member 'FTngAnimNode_TwoBoneFootIK::bEnableAdjustShapeMode' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, bEnableDrawCollisionShape) == 0x0000C9, "Member 'FTngAnimNode_TwoBoneFootIK::bEnableDrawCollisionShape' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, bEnableDrawCollisionQuery) == 0x0000CA, "Member 'FTngAnimNode_TwoBoneFootIK::bEnableDrawCollisionQuery' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, LeftFootJoint) == 0x0000CC, "Member 'FTngAnimNode_TwoBoneFootIK::LeftFootJoint' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, RightFootJoint) == 0x0000DC, "Member 'FTngAnimNode_TwoBoneFootIK::RightFootJoint' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, PelvisJoint) == 0x0000EC, "Member 'FTngAnimNode_TwoBoneFootIK::PelvisJoint' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, PelvisZ_LowFootAlpha) == 0x0000FC, "Member 'FTngAnimNode_TwoBoneFootIK::PelvisZ_LowFootAlpha' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, PelvisZ_UpslopeMultiplier) == 0x000100, "Member 'FTngAnimNode_TwoBoneFootIK::PelvisZ_UpslopeMultiplier' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, PelvisZ_DownslopeMultiplier) == 0x000104, "Member 'FTngAnimNode_TwoBoneFootIK::PelvisZ_DownslopeMultiplier' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, MaxHipToFootLengthRatio) == 0x000108, "Member 'FTngAnimNode_TwoBoneFootIK::MaxHipToFootLengthRatio' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, LeftKneeForwardAxis) == 0x00010C, "Member 'FTngAnimNode_TwoBoneFootIK::LeftKneeForwardAxis' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, RightKneeForwardAxis) == 0x00010D, "Member 'FTngAnimNode_TwoBoneFootIK::RightKneeForwardAxis' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, LeftSoleZ) == 0x000110, "Member 'FTngAnimNode_TwoBoneFootIK::LeftSoleZ' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, RightSoleZ) == 0x000114, "Member 'FTngAnimNode_TwoBoneFootIK::RightSoleZ' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, bEnableSmoothing) == 0x000118, "Member 'FTngAnimNode_TwoBoneFootIK::bEnableSmoothing' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, FootMaxVelocityZ) == 0x00011C, "Member 'FTngAnimNode_TwoBoneFootIK::FootMaxVelocityZ' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, PelvisMaxVelocityZ) == 0x000120, "Member 'FTngAnimNode_TwoBoneFootIK::PelvisMaxVelocityZ' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, FootZ_InterpSpeed) == 0x000124, "Member 'FTngAnimNode_TwoBoneFootIK::FootZ_InterpSpeed' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, PelvisZ_InterpSpeed) == 0x000128, "Member 'FTngAnimNode_TwoBoneFootIK::PelvisZ_InterpSpeed' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, TeleportVelocityZ_Threshold) == 0x00012C, "Member 'FTngAnimNode_TwoBoneFootIK::TeleportVelocityZ_Threshold' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, FootMaxRotVelocity) == 0x000130, "Member 'FTngAnimNode_TwoBoneFootIK::FootMaxRotVelocity' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, bTraceComplexOnly) == 0x000134, "Member 'FTngAnimNode_TwoBoneFootIK::bTraceComplexOnly' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, ObjectTypes) == 0x000138, "Member 'FTngAnimNode_TwoBoneFootIK::ObjectTypes' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, Shape) == 0x000148, "Member 'FTngAnimNode_TwoBoneFootIK::Shape' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, LeftHalfExtent) == 0x00014C, "Member 'FTngAnimNode_TwoBoneFootIK::LeftHalfExtent' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, LeftOffsetZ) == 0x000158, "Member 'FTngAnimNode_TwoBoneFootIK::LeftOffsetZ' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, LeftOffsetX_Axis) == 0x00015C, "Member 'FTngAnimNode_TwoBoneFootIK::LeftOffsetX_Axis' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, LeftOffsetXY) == 0x000160, "Member 'FTngAnimNode_TwoBoneFootIK::LeftOffsetXY' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, RightHalfExtent) == 0x000168, "Member 'FTngAnimNode_TwoBoneFootIK::RightHalfExtent' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, RightOffsetZ) == 0x000174, "Member 'FTngAnimNode_TwoBoneFootIK::RightOffsetZ' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, RightOffsetX_Axis) == 0x000178, "Member 'FTngAnimNode_TwoBoneFootIK::RightOffsetX_Axis' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, RightOffsetXY) == 0x00017C, "Member 'FTngAnimNode_TwoBoneFootIK::RightOffsetXY' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, TraceStartOffset) == 0x000184, "Member 'FTngAnimNode_TwoBoneFootIK::TraceStartOffset' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, TraceEndOffset) == 0x000188, "Member 'FTngAnimNode_TwoBoneFootIK::TraceEndOffset' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, ActorsToIgnore) == 0x000190, "Member 'FTngAnimNode_TwoBoneFootIK::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, NormalDotThreshold) == 0x0001A0, "Member 'FTngAnimNode_TwoBoneFootIK::NormalDotThreshold' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, TraceMaxXY_Radius) == 0x0001A4, "Member 'FTngAnimNode_TwoBoneFootIK::TraceMaxXY_Radius' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneFootIK, MovementComponent) == 0x0001F8, "Member 'FTngAnimNode_TwoBoneFootIK::MovementComponent' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngAnimNode_SpringsController
// 0x00F0 (0x01B8 - 0x00C8)
struct FTngAnimNode_SpringsController final : public FTngAnimNode_SkeletalControlLocalBase
{
public:
	struct FBoneReference                         Bone;                                              // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ETngAnimSpringType                            Type;                                              // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TranslationStiffnessPositive;                      // 0x00DC(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TranslationStiffnessNegative;                      // 0x00E8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TranslationDamping;                                // 0x00F4(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TranslationTransResultScale;                       // 0x0100(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TranslationRotResultScale;                         // 0x010C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ChildTransToRotStiffnessPositive;                  // 0x0118(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ChildTransToRotStiffnessNegative;                  // 0x0124(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ChildTransToRotDamping;                            // 0x0130(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ChildTransToRotResultScale;                        // 0x013C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotationStiffnessPositive;                         // 0x0148(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotationStiffnessNegative;                         // 0x0154(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotationDamping;                                   // 0x0160(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRotationSpringRotateXResult;                   // 0x016C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRotationSpringRotateYResult;                   // 0x016D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRotationSpringRotateZResult;                   // 0x016E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16F[0x49];                                     // 0x016F(0x0049)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngAnimNode_SpringsController) == 0x000008, "Wrong alignment on FTngAnimNode_SpringsController");
static_assert(sizeof(FTngAnimNode_SpringsController) == 0x0001B8, "Wrong size on FTngAnimNode_SpringsController");
static_assert(offsetof(FTngAnimNode_SpringsController, Bone) == 0x0000C8, "Member 'FTngAnimNode_SpringsController::Bone' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SpringsController, Type) == 0x0000D8, "Member 'FTngAnimNode_SpringsController::Type' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SpringsController, TranslationStiffnessPositive) == 0x0000DC, "Member 'FTngAnimNode_SpringsController::TranslationStiffnessPositive' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SpringsController, TranslationStiffnessNegative) == 0x0000E8, "Member 'FTngAnimNode_SpringsController::TranslationStiffnessNegative' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SpringsController, TranslationDamping) == 0x0000F4, "Member 'FTngAnimNode_SpringsController::TranslationDamping' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SpringsController, TranslationTransResultScale) == 0x000100, "Member 'FTngAnimNode_SpringsController::TranslationTransResultScale' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SpringsController, TranslationRotResultScale) == 0x00010C, "Member 'FTngAnimNode_SpringsController::TranslationRotResultScale' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SpringsController, ChildTransToRotStiffnessPositive) == 0x000118, "Member 'FTngAnimNode_SpringsController::ChildTransToRotStiffnessPositive' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SpringsController, ChildTransToRotStiffnessNegative) == 0x000124, "Member 'FTngAnimNode_SpringsController::ChildTransToRotStiffnessNegative' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SpringsController, ChildTransToRotDamping) == 0x000130, "Member 'FTngAnimNode_SpringsController::ChildTransToRotDamping' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SpringsController, ChildTransToRotResultScale) == 0x00013C, "Member 'FTngAnimNode_SpringsController::ChildTransToRotResultScale' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SpringsController, RotationStiffnessPositive) == 0x000148, "Member 'FTngAnimNode_SpringsController::RotationStiffnessPositive' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SpringsController, RotationStiffnessNegative) == 0x000154, "Member 'FTngAnimNode_SpringsController::RotationStiffnessNegative' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SpringsController, RotationDamping) == 0x000160, "Member 'FTngAnimNode_SpringsController::RotationDamping' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SpringsController, bUseRotationSpringRotateXResult) == 0x00016C, "Member 'FTngAnimNode_SpringsController::bUseRotationSpringRotateXResult' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SpringsController, bUseRotationSpringRotateYResult) == 0x00016D, "Member 'FTngAnimNode_SpringsController::bUseRotationSpringRotateYResult' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_SpringsController, bUseRotationSpringRotateZResult) == 0x00016E, "Member 'FTngAnimNode_SpringsController::bUseRotationSpringRotateZResult' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngAnimNode_TailAnimatorLerp
// 0x0050 (0x0118 - 0x00C8)
struct FTngAnimNode_TailAnimatorLerp final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         RootJoint;                                         // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         EndJoint;                                          // 0x00D8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DelayAlpha;                                        // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x2C];                                      // 0x00EC(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngAnimNode_TailAnimatorLerp) == 0x000008, "Wrong alignment on FTngAnimNode_TailAnimatorLerp");
static_assert(sizeof(FTngAnimNode_TailAnimatorLerp) == 0x000118, "Wrong size on FTngAnimNode_TailAnimatorLerp");
static_assert(offsetof(FTngAnimNode_TailAnimatorLerp, RootJoint) == 0x0000C8, "Member 'FTngAnimNode_TailAnimatorLerp::RootJoint' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TailAnimatorLerp, EndJoint) == 0x0000D8, "Member 'FTngAnimNode_TailAnimatorLerp::EndJoint' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TailAnimatorLerp, DelayAlpha) == 0x0000E8, "Member 'FTngAnimNode_TailAnimatorLerp::DelayAlpha' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngAnimNode_TailAnimatorSpring
// 0x0080 (0x0148 - 0x00C8)
struct FTngAnimNode_TailAnimatorSpring final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         RootJoint;                                         // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         EndJoint;                                          // 0x00D8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ETngAnimTailAnimatorSpringSimulationMode      SimulationMode;                                    // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStretch;                                          // 0x00E9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x2];                                       // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConeAngle;                                         // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayAlpha;                                        // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumIteration;                                      // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damping;                                           // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawInputPose;                                    // 0x0100(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawTailAnimatorDelayed;                          // 0x0101(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawPBDintegration;                               // 0x0102(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_103[0x45];                                     // 0x0103(0x0045)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngAnimNode_TailAnimatorSpring) == 0x000008, "Wrong alignment on FTngAnimNode_TailAnimatorSpring");
static_assert(sizeof(FTngAnimNode_TailAnimatorSpring) == 0x000148, "Wrong size on FTngAnimNode_TailAnimatorSpring");
static_assert(offsetof(FTngAnimNode_TailAnimatorSpring, RootJoint) == 0x0000C8, "Member 'FTngAnimNode_TailAnimatorSpring::RootJoint' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TailAnimatorSpring, EndJoint) == 0x0000D8, "Member 'FTngAnimNode_TailAnimatorSpring::EndJoint' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TailAnimatorSpring, SimulationMode) == 0x0000E8, "Member 'FTngAnimNode_TailAnimatorSpring::SimulationMode' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TailAnimatorSpring, bStretch) == 0x0000E9, "Member 'FTngAnimNode_TailAnimatorSpring::bStretch' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TailAnimatorSpring, ConeAngle) == 0x0000EC, "Member 'FTngAnimNode_TailAnimatorSpring::ConeAngle' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TailAnimatorSpring, DelayAlpha) == 0x0000F0, "Member 'FTngAnimNode_TailAnimatorSpring::DelayAlpha' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TailAnimatorSpring, NumIteration) == 0x0000F4, "Member 'FTngAnimNode_TailAnimatorSpring::NumIteration' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TailAnimatorSpring, Stiffness) == 0x0000F8, "Member 'FTngAnimNode_TailAnimatorSpring::Stiffness' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TailAnimatorSpring, Damping) == 0x0000FC, "Member 'FTngAnimNode_TailAnimatorSpring::Damping' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TailAnimatorSpring, bDrawInputPose) == 0x000100, "Member 'FTngAnimNode_TailAnimatorSpring::bDrawInputPose' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TailAnimatorSpring, bDrawTailAnimatorDelayed) == 0x000101, "Member 'FTngAnimNode_TailAnimatorSpring::bDrawTailAnimatorDelayed' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TailAnimatorSpring, bDrawPBDintegration) == 0x000102, "Member 'FTngAnimNode_TailAnimatorSpring::bDrawPBDintegration' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngAnimTailSetting
// 0x0040 (0x0040 - 0x0000)
struct FTngAnimTailSetting final
{
public:
	struct FBoneReference                         Bone;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                StiffnessPositive;                                 // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StiffnessNegative;                                 // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Damping;                                           // 0x0028(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0034(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngAnimTailSetting) == 0x000004, "Wrong alignment on FTngAnimTailSetting");
static_assert(sizeof(FTngAnimTailSetting) == 0x000040, "Wrong size on FTngAnimTailSetting");
static_assert(offsetof(FTngAnimTailSetting, Bone) == 0x000000, "Member 'FTngAnimTailSetting::Bone' has a wrong offset!");
static_assert(offsetof(FTngAnimTailSetting, StiffnessPositive) == 0x000010, "Member 'FTngAnimTailSetting::StiffnessPositive' has a wrong offset!");
static_assert(offsetof(FTngAnimTailSetting, StiffnessNegative) == 0x00001C, "Member 'FTngAnimTailSetting::StiffnessNegative' has a wrong offset!");
static_assert(offsetof(FTngAnimTailSetting, Damping) == 0x000028, "Member 'FTngAnimTailSetting::Damping' has a wrong offset!");
static_assert(offsetof(FTngAnimTailSetting, Scale) == 0x000034, "Member 'FTngAnimTailSetting::Scale' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngAnimNode_TailDirect
// 0x0038 (0x0100 - 0x00C8)
struct FTngAnimNode_TailDirect final : public FTngAnimNode_SkeletalControlLocalBase
{
public:
	TArray<struct FTngAnimTailSetting>            SpringSettings;                                    // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x28];                                      // 0x00D8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngAnimNode_TailDirect) == 0x000008, "Wrong alignment on FTngAnimNode_TailDirect");
static_assert(sizeof(FTngAnimNode_TailDirect) == 0x000100, "Wrong size on FTngAnimNode_TailDirect");
static_assert(offsetof(FTngAnimNode_TailDirect, SpringSettings) == 0x0000C8, "Member 'FTngAnimNode_TailDirect::SpringSettings' has a wrong offset!");

// ScriptStruct TangoAnimationRuntime.TngAnimNode_TwoBoneCollisionIK
// 0x0068 (0x0130 - 0x00C8)
struct FTngAnimNode_TwoBoneCollisionIK final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         IKBone;                                            // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bMaintainEffectorRelRot : 1;                       // 0x00E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowTwist : 1;                                   // 0x00E0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAxis                                  TwistAxis;                                         // 0x00E4(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bLimitTransOneFrame : 1;                           // 0x00F4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxTransOneFrame;                                  // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DurationFrame;                                     // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x0100(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereRadius;                                      // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceStartOffset;                                  // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceEndOffset;                                    // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableDebugDraw : 1;                              // 0x0110(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_111[0x1F];                                     // 0x0111(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngAnimNode_TwoBoneCollisionIK) == 0x000008, "Wrong alignment on FTngAnimNode_TwoBoneCollisionIK");
static_assert(sizeof(FTngAnimNode_TwoBoneCollisionIK) == 0x000130, "Wrong size on FTngAnimNode_TwoBoneCollisionIK");
static_assert(offsetof(FTngAnimNode_TwoBoneCollisionIK, IKBone) == 0x0000C8, "Member 'FTngAnimNode_TwoBoneCollisionIK::IKBone' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneCollisionIK, TwistAxis) == 0x0000E4, "Member 'FTngAnimNode_TwoBoneCollisionIK::TwistAxis' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneCollisionIK, MaxTransOneFrame) == 0x0000F8, "Member 'FTngAnimNode_TwoBoneCollisionIK::MaxTransOneFrame' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneCollisionIK, DurationFrame) == 0x0000FC, "Member 'FTngAnimNode_TwoBoneCollisionIK::DurationFrame' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneCollisionIK, CollisionChannel) == 0x000100, "Member 'FTngAnimNode_TwoBoneCollisionIK::CollisionChannel' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneCollisionIK, SphereRadius) == 0x000104, "Member 'FTngAnimNode_TwoBoneCollisionIK::SphereRadius' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneCollisionIK, TraceStartOffset) == 0x000108, "Member 'FTngAnimNode_TwoBoneCollisionIK::TraceStartOffset' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_TwoBoneCollisionIK, TraceEndOffset) == 0x00010C, "Member 'FTngAnimNode_TwoBoneCollisionIK::TraceEndOffset' has a wrong offset!");

}

