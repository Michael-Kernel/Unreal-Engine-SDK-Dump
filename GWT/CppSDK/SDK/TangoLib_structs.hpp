#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TangoLib

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum TangoLib.ETngExtraPlayState
// NumValues: 0x0004
enum class ETngExtraPlayState : uint8
{
	Stop                                     = 0,
	Play                                     = 1,
	Pause                                    = 2,
	ETngExtraPlayState_MAX                   = 3,
};

// Enum TangoLib.ETngVitalChangedReason
// NumValues: 0x0005
enum class ETngVitalChangedReason : uint8
{
	AnyOperation                             = 0,
	Reset                                    = 1,
	AutoRecovery                             = 2,
	TakeDamage                               = 3,
	ETngVitalChangedReason_MAX               = 4,
};

// Enum TangoLib.ETngBlockCheckShapeType
// NumValues: 0x0004
enum class ETngBlockCheckShapeType : uint8
{
	Box                                      = 0,
	Sphere                                   = 1,
	Capsule                                  = 2,
	ETngBlockCheckShapeType_MAX              = 3,
};

// Enum TangoLib.ETngPlayAnimTransit
// NumValues: 0x0004
enum class ETngPlayAnimTransit : uint8
{
	None                                     = 0,
	Instantly                                = 1,
	AnimEnd                                  = 2,
	ETngPlayAnimTransit_MAX                  = 3,
};

// Enum TangoLib.ETngCoopAnimState
// NumValues: 0x0005
enum class ETngCoopAnimState : uint8
{
	None                                     = 0,
	Begin                                    = 1,
	Playing                                  = 2,
	End                                      = 3,
	ETngCoopAnimState_MAX                    = 4,
};

// Enum TangoLib.ETngCoopAnimRole
// NumValues: 0x0004
enum class ETngCoopAnimRole : uint8
{
	None                                     = 0,
	AsMaster                                 = 1,
	AsSlave                                  = 2,
	ETngCoopAnimRole_MAX                     = 3,
};

// Enum TangoLib.ETngCoopAnimDataType
// NumValues: 0x0004
enum class ETngCoopAnimDataType : uint8
{
	None                                     = 0,
	AnimMontage                              = 1,
	AnimSequence                             = 2,
	ETngCoopAnimDataType_MAX                 = 3,
};

// Enum TangoLib.ETngAttackTraceType
// NumValues: 0x0004
enum class ETngAttackTraceType : uint8
{
	ATT_Sphere                               = 0,
	ATT_Capsule                              = 1,
	ATT_Box                                  = 2,
	ATT_MAX                                  = 3,
};

// Enum TangoLib.ETngBoundaryType
// NumValues: 0x0003
enum class ETngBoundaryType : uint8
{
	Radius                                   = 0,
	Box2D                                    = 1,
	ETngBoundaryType_MAX                     = 2,
};

// Enum TangoLib.ETngDriveInputJointAxis
// NumValues: 0x0008
enum class ETngDriveInputJointAxis : uint8
{
	DIJA_None                                = 0,
	DIJA_X                                   = 1,
	DIJA_Y                                   = 2,
	DIJA_Z                                   = 3,
	DIJA_NX                                  = 4,
	DIJA_NY                                  = 5,
	DIJA_NZ                                  = 6,
	DIJA_MAX                                 = 7,
};

// Enum TangoLib.ETngDriveInputAimMode
// NumValues: 0x0003
enum class ETngDriveInputAimMode : uint8
{
	Forward                                  = 0,
	Target                                   = 1,
	ETngDriveInputAimMode_MAX                = 2,
};

// Enum TangoLib.ETngDriveInputRotMode
// NumValues: 0x0004
enum class ETngDriveInputRotMode : uint8
{
	None                                     = 0,
	MatchInputDir                            = 1,
	MatchLockOn                              = 2,
	ETngDriveInputRotMode_MAX                = 3,
};

// Enum TangoLib.ETngApplyDamageType
// NumValues: 0x0004
enum class ETngApplyDamageType : uint8
{
	ADT_Point                                = 0,
	ADT_Radial                               = 1,
	ADT_Any                                  = 2,
	ADT_MAX                                  = 3,
};

// Enum TangoLib.ETngEquipVisibleCategory
// NumValues: 0x0006
enum class ETngEquipVisibleCategory : uint8
{
	Root                                     = 0,
	RightHand                                = 1,
	LeftHand                                 = 2,
	ReloadingHand                            = 3,
	Custom                                   = 4,
	ETngEquipVisibleCategory_MAX             = 5,
};

// Enum TangoLib.ETngEquipReloadableState
// NumValues: 0x0005
enum class ETngEquipReloadableState : uint8
{
	Unusable                                 = 0,
	Full                                     = 1,
	Enable                                   = 2,
	MustDo                                   = 3,
	ETngEquipReloadableState_MAX             = 4,
};

// Enum TangoLib.EFadeType
// NumValues: 0x0004
enum class EFadeType : uint8
{
	FADE_NONE                                = 0,
	FADE_IN                                  = 1,
	FADE_OUT                                 = 2,
	FADE_MAX                                 = 3,
};

// Enum TangoLib.ETngMathFuncCountState
// NumValues: 0x0006
enum class ETngMathFuncCountState : uint8
{
	AlreadyMin                               = 0,
	ArriveMin                                = 1,
	Progressing                              = 2,
	ArriveMax                                = 3,
	AlreadyMax                               = 4,
	ETngMathFuncCountState_MAX               = 5,
};

// Enum TangoLib.ETngMathFuncCountdownState
// NumValues: 0x0004
enum class ETngMathFuncCountdownState : uint8
{
	AlreadyZero                              = 0,
	Progressing                              = 1,
	Completed                                = 2,
	ETngMathFuncCountdownState_MAX           = 3,
};

// Enum TangoLib.ETngPlayerMetricsStatModifier
// NumValues: 0x0006
enum class ETngPlayerMetricsStatModifier : uint8
{
	Latest                                   = 0,
	Sum                                      = 1,
	Min                                      = 2,
	Max                                      = 3,
	BitAnd                                   = 4,
	BitOr                                    = 5,
};

// Enum TangoLib.ETngMetricsOnlineStatApplyType
// NumValues: 0x0003
enum class ETngMetricsOnlineStatApplyType : uint8
{
	CurrentGame                              = 0,
	Delta                                    = 1,
	ETngMetricsOnlineStatApplyType_MAX       = 2,
};

// Enum TangoLib.ETngMetricsOnlineStatValueType
// NumValues: 0x0005
enum class ETngMetricsOnlineStatValueType : uint8
{
	Int32                                    = 0,
	UInt32                                   = 1,
	Int64                                    = 2,
	UInt64                                   = 3,
	ETngMetricsOnlineStatValueType_MAX       = 4,
};

// Enum TangoLib.ETngAchievementPlatforms
// NumValues: 0x0007
enum class ETngAchievementPlatforms : uint8
{
	None                                     = 0,
	PS5                                      = 1,
	GDK                                      = 2,
	Steam                                    = 4,
	BNet                                     = 8,
	EOS                                      = 16,
	ETngAchievementPlatforms_MAX             = 17,
};

// Enum TangoLib.ETngAchievementCompareOperator
// NumValues: 0x0006
enum class ETngAchievementCompareOperator : uint8
{
	Equal                                    = 0,
	Less                                     = 1,
	LessOrEqual                              = 2,
	Greater                                  = 3,
	GreaterOrEqual                           = 4,
	Max                                      = 5,
};

// Enum TangoLib.ETngAchievementStatSection
// NumValues: 0x0003
enum class ETngAchievementStatSection : uint8
{
	Game                                     = 0,
	Profile                                  = 1,
	ETngAchievementStatSection_MAX           = 2,
};

// Enum TangoLib.ETngSplineFollowingBehavior
// NumValues: 0x0005
enum class ETngSplineFollowingBehavior : uint8
{
	OneShot                                  = 0,
	OneShot_Reverse                          = 1,
	Loop_Reset                               = 2,
	PingPong                                 = 3,
	ETngSplineFollowingBehavior_MAX          = 4,
};

// Enum TangoLib.ETngSplineMovementSteeringType
// NumValues: 0x0005
enum class ETngSplineMovementSteeringType : uint8
{
	None                                     = 0,
	MoveDir_2D                               = 1,
	MoveDir_3D                               = 2,
	SplineRotation                           = 3,
	ETngSplineMovementSteeringType_MAX       = 4,
};

// Enum TangoLib.ETngUserWidgetZOrder
// NumValues: 0x0007
enum class ETngUserWidgetZOrder : uint64
{
	Normal                                   = 0,
	BelowNormal                              = 18446744073709551566,
	AboveNormal                              = 50,
	Lowest                                   = 18446744073709551516,
	Highest                                  = 100,
	SlateFade                                = 9000,
	ETngUserWidgetZOrder_MAX                 = 9001,
};

// Enum TangoLib.ETngButtonDirection
// NumValues: 0x0006
enum class ETngButtonDirection : uint8
{
	None                                     = 0,
	Up                                       = 1,
	Down                                     = 2,
	Left                                     = 3,
	Right                                    = 4,
	ETngButtonDirection_MAX                  = 5,
};

// Enum TangoLib.ETngKeyState
// NumValues: 0x0006
enum class ETngKeyState : uint8
{
	None                                     = 0,
	Pressed                                  = 1,
	Press                                    = 2,
	Repeat                                   = 4,
	Release                                  = 8,
	ETngKeyState_MAX                         = 9,
};

// Enum TangoLib.ETngKeyAxisMap
// NumValues: 0x000B
enum class ETngKeyAxisMap : uint8
{
	LStickX                                  = 0,
	LStickY                                  = 1,
	RStickX                                  = 2,
	RStickY                                  = 3,
	TriggerL                                 = 4,
	TriggerR                                 = 5,
	RNoDeadZoneStickX                        = 6,
	RNoDeadZoneStickY                        = 7,
	LNoDeadZoneStickX                        = 8,
	LNoDeadZoneStickY                        = 9,
	Max                                      = 10,
};

// Enum TangoLib.ETngKeyButtonMap
// NumValues: 0x0020
enum class ETngKeyButtonMap : uint8
{
	Accept                                   = 0,
	Cancel                                   = 1,
	Reset                                    = 2,
	Option                                   = 3,
	DPadUp                                   = 4,
	DPadDown                                 = 5,
	DPadLeft                                 = 6,
	DPadRight                                = 7,
	LStickUp                                 = 8,
	LStickDown                               = 9,
	LStickLeft                               = 10,
	LStickRight                              = 11,
	RStickUp                                 = 12,
	RStickDown                               = 13,
	RStickLeft                               = 14,
	RStickRight                              = 15,
	StickThumbL                              = 16,
	StickThumbR                              = 17,
	ShoulderL                                = 18,
	ShoulderR                                = 19,
	TriggerL                                 = 20,
	TriggerR                                 = 21,
	Start                                    = 22,
	Select                                   = 23,
	MouseL                                   = 24,
	MouseR                                   = 25,
	MouseM                                   = 26,
	MouseWheelUp                             = 27,
	MouseWheelDown                           = 28,
	MouseExention1                           = 29,
	MouseExention2                           = 30,
	Max                                      = 31,
};

// ScriptStruct TangoLib.TngInteractEvent
// 0x0024 (0x0024 - 0x0000)
struct alignas(0x04) FTngInteractEvent final
{
public:
	uint8                                         Pad_0[0x24];                                       // 0x0000(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngInteractEvent) == 0x000004, "Wrong alignment on FTngInteractEvent");
static_assert(sizeof(FTngInteractEvent) == 0x000024, "Wrong size on FTngInteractEvent");

// ScriptStruct TangoLib.TngDebugDrawComponentHandle
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x10) FTngDebugDrawComponentHandle final
{
public:
	uint8                                         Pad_0[0x70];                                       // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngDebugDrawComponentHandle) == 0x000010, "Wrong alignment on FTngDebugDrawComponentHandle");
static_assert(sizeof(FTngDebugDrawComponentHandle) == 0x000070, "Wrong size on FTngDebugDrawComponentHandle");

// ScriptStruct TangoLib.TngPlayAnimData
// 0x0020 (0x0020 - 0x0000)
struct FTngPlayAnimData final
{
public:
	class UAnimSequenceBase*                      AnimSeqBase;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartPosition;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Tag;                                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngPlayAnimData) == 0x000008, "Wrong alignment on FTngPlayAnimData");
static_assert(sizeof(FTngPlayAnimData) == 0x000020, "Wrong size on FTngPlayAnimData");
static_assert(offsetof(FTngPlayAnimData, AnimSeqBase) == 0x000000, "Member 'FTngPlayAnimData::AnimSeqBase' has a wrong offset!");
static_assert(offsetof(FTngPlayAnimData, PlayRate) == 0x000008, "Member 'FTngPlayAnimData::PlayRate' has a wrong offset!");
static_assert(offsetof(FTngPlayAnimData, StartPosition) == 0x00000C, "Member 'FTngPlayAnimData::StartPosition' has a wrong offset!");
static_assert(offsetof(FTngPlayAnimData, BlendInTime) == 0x000010, "Member 'FTngPlayAnimData::BlendInTime' has a wrong offset!");
static_assert(offsetof(FTngPlayAnimData, bLoop) == 0x000014, "Member 'FTngPlayAnimData::bLoop' has a wrong offset!");
static_assert(offsetof(FTngPlayAnimData, Tag) == 0x000018, "Member 'FTngPlayAnimData::Tag' has a wrong offset!");

// ScriptStruct TangoLib.TngWidgetList
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FTngWidgetList final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngWidgetList) == 0x000008, "Wrong alignment on FTngWidgetList");
static_assert(sizeof(FTngWidgetList) == 0x000010, "Wrong size on FTngWidgetList");

// ScriptStruct TangoLib.TngEquipSlot
// 0x0020 (0x0020 - 0x0000)
struct FTngEquipSlot final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     EquipClass;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachName;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EquipActor;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngEquipSlot) == 0x000008, "Wrong alignment on FTngEquipSlot");
static_assert(sizeof(FTngEquipSlot) == 0x000020, "Wrong size on FTngEquipSlot");
static_assert(offsetof(FTngEquipSlot, SlotName) == 0x000000, "Member 'FTngEquipSlot::SlotName' has a wrong offset!");
static_assert(offsetof(FTngEquipSlot, EquipClass) == 0x000008, "Member 'FTngEquipSlot::EquipClass' has a wrong offset!");
static_assert(offsetof(FTngEquipSlot, AttachName) == 0x000010, "Member 'FTngEquipSlot::AttachName' has a wrong offset!");
static_assert(offsetof(FTngEquipSlot, EquipActor) == 0x000018, "Member 'FTngEquipSlot::EquipActor' has a wrong offset!");

// ScriptStruct TangoLib.TngDebugCircleItem
// 0x0030 (0x0030 - 0x0000)
struct FTngDebugCircleItem final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Icon;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPushCloseDebug;                                  // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngDebugCircleItem) == 0x000008, "Wrong alignment on FTngDebugCircleItem");
static_assert(sizeof(FTngDebugCircleItem) == 0x000030, "Wrong size on FTngDebugCircleItem");
static_assert(offsetof(FTngDebugCircleItem, Command) == 0x000000, "Member 'FTngDebugCircleItem::Command' has a wrong offset!");
static_assert(offsetof(FTngDebugCircleItem, Description) == 0x000010, "Member 'FTngDebugCircleItem::Description' has a wrong offset!");
static_assert(offsetof(FTngDebugCircleItem, Icon) == 0x000020, "Member 'FTngDebugCircleItem::Icon' has a wrong offset!");
static_assert(offsetof(FTngDebugCircleItem, IsPushCloseDebug) == 0x000028, "Member 'FTngDebugCircleItem::IsPushCloseDebug' has a wrong offset!");

// ScriptStruct TangoLib.TngStateSlot
// 0x0030 (0x0030 - 0x0000)
struct FTngStateSlot final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurrentStateName;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTngStateItem*>                  StateList;                                         // 0x0010(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UTngStateItem>>      DefaultList;                                       // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngStateSlot) == 0x000008, "Wrong alignment on FTngStateSlot");
static_assert(sizeof(FTngStateSlot) == 0x000030, "Wrong size on FTngStateSlot");
static_assert(offsetof(FTngStateSlot, SlotName) == 0x000000, "Member 'FTngStateSlot::SlotName' has a wrong offset!");
static_assert(offsetof(FTngStateSlot, CurrentStateName) == 0x000008, "Member 'FTngStateSlot::CurrentStateName' has a wrong offset!");
static_assert(offsetof(FTngStateSlot, StateList) == 0x000010, "Member 'FTngStateSlot::StateList' has a wrong offset!");
static_assert(offsetof(FTngStateSlot, DefaultList) == 0x000020, "Member 'FTngStateSlot::DefaultList' has a wrong offset!");

// ScriptStruct TangoLib.TngDamageStimulus
// 0x0050 (0x0050 - 0x0000)
struct FTngDamageStimulus final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0004(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0018(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         DamageDuration;                                    // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DamageDirection;                                   // 0x003C(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class APawn>                   InstigatorPawn;                                    // 0x0048(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngDamageStimulus) == 0x000008, "Wrong alignment on FTngDamageStimulus");
static_assert(sizeof(FTngDamageStimulus) == 0x000050, "Wrong size on FTngDamageStimulus");
static_assert(offsetof(FTngDamageStimulus, ID) == 0x000000, "Member 'FTngDamageStimulus::ID' has a wrong offset!");
static_assert(offsetof(FTngDamageStimulus, BoneName) == 0x000004, "Member 'FTngDamageStimulus::BoneName' has a wrong offset!");
static_assert(offsetof(FTngDamageStimulus, DamageTypeClass) == 0x000010, "Member 'FTngDamageStimulus::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FTngDamageStimulus, GameplayTags) == 0x000018, "Member 'FTngDamageStimulus::GameplayTags' has a wrong offset!");
static_assert(offsetof(FTngDamageStimulus, DamageDuration) == 0x000038, "Member 'FTngDamageStimulus::DamageDuration' has a wrong offset!");
static_assert(offsetof(FTngDamageStimulus, DamageDirection) == 0x00003C, "Member 'FTngDamageStimulus::DamageDirection' has a wrong offset!");
static_assert(offsetof(FTngDamageStimulus, InstigatorPawn) == 0x000048, "Member 'FTngDamageStimulus::InstigatorPawn' has a wrong offset!");

// ScriptStruct TangoLib.TngAIDamageEvent
// 0x0038 (0x0038 - 0x0000)
struct FTngAIDamageEvent final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamagedActor;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StimulusTag;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngAIDamageEvent) == 0x000008, "Wrong alignment on FTngAIDamageEvent");
static_assert(sizeof(FTngAIDamageEvent) == 0x000038, "Wrong size on FTngAIDamageEvent");
static_assert(offsetof(FTngAIDamageEvent, Amount) == 0x000000, "Member 'FTngAIDamageEvent::Amount' has a wrong offset!");
static_assert(offsetof(FTngAIDamageEvent, Location) == 0x000004, "Member 'FTngAIDamageEvent::Location' has a wrong offset!");
static_assert(offsetof(FTngAIDamageEvent, HitLocation) == 0x000010, "Member 'FTngAIDamageEvent::HitLocation' has a wrong offset!");
static_assert(offsetof(FTngAIDamageEvent, DamagedActor) == 0x000020, "Member 'FTngAIDamageEvent::DamagedActor' has a wrong offset!");
static_assert(offsetof(FTngAIDamageEvent, Instigator) == 0x000028, "Member 'FTngAIDamageEvent::Instigator' has a wrong offset!");
static_assert(offsetof(FTngAIDamageEvent, StimulusTag) == 0x000030, "Member 'FTngAIDamageEvent::StimulusTag' has a wrong offset!");

// ScriptStruct TangoLib.TngExtraPlayQueueData
// 0x0028 (0x0028 - 0x0000)
struct FTngExtraPlayQueueData final
{
public:
	struct FTngPlayAnimData                       AnimData;                                          // 0x0000(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	ETngPlayAnimTransit                           Transit;                                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngExtraPlayQueueData) == 0x000008, "Wrong alignment on FTngExtraPlayQueueData");
static_assert(sizeof(FTngExtraPlayQueueData) == 0x000028, "Wrong size on FTngExtraPlayQueueData");
static_assert(offsetof(FTngExtraPlayQueueData, AnimData) == 0x000000, "Member 'FTngExtraPlayQueueData::AnimData' has a wrong offset!");
static_assert(offsetof(FTngExtraPlayQueueData, Transit) == 0x000020, "Member 'FTngExtraPlayQueueData::Transit' has a wrong offset!");

// ScriptStruct TangoLib.TngCoopAnimSlaveInfo
// 0x0010 (0x0010 - 0x0000)
struct FTngCoopAnimSlaveInfo final
{
public:
	TWeakObjectPtr<class UTngAnimInstance>        AnimInst;                                          // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngCoopAnimSlaveInfo) == 0x000004, "Wrong alignment on FTngCoopAnimSlaveInfo");
static_assert(sizeof(FTngCoopAnimSlaveInfo) == 0x000010, "Wrong size on FTngCoopAnimSlaveInfo");
static_assert(offsetof(FTngCoopAnimSlaveInfo, AnimInst) == 0x000000, "Member 'FTngCoopAnimSlaveInfo::AnimInst' has a wrong offset!");
static_assert(offsetof(FTngCoopAnimSlaveInfo, SocketName) == 0x000008, "Member 'FTngCoopAnimSlaveInfo::SocketName' has a wrong offset!");

// ScriptStruct TangoLib.TngCoopAnimPlayParam
// 0x0018 (0x0018 - 0x0000)
struct FTngCoopAnimPlayParam final
{
public:
	TArray<class AActor*>                         AssignList;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UTngCoopAnimAsset*                      CoopAnim;                                          // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngCoopAnimPlayParam) == 0x000008, "Wrong alignment on FTngCoopAnimPlayParam");
static_assert(sizeof(FTngCoopAnimPlayParam) == 0x000018, "Wrong size on FTngCoopAnimPlayParam");
static_assert(offsetof(FTngCoopAnimPlayParam, AssignList) == 0x000000, "Member 'FTngCoopAnimPlayParam::AssignList' has a wrong offset!");
static_assert(offsetof(FTngCoopAnimPlayParam, CoopAnim) == 0x000010, "Member 'FTngCoopAnimPlayParam::CoopAnim' has a wrong offset!");

// ScriptStruct TangoLib.TngExtraAnimPlayChannel
// 0x0070 (0x0070 - 0x0000)
struct FTngExtraAnimPlayChannel final
{
public:
	class UAnimSequenceBase*                      DummySequence;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x68];                                       // 0x0008(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngExtraAnimPlayChannel) == 0x000008, "Wrong alignment on FTngExtraAnimPlayChannel");
static_assert(sizeof(FTngExtraAnimPlayChannel) == 0x000070, "Wrong size on FTngExtraAnimPlayChannel");
static_assert(offsetof(FTngExtraAnimPlayChannel, DummySequence) == 0x000000, "Member 'FTngExtraAnimPlayChannel::DummySequence' has a wrong offset!");

// ScriptStruct TangoLib.TngAnimNode_PlayExtraAnim
// 0x0038 (0x0048 - 0x0010)
struct FTngAnimNode_PlayExtraAnim final : public FAnimNode_Base
{
public:
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTngExtraAnimPlayChannel>       PlayChannels;                                      // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UAnimSequenceBase*                      CloseSequence;                                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngAnimNode_PlayExtraAnim) == 0x000008, "Wrong alignment on FTngAnimNode_PlayExtraAnim");
static_assert(sizeof(FTngAnimNode_PlayExtraAnim) == 0x000048, "Wrong size on FTngAnimNode_PlayExtraAnim");
static_assert(offsetof(FTngAnimNode_PlayExtraAnim, PlayChannels) == 0x000018, "Member 'FTngAnimNode_PlayExtraAnim::PlayChannels' has a wrong offset!");
static_assert(offsetof(FTngAnimNode_PlayExtraAnim, CloseSequence) == 0x000028, "Member 'FTngAnimNode_PlayExtraAnim::CloseSequence' has a wrong offset!");

// ScriptStruct TangoLib.TngAttackHitLog
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FTngAttackHitLog final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngAttackHitLog) == 0x000004, "Wrong alignment on FTngAttackHitLog");
static_assert(sizeof(FTngAttackHitLog) == 0x00000C, "Wrong size on FTngAttackHitLog");

// ScriptStruct TangoLib.TngBoundaryBoxData
// 0x0018 (0x0018 - 0x0000)
struct FTngBoundaryBoxData final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngBoundaryBoxData) == 0x000004, "Wrong alignment on FTngBoundaryBoxData");
static_assert(sizeof(FTngBoundaryBoxData) == 0x000018, "Wrong size on FTngBoundaryBoxData");
static_assert(offsetof(FTngBoundaryBoxData, Origin) == 0x000000, "Member 'FTngBoundaryBoxData::Origin' has a wrong offset!");
static_assert(offsetof(FTngBoundaryBoxData, Extent) == 0x00000C, "Member 'FTngBoundaryBoxData::Extent' has a wrong offset!");

// ScriptStruct TangoLib.TngBoundaryRadiusData
// 0x0010 (0x0010 - 0x0000)
struct FTngBoundaryRadiusData final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngBoundaryRadiusData) == 0x000004, "Wrong alignment on FTngBoundaryRadiusData");
static_assert(sizeof(FTngBoundaryRadiusData) == 0x000010, "Wrong size on FTngBoundaryRadiusData");
static_assert(offsetof(FTngBoundaryRadiusData, Origin) == 0x000000, "Member 'FTngBoundaryRadiusData::Origin' has a wrong offset!");
static_assert(offsetof(FTngBoundaryRadiusData, Radius) == 0x00000C, "Member 'FTngBoundaryRadiusData::Radius' has a wrong offset!");

// ScriptStruct TangoLib.TngBoundaryData
// 0x0040 (0x0040 - 0x0000)
struct FTngBoundaryData final
{
public:
	struct FTransform                             Origin;                                            // 0x0000(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngBoundaryType                              ShapeType;                                         // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngBoundaryData) == 0x000010, "Wrong alignment on FTngBoundaryData");
static_assert(sizeof(FTngBoundaryData) == 0x000040, "Wrong size on FTngBoundaryData");
static_assert(offsetof(FTngBoundaryData, Origin) == 0x000000, "Member 'FTngBoundaryData::Origin' has a wrong offset!");
static_assert(offsetof(FTngBoundaryData, Extent) == 0x000030, "Member 'FTngBoundaryData::Extent' has a wrong offset!");
static_assert(offsetof(FTngBoundaryData, ShapeType) == 0x00003C, "Member 'FTngBoundaryData::ShapeType' has a wrong offset!");

// ScriptStruct TangoLib.TngWeaponFireParams
// 0x00A8 (0x00A8 - 0x0000)
struct alignas(0x08) FTngWeaponFireParams final
{
public:
	uint8                                         Pad_0[0xA8];                                       // 0x0000(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngWeaponFireParams) == 0x000008, "Wrong alignment on FTngWeaponFireParams");
static_assert(sizeof(FTngWeaponFireParams) == 0x0000A8, "Wrong size on FTngWeaponFireParams");

// ScriptStruct TangoLib.TngMoveHitInfo
// 0x0034 (0x0034 - 0x0000)
struct alignas(0x04) FTngMoveHitInfo final
{
public:
	uint8                                         Pad_0[0x34];                                       // 0x0000(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngMoveHitInfo) == 0x000004, "Wrong alignment on FTngMoveHitInfo");
static_assert(sizeof(FTngMoveHitInfo) == 0x000034, "Wrong size on FTngMoveHitInfo");

// ScriptStruct TangoLib.TngMoveInfo
// 0x00B4 (0x00B4 - 0x0000)
struct alignas(0x04) FTngMoveInfo final
{
public:
	uint8                                         Pad_0[0xB4];                                       // 0x0000(0x00B4)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngMoveInfo) == 0x000004, "Wrong alignment on FTngMoveInfo");
static_assert(sizeof(FTngMoveInfo) == 0x0000B4, "Wrong size on FTngMoveInfo");

// ScriptStruct TangoLib.TngEdgeHitInfo
// 0x002C (0x002C - 0x0000)
struct alignas(0x04) FTngEdgeHitInfo final
{
public:
	uint8                                         Pad_0[0x2C];                                       // 0x0000(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngEdgeHitInfo) == 0x000004, "Wrong alignment on FTngEdgeHitInfo");
static_assert(sizeof(FTngEdgeHitInfo) == 0x00002C, "Wrong size on FTngEdgeHitInfo");

// ScriptStruct TangoLib.TngSpaceHitInfo
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FTngSpaceHitInfo final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngSpaceHitInfo) == 0x000004, "Wrong alignment on FTngSpaceHitInfo");
static_assert(sizeof(FTngSpaceHitInfo) == 0x00000C, "Wrong size on FTngSpaceHitInfo");

// ScriptStruct TangoLib.TngDriveInfo
// 0x0044 (0x0044 - 0x0000)
struct FTngDriveInfo final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldDirection;                                    // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               MoveAim;                                           // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                LockOnLocation;                                    // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BodyRotation;                                      // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bStrafing;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBrake;                                            // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockOn;                                           // 0x0042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAiming;                                           // 0x0043(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngDriveInfo) == 0x000004, "Wrong alignment on FTngDriveInfo");
static_assert(sizeof(FTngDriveInfo) == 0x000044, "Wrong size on FTngDriveInfo");
static_assert(offsetof(FTngDriveInfo, Direction) == 0x000000, "Member 'FTngDriveInfo::Direction' has a wrong offset!");
static_assert(offsetof(FTngDriveInfo, WorldDirection) == 0x00000C, "Member 'FTngDriveInfo::WorldDirection' has a wrong offset!");
static_assert(offsetof(FTngDriveInfo, Speed) == 0x000018, "Member 'FTngDriveInfo::Speed' has a wrong offset!");
static_assert(offsetof(FTngDriveInfo, MoveAim) == 0x00001C, "Member 'FTngDriveInfo::MoveAim' has a wrong offset!");
static_assert(offsetof(FTngDriveInfo, LockOnLocation) == 0x000028, "Member 'FTngDriveInfo::LockOnLocation' has a wrong offset!");
static_assert(offsetof(FTngDriveInfo, BodyRotation) == 0x000034, "Member 'FTngDriveInfo::BodyRotation' has a wrong offset!");
static_assert(offsetof(FTngDriveInfo, bStrafing) == 0x000040, "Member 'FTngDriveInfo::bStrafing' has a wrong offset!");
static_assert(offsetof(FTngDriveInfo, bBrake) == 0x000041, "Member 'FTngDriveInfo::bBrake' has a wrong offset!");
static_assert(offsetof(FTngDriveInfo, bLockOn) == 0x000042, "Member 'FTngDriveInfo::bLockOn' has a wrong offset!");
static_assert(offsetof(FTngDriveInfo, bAiming) == 0x000043, "Member 'FTngDriveInfo::bAiming' has a wrong offset!");

// ScriptStruct TangoLib.TngDriveInputLockOnItem
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FTngDriveInputLockOnItem final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngDriveInputLockOnItem) == 0x000004, "Wrong alignment on FTngDriveInputLockOnItem");
static_assert(sizeof(FTngDriveInputLockOnItem) == 0x000014, "Wrong size on FTngDriveInputLockOnItem");

// ScriptStruct TangoLib.TngCoopAnim
// 0x0010 (0x0010 - 0x0000)
struct FTngCoopAnim final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngCoopAnim) == 0x000008, "Wrong alignment on FTngCoopAnim");
static_assert(sizeof(FTngCoopAnim) == 0x000010, "Wrong size on FTngCoopAnim");
static_assert(offsetof(FTngCoopAnim, Animation) == 0x000000, "Member 'FTngCoopAnim::Animation' has a wrong offset!");
static_assert(offsetof(FTngCoopAnim, SocketName) == 0x000008, "Member 'FTngCoopAnim::SocketName' has a wrong offset!");

// ScriptStruct TangoLib.TngDebugBoardItem
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FTngDebugBoardItem final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngDebugBoardItem) == 0x000008, "Wrong alignment on FTngDebugBoardItem");
static_assert(sizeof(FTngDebugBoardItem) == 0x000040, "Wrong size on FTngDebugBoardItem");

// ScriptStruct TangoLib.TngDebugCirclePage
// 0x0020 (0x0020 - 0x0000)
struct FTngDebugCirclePage final
{
public:
	class FName                                   PageName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrawCircleNum;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawCircleLen;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTngDebugCircleItem>            ItemList;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngDebugCirclePage) == 0x000008, "Wrong alignment on FTngDebugCirclePage");
static_assert(sizeof(FTngDebugCirclePage) == 0x000020, "Wrong size on FTngDebugCirclePage");
static_assert(offsetof(FTngDebugCirclePage, PageName) == 0x000000, "Member 'FTngDebugCirclePage::PageName' has a wrong offset!");
static_assert(offsetof(FTngDebugCirclePage, DrawCircleNum) == 0x000008, "Member 'FTngDebugCirclePage::DrawCircleNum' has a wrong offset!");
static_assert(offsetof(FTngDebugCirclePage, DrawCircleLen) == 0x00000C, "Member 'FTngDebugCirclePage::DrawCircleLen' has a wrong offset!");
static_assert(offsetof(FTngDebugCirclePage, ItemList) == 0x000010, "Member 'FTngDebugCirclePage::ItemList' has a wrong offset!");

// ScriptStruct TangoLib.TngDebugMenuItem
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FTngDebugMenuItem final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngDebugMenuItem) == 0x000008, "Wrong alignment on FTngDebugMenuItem");
static_assert(sizeof(FTngDebugMenuItem) == 0x000030, "Wrong size on FTngDebugMenuItem");

// ScriptStruct TangoLib.TngEffectUnit
// 0x0010 (0x0010 - 0x0000)
struct FTngEffectUnit
{
public:
	class UParticleSystem*                        Particle;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          Sound;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngEffectUnit) == 0x000008, "Wrong alignment on FTngEffectUnit");
static_assert(sizeof(FTngEffectUnit) == 0x000010, "Wrong size on FTngEffectUnit");
static_assert(offsetof(FTngEffectUnit, Particle) == 0x000000, "Member 'FTngEffectUnit::Particle' has a wrong offset!");
static_assert(offsetof(FTngEffectUnit, Sound) == 0x000008, "Member 'FTngEffectUnit::Sound' has a wrong offset!");

// ScriptStruct TangoLib.TngEquipCondition
// 0x000C (0x000C - 0x0000)
struct FTngEquipCondition final
{
public:
	int32                                         AvailableNumber;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngEquipCondition) == 0x000004, "Wrong alignment on FTngEquipCondition");
static_assert(sizeof(FTngEquipCondition) == 0x00000C, "Wrong size on FTngEquipCondition");
static_assert(offsetof(FTngEquipCondition, AvailableNumber) == 0x000000, "Member 'FTngEquipCondition::AvailableNumber' has a wrong offset!");
static_assert(offsetof(FTngEquipCondition, Tag) == 0x000004, "Member 'FTngEquipCondition::Tag' has a wrong offset!");

// ScriptStruct TangoLib.TngEquipVisibleParam
// 0x0008 (0x0008 - 0x0000)
struct FTngEquipVisibleParam final
{
public:
	ETngEquipVisibleCategory                      Category;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UserData;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngEquipVisibleParam) == 0x000004, "Wrong alignment on FTngEquipVisibleParam");
static_assert(sizeof(FTngEquipVisibleParam) == 0x000008, "Wrong size on FTngEquipVisibleParam");
static_assert(offsetof(FTngEquipVisibleParam, Category) == 0x000000, "Member 'FTngEquipVisibleParam::Category' has a wrong offset!");
static_assert(offsetof(FTngEquipVisibleParam, UserData) == 0x000004, "Member 'FTngEquipVisibleParam::UserData' has a wrong offset!");

// ScriptStruct TangoLib.TngTimingList
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FTngTimingList final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngTimingList) == 0x000008, "Wrong alignment on FTngTimingList");
static_assert(sizeof(FTngTimingList) == 0x000010, "Wrong size on FTngTimingList");

// ScriptStruct TangoLib.TngTimingItem
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FTngTimingItem final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngTimingItem) == 0x000008, "Wrong alignment on FTngTimingItem");
static_assert(sizeof(FTngTimingItem) == 0x000030, "Wrong size on FTngTimingItem");

// ScriptStruct TangoLib.TngImpactEffect
// 0x0000 (0x0010 - 0x0010)
struct FTngImpactEffect final : public FTngEffectUnit
{
};
static_assert(alignof(FTngImpactEffect) == 0x000008, "Wrong alignment on FTngImpactEffect");
static_assert(sizeof(FTngImpactEffect) == 0x000010, "Wrong size on FTngImpactEffect");

// ScriptStruct TangoLib.TngInventoryItem
// 0x0010 (0x0010 - 0x0000)
struct FTngInventoryItem final
{
public:
	TSubclassOf<class UTngItemObject>             Class;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngInventoryItem) == 0x000008, "Wrong alignment on FTngInventoryItem");
static_assert(sizeof(FTngInventoryItem) == 0x000010, "Wrong size on FTngInventoryItem");
static_assert(offsetof(FTngInventoryItem, Class) == 0x000000, "Member 'FTngInventoryItem::Class' has a wrong offset!");
static_assert(offsetof(FTngInventoryItem, Count) == 0x000008, "Member 'FTngInventoryItem::Count' has a wrong offset!");

// ScriptStruct TangoLib.TngInventoryGroup
// 0x0010 (0x0010 - 0x0000)
struct FTngInventoryGroup final
{
public:
	TArray<struct FTngInventoryItem>              Group;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngInventoryGroup) == 0x000008, "Wrong alignment on FTngInventoryGroup");
static_assert(sizeof(FTngInventoryGroup) == 0x000010, "Wrong size on FTngInventoryGroup");
static_assert(offsetof(FTngInventoryGroup, Group) == 0x000000, "Member 'FTngInventoryGroup::Group' has a wrong offset!");

// ScriptStruct TangoLib.TngPlayerInputKeyRemapping
// 0x0010 (0x0010 - 0x0000)
struct FTngPlayerInputKeyRemapping final
{
public:
	class FName                                   SourceKeyName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DestinationKeyName;                                // 0x0008(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngPlayerInputKeyRemapping) == 0x000004, "Wrong alignment on FTngPlayerInputKeyRemapping");
static_assert(sizeof(FTngPlayerInputKeyRemapping) == 0x000010, "Wrong size on FTngPlayerInputKeyRemapping");
static_assert(offsetof(FTngPlayerInputKeyRemapping, SourceKeyName) == 0x000000, "Member 'FTngPlayerInputKeyRemapping::SourceKeyName' has a wrong offset!");
static_assert(offsetof(FTngPlayerInputKeyRemapping, DestinationKeyName) == 0x000008, "Member 'FTngPlayerInputKeyRemapping::DestinationKeyName' has a wrong offset!");

// ScriptStruct TangoLib.TngPlayerInputKeyMappingsSet
// 0x0020 (0x0020 - 0x0000)
struct FTngPlayerInputKeyMappingsSet final
{
public:
	TArray<struct FInputActionKeyMapping>         ActionMappings;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FInputAxisKeyMapping>           AxisMappings;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngPlayerInputKeyMappingsSet) == 0x000008, "Wrong alignment on FTngPlayerInputKeyMappingsSet");
static_assert(sizeof(FTngPlayerInputKeyMappingsSet) == 0x000020, "Wrong size on FTngPlayerInputKeyMappingsSet");
static_assert(offsetof(FTngPlayerInputKeyMappingsSet, ActionMappings) == 0x000000, "Member 'FTngPlayerInputKeyMappingsSet::ActionMappings' has a wrong offset!");
static_assert(offsetof(FTngPlayerInputKeyMappingsSet, AxisMappings) == 0x000010, "Member 'FTngPlayerInputKeyMappingsSet::AxisMappings' has a wrong offset!");

// ScriptStruct TangoLib.TngPlayerStatExtensionGDKEntry
// 0x0030 (0x0030 - 0x0000)
struct FTngPlayerStatExtensionGDKEntry final
{
public:
	class FName                                   LinkStatName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ValueName;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngMetricsOnlineStatApplyType                ApplyType;                                         // 0x0028(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngPlayerStatExtensionGDKEntry) == 0x000008, "Wrong alignment on FTngPlayerStatExtensionGDKEntry");
static_assert(sizeof(FTngPlayerStatExtensionGDKEntry) == 0x000030, "Wrong size on FTngPlayerStatExtensionGDKEntry");
static_assert(offsetof(FTngPlayerStatExtensionGDKEntry, LinkStatName) == 0x000000, "Member 'FTngPlayerStatExtensionGDKEntry::LinkStatName' has a wrong offset!");
static_assert(offsetof(FTngPlayerStatExtensionGDKEntry, EventName) == 0x000008, "Member 'FTngPlayerStatExtensionGDKEntry::EventName' has a wrong offset!");
static_assert(offsetof(FTngPlayerStatExtensionGDKEntry, ValueName) == 0x000018, "Member 'FTngPlayerStatExtensionGDKEntry::ValueName' has a wrong offset!");
static_assert(offsetof(FTngPlayerStatExtensionGDKEntry, ApplyType) == 0x000028, "Member 'FTngPlayerStatExtensionGDKEntry::ApplyType' has a wrong offset!");

// ScriptStruct TangoLib.TngPlayerStatExtensionPS5Entry
// 0x0030 (0x0030 - 0x0000)
struct FTngPlayerStatExtensionPS5Entry final
{
public:
	class FName                                   LinkStatName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ValueName;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngMetricsOnlineStatValueType                ValueType;                                         // 0x0028(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngMetricsOnlineStatApplyType                ApplyType;                                         // 0x0029(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngPlayerStatExtensionPS5Entry) == 0x000008, "Wrong alignment on FTngPlayerStatExtensionPS5Entry");
static_assert(sizeof(FTngPlayerStatExtensionPS5Entry) == 0x000030, "Wrong size on FTngPlayerStatExtensionPS5Entry");
static_assert(offsetof(FTngPlayerStatExtensionPS5Entry, LinkStatName) == 0x000000, "Member 'FTngPlayerStatExtensionPS5Entry::LinkStatName' has a wrong offset!");
static_assert(offsetof(FTngPlayerStatExtensionPS5Entry, EventName) == 0x000008, "Member 'FTngPlayerStatExtensionPS5Entry::EventName' has a wrong offset!");
static_assert(offsetof(FTngPlayerStatExtensionPS5Entry, ValueName) == 0x000018, "Member 'FTngPlayerStatExtensionPS5Entry::ValueName' has a wrong offset!");
static_assert(offsetof(FTngPlayerStatExtensionPS5Entry, ValueType) == 0x000028, "Member 'FTngPlayerStatExtensionPS5Entry::ValueType' has a wrong offset!");
static_assert(offsetof(FTngPlayerStatExtensionPS5Entry, ApplyType) == 0x000029, "Member 'FTngPlayerStatExtensionPS5Entry::ApplyType' has a wrong offset!");

// ScriptStruct TangoLib.TngPlayerStatEntry
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FTngPlayerStatEntry final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultValue;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        AvailableFilter;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngPlayerStatEntry) == 0x000008, "Wrong alignment on FTngPlayerStatEntry");
static_assert(sizeof(FTngPlayerStatEntry) == 0x000020, "Wrong size on FTngPlayerStatEntry");
static_assert(offsetof(FTngPlayerStatEntry, StatName) == 0x000000, "Member 'FTngPlayerStatEntry::StatName' has a wrong offset!");
static_assert(offsetof(FTngPlayerStatEntry, DefaultValue) == 0x000008, "Member 'FTngPlayerStatEntry::DefaultValue' has a wrong offset!");
static_assert(offsetof(FTngPlayerStatEntry, AvailableFilter) == 0x00000C, "Member 'FTngPlayerStatEntry::AvailableFilter' has a wrong offset!");

// ScriptStruct TangoLib.TngAchievementCondition
// 0x0010 (0x0010 - 0x0000)
struct FTngAchievementCondition final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatValue;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAchievementStatSection                    StatSection;                                       // 0x000C(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETngAchievementCompareOperator                CompareOperator;                                   // 0x000D(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriggerUnlock;                                    // 0x000E(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngAchievementCondition) == 0x000004, "Wrong alignment on FTngAchievementCondition");
static_assert(sizeof(FTngAchievementCondition) == 0x000010, "Wrong size on FTngAchievementCondition");
static_assert(offsetof(FTngAchievementCondition, StatName) == 0x000000, "Member 'FTngAchievementCondition::StatName' has a wrong offset!");
static_assert(offsetof(FTngAchievementCondition, StatValue) == 0x000008, "Member 'FTngAchievementCondition::StatValue' has a wrong offset!");
static_assert(offsetof(FTngAchievementCondition, StatSection) == 0x00000C, "Member 'FTngAchievementCondition::StatSection' has a wrong offset!");
static_assert(offsetof(FTngAchievementCondition, CompareOperator) == 0x00000D, "Member 'FTngAchievementCondition::CompareOperator' has a wrong offset!");
static_assert(offsetof(FTngAchievementCondition, bTriggerUnlock) == 0x00000E, "Member 'FTngAchievementCondition::bTriggerUnlock' has a wrong offset!");

// ScriptStruct TangoLib.TngGameChallengeEntry
// 0x0018 (0x0018 - 0x0000)
struct FTngGameChallengeEntry final
{
public:
	class FName                                   ChallengeName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTngAchievementCondition>       Conditions;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngGameChallengeEntry) == 0x000008, "Wrong alignment on FTngGameChallengeEntry");
static_assert(sizeof(FTngGameChallengeEntry) == 0x000018, "Wrong size on FTngGameChallengeEntry");
static_assert(offsetof(FTngGameChallengeEntry, ChallengeName) == 0x000000, "Member 'FTngGameChallengeEntry::ChallengeName' has a wrong offset!");
static_assert(offsetof(FTngGameChallengeEntry, Conditions) == 0x000008, "Member 'FTngGameChallengeEntry::Conditions' has a wrong offset!");

// ScriptStruct TangoLib.TngAchievementEntry
// 0x0020 (0x0020 - 0x0000)
struct FTngAchievementEntry final
{
public:
	class FName                                   AchievementName;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AvailablePlatforms;                                // 0x0008(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ProgressPlatforms;                                 // 0x0009(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTngAchievementCondition>       Conditions;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngAchievementEntry) == 0x000008, "Wrong alignment on FTngAchievementEntry");
static_assert(sizeof(FTngAchievementEntry) == 0x000020, "Wrong size on FTngAchievementEntry");
static_assert(offsetof(FTngAchievementEntry, AchievementName) == 0x000000, "Member 'FTngAchievementEntry::AchievementName' has a wrong offset!");
static_assert(offsetof(FTngAchievementEntry, AvailablePlatforms) == 0x000008, "Member 'FTngAchievementEntry::AvailablePlatforms' has a wrong offset!");
static_assert(offsetof(FTngAchievementEntry, ProgressPlatforms) == 0x000009, "Member 'FTngAchievementEntry::ProgressPlatforms' has a wrong offset!");
static_assert(offsetof(FTngAchievementEntry, Conditions) == 0x000010, "Member 'FTngAchievementEntry::Conditions' has a wrong offset!");

// ScriptStruct TangoLib.TngInputAxisKeyMappingSaveGame
// 0x0014 (0x0014 - 0x0000)
struct FTngInputAxisKeyMappingSaveGame final
{
public:
	class FName                                   AxisName;                                          // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x000C(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngInputAxisKeyMappingSaveGame) == 0x000004, "Wrong alignment on FTngInputAxisKeyMappingSaveGame");
static_assert(sizeof(FTngInputAxisKeyMappingSaveGame) == 0x000014, "Wrong size on FTngInputAxisKeyMappingSaveGame");
static_assert(offsetof(FTngInputAxisKeyMappingSaveGame, AxisName) == 0x000000, "Member 'FTngInputAxisKeyMappingSaveGame::AxisName' has a wrong offset!");
static_assert(offsetof(FTngInputAxisKeyMappingSaveGame, Scale) == 0x000008, "Member 'FTngInputAxisKeyMappingSaveGame::Scale' has a wrong offset!");
static_assert(offsetof(FTngInputAxisKeyMappingSaveGame, Key) == 0x00000C, "Member 'FTngInputAxisKeyMappingSaveGame::Key' has a wrong offset!");

// ScriptStruct TangoLib.TngInputActionKeyMappingSaveGame
// 0x0010 (0x0010 - 0x0000)
struct FTngInputActionKeyMappingSaveGame final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0008(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngInputActionKeyMappingSaveGame) == 0x000004, "Wrong alignment on FTngInputActionKeyMappingSaveGame");
static_assert(sizeof(FTngInputActionKeyMappingSaveGame) == 0x000010, "Wrong size on FTngInputActionKeyMappingSaveGame");
static_assert(offsetof(FTngInputActionKeyMappingSaveGame, ActionName) == 0x000000, "Member 'FTngInputActionKeyMappingSaveGame::ActionName' has a wrong offset!");
static_assert(offsetof(FTngInputActionKeyMappingSaveGame, Key) == 0x000008, "Member 'FTngInputActionKeyMappingSaveGame::Key' has a wrong offset!");

// ScriptStruct TangoLib.TngRandomPickWeight
// 0x0004 (0x0004 - 0x0000)
struct FTngRandomPickWeight
{
public:
	int32                                         Weight;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngRandomPickWeight) == 0x000004, "Wrong alignment on FTngRandomPickWeight");
static_assert(sizeof(FTngRandomPickWeight) == 0x000004, "Wrong size on FTngRandomPickWeight");
static_assert(offsetof(FTngRandomPickWeight, Weight) == 0x000000, "Member 'FTngRandomPickWeight::Weight' has a wrong offset!");

// ScriptStruct TangoLib.TngRandomPickWeightWithActor
// 0x0008 (0x000C - 0x0004)
struct FTngRandomPickWeightWithActor final : public FTngRandomPickWeight
{
public:
	TWeakObjectPtr<class AActor>                  ActorPtr;                                          // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngRandomPickWeightWithActor) == 0x000004, "Wrong alignment on FTngRandomPickWeightWithActor");
static_assert(sizeof(FTngRandomPickWeightWithActor) == 0x00000C, "Wrong size on FTngRandomPickWeightWithActor");
static_assert(offsetof(FTngRandomPickWeightWithActor, ActorPtr) == 0x000004, "Member 'FTngRandomPickWeightWithActor::ActorPtr' has a wrong offset!");

// ScriptStruct TangoLib.TngRandomPickWeightWithVector
// 0x000C (0x0010 - 0x0004)
struct FTngRandomPickWeightWithVector final : public FTngRandomPickWeight
{
public:
	struct FVector                                Data;                                              // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngRandomPickWeightWithVector) == 0x000004, "Wrong alignment on FTngRandomPickWeightWithVector");
static_assert(sizeof(FTngRandomPickWeightWithVector) == 0x000010, "Wrong size on FTngRandomPickWeightWithVector");
static_assert(offsetof(FTngRandomPickWeightWithVector, Data) == 0x000004, "Member 'FTngRandomPickWeightWithVector::Data' has a wrong offset!");

// ScriptStruct TangoLib.TngRandomPickWeightWithFloat
// 0x0004 (0x0008 - 0x0004)
struct FTngRandomPickWeightWithFloat final : public FTngRandomPickWeight
{
public:
	float                                         Data;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngRandomPickWeightWithFloat) == 0x000004, "Wrong alignment on FTngRandomPickWeightWithFloat");
static_assert(sizeof(FTngRandomPickWeightWithFloat) == 0x000008, "Wrong size on FTngRandomPickWeightWithFloat");
static_assert(offsetof(FTngRandomPickWeightWithFloat, Data) == 0x000004, "Member 'FTngRandomPickWeightWithFloat::Data' has a wrong offset!");

// ScriptStruct TangoLib.TngRandomPickWeightWithInteger
// 0x0004 (0x0008 - 0x0004)
struct FTngRandomPickWeightWithInteger final : public FTngRandomPickWeight
{
public:
	int32                                         Data;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngRandomPickWeightWithInteger) == 0x000004, "Wrong alignment on FTngRandomPickWeightWithInteger");
static_assert(sizeof(FTngRandomPickWeightWithInteger) == 0x000008, "Wrong size on FTngRandomPickWeightWithInteger");
static_assert(offsetof(FTngRandomPickWeightWithInteger, Data) == 0x000004, "Member 'FTngRandomPickWeightWithInteger::Data' has a wrong offset!");

// ScriptStruct TangoLib.TngSaveGameDataPoolEntry
// 0x0018 (0x0018 - 0x0000)
struct FTngSaveGameDataPoolEntry final
{
public:
	class FName                                   ClassName;                                         // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Buffer;                                            // 0x0008(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngSaveGameDataPoolEntry) == 0x000008, "Wrong alignment on FTngSaveGameDataPoolEntry");
static_assert(sizeof(FTngSaveGameDataPoolEntry) == 0x000018, "Wrong size on FTngSaveGameDataPoolEntry");
static_assert(offsetof(FTngSaveGameDataPoolEntry, ClassName) == 0x000000, "Member 'FTngSaveGameDataPoolEntry::ClassName' has a wrong offset!");
static_assert(offsetof(FTngSaveGameDataPoolEntry, Buffer) == 0x000008, "Member 'FTngSaveGameDataPoolEntry::Buffer' has a wrong offset!");

// ScriptStruct TangoLib.TngSaveGameKeyDataPairsDataPool
// 0x0050 (0x0050 - 0x0000)
struct FTngSaveGameKeyDataPairsDataPool final
{
public:
	TMap<class FName, struct FTngSaveGameDataPoolEntry> Entries;                                           // 0x0000(0x0050)(SaveGame, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTngSaveGameKeyDataPairsDataPool) == 0x000008, "Wrong alignment on FTngSaveGameKeyDataPairsDataPool");
static_assert(sizeof(FTngSaveGameKeyDataPairsDataPool) == 0x000050, "Wrong size on FTngSaveGameKeyDataPairsDataPool");
static_assert(offsetof(FTngSaveGameKeyDataPairsDataPool, Entries) == 0x000000, "Member 'FTngSaveGameKeyDataPairsDataPool::Entries' has a wrong offset!");

// ScriptStruct TangoLib.TngSaveGameActorsDataPool
// 0x0050 (0x0050 - 0x0000)
struct FTngSaveGameActorsDataPool final
{
public:
	TMap<class FName, struct FTngSaveGameDataPoolEntry> Entries;                                           // 0x0000(0x0050)(SaveGame, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTngSaveGameActorsDataPool) == 0x000008, "Wrong alignment on FTngSaveGameActorsDataPool");
static_assert(sizeof(FTngSaveGameActorsDataPool) == 0x000050, "Wrong size on FTngSaveGameActorsDataPool");
static_assert(offsetof(FTngSaveGameActorsDataPool, Entries) == 0x000000, "Member 'FTngSaveGameActorsDataPool::Entries' has a wrong offset!");

// ScriptStruct TangoLib.TngTeamId
// 0x0000 (0x0001 - 0x0001)
struct FTngTeamId final : public FGenericTeamId
{
};
static_assert(alignof(FTngTeamId) == 0x000001, "Wrong alignment on FTngTeamId");
static_assert(sizeof(FTngTeamId) == 0x000001, "Wrong size on FTngTeamId");

// ScriptStruct TangoLib.TngWidgetKeyAxisMapping
// 0x0028 (0x0028 - 0x0000)
struct FTngWidgetKeyAxisMapping final
{
public:
	ETngKeyAxisMap                                Axis;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeadZone;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTngWidgetKeyAxisMapping) == 0x000008, "Wrong alignment on FTngWidgetKeyAxisMapping");
static_assert(sizeof(FTngWidgetKeyAxisMapping) == 0x000028, "Wrong size on FTngWidgetKeyAxisMapping");
static_assert(offsetof(FTngWidgetKeyAxisMapping, Axis) == 0x000000, "Member 'FTngWidgetKeyAxisMapping::Axis' has a wrong offset!");
static_assert(offsetof(FTngWidgetKeyAxisMapping, Key) == 0x000008, "Member 'FTngWidgetKeyAxisMapping::Key' has a wrong offset!");
static_assert(offsetof(FTngWidgetKeyAxisMapping, DeadZone) == 0x000020, "Member 'FTngWidgetKeyAxisMapping::DeadZone' has a wrong offset!");

// ScriptStruct TangoLib.TngWidgetKeyButtonMapping
// 0x0020 (0x0020 - 0x0000)
struct FTngWidgetKeyButtonMapping final
{
public:
	ETngKeyButtonMap                              Button;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTngWidgetKeyButtonMapping) == 0x000008, "Wrong alignment on FTngWidgetKeyButtonMapping");
static_assert(sizeof(FTngWidgetKeyButtonMapping) == 0x000020, "Wrong size on FTngWidgetKeyButtonMapping");
static_assert(offsetof(FTngWidgetKeyButtonMapping, Button) == 0x000000, "Member 'FTngWidgetKeyButtonMapping::Button' has a wrong offset!");
static_assert(offsetof(FTngWidgetKeyButtonMapping, Key) == 0x000008, "Member 'FTngWidgetKeyButtonMapping::Key' has a wrong offset!");

}

