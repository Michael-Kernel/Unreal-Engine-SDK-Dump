#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: People_Job_BTT

#include "Basic.hpp"

#include "People_Job_BTT_classes.hpp"
#include "People_Job_BTT_parameters.hpp"


namespace SDK
{

// Function People_Job_BTT.People_Job_BTT_C.ExecuteUbergraph_People_Job_BTT
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPeople_Job_BTT_C::ExecuteUbergraph_People_Job_BTT(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("People_Job_BTT_C", "ExecuteUbergraph_People_Job_BTT");

	Params::People_Job_BTT_C_ExecuteUbergraph_People_Job_BTT Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function People_Job_BTT.People_Job_BTT_C.ReceiveAbortAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPeople_Job_BTT_C::ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("People_Job_BTT_C", "ReceiveAbortAI");

	Params::People_Job_BTT_C_ReceiveAbortAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function People_Job_BTT.People_Job_BTT_C.ReceiveTickAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPeople_Job_BTT_C::ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("People_Job_BTT_C", "ReceiveTickAI");

	Params::People_Job_BTT_C_ReceiveTickAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function People_Job_BTT.People_Job_BTT_C.ReceiveExecuteAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPeople_Job_BTT_C::ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("People_Job_BTT_C", "ReceiveExecuteAI");

	Params::People_Job_BTT_C_ReceiveExecuteAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function People_Job_BTT.People_Job_BTT_C.UpdatePath
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASnfAIController_BP_C*            OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USnfJobType*                      JobType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CanNext                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPeople_Job_BTT_C::UpdatePath(class ASnfAIController_BP_C* OwnerController, class APawn* ControlledPawn, float DeltaSeconds, class USnfJobType* JobType, bool* CanNext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("People_Job_BTT_C", "UpdatePath");

	Params::People_Job_BTT_C_UpdatePath Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;
	Parms.JobType = JobType;

	UObject::ProcessEvent(Func, &Parms);

	if (CanNext != nullptr)
		*CanNext = Parms.CanNext;
}


// Function People_Job_BTT.People_Job_BTT_C.ActAnim
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USnfJobAction_Anim*               JobActionAnim                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ActionTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    CanNext                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPeople_Job_BTT_C::ActAnim(class APawn* ControlledPawn, float DeltaSeconds, class USnfJobAction_Anim* JobActionAnim, const struct FTransform& ActionTransform, bool* CanNext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("People_Job_BTT_C", "ActAnim");

	Params::People_Job_BTT_C_ActAnim Parms{};

	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;
	Parms.JobActionAnim = JobActionAnim;
	Parms.ActionTransform = std::move(ActionTransform);

	UObject::ProcessEvent(Func, &Parms);

	if (CanNext != nullptr)
		*CanNext = Parms.CanNext;
}


// Function People_Job_BTT.People_Job_BTT_C.SubPhaseTurn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ActionTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CanNext                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPeople_Job_BTT_C::SubPhaseTurn(class APawn* ControlledPawn, float DeltaSeconds, const struct FTransform& ActionTransform, float PlayRate, bool* CanNext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("People_Job_BTT_C", "SubPhaseTurn");

	Params::People_Job_BTT_C_SubPhaseTurn Parms{};

	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;
	Parms.ActionTransform = std::move(ActionTransform);
	Parms.PlayRate = PlayRate;

	UObject::ProcessEvent(Func, &Parms);

	if (CanNext != nullptr)
		*CanNext = Parms.CanNext;
}


// Function People_Job_BTT.People_Job_BTT_C.SubPhaseWait
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CanNext                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPeople_Job_BTT_C::SubPhaseWait(class APawn* ControlledPawn, float DeltaSeconds, float Duration, bool* CanNext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("People_Job_BTT_C", "SubPhaseWait");

	Params::People_Job_BTT_C_SubPhaseWait Parms{};

	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);

	if (CanNext != nullptr)
		*CanNext = Parms.CanNext;
}


// Function People_Job_BTT.People_Job_BTT_C.ActWait
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USnfJobAction_Wait*               JobActionWait                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ActionTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    CanNext                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPeople_Job_BTT_C::ActWait(class APawn* ControlledPawn, float DeltaSeconds, class USnfJobAction_Wait* JobActionWait, const struct FTransform& ActionTransform, bool* CanNext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("People_Job_BTT_C", "ActWait");

	Params::People_Job_BTT_C_ActWait Parms{};

	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;
	Parms.JobActionWait = JobActionWait;
	Parms.ActionTransform = std::move(ActionTransform);

	UObject::ProcessEvent(Func, &Parms);

	if (CanNext != nullptr)
		*CanNext = Parms.CanNext;
}


// Function People_Job_BTT.People_Job_BTT_C.ActTurn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USnfJobAction_Turn*               JobActionTurn                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ActionTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    CanNext                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPeople_Job_BTT_C::ActTurn(class APawn* ControlledPawn, float DeltaSeconds, class USnfJobAction_Turn* JobActionTurn, const struct FTransform& ActionTransform, bool* CanNext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("People_Job_BTT_C", "ActTurn");

	Params::People_Job_BTT_C_ActTurn Parms{};

	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;
	Parms.JobActionTurn = JobActionTurn;
	Parms.ActionTransform = std::move(ActionTransform);

	UObject::ProcessEvent(Func, &Parms);

	if (CanNext != nullptr)
		*CanNext = Parms.CanNext;
}


// Function People_Job_BTT.People_Job_BTT_C.UpdatePoint
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASnfAIController_BP_C*            OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USnfJobType*                      JobType                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ActionTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    CanNext                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPeople_Job_BTT_C::UpdatePoint(class ASnfAIController_BP_C* OwnerController, class APawn* ControlledPawn, float DeltaSeconds, class USnfJobType* JobType, const struct FTransform& ActionTransform, bool* CanNext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("People_Job_BTT_C", "UpdatePoint");

	Params::People_Job_BTT_C_UpdatePoint Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;
	Parms.JobType = JobType;
	Parms.ActionTransform = std::move(ActionTransform);

	UObject::ProcessEvent(Func, &Parms);

	if (CanNext != nullptr)
		*CanNext = Parms.CanNext;
}


// Function People_Job_BTT.People_Job_BTT_C.Update Actions
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASnfAIController_BP_C*            OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class USnfJobAction*>            JobActions                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FTransform                       ActionTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    CanNext                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPeople_Job_BTT_C::Update_Actions(class ASnfAIController_BP_C* OwnerController, class APawn* ControlledPawn, float DeltaSeconds, TArray<class USnfJobAction*>& JobActions, const struct FTransform& ActionTransform, bool* CanNext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("People_Job_BTT_C", "Update Actions");

	Params::People_Job_BTT_C_Update_Actions Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;
	Parms.JobActions = std::move(JobActions);
	Parms.ActionTransform = std::move(ActionTransform);

	UObject::ProcessEvent(Func, &Parms);

	JobActions = std::move(Parms.JobActions);

	if (CanNext != nullptr)
		*CanNext = Parms.CanNext;
}


// Function People_Job_BTT.People_Job_BTT_C.ActTalk
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USnfJobAction_Talk*               JobActionTalk                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CanNext                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPeople_Job_BTT_C::ActTalk(class APawn* ControlledPawn, class USnfJobAction_Talk* JobActionTalk, bool* CanNext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("People_Job_BTT_C", "ActTalk");

	Params::People_Job_BTT_C_ActTalk Parms{};

	Parms.ControlledPawn = ControlledPawn;
	Parms.JobActionTalk = JobActionTalk;

	UObject::ProcessEvent(Func, &Parms);

	if (CanNext != nullptr)
		*CanNext = Parms.CanNext;
}


// Function People_Job_BTT.People_Job_BTT_C.ActActivityTag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USnfJobAction_ActivityTag*        JobActionActivityTag                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CanNext                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPeople_Job_BTT_C::ActActivityTag(class APawn* ControlledPawn, class USnfJobAction_ActivityTag* JobActionActivityTag, bool* CanNext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("People_Job_BTT_C", "ActActivityTag");

	Params::People_Job_BTT_C_ActActivityTag Parms{};

	Parms.ControlledPawn = ControlledPawn;
	Parms.JobActionActivityTag = JobActionActivityTag;

	UObject::ProcessEvent(Func, &Parms);

	if (CanNext != nullptr)
		*CanNext = Parms.CanNext;
}


// Function People_Job_BTT.People_Job_BTT_C.ActExit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USnfJobAction_Exit*               JobActionExit                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CanNext                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPeople_Job_BTT_C::ActExit(class APawn* ControlledPawn, class USnfJobAction_Exit* JobActionExit, bool* CanNext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("People_Job_BTT_C", "ActExit");

	Params::People_Job_BTT_C_ActExit Parms{};

	Parms.ControlledPawn = ControlledPawn;
	Parms.JobActionExit = JobActionExit;

	UObject::ProcessEvent(Func, &Parms);

	if (CanNext != nullptr)
		*CanNext = Parms.CanNext;
}


// Function People_Job_BTT.People_Job_BTT_C.ActLookAt
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USnfJobAction_LookAt*             JobActionLookAt                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CanNext                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPeople_Job_BTT_C::ActLookAt(class APawn* ControlledPawn, class USnfJobAction_LookAt* JobActionLookAt, bool* CanNext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("People_Job_BTT_C", "ActLookAt");

	Params::People_Job_BTT_C_ActLookAt Parms{};

	Parms.ControlledPawn = ControlledPawn;
	Parms.JobActionLookAt = JobActionLookAt;

	UObject::ProcessEvent(Func, &Parms);

	if (CanNext != nullptr)
		*CanNext = Parms.CanNext;
}


// Function People_Job_BTT.People_Job_BTT_C.ActJobChange
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USnfJobAction_JobChange*          JobActionJobChange                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CanNext                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPeople_Job_BTT_C::ActJobChange(class APawn* ControlledPawn, class USnfJobAction_JobChange* JobActionJobChange, bool* CanNext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("People_Job_BTT_C", "ActJobChange");

	Params::People_Job_BTT_C_ActJobChange Parms{};

	Parms.ControlledPawn = ControlledPawn;
	Parms.JobActionJobChange = JobActionJobChange;

	UObject::ProcessEvent(Func, &Parms);

	if (CanNext != nullptr)
		*CanNext = Parms.CanNext;
}


// Function People_Job_BTT.People_Job_BTT_C.AdjustTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       TargetTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    AdjustLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AdjustRotation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsComplete                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPeople_Job_BTT_C::AdjustTransform(class APawn* ControlledPawn, float DeltaSeconds, const struct FTransform& TargetTransform, bool AdjustLocation, bool AdjustRotation, bool* IsComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("People_Job_BTT_C", "AdjustTransform");

	Params::People_Job_BTT_C_AdjustTransform Parms{};

	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;
	Parms.TargetTransform = std::move(TargetTransform);
	Parms.AdjustLocation = AdjustLocation;
	Parms.AdjustRotation = AdjustRotation;

	UObject::ProcessEvent(Func, &Parms);

	if (IsComplete != nullptr)
		*IsComplete = Parms.IsComplete;
}


// Function People_Job_BTT.People_Job_BTT_C.ActAdjustTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USnfJobAction_AdjustTransform*    JobActionAdjustTransform                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ActionTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    CanNext                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPeople_Job_BTT_C::ActAdjustTransform(class APawn* ControlledPawn, float DeltaSeconds, class USnfJobAction_AdjustTransform* JobActionAdjustTransform, const struct FTransform& ActionTransform, bool* CanNext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("People_Job_BTT_C", "ActAdjustTransform");

	Params::People_Job_BTT_C_ActAdjustTransform Parms{};

	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;
	Parms.JobActionAdjustTransform = JobActionAdjustTransform;
	Parms.ActionTransform = std::move(ActionTransform);

	UObject::ProcessEvent(Func, &Parms);

	if (CanNext != nullptr)
		*CanNext = Parms.CanNext;
}


// Function People_Job_BTT.People_Job_BTT_C.Sub Phase Adjust Transform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InterpDuration                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ActionTransform                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    AdjustLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AdjustRotation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CanNext                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UPeople_Job_BTT_C::Sub_Phase_Adjust_Transform(class APawn* ControlledPawn, float DeltaSeconds, float InterpDuration, const struct FTransform& ActionTransform, bool AdjustLocation, bool AdjustRotation, bool* CanNext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("People_Job_BTT_C", "Sub Phase Adjust Transform");

	Params::People_Job_BTT_C_Sub_Phase_Adjust_Transform Parms{};

	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;
	Parms.InterpDuration = InterpDuration;
	Parms.ActionTransform = std::move(ActionTransform);
	Parms.AdjustLocation = AdjustLocation;
	Parms.AdjustRotation = AdjustRotation;

	UObject::ProcessEvent(Func, &Parms);

	if (CanNext != nullptr)
		*CanNext = Parms.CanNext;
}

}

